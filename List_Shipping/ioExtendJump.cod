; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioExtendJump.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ	; ioBaseChar::GetMoveDir
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ PROC	; ioBaseChar::GetMoveDir, COMDAT
; _this$ = ecx

; 2596 : 	inline const D3DXVECTOR3& GetMoveDir() const { return m_vMoveDir; }

  00000	8d 81 b4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1716]
  00006	c3		 ret	 0
?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ ENDP	; ioBaseChar::GetMoveDir
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	_fabsf
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	?GetCurJumpPowerAmt@ioBaseChar@@QAEMXZ		; ioBaseChar::GetCurJumpPowerAmt
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetCurJumpPowerAmt@ioBaseChar@@QAEMXZ
_TEXT	SEGMENT
?GetCurJumpPowerAmt@ioBaseChar@@QAEMXZ PROC		; ioBaseChar::GetCurJumpPowerAmt, COMDAT
; _this$ = ecx

; 2629 : 	inline float GetCurJumpPowerAmt() { return m_fCurJumpPowerAmt; }

  00000	d9 81 90 0e 00
	00		 fld	 DWORD PTR [ecx+3728]
  00006	c3		 ret	 0
?GetCurJumpPowerAmt@ioBaseChar@@QAEMXZ ENDP		; ioBaseChar::GetCurJumpPowerAmt
_TEXT	ENDS
PUBLIC	?fabs@@YAMM@Z					; fabs
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 518  :         {return (fabsf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv131[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv131[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?SetJumpState@ioExtendJump@@UAEXXZ		; ioExtendJump::SetJumpState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
;	COMDAT ?SetJumpState@ioExtendJump@@UAEXXZ
_TEXT	SEGMENT
?SetJumpState@ioExtendJump@@UAEXXZ PROC			; ioExtendJump::SetJumpState, COMDAT
; _this$ = ecx

; 114  : 	m_bUseExtendJump = false;

  00000	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 115  : }

  00004	c3		 ret	 0
?SetJumpState@ioExtendJump@@UAEXXZ ENDP			; ioExtendJump::SetJumpState
_TEXT	ENDS
PUBLIC	?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z ; ioExtendJump::ProcessJumpReady
; Function compile flags: /Ogsp
;	COMDAT ?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::ProcessJumpReady, COMDAT
; _this$ = ecx

; 119  : }

  00000	c2 04 00	 ret	 4
?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::ProcessJumpReady
_TEXT	ENDS
PUBLIC	?SetJumpping@ioExtendJump@@UAEXPAVioBaseChar@@_N@Z ; ioExtendJump::SetJumpping
; Function compile flags: /Ogsp
;	COMDAT ?SetJumpping@ioExtendJump@@UAEXPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_bFullTime$ = 12					; size = 1
?SetJumpping@ioExtendJump@@UAEXPAVioBaseChar@@_N@Z PROC	; ioExtendJump::SetJumpping, COMDAT
; _this$ = ecx

; 123  : }

  00000	c2 08 00	 ret	 8
?SetJumpping@ioExtendJump@@UAEXPAVioBaseChar@@_N@Z ENDP	; ioExtendJump::SetJumpping
_TEXT	ENDS
PUBLIC	?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z ; ioExtendJump::SetJumpAttack
; Function compile flags: /Ogsp
;	COMDAT ?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fTimeRate$ = 16					; size = 4
?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z PROC ; ioExtendJump::SetJumpAttack, COMDAT
; _this$ = ecx

; 127  : }

  00000	c2 0c 00	 ret	 12			; 0000000cH
?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z ENDP ; ioExtendJump::SetJumpAttack
_TEXT	ENDS
PUBLIC	?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z ; ioExtendJump::ProcessJumpping
; Function compile flags: /Ogsp
;	COMDAT ?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fHeightGap$ = 12					; size = 4
_fNeedGauge$ = 16					; size = 4
?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z PROC ; ioExtendJump::ProcessJumpping, COMDAT
; _this$ = ecx

; 131  : }

  00000	c2 0c 00	 ret	 12			; 0000000cH
?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z ENDP ; ioExtendJump::ProcessJumpping
_TEXT	ENDS
PUBLIC	?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z ; ioExtendJump::ProcessLanding
; Function compile flags: /Ogsp
;	COMDAT ?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::ProcessLanding, COMDAT
; _this$ = ecx

; 135  : 
; 136  : }

  00000	c2 04 00	 ret	 4
?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::ProcessLanding
_TEXT	ENDS
PUBLIC	?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z ; ioExtendJump::ProcessJumpAttack
; Function compile flags: /Ogsp
;	COMDAT ?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fHeightGap$ = 12					; size = 4
?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z PROC ; ioExtendJump::ProcessJumpAttack, COMDAT
; _this$ = ecx

; 140  : }

  00000	c2 08 00	 ret	 8
?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z ENDP ; ioExtendJump::ProcessJumpAttack
_TEXT	ENDS
PUBLIC	?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z ; ioExtendJump::ProcessAimJump
; Function compile flags: /Ogsp
;	COMDAT ?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_fHeightGap$ = 12					; size = 4
?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z PROC ; ioExtendJump::ProcessAimJump, COMDAT
; _this$ = ecx

; 144  : 	return false;

  00000	32 c0		 xor	 al, al

; 145  : }

  00002	c2 08 00	 ret	 8
?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z ENDP ; ioExtendJump::ProcessAimJump
_TEXT	ENDS
PUBLIC	?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ; ioExtendJump::ApplyJump
; Function compile flags: /Ogsp
;	COMDAT ?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_rkPacket$ = 12						; size = 4
?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z PROC ; ioExtendJump::ApplyJump, COMDAT
; _this$ = ecx

; 149  : }

  00000	c2 08 00	 ret	 8
?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z ENDP ; ioExtendJump::ApplyJump
_TEXT	ENDS
PUBLIC	?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z ; ioExtendJump::CheckComboJumpAttack
; Function compile flags: /Ogsp
;	COMDAT ?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::CheckComboJumpAttack, COMDAT
; _this$ = ecx

; 153  : }

  00000	c2 04 00	 ret	 4
?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::CheckComboJumpAttack
_TEXT	ENDS
PUBLIC	?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ ; ioExtendJump::GetJumpAniDefenseWounded
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ
_TEXT	SEGMENT
$T530919 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ PROC ; ioExtendJump::GetJumpAniDefenseWounded, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 157  : 	return ioHashString();

  00004	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T530919[ebp], 0
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00011	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 158  : }

  00014	c9		 leave
  00015	c2 04 00	 ret	 4
?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ ENDP ; ioExtendJump::GetJumpAniDefenseWounded
_TEXT	ENDS
PUBLIC	?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ ; ioExtendJump::GetJumpAniDefenseCriticalWounded
; Function compile flags: /Ogsp
;	COMDAT ?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ
_TEXT	SEGMENT
$T530924 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ PROC ; ioExtendJump::GetJumpAniDefenseCriticalWounded, COMDAT
; _this$ = ecx

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 162  : 	return ioHashString();

  00004	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T530924[ebp], 0
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00011	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 163  : }

  00014	c9		 leave
  00015	c2 04 00	 ret	 4
?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ ENDP ; ioExtendJump::GetJumpAniDefenseCriticalWounded
_TEXT	ENDS
PUBLIC	?GetChargingTime@ioExtendJump@@UAEKPAVioBaseChar@@@Z ; ioExtendJump::GetChargingTime
; Function compile flags: /Ogsp
;	COMDAT ?GetChargingTime@ioExtendJump@@UAEKPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?GetChargingTime@ioExtendJump@@UAEKPAVioBaseChar@@@Z PROC ; ioExtendJump::GetChargingTime, COMDAT
; _this$ = ecx

; 167  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 168  : }

  00002	c2 04 00	 ret	 4
?GetChargingTime@ioExtendJump@@UAEKPAVioBaseChar@@@Z ENDP ; ioExtendJump::GetChargingTime
_TEXT	ENDS
PUBLIC	?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ; ioExtendJump::IsCanJumpingSkill
; Function compile flags: /Ogsp
;	COMDAT ?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z PROC ; ioExtendJump::IsCanJumpingSkill, COMDAT
; _this$ = ecx

; 172  : 	return true;

  00000	b0 01		 mov	 al, 1

; 173  : }

  00002	c2 04 00	 ret	 4
?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ENDP ; ioExtendJump::IsCanJumpingSkill
_TEXT	ENDS
PUBLIC	?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ; ioExtendJump::IsCanJumpAttack
; Function compile flags: /Ogsp
;	COMDAT ?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z PROC ; ioExtendJump::IsCanJumpAttack, COMDAT
; _this$ = ecx

; 177  : 	return true;

  00000	b0 01		 mov	 al, 1

; 178  : }

  00002	c2 04 00	 ret	 4
?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ENDP ; ioExtendJump::IsCanJumpAttack
_TEXT	ENDS
PUBLIC	?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z ; ioExtendJump::GetExtraJumpSpeedRate
; Function compile flags: /Ogsp
;	COMDAT ?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_vDir$ = 8						; size = 4
_qtRot$ = 12						; size = 4
?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z PROC ; ioExtendJump::GetExtraJumpSpeedRate, COMDAT
; _this$ = ecx

; 182  : 	return m_fJumpSpeedRate;

  00000	d9 41 0c	 fld	 DWORD PTR [ecx+12]

; 183  : }

  00003	c2 08 00	 ret	 8
?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z ENDP ; ioExtendJump::GetExtraJumpSpeedRate
_TEXT	ENDS
PUBLIC	?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z ; ioExtendJump::SetLandingState
; Function compile flags: /Ogsp
;	COMDAT ?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::SetLandingState, COMDAT
; _this$ = ecx

; 187  : 	m_bUseExtendJump = false;

  00000	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 188  : }

  00004	c2 04 00	 ret	 4
?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::SetLandingState
_TEXT	ENDS
PUBLIC	?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ	; ioExtendJump::IsEnableLandAfterState
; Function compile flags: /Ogsp
;	COMDAT ?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ PROC	; ioExtendJump::IsEnableLandAfterState, COMDAT
; _this$ = ecx

; 192  : 	return m_bEnableLandAfterState;

  00000	8a 41 11	 mov	 al, BYTE PTR [ecx+17]

; 193  : }

  00003	c3		 ret	 0
?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ ENDP	; ioExtendJump::IsEnableLandAfterState
_TEXT	ENDS
PUBLIC	?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z ; ioExtendJump::GetLandAfterAni
; Function compile flags: /Ogsp
;	COMDAT ?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z
_TEXT	SEGMENT
_bSuccess$ = 8						; size = 1
?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z PROC ; ioExtendJump::GetLandAfterAni, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 	if( bSuccess )

  00003	80 7d 08 00	 cmp	 BYTE PTR _bSuccess$[ebp], 0

; 198  : 		return m_LandAfterSuccessAni;

  00007	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  0000a	75 03		 jne	 SHORT $LN2@GetLandAft

; 199  : 
; 200  : 	return m_LandAfterFailAni;

  0000c	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
$LN2@GetLandAft:

; 201  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z ENDP ; ioExtendJump::GetLandAfterAni
_TEXT	ENDS
PUBLIC	?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z	; ioExtendJump::GetLandAfterAniRate
; Function compile flags: /Ogsp
;	COMDAT ?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z
_TEXT	SEGMENT
_bSuccess$ = 8						; size = 1
?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z PROC	; ioExtendJump::GetLandAfterAniRate, COMDAT
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 	if( bSuccess )

  00003	80 7d 08 00	 cmp	 BYTE PTR _bSuccess$[ebp], 0
  00007	74 05		 je	 SHORT $LN1@GetLandAft@2

; 206  : 		return m_fLandAfterSuccessAniRate;

  00009	d9 41 38	 fld	 DWORD PTR [ecx+56]
  0000c	eb 03		 jmp	 SHORT $LN2@GetLandAft@2
$LN1@GetLandAft@2:

; 207  : 
; 208  : 	return m_fLandAfterFailAniRate;

  0000e	d9 41 24	 fld	 DWORD PTR [ecx+36]
$LN2@GetLandAft@2:

; 209  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z ENDP	; ioExtendJump::GetLandAfterAniRate
_TEXT	ENDS
PUBLIC	?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ	; ioExtendJump::IsEnableJumpLandEndDash
; Function compile flags: /Ogsp
;	COMDAT ?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ
_TEXT	SEGMENT
?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ PROC	; ioExtendJump::IsEnableJumpLandEndDash, COMDAT
; _this$ = ecx

; 213  : 	return true;

  00000	b0 01		 mov	 al, 1

; 214  : }

  00002	c3		 ret	 0
?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ ENDP	; ioExtendJump::IsEnableJumpLandEndDash
_TEXT	ENDS
PUBLIC	?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ; ioExtendJump::IsEnableJumpDash
; Function compile flags: /Ogsp
;	COMDAT ?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z PROC ; ioExtendJump::IsEnableJumpDash, COMDAT
; _this$ = ecx

; 218  : 	return false;

  00000	32 c0		 xor	 al, al

; 219  : }

  00002	c2 04 00	 ret	 4
?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ENDP ; ioExtendJump::IsEnableJumpDash
_TEXT	ENDS
PUBLIC	?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z ; ioExtendJump::OnEndExtendJump
; Function compile flags: /Ogsp
;	COMDAT ?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::OnEndExtendJump, COMDAT
; _this$ = ecx

; 223  : }

  00000	c2 04 00	 ret	 4
?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::OnEndExtendJump
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?IsEnableJumpDashAndLandDash@ioExtendJump@@QAE_NXZ ; ioExtendJump::IsEnableJumpDashAndLandDash
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
;	COMDAT ?IsEnableJumpDashAndLandDash@ioExtendJump@@QAE_NXZ
_TEXT	SEGMENT
?IsEnableJumpDashAndLandDash@ioExtendJump@@QAE_NXZ PROC	; ioExtendJump::IsEnableJumpDashAndLandDash, COMDAT
; _this$ = ecx

; 305  : 	return m_bUseJumpDashAndLandDash;

  00000	8a 81 e0 00 00
	00		 mov	 al, BYTE PTR [ecx+224]

; 306  : }

  00006	c3		 ret	 0
?IsEnableJumpDashAndLandDash@ioExtendJump@@QAE_NXZ ENDP	; ioExtendJump::IsEnableJumpDashAndLandDash
_TEXT	ENDS
PUBLIC	?GetLandDashKey@ioExtendJump@@QBEABW4DirKeyInput@ioUserKeyInput@@XZ ; ioExtendJump::GetLandDashKey
; Function compile flags: /Ogsp
;	COMDAT ?GetLandDashKey@ioExtendJump@@QBEABW4DirKeyInput@ioUserKeyInput@@XZ
_TEXT	SEGMENT
?GetLandDashKey@ioExtendJump@@QBEABW4DirKeyInput@ioUserKeyInput@@XZ PROC ; ioExtendJump::GetLandDashKey, COMDAT
; _this$ = ecx

; 310  : 	return m_JumpDashDownKey; 

  00000	8d 81 e4 00 00
	00		 lea	 eax, DWORD PTR [ecx+228]

; 311  : }

  00006	c3		 ret	 0
?GetLandDashKey@ioExtendJump@@QBEABW4DirKeyInput@ioUserKeyInput@@XZ ENDP ; ioExtendJump::GetLandDashKey
_TEXT	ENDS
PUBLIC	?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z ; ioExtendJump::CheckKeyReserve
; Function compile flags: /Ogsp
;	COMDAT ?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::CheckKeyReserve, COMDAT
; _this$ = ecx

; 335  : }

  00000	c2 04 00	 ret	 4
?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::CheckKeyReserve
_TEXT	ENDS
PUBLIC	?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ	; ioExtendJump::CheckCanUseBuffAirDash
; Function compile flags: /Ogsp
;	COMDAT ?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ
_TEXT	SEGMENT
?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ PROC	; ioExtendJump::CheckCanUseBuffAirDash, COMDAT
; _this$ = ecx

; 340  : 	return true;

  00000	b0 01		 mov	 al, 1

; 341  : }

  00002	c3		 ret	 0
?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ ENDP	; ioExtendJump::CheckCanUseBuffAirDash
_TEXT	ENDS
PUBLIC	?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z ; ioExtendJump::SetNextJumpItemState
; Function compile flags: /Ogsp
;	COMDAT ?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_pWounder$ = 12						; size = 4
_bDefense$ = 16						; size = 1
_type$ = 20						; size = 4
_pWeapon$ = 24						; size = 4
_fDamage$ = 28						; size = 4
?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z PROC ; ioExtendJump::SetNextJumpItemState, COMDAT
; _this$ = ecx

; 346  : 
; 347  : }

  00000	c2 18 00	 ret	 24			; 00000018H
?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z ENDP ; ioExtendJump::SetNextJumpItemState
_TEXT	ENDS
PUBLIC	?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ; ioExtendJump::IsBuffFlyChange
; Function compile flags: /Ogsp
;	COMDAT ?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z PROC ; ioExtendJump::IsBuffFlyChange, COMDAT
; _this$ = ecx

; 351  : 	return true;

  00000	b0 01		 mov	 al, 1

; 352  : }

  00002	c2 04 00	 ret	 4
?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ENDP ; ioExtendJump::IsBuffFlyChange
_TEXT	ENDS
PUBLIC	?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ; ioExtendJump::CheckUseExtendJump
; Function compile flags: /Ogsp
;	COMDAT ?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z PROC ; ioExtendJump::CheckUseExtendJump, COMDAT
; _this$ = ecx

; 356  : 	return m_bUseExtendJump;

  00000	8a 41 10	 mov	 al, BYTE PTR [ecx+16]

; 357  : }

  00003	c2 04 00	 ret	 4
?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z ENDP ; ioExtendJump::CheckUseExtendJump
_TEXT	ENDS
PUBLIC	?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z ; ioExtendJump::SetExtraJump
; Function compile flags: /Ogsp
;	COMDAT ?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z PROC	; ioExtendJump::SetExtraJump, COMDAT
; _this$ = ecx

; 361  : }

  00000	c2 04 00	 ret	 4
?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z ENDP	; ioExtendJump::SetExtraJump
_TEXT	ENDS
PUBLIC	?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z ; ioExtendJump::ProcessExtraJump
; Function compile flags: /Ogsp
;	COMDAT ?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::ProcessExtraJump, COMDAT
; _this$ = ecx

; 365  : }

  00000	c2 04 00	 ret	 4
?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::ProcessExtraJump
_TEXT	ENDS
PUBLIC	?IsNoProcessMove@ioExtendJump@@UAE_NXZ		; ioExtendJump::IsNoProcessMove
; Function compile flags: /Ogsp
;	COMDAT ?IsNoProcessMove@ioExtendJump@@UAE_NXZ
_TEXT	SEGMENT
?IsNoProcessMove@ioExtendJump@@UAE_NXZ PROC		; ioExtendJump::IsNoProcessMove, COMDAT
; _this$ = ecx

; 463  : 	return false;

  00000	32 c0		 xor	 al, al

; 464  : }

  00002	c3		 ret	 0
?IsNoProcessMove@ioExtendJump@@UAE_NXZ ENDP		; ioExtendJump::IsNoProcessMove
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 1c		 push	 28			; 0000001cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
PUBLIC	??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[], COMDAT
; _this$ = ecx

; 912  : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 914  : 		if (size() <= _Pos)
; 915  : 			{	// report error
; 916  : 			_DEBUG_ERROR("vector subscript out of range");
; 917  : 			_SCL_SECURE_OUT_OF_RANGE;
; 918  : 			}
; 919  : 
; 920  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 921  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 922  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 923  : 
; 924  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 925  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE_NXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEAAUAniRotateInfo@@I@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$list@MV?$allocator@M@std@@@std@@QBEIXZ	; std::list<float,std::allocator<float> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?size@?$list@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@MV?$allocator@M@std@@@std@@QBEIXZ PROC	; std::list<float,std::allocator<float> >::size, COMDAT
; _this$ = ecx

; 877  : 		return (this->_Mysize);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 878  : 		}

  00003	c3		 ret	 0
?size@?$list@MV?$allocator@M@std@@@std@@QBEIXZ ENDP	; std::list<float,std::allocator<float> >::size
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBE_NPBVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Orphan_range
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside@2
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside@2
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside@2
$LN3@Inside@2:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside@2:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBE_NPBUAniRotateInfo@@@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXPAUAniRotateInfo@@0@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::~_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::~_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::~_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ PROC	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UAniRotateInfo@@@std@@QAE@XZ ENDP	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ; std::_List_val<float,std::allocator<float> >::_Prevnode
; Function compile flags: /Ogsp
;	COMDAT ?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 567  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@MV?$allocator@M@std@@@std@@SAAAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@PAU342@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Prevnode
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator==
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::~_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::~_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::~_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ PROC	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PBUAniEventTime@@@std@@QAE@XZ ENDP	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEABQBUAniEventTime@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::capacity
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::capacity
; Function compile flags: /Ogsp
;	COMDAT ?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z ; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UAniRotateInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<AniRotateInfo>::allocator<AniRotateInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z ; std::allocator<AniRotateInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z PROC ; std::allocator<AniRotateInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@I@Z ENDP ; std::allocator<AniRotateInfo>::deallocate
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::_List_val<float,std::allocator<float> >::_Myval
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::_List_val<float,std::allocator<float> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@MV?$allocator@M@std@@@std@@SAAAMPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_Myval
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 242  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 244  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 245  : 		return (_Tmp);
; 246  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogsp
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 93   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 94   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z ; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z PROC	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PBUAniEventTime@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<AniEventTime const *>::allocator<AniEventTime const *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z ; std::allocator<AniEventTime const *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z PROC ; std::allocator<AniEventTime const *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PBUAniEventTime@@@std@@QAEXPAPBUAniEventTime@@I@Z ENDP ; std::allocator<AniEventTime const *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ ; std::allocator<AniRotateInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ PROC	; std::allocator<AniRotateInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UAniRotateInfo@@@std@@QBEIXZ ENDP	; std::allocator<AniRotateInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<float,std::allocator<float> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ; std::addressof<ioHashString const >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z PROC ; std::addressof<ioHashString const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBVioHashString@@@std@@YAPBVioHashString@@ABV1@@Z ENDP ; std::addressof<ioHashString const >
_TEXT	ENDS
PUBLIC	??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z ; std::addressof<AniRotateInfo const >
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z PROC ; std::addressof<AniRotateInfo const >, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUAniRotateInfo@@@std@@YAPBUAniRotateInfo@@ABU1@@Z ENDP ; std::addressof<AniRotateInfo const >
_TEXT	ENDS
PUBLIC	??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
; Function compile flags: /Ogsp
;	COMDAT ??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0M@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocator<std::_List_nod<float,std::allocator<float> >::_Node><float>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T531145 = -12						; size = 12
$T531150 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T531150[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T531150[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T531145[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T531145[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T531145[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ; std::_Allocate<AniRotateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T531155 = -12						; size = 12
$T531159 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z PROC ; std::_Allocate<AniRotateInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate@2
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 03	 shl	 eax, 3
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T531159[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T531159[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T531155[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T531155[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T531155[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ENDP ; std::_Allocate<AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z ; std::forward<AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z PROC ; std::forward<AniRotateInfo &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUAniRotateInfo@@@std@@YAAAUAniRotateInfo@@AAU1@@Z ENDP ; std::forward<AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z ; std::allocator<AniRotateInfo>::construct<AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z PROC ; std::allocator<AniRotateInfo>::construct<AniRotateInfo &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct:

; 209  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@AAUAniRotateInfo@@@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@AAU2@@Z ENDP ; std::allocator<AniRotateInfo>::construct<AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z ; std::forward<AniRotateInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z PROC ; std::forward<AniRotateInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUAniRotateInfo@@@std@@YAABUAniRotateInfo@@ABU1@@Z ENDP ; std::forward<AniRotateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z ; std::_Ptr_cat<AniRotateInfo,AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z PROC ; std::_Ptr_cat<AniRotateInfo,AniRotateInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UAniRotateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAniRotateInfo@@0@Z ENDP ; std::_Ptr_cat<AniRotateInfo,AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z ; std::_Ptr_cat<AniEventTime const *,AniEventTime const *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z PROC ; std::_Ptr_cat<AniEventTime const *,AniEventTime const *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PBUAniEventTime@@PBU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPBUAniEventTime@@0@Z ENDP ; std::_Ptr_cat<AniEventTime const *,AniEventTime const *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<AniEventTime const *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z ; std::_Construct<AniRotateInfo,AniRotateInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z PROC ; std::_Construct<AniRotateInfo,AniRotateInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@Construct:

; 49   : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Construct@UAniRotateInfo@@ABU1@@std@@YAXPAUAniRotateInfo@@ABU1@@Z ENDP ; std::_Construct<AniRotateInfo,AniRotateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@AAPAUWeaponInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@AAPAUForceInfo@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *>
_TEXT	ENDS
PUBLIC	??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ; std::move<AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z PROC ; std::move<AniRotateInfo &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ENDP ; std::move<AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ; std::_Val_type<ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z PROC ; std::_Val_type<ioHashString *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVioHashString@@@std@@YAPAVioHashString@@PAV1@@Z ENDP ; std::_Val_type<ioHashString *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z ; std::_Val_type<AniRotateInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z PROC ; std::_Val_type<AniRotateInfo *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUAniRotateInfo@@@std@@YAPAUAniRotateInfo@@PAU1@@Z ENDP ; std::_Val_type<AniRotateInfo *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEABUWeaponInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 28	 add	 DWORD PTR [eax], 40	; 00000028H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEABUForceInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 0c	 add	 DWORD PTR [eax], 12	; 0000000cH

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z ; std::_Destroy<AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z PROC ; std::_Destroy<AniRotateInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UAniRotateInfo@@@std@@YAXPAUAniRotateInfo@@@Z ENDP ; std::_Destroy<AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ; std::forward<WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z PROC ; std::forward<WeaponInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUWeaponInfo@@@std@@YAABUWeaponInfo@@ABU1@@Z ENDP ; std::forward<WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ; std::forward<ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z PROC ; std::forward<ForceInfo const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUForceInfo@@@std@@YAABUForceInfo@@ABU1@@Z ENDP ; std::forward<ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::forward<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@VioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString>
_TEXT	ENDS
PUBLIC	??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ; std::forward<AniRotateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z PROC ; std::forward<AniRotateInfo>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UAniRotateInfo@@@std@@YA$$QAUAniRotateInfo@@AAU1@@Z ENDP ; std::forward<AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ; std::_Construct<ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z PROC ; std::_Construct<ForceInfo,ForceInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct@2
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct@2:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UForceInfo@@ABU1@@std@@YAXPAUForceInfo@@ABU1@@Z ENDP ; std::_Construct<ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	??0AniRotateInfo@@QAE@XZ			; AniRotateInfo::AniRotateInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
;	COMDAT ??0AniRotateInfo@@QAE@XZ
_TEXT	SEGMENT
??0AniRotateInfo@@QAE@XZ PROC				; AniRotateInfo::AniRotateInfo, COMDAT
; _this$ = ecx

; 1071 : 	{
; 1072 : 		m_dwTime = 0;
; 1073 : 		m_fAngle = 0.0f;

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	8b c1		 mov	 eax, ecx
  00005	83 20 00	 and	 DWORD PTR [eax], 0
  00008	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1074 : 	}

  0000d	c3		 ret	 0
??0AniRotateInfo@@QAE@XZ ENDP				; AniRotateInfo::AniRotateInfo
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?Init@JumpGrapplingInfo@@QAEXXZ			; JumpGrapplingInfo::Init
EXTRN	?Init@AttackAttribute@@QAEXXZ:PROC		; AttackAttribute::Init
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
CONST	ENDS
;	COMDAT ?Init@JumpGrapplingInfo@@QAEXXZ
_TEXT	SEGMENT
tv137 = -4						; size = 4
?Init@JumpGrapplingInfo@@QAEXXZ PROC			; JumpGrapplingInfo::Init, COMDAT
; _this$ = ecx

; 1297 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1298 : 		m_fJumpGrapplingAniRate = FLOAT1;

  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	89 45 fc	 mov	 DWORD PTR tv137[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv137[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN5@Init
  00013	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN5@Init:

; 1299 : 		m_fJumpGrapplingMoveSpeed = 0.0f;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	d9 59 10	 fstp	 DWORD PTR [ecx+16]

; 1300 : 		m_dwJumpGrapplingRotateTime = 0;

  0001f	83 61 18 00	 and	 DWORD PTR [ecx+24], 0
  00023	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 1301 : 
; 1302 : 		m_JumpGrapplingAttack.Init();

  00028	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 1303 : 	}

  00030	c9		 leave
  00031	c3		 ret	 0
?Init@JumpGrapplingInfo@@QAEXXZ ENDP			; JumpGrapplingInfo::Init
_TEXT	ENDS
PUBLIC	??1WeaponInfo@@QAE@XZ				; WeaponInfo::~WeaponInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1WeaponInfo@@QAE@XZ
_TEXT	SEGMENT
??1WeaponInfo@@QAE@XZ PROC				; WeaponInfo::~WeaponInfo, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??1WeaponInfo@@QAE@XZ ENDP				; WeaponInfo::~WeaponInfo
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@XZ	; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VioHashString@@@std@@QAE@XZ PROC		; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@VioHashString@@@std@@QAE@XZ ENDP		; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ; std::allocator<ioHashString>::allocator<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioHashString>::allocator<ioHashString>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@VioHashString@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioHashString>::allocator<ioHashString>
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@XZ			; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@M@std@@QAE@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@M@std@@QAE@XZ ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::~_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@XZ	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ PROC		; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UWeaponInfo@@@std@@QAE@XZ ENDP		; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::~_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@XZ		; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UForceInfo@@@std@@QAE@XZ PROC		; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UForceInfo@@@std@@QAE@XZ ENDP		; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z	; CEncrypt<float>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z PROC	; CEncrypt<float>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 1648 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1649 : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 1650 : 		*value = *((float*)m_TempMem);

  00016	d9 06		 fld	 DWORD PTR [esi]
  00018	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  0001b	d9 18		 fstp	 DWORD PTR [eax]
  0001d	5e		 pop	 esi

; 1651 : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ENDP	; CEncrypt<float>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Xlen
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ; std::allocator<ioHashString>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@M@std@@QAE@ABV01@@Z		; std::allocator<float>::allocator<float>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@M@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@M@std@@QAE@ABV01@@Z PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@M@std@@QAE@ABV01@@Z ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<WeaponInfo>::allocator<WeaponInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UWeaponInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<WeaponInfo>::allocator<WeaponInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z	; std::allocator<ForceInfo>::allocator<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ForceInfo>::allocator<ForceInfo>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UForceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ForceInfo>::allocator<ForceInfo>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAE@PAVioHashString@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Vector_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside@3
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside@3
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside@3
$LN8@Inside@3:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside@3:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside@3
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside@3
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside@3
$LN12@Inside@3:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside@3:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside@3

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside@3
$LN2@Inside@3:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside@3:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ; std::allocator<ioHashString>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@VioHashString@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ PROC	; std::allocator<ioHashString>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VioHashString@@@std@@QBEIXZ ENDP	; std::allocator<ioHashString>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z
_TEXT	SEGMENT
$T531408 = -12						; size = 12
$T531412 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z PROC ; std::_Allocate<ioHashString>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@3

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	0f		 cmp	 ecx, 268435455		; 0fffffffH
  00015	77 0e		 ja	 SHORT $LN1@Allocate@3
  00017	c1 e1 04	 shl	 ecx, 4
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T531412[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T531412[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T531408[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T531408[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T531408[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@3:
$LN5@Allocate@3:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@3:
??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ENDP ; std::_Allocate<ioHashString>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T531417 = -12						; size = 12
$T531421 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate@4

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate@4
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T531421[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T531421[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T531417[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T531417[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T531417[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@4:
$LN5@Allocate@4:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate@4:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ; std::forward<ioHashString const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z PROC ; std::forward<ioHashString const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVioHashString@@@std@@YAABVioHashString@@ABV1@@Z ENDP ; std::forward<ioHashString const &>
_TEXT	ENDS
PUBLIC	??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ; std::forward<ioHashString &>
; Function compile flags: /Ogsp
;	COMDAT ??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z PROC ; std::forward<ioHashString &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVioHashString@@@std@@YAAAVioHashString@@AAV1@@Z ENDP ; std::forward<ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ; std::_Ptr_cat<ioHashString,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z PROC ; std::_Ptr_cat<ioHashString,ioHashString>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ENDP ; std::_Ptr_cat<ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z PROC ; std::_Ptr_cat<WeaponInfo,WeaponInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UWeaponInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUWeaponInfo@@0@Z ENDP ; std::_Ptr_cat<WeaponInfo,WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ; std::_Ptr_cat<ForceInfo,ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z PROC ; std::_Ptr_cat<ForceInfo,ForceInfo>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@UForceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUForceInfo@@0@Z ENDP ; std::_Ptr_cat<ForceInfo,ForceInfo>
_TEXT	ENDS
PUBLIC	?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 28		 push	 40			; 00000028H
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::size
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@4:
$LN3@Xlen@4:
  0000b	cc		 int	 3
?_Xlen@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@5:
$LN3@Xlen@5:
  0000b	cc		 int	 3
?_Xlen@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ	; std::allocator<WeaponInfo>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ PROC	; std::allocator<WeaponInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UWeaponInfo@@@std@@QBEIXZ ENDP	; std::allocator<WeaponInfo>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ	; std::allocator<ForceInfo>::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ PROC	; std::allocator<ForceInfo>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UForceInfo@@@std@@QBEIXZ ENDP	; std::allocator<ForceInfo>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QAE@PAUWeaponInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QAE@PAUForceInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::_Compat
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@AAPAVioHashString@@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *>
_TEXT	ENDS
PUBLIC	??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ; std::move<ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z PROC ; std::move<ioHashString &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAVioHashString@@@std@@YA$$QAVioHashString@@AAV1@@Z ENDP ; std::move<ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T531485 = -12						; size = 12
$T531489 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z PROC ; std::_Allocate<WeaponInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@5

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 66 66 66
	06		 cmp	 ecx, 107374182		; 06666666H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@5
  00017	6b c9 28	 imul	 ecx, 40			; 00000028H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@5
$LN1@Allocate@5:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T531489[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T531489[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T531485[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T531485[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T531485[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@5:
$LN5@Allocate@5:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@5:
??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ENDP ; std::_Allocate<WeaponInfo>
_TEXT	ENDS
PUBLIC	??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z
_TEXT	SEGMENT
$T531494 = -12						; size = 12
$T531498 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z PROC ; std::_Allocate<ForceInfo>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate@6

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate@6
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate@6
$LN1@Allocate@6:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T531498[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T531498[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T531494[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T531494[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T531494[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@6:
$LN5@Allocate@6:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate@6:
??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ENDP ; std::_Allocate<ForceInfo>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBEABVioHashString@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++, COMDAT
; _this$ = ecx

; 93   : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 94   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 95   : 		if (this->_Getcont() == 0
; 96   : 			|| this->_Ptr == 0
; 97   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 98   : 			{	// report error
; 99   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 100  : 			_SCL_SECURE_OUT_OF_RANGE;
; 101  : 			}
; 102  : 
; 103  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 104  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 105  : 		_SCL_SECURE_VALIDATE_RANGE(
; 106  : 			this->_Ptr != 0
; 107  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 108  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 109  : 
; 110  : 		++this->_Ptr;

  00002	83 00 10	 add	 DWORD PTR [eax], 16	; 00000010H

; 111  : 		return (*this);
; 112  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator++
_TEXT	ENDS
PUBLIC	??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ; std::_Destroy<ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z PROC	; std::_Destroy<ForceInfo>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@UForceInfo@@@std@@YAXPAUForceInfo@@@Z ENDP	; std::_Destroy<ForceInfo>
_TEXT	ENDS
PUBLIC	??_GioHashString@@QAEPAXI@Z			; ioHashString::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GioHashString@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioHashString@@QAEPAXI@Z PROC			; ioHashString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@2
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@2:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioHashString@@QAEPAXI@Z ENDP			; ioHashString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GWeaponInfo@@QAEPAXI@Z			; WeaponInfo::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_GWeaponInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GWeaponInfo@@QAEPAXI@Z PROC				; WeaponInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	74 07		 je	 SHORT $LN1@scalar@3
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	59		 pop	 ecx
$LN1@scalar@3:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GWeaponInfo@@QAEPAXI@Z ENDP				; WeaponInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0
__ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
_TEXT	SEGMENT
$T531521 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z PROC ; std::_Construct<ioHashString,ioHashString const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T531521[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 09		 je	 SHORT $LN3@Construct@3
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@Construct@3:

; 49   : 	}

  00026	e8 00 00 00 00	 call	 __EH_epilog3
  0002b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T531521[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ENDP ; std::_Construct<ioHashString,ioHashString const &>
PUBLIC	??0WeaponInfo@@QAE@ABU0@@Z			; WeaponInfo::WeaponInfo
; Function compile flags: /Ogsp
;	COMDAT ??0WeaponInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0WeaponInfo@@QAE@ABU0@@Z PROC				; WeaponInfo::WeaponInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00014	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00017	50		 push	 eax
  00018	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00021	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00027	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0002a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0002d	8a 47 20	 mov	 al, BYTE PTR [edi+32]
  00030	88 46 20	 mov	 BYTE PTR [esi+32], al
  00033	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00036	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00039	5f		 pop	 edi
  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0WeaponInfo@@QAE@ABU0@@Z ENDP				; WeaponInfo::WeaponInfo
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__$ArrayPad$
PUBLIC	?CheckAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@@Z ; ioExtendJump::CheckAniRotate
EXTRN	?SetTargetRotAndMoveDirChange@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N@Z:PROC ; ioBaseChar::SetTargetRotAndMoveDirChange
EXTRN	__imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __real@00000000
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
CONST	ENDS
;	COMDAT ?CheckAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_qtTargetRot$524941 = -60				; size = 16
_qtRot$524934 = -44					; size = 16
_vMoveDir$524939 = -28					; size = 12
$T524942 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pChar$ = 8						; size = 4
?CheckAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@@Z PROC ; ioExtendJump::CheckAniRotate, COMDAT
; _this$ = ecx

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pChar$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 426  : 	if( !pChar ) return;

  00017	85 ff		 test	 edi, edi
  00019	0f 84 20 01 00
	00		 je	 $LN1@CheckAniRo

; 427  : 	if( m_vAniRotateInfoList.empty() ) return;

  0001f	8b 86 08 01 00
	00		 mov	 eax, DWORD PTR [esi+264]
  00025	3b 86 0c 01 00
	00		 cmp	 eax, DWORD PTR [esi+268]
  0002b	0f 84 0e 01 00
	00		 je	 $LN1@CheckAniRo

; 428  : 
; 429  : 	DWORD dwCurTime = FRAMEGETTIME();

  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00037	8b c8		 mov	 ecx, eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 430  : 	if( m_dwAniRotateTime > 0 && m_dwAniRotateTime < dwCurTime )

  0003f	8b 8e 1c 01 00
	00		 mov	 ecx, DWORD PTR [esi+284]
  00045	85 c9		 test	 ecx, ecx
  00047	0f 84 f2 00 00
	00		 je	 $LN1@CheckAniRo
  0004d	3b c8		 cmp	 ecx, eax
  0004f	0f 83 ea 00 00
	00		 jae	 $LN1@CheckAniRo

; 431  : 	{
; 432  : 		if( m_fAniRotateAngle > 0.0f )

  00055	f3 0f 10 86 20
	01 00 00	 movss	 xmm0, DWORD PTR [esi+288]
  0005d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00064	0f 86 86 00 00
	00		 jbe	 $LN3@CheckAniRo

; 433  : 		{
; 434  : 			D3DXQUATERNION qtRot;
; 435  : 			D3DXQuaternionRotationAxis( &qtRot, &ioMath::UNIT_Y, DEGtoRAD(m_fAniRotateAngle) );

  0006a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  00075	51		 push	 ecx
  00076	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?UNIT_Y@ioMath@@2UD3DXVECTOR3@@A
  00085	8d 45 d4	 lea	 eax, DWORD PTR _qtRot$524934[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 436  : 			D3DXVECTOR3 vMoveDir = qtRot * pChar->GetMoveDir();

  0008e	8d 87 b4 06 00
	00		 lea	 eax, DWORD PTR [edi+1716]
  00094	50		 push	 eax
  00095	8d 45 d4	 lea	 eax, DWORD PTR _qtRot$524934[ebp]
  00098	50		 push	 eax
  00099	8d 45 e4	 lea	 eax, DWORD PTR _vMoveDir$524939[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 437  : 
; 438  : 			D3DXQUATERNION qtTargetRot;
; 439  : 			ioMath::CalcDirectionQuaternion( qtTargetRot, -vMoveDir );

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  000ab	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vMoveDir$524939[ebp]
  000b0	0f 57 c8	 xorps	 xmm1, xmm0
  000b3	f3 0f 11 4d f0	 movss	 DWORD PTR $T524942[ebp], xmm1
  000b8	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vMoveDir$524939[ebp+4]
  000bd	0f 57 c8	 xorps	 xmm1, xmm0
  000c0	8d 45 f0	 lea	 eax, DWORD PTR $T524942[ebp]
  000c3	50		 push	 eax
  000c4	f3 0f 11 4d f4	 movss	 DWORD PTR $T524942[ebp+4], xmm1
  000c9	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vMoveDir$524939[ebp+8]
  000ce	8d 45 c4	 lea	 eax, DWORD PTR _qtTargetRot$524941[ebp]
  000d1	0f 57 c8	 xorps	 xmm1, xmm0
  000d4	50		 push	 eax
  000d5	f3 0f 11 4d f8	 movss	 DWORD PTR $T524942[ebp+8], xmm1
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CalcDirectionQuaternion@ioMath@@SAXAAUD3DXQUATERNION@@ABUD3DXVECTOR3@@@Z
  000e0	83 c4 14	 add	 esp, 20			; 00000014H

; 440  : 
; 441  : 			pChar->SetTargetRotAndMoveDirChange( qtTargetRot );

  000e3	6a 00		 push	 0
  000e5	8d 45 c4	 lea	 eax, DWORD PTR _qtTargetRot$524941[ebp]
  000e8	50		 push	 eax
  000e9	8b cf		 mov	 ecx, edi
  000eb	e8 00 00 00 00	 call	 ?SetTargetRotAndMoveDirChange@ioBaseChar@@QAEXABUD3DXQUATERNION@@_N@Z ; ioBaseChar::SetTargetRotAndMoveDirChange
$LN3@CheckAniRo:

; 442  : 		}
; 443  : 
; 444  : 		m_iCurAniRotate++;

  000f0	ff 86 18 01 00
	00		 inc	 DWORD PTR [esi+280]
  000f6	8b 86 18 01 00
	00		 mov	 eax, DWORD PTR [esi+280]

; 447  : 		if( COMPARE(m_iCurAniRotate, 0, iSize) )

  000fc	78 2f		 js	 SHORT $LN2@CheckAniRo

; 445  : 
; 446  : 		int iSize = m_vAniRotateInfoList.size();

  000fe	8b 8e 0c 01 00
	00		 mov	 ecx, DWORD PTR [esi+268]
  00104	2b 8e 08 01 00
	00		 sub	 ecx, DWORD PTR [esi+264]
  0010a	c1 f9 03	 sar	 ecx, 3

; 447  : 		if( COMPARE(m_iCurAniRotate, 0, iSize) )

  0010d	3b c1		 cmp	 eax, ecx
  0010f	7d 1c		 jge	 SHORT $LN2@CheckAniRo

; 448  : 		{
; 449  : 			m_dwAniRotateTime = m_vAniRotateInfoList[m_iCurAniRotate].m_dwTime;

  00111	8b 8e 08 01 00
	00		 mov	 ecx, DWORD PTR [esi+264]
  00117	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	89 8e 1c 01 00
	00		 mov	 DWORD PTR [esi+284], ecx

; 450  : 			m_fAniRotateAngle = m_vAniRotateInfoList[m_iCurAniRotate].m_fAngle;

  00122	d9 40 04	 fld	 DWORD PTR [eax+4]
  00125	d9 9e 20 01 00
	00		 fstp	 DWORD PTR [esi+288]

; 451  : 		}
; 452  : 		else

  0012b	eb 12		 jmp	 SHORT $LN1@CheckAniRo
$LN2@CheckAniRo:

; 453  : 		{
; 454  : 			m_dwAniRotateTime = 0;
; 455  : 			m_fAniRotateAngle = 0.0f;

  0012d	0f 57 c0	 xorps	 xmm0, xmm0
  00130	83 a6 1c 01 00
	00 00		 and	 DWORD PTR [esi+284], 0
  00137	f3 0f 11 86 20
	01 00 00	 movss	 DWORD PTR [esi+288], xmm0
$LN1@CheckAniRo:

; 456  : 
; 457  : 		}
; 458  : 	}
; 459  : }

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00142	5f		 pop	 edi
  00143	33 cd		 xor	 ecx, ebp
  00145	5e		 pop	 esi
  00146	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014b	c9		 leave
  0014c	c2 04 00	 ret	 4
?CheckAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@@Z ENDP ; ioExtendJump::CheckAniRotate
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 370  : 		++(*(_Mybase *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 		return (*this);
; 372  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++, COMDAT
; _this$ = ecx

; 375  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 377  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 378  : 		return (_Tmp);
; 379  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator!=
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBEAAPBUAniEventTime@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++, COMDAT
; _this$ = ecx

; 331  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 332  : 		++*(_Mybase *)this;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 333  : 		return (*this);
; 334  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator++
_TEXT	ENDS
PUBLIC	?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z PROC ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@V?$allocator@UAniRotateInfo@@@1@@Z ENDP ; std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 503  : 		}

  00008	c3		 ret	 0
??1?$_List_val@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::_List_val<float,std::allocator<float> >::~_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEABMXZ ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z PROC ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@V?$allocator@PBUAniEventTime@@@1@@Z ENDP ; std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QAE@PAPBUAniEventTime@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::_Vector_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0000d	c1 f8 03	 sar	 eax, 3
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 438  : 		{	// construct allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 439  : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_nod@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_nod<float,std::allocator<float> >::_List_nod<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@YAPAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<float,std::allocator<float> >::_Node>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<float,std::allocator<float> > >::_List_const_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QAE@PAUAniRotateInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::_Vector_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z ; std::allocator<AniRotateInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z PROC ; std::allocator<AniRotateInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ; std::_Allocate<AniRotateInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UAniRotateInfo@@@std@@QAEPAUAniRotateInfo@@I@Z ENDP ; std::allocator<AniRotateInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator==
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ; ioINILoader::LoadFloat_e<16>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<16>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 8c 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 75 01 00
	00		 je	 $LN95@LoadFloat_
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 5e 01 00
	00		 je	 $LN94@LoadFloat_
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 46 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 2f 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 18 01 00
	00		 je	 $LN91@LoadFloat_
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 02 01 00
	00		 je	 $LN90@LoadFloat_
  00087	32 d1		 xor	 dl, cl
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 ec 00 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 d5 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 be 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bc	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 a8 00 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 92 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	74 7f		 je	 SHORT $LN84@LoadFloat_
  000e7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ea	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000ed	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f0	84 d2		 test	 dl, dl
  000f2	74 6c		 je	 SHORT $LN83@LoadFloat_
  000f4	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000f7	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000fa	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000fd	84 d2		 test	 dl, dl
  000ff	74 5a		 je	 SHORT $LN82@LoadFloat_
  00101	32 d1		 xor	 dl, cl
  00103	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  00107	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  0010a	0f 84 a0 00 00
	00		 je	 $LN1@LoadFloat_
  00110	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00113	84 d2		 test	 dl, dl
  00115	74 3e		 je	 SHORT $LN80@LoadFloat_
  00117	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011a	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  0011d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00120	84 d2		 test	 dl, dl
  00122	74 2b		 je	 SHORT $LN79@LoadFloat_
  00124	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00127	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  0012a	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0012d	84 d2		 test	 dl, dl
  0012f	74 19		 je	 SHORT $LN78@LoadFloat_
  00131	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  00134	32 d1		 xor	 dl, cl
  00136	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00139	84 c0		 test	 al, al
  0013b	74 07		 je	 SHORT $LN77@LoadFloat_
  0013d	34 ea		 xor	 al, -22			; ffffffeaH
  0013f	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  00142	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  00144	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00148	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  0014a	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  0014d	eb 61		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0014f	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  00153	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  00155	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00159	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  0015b	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  0015e	eb 50		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  00160	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00164	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00166	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0016a	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  0016c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00170	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  00172	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  00175	eb 39		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00177	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0017b	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  0017d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00181	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  00183	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00187	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00189	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  0018c	eb 22		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  0018e	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00192	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  00194	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00198	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  0019a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0019e	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001a0	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001a4	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001a6	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001aa	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001ac	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001b0	6a 03		 push	 3
  001b2	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001b5	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001b9	5a		 pop	 edx
$LL104@LoadFloat_:
  001ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c0	83 c0 04	 add	 eax, 4
  001c3	4a		 dec	 edx
  001c4	75 f4		 jne	 SHORT $LL104@LoadFloat_
  001c6	6a 0c		 push	 12			; 0000000cH
  001c8	58		 pop	 eax
$LL101@LoadFloat_:
  001c9	8b c8		 mov	 ecx, eax
  001cb	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d1	79 05		 jns	 SHORT $LN111@LoadFloat_
  001d3	49		 dec	 ecx
  001d4	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001d7	41		 inc	 ecx
$LN111@LoadFloat_:
  001d8	b2 ed		 mov	 dl, -19			; ffffffedH
  001da	2a d1		 sub	 dl, cl
  001dc	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e0	40		 inc	 eax
  001e1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001e4	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001eb	51		 push	 ecx
  001ec	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f4	50		 push	 eax
  001f5	8b ce		 mov	 ecx, esi
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	5e		 pop	 esi
  00203	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00208	c9		 leave
  00209	c2 08 00	 ret	 8
??$LoadFloat_e@$0BA@@ioINILoader@@QAEMAAY0BA@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<16>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_@2
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_@2
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_@2
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_@2
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_@2
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_@2
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_@2
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_@2
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_@2
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_@2
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_@2
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_@2
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_@2
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_@2
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_@2:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z ; ioINILoader::LoadBool_e<24>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<24>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadBool_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadBool_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadBool_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadBool_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadBool_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadBool_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadBool_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadBool_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadBool_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadBool_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadBool_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadBool_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadBool_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadBool_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadBool_e
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadBool_e
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadBool_e
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadBool_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadBool_e
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadBool_e
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadBool_e
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadBool_e
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadBool_e
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadBool_e
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadBool_e
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e
$LN69@LoadBool_e:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadBool_e
$LN70@LoadBool_e:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadBool_e
$LN71@LoadBool_e:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e
$LN72@LoadBool_e:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadBool_e
$LN78@LoadBool_e:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadBool_e:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadBool_e:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadBool_e
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadBool_e:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  002a0	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  002a3	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a6	50		 push	 eax
  002a7	8b ce		 mov	 ecx, esi
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  002af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b2	5e		 pop	 esi
  002b3	33 cd		 xor	 ecx, ebp
  002b5	5b		 pop	 ebx
  002b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bb	c9		 leave
  002bc	c2 08 00	 ret	 8
??$LoadBool_e@$0BI@@ioINILoader@@QAE_NAAY0BI@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<24>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString
$LN73@LoadString:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString
$LN74@LoadString:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString
$LN75@LoadString:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString
$LN80@LoadString:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z ; ioINILoader::LoadFloat_e<25>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<25>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 5f 02 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 48 02 00
	00		 je	 $LN95@LoadFloat_@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 30 02 00
	00		 je	 $LN94@LoadFloat_@3
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 18 02 00
	00		 je	 $LN93@LoadFloat_@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 01 02 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 eb 01 00
	00		 je	 $LN91@LoadFloat_@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 d6 01 00
	00		 je	 $LN90@LoadFloat_@3
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 c0 01 00
	00		 je	 $LN89@LoadFloat_@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 a9 01 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 93 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 7e 01 00
	00		 je	 $LN86@LoadFloat_@3
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 68 01 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 51 01 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 3b 01 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 26 01 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 10 01 00
	00		 je	 $LN81@LoadFloat_@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 f9 00 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 e3 00 00
	00		 je	 $LN79@LoadFloat_@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ce 00 00
	00		 je	 $LN78@LoadFloat_@3
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 b8 00 00
	00		 je	 $LN77@LoadFloat_@3
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 a1 00 00
	00		 je	 $LN76@LoadFloat_@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 8b 00 00
	00		 je	 $LN75@LoadFloat_@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	74 7a		 je	 SHORT $LN74@LoadFloat_@3
  0018c	32 d3		 xor	 dl, bl
  0018e	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00194	84 d2		 test	 dl, dl
  00196	74 68		 je	 SHORT $LN73@LoadFloat_@3
  00198	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0019b	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	0f 84 dc 00 00
	00		 je	 $LN1@LoadFloat_@3
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 49		 je	 SHORT $LN71@LoadFloat_@3
  001af	32 d1		 xor	 dl, cl
  001b1	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001b4	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b7	84 d2		 test	 dl, dl
  001b9	74 35		 je	 SHORT $LN70@LoadFloat_@3
  001bb	32 d3		 xor	 dl, bl
  001bd	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c0	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c3	84 d2		 test	 dl, dl
  001c5	74 20		 je	 SHORT $LN69@LoadFloat_@3
  001c7	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001cd	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d0	84 c0		 test	 al, al
  001d2	74 0a		 je	 SHORT $LN68@LoadFloat_@3
  001d4	34 ed		 xor	 al, -19			; ffffffedH
  001d6	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001d9	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN68@LoadFloat_@3:
  001de	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001e2	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN69@LoadFloat_@3:
  001e7	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001eb	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN70@LoadFloat_@3:
  001f0	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001f3	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN71@LoadFloat_@3:
  001f8	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  001fb	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  00200	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00204	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  00206	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00209	eb 79		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  0020b	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  0020e	eb 74		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  00210	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00214	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  00216	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0021a	eb 68		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  0021c	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  0021f	eb 63		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  00221	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00224	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  00226	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0022a	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  0022c	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00230	eb 52		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  00232	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  00235	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  00237	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0023a	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  0023c	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00240	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  00242	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00246	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  00248	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  0024b	eb 37		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  0024d	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00250	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  00252	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00256	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  00258	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0025c	eb 26		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  0025e	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00261	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  00263	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00266	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  00268	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0026c	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  0026e	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00272	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  00274	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00278	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  0027a	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0027e	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  00280	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  00284	6a 06		 push	 6
  00286	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00289	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  0028d	5a		 pop	 edx
$LL104@LoadFloat_@3:
  0028e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00294	83 c0 04	 add	 eax, 4
  00297	4a		 dec	 edx
  00298	75 f4		 jne	 SHORT $LL104@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  0029a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0029f	51		 push	 ecx
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	50		 push	 eax
  002a9	8b ce		 mov	 ecx, esi
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b4	5e		 pop	 esi
  002b5	33 cd		 xor	 ecx, ebp
  002b7	5b		 pop	 ebx
  002b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bd	c9		 leave
  002be	c2 08 00	 ret	 8
??$LoadFloat_e@$0BJ@@ioINILoader@@QAEMAAY0BJ@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<25>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<23>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 2d 02 00
	00		 je	 $LN96@LoadString@2
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 16 02 00
	00		 je	 $LN95@LoadString@2
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 fe 01 00
	00		 je	 $LN94@LoadString@2
  0004c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 e7 01 00
	00		 je	 $LN93@LoadString@2
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 cf 01 00
	00		 je	 $LN92@LoadString@2
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 b9 01 00
	00		 je	 $LN91@LoadString@2
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 a3 01 00
	00		 je	 $LN90@LoadString@2
  00090	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 8d 01 00
	00		 je	 $LN89@LoadString@2
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 77 01 00
	00		 je	 $LN88@LoadString@2
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 61 01 00
	00		 je	 $LN87@LoadString@2
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 4b 01 00
	00		 je	 $LN86@LoadString@2
  000d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 35 01 00
	00		 je	 $LN85@LoadString@2
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 1f 01 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 09 01 00
	00		 je	 $LN83@LoadString@2
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 f3 00 00
	00		 je	 $LN82@LoadString@2
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 dd 00 00
	00		 je	 $LN81@LoadString@2
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 c7 00 00
	00		 je	 $LN80@LoadString@2
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 b1 00 00
	00		 je	 $LN79@LoadString@2
  00146	32 d1		 xor	 dl, cl
  00148	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 9b 00 00
	00		 je	 $LN78@LoadString@2
  00156	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	0f 84 85 00 00
	00		 je	 $LN77@LoadString@2
  00167	32 d3		 xor	 dl, bl
  00169	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	74 73		 je	 SHORT $LN76@LoadString@2
  00173	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0017c	84 d2		 test	 dl, dl
  0017e	74 61		 je	 SHORT $LN75@LoadString@2
  00180	32 d1		 xor	 dl, cl
  00182	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  00186	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00189	0f 84 cb 00 00
	00		 je	 $LN111@LoadString@2
  0018f	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00192	84 d2		 test	 dl, dl
  00194	74 46		 je	 SHORT $LN73@LoadString@2
  00196	32 d3		 xor	 dl, bl
  00198	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0019b	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019e	84 d2		 test	 dl, dl
  001a0	74 34		 je	 SHORT $LN72@LoadString@2
  001a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a5	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 1f		 je	 SHORT $LN71@LoadString@2
  001af	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001b2	32 d1		 xor	 dl, cl
  001b4	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b7	84 c0		 test	 al, al
  001b9	74 0a		 je	 SHORT $LN70@LoadString@2
  001bb	34 eb		 xor	 al, -21			; ffffffebH
  001bd	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001c0	e9 95 00 00 00	 jmp	 $LN111@LoadString@2
$LN70@LoadString@2:
  001c5	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c9	e9 8c 00 00 00	 jmp	 $LN111@LoadString@2
$LN71@LoadString@2:
  001ce	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001d1	e9 84 00 00 00	 jmp	 $LN111@LoadString@2
$LN72@LoadString@2:
  001d6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001da	eb 7e		 jmp	 SHORT $LN111@LoadString@2
$LN73@LoadString@2:
  001dc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001df	eb 79		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  001e1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001e4	eb 74		 jmp	 SHORT $LN111@LoadString@2
$LN76@LoadString@2:
  001e6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ea	eb 6e		 jmp	 SHORT $LN111@LoadString@2
$LN77@LoadString@2:
  001ec	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001ef	eb 69		 jmp	 SHORT $LN111@LoadString@2
$LN78@LoadString@2:
  001f1	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001f5	eb 63		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  001f7	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001fa	eb 5e		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  001fc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00200	eb 58		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  00202	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  00205	eb 53		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  00207	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0020b	eb 4d		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  0020d	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00210	eb 48		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  00212	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00216	eb 42		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  00218	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  0021b	eb 3d		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  0021d	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00221	eb 37		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  00223	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  00226	eb 32		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  00228	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0022c	eb 2c		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  0022e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00231	eb 27		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  00233	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00237	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  00239	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  0023c	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  0023e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00242	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  00244	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00248	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  0024a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0024e	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00250	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00254	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  00256	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  0025a	6a 05		 push	 5
  0025c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  00263	5a		 pop	 edx
$LL104@LoadString@2:
  00264	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0026a	83 c0 04	 add	 eax, 4
  0026d	4a		 dec	 edx
  0026e	75 f4		 jne	 SHORT $LL104@LoadString@2
  00270	6a 14		 push	 20			; 00000014H
  00272	58		 pop	 eax
$LL101@LoadString@2:
  00273	8b c8		 mov	 ecx, eax
  00275	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0027b	79 05		 jns	 SHORT $LN112@LoadString@2
  0027d	49		 dec	 ecx
  0027e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00281	41		 inc	 ecx
$LN112@LoadString@2:
  00282	b2 ed		 mov	 dl, -19			; ffffffedH
  00284	2a d1		 sub	 dl, cl
  00286	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0028a	40		 inc	 eax
  0028b	83 f8 16	 cmp	 eax, 22			; 00000016H
  0028e	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  00290	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00293	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00296	57		 push	 edi
  00297	56		 push	 esi
  00298	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0029b	50		 push	 eax
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a5	5f		 pop	 edi
  002a6	5e		 pop	 esi
  002a7	33 cd		 xor	 ecx, ebp
  002a9	5b		 pop	 ebx
  002aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002af	c9		 leave
  002b0	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ; ioINILoader::LoadFloat_e<28>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<28>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 a9 02 00
	00		 je	 $LN96@LoadFloat_@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 92 02 00
	00		 je	 $LN95@LoadFloat_@4
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 7a 02 00
	00		 je	 $LN94@LoadFloat_@4
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 62 02 00
	00		 je	 $LN93@LoadFloat_@4
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 4b 02 00
	00		 je	 $LN92@LoadFloat_@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 35 02 00
	00		 je	 $LN91@LoadFloat_@4
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 20 02 00
	00		 je	 $LN90@LoadFloat_@4
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 0a 02 00
	00		 je	 $LN89@LoadFloat_@4
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 f3 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 dd 01 00
	00		 je	 $LN87@LoadFloat_@4
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 c8 01 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 b2 01 00
	00		 je	 $LN85@LoadFloat_@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 9b 01 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 85 01 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 70 01 00
	00		 je	 $LN82@LoadFloat_@4
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 5a 01 00
	00		 je	 $LN81@LoadFloat_@4
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 43 01 00
	00		 je	 $LN80@LoadFloat_@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 2d 01 00
	00		 je	 $LN79@LoadFloat_@4
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 18 01 00
	00		 je	 $LN78@LoadFloat_@4
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 02 01 00
	00		 je	 $LN77@LoadFloat_@4
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 eb 00 00
	00		 je	 $LN76@LoadFloat_@4
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 d5 00 00
	00		 je	 $LN75@LoadFloat_@4
  00180	32 d3		 xor	 dl, bl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 c0 00 00
	00		 je	 $LN74@LoadFloat_@4
  00190	32 d1		 xor	 dl, cl
  00192	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 aa 00 00
	00		 je	 $LN73@LoadFloat_@4
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 90 00 00
	00		 je	 $LN72@LoadFloat_@4
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	74 7b		 je	 SHORT $LN71@LoadFloat_@4
  001be	32 d3		 xor	 dl, bl
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001c6	84 d2		 test	 dl, dl
  001c8	74 67		 je	 SHORT $LN70@LoadFloat_@4
  001ca	32 d1		 xor	 dl, cl
  001cc	80 78 1b 00	 cmp	 BYTE PTR [eax+27], 0
  001d0	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	0f 84 f5 00 00
	00		 je	 $LN1@LoadFloat_@4
  001d9	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001dc	84 d2		 test	 dl, dl
  001de	74 48		 je	 SHORT $LN68@LoadFloat_@4
  001e0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001e3	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e6	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e9	84 d2		 test	 dl, dl
  001eb	74 33		 je	 SHORT $LN67@LoadFloat_@4
  001ed	32 d3		 xor	 dl, bl
  001ef	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f2	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f5	84 d2		 test	 dl, dl
  001f7	74 1f		 je	 SHORT $LN66@LoadFloat_@4
  001f9	8a 40 1f	 mov	 al, BYTE PTR [eax+31]
  001fc	32 d1		 xor	 dl, cl
  001fe	88 55 fa	 mov	 BYTE PTR __k$[ebp+30], dl
  00201	84 c0		 test	 al, al
  00203	74 0a		 je	 SHORT $LN65@LoadFloat_@4
  00205	34 ea		 xor	 al, -22			; ffffffeaH
  00207	88 45 fb	 mov	 BYTE PTR __k$[ebp+31], al
  0020a	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN65@LoadFloat_@4:
  0020f	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  00213	e9 b6 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN66@LoadFloat_@4:
  00218	88 4d fa	 mov	 BYTE PTR __k$[ebp+30], cl
  0021b	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN67@LoadFloat_@4:
  00220	88 5d f9	 mov	 BYTE PTR __k$[ebp+29], bl
  00223	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN68@LoadFloat_@4:
  00228	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0022c	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN70@LoadFloat_@4:
  00231	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  00234	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN71@LoadFloat_@4:
  00239	88 5d f5	 mov	 BYTE PTR __k$[ebp+25], bl
  0023c	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN72@LoadFloat_@4:
  00241	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00245	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN73@LoadFloat_@4:
  0024a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0024e	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN74@LoadFloat_@4:
  00250	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00253	eb 79		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  00255	88 5d f1	 mov	 BYTE PTR __k$[ebp+21], bl
  00258	eb 74		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  0025a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0025e	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  00260	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00264	eb 68		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  00266	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00269	eb 63		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  0026b	88 5d ed	 mov	 BYTE PTR __k$[ebp+17], bl
  0026e	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  00270	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00274	eb 58		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  00276	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0027a	eb 52		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  0027c	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0027f	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  00281	88 5d e9	 mov	 BYTE PTR __k$[ebp+13], bl
  00284	eb 48		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00286	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0028a	eb 42		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  0028c	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00290	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  00292	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00295	eb 37		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  00297	88 5d e5	 mov	 BYTE PTR __k$[ebp+9], bl
  0029a	eb 32		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  0029c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002a0	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  002a2	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002a6	eb 26		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  002a8	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  002ab	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  002ad	88 5d e1	 mov	 BYTE PTR __k$[ebp+5], bl
  002b0	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  002b2	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002b6	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  002b8	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002bc	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  002be	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002c2	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  002c4	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002c8	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  002ca	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  002ce	6a 06		 push	 6
  002d0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002d3	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+27], 0
  002d7	5a		 pop	 edx
$LL104@LoadFloat_@4:
  002d8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002de	83 c0 04	 add	 eax, 4
  002e1	4a		 dec	 edx
  002e2	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  002e4	6a 18		 push	 24			; 00000018H
  002e6	58		 pop	 eax
$LL101@LoadFloat_@4:
  002e7	8b c8		 mov	 ecx, eax
  002e9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002ef	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  002f1	49		 dec	 ecx
  002f2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002f5	41		 inc	 ecx
$LN111@LoadFloat_@4:
  002f6	b2 ed		 mov	 dl, -19			; ffffffedH
  002f8	2a d1		 sub	 dl, cl
  002fa	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002fe	40		 inc	 eax
  002ff	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00302	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  00304	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00309	51		 push	 ecx
  0030a	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	50		 push	 eax
  00313	8b ce		 mov	 ecx, esi
  00315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0031b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031e	5e		 pop	 esi
  0031f	33 cd		 xor	 ecx, ebp
  00321	5b		 pop	 ebx
  00322	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00327	c9		 leave
  00328	c2 08 00	 ret	 8
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<28>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<19>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 cf 01 00
	00		 je	 $LN96@LoadString@3
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 b8 01 00
	00		 je	 $LN95@LoadString@3
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 a0 01 00
	00		 je	 $LN94@LoadString@3
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 89 01 00
	00		 je	 $LN93@LoadString@3
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 72 01 00
	00		 je	 $LN92@LoadString@3
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 5c 01 00
	00		 je	 $LN91@LoadString@3
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 46 01 00
	00		 je	 $LN90@LoadString@3
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 2f 01 00
	00		 je	 $LN89@LoadString@3
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 18 01 00
	00		 je	 $LN88@LoadString@3
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 02 01 00
	00		 je	 $LN87@LoadString@3
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 ec 00 00
	00		 je	 $LN86@LoadString@3
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 d5 00 00
	00		 je	 $LN85@LoadString@3
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 be 00 00
	00		 je	 $LN84@LoadString@3
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 a8 00 00
	00		 je	 $LN83@LoadString@3
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 92 00 00
	00		 je	 $LN82@LoadString@3
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 7f		 je	 SHORT $LN81@LoadString@3
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 6c		 je	 SHORT $LN80@LoadString@3
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00134	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00137	84 d2		 test	 dl, dl
  00139	74 5a		 je	 SHORT $LN79@LoadString@3
  0013b	32 d1		 xor	 dl, cl
  0013d	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00141	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@3
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 3e		 je	 SHORT $LN77@LoadString@3
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 2b		 je	 SHORT $LN76@LoadString@3
  0015e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00161	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00164	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00167	84 d2		 test	 dl, dl
  00169	74 19		 je	 SHORT $LN75@LoadString@3
  0016b	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  0016e	32 d1		 xor	 dl, cl
  00170	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00173	84 c0		 test	 al, al
  00175	74 07		 je	 SHORT $LN74@LoadString@3
  00177	34 eb		 xor	 al, -21			; ffffffebH
  00179	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  0017c	eb 7d		 jmp	 SHORT $LN111@LoadString@3
$LN74@LoadString@3:
  0017e	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00182	eb 77		 jmp	 SHORT $LN111@LoadString@3
$LN75@LoadString@3:
  00184	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  00187	eb 72		 jmp	 SHORT $LN111@LoadString@3
$LN76@LoadString@3:
  00189	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0018d	eb 6c		 jmp	 SHORT $LN111@LoadString@3
$LN77@LoadString@3:
  0018f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00193	eb 66		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  00195	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00198	eb 61		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  0019a	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0019e	eb 5b		 jmp	 SHORT $LN111@LoadString@3
$LN81@LoadString@3:
  001a0	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001a4	eb 55		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  001a6	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001aa	eb 4f		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  001ac	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001af	eb 4a		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  001b1	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b5	eb 44		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  001b7	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001bb	eb 3e		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  001bd	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001c1	eb 38		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  001c3	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001c6	eb 33		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  001c8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001cc	eb 2d		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  001ce	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001d2	eb 27		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  001d4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d8	eb 21		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  001da	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001dd	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  001df	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001e3	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  001e5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e9	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  001eb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ef	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  001f1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001f5	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  001f7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  001fb	6a 04		 push	 4
  001fd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00200	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  00204	5a		 pop	 edx
$LL104@LoadString@3:
  00205	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020b	83 c0 04	 add	 eax, 4
  0020e	4a		 dec	 edx
  0020f	75 f4		 jne	 SHORT $LL104@LoadString@3
  00211	6a 10		 push	 16			; 00000010H
  00213	58		 pop	 eax
$LL101@LoadString@3:
  00214	8b c8		 mov	 ecx, eax
  00216	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0021c	79 05		 jns	 SHORT $LN112@LoadString@3
  0021e	49		 dec	 ecx
  0021f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00222	41		 inc	 ecx
$LN112@LoadString@3:
  00223	b2 ed		 mov	 dl, -19			; ffffffedH
  00225	2a d1		 sub	 dl, cl
  00227	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0022b	40		 inc	 eax
  0022c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0022f	7c e3		 jl	 SHORT $LL101@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  00231	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	33 cd		 xor	 ecx, ebp
  00249	5e		 pop	 esi
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	c9		 leave
  00250	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ; ioINILoader::LoadFloat_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<24>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadFloat_@5
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadFloat_@5
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadFloat_@5
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadFloat_@5
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadFloat_@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadFloat_@5
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadFloat_@5
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadFloat_@5
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadFloat_@5
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadFloat_@5
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadFloat_@5
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadFloat_@5
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadFloat_@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadFloat_@5
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadFloat_@5
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadFloat_@5
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadFloat_@5
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadFloat_@5
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadFloat_@5
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadFloat_@5
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadFloat_@5
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadFloat_@5
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadFloat_@5
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadFloat_@5
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadFloat_@5
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadFloat_@5
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadFloat_@5
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadFloat_@5
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN69@LoadFloat_@5:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN70@LoadFloat_@5:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN71@LoadFloat_@5:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN72@LoadFloat_@5:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN74@LoadFloat_@5:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadFloat_@5
$LN75@LoadFloat_@5:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadFloat_@5
$LN76@LoadFloat_@5:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN77@LoadFloat_@5:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadFloat_@5
$LN78@LoadFloat_@5:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadFloat_@5
$LN79@LoadFloat_@5:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN80@LoadFloat_@5:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadFloat_@5
$LN81@LoadFloat_@5:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadFloat_@5
$LN82@LoadFloat_@5:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@5
$LN83@LoadFloat_@5:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadFloat_@5
$LN84@LoadFloat_@5:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadFloat_@5
$LN85@LoadFloat_@5:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN86@LoadFloat_@5:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadFloat_@5
$LN87@LoadFloat_@5:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadFloat_@5
$LN88@LoadFloat_@5:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN89@LoadFloat_@5:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadFloat_@5
$LN90@LoadFloat_@5:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadFloat_@5
$LN91@LoadFloat_@5:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN92@LoadFloat_@5:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadFloat_@5
$LN93@LoadFloat_@5:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadFloat_@5
$LN94@LoadFloat_@5:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@5
$LN95@LoadFloat_@5:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadFloat_@5
$LN96@LoadFloat_@5:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@5:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadFloat_@5:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadFloat_@5
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadFloat_@5:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadFloat_@5
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadFloat_@5:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadFloat_@5

; 137  : 		return LoadFloat(_k, f);

  002a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002a5	51		 push	 ecx
  002a6	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	50		 push	 eax
  002af	8b ce		 mov	 ecx, esi
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	5e		 pop	 esi
  002bb	33 cd		 xor	 ecx, ebp
  002bd	5b		 pop	 ebx
  002be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c3	c9		 leave
  002c4	c2 08 00	 ret	 8
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z ; ioINILoader::LoadFloat_e<26>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 26
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<26>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 79 02 00
	00		 je	 $LN96@LoadFloat_@6
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 62 02 00
	00		 je	 $LN95@LoadFloat_@6
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 4b 02 00
	00		 je	 $LN94@LoadFloat_@6
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 33 02 00
	00		 je	 $LN93@LoadFloat_@6
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 1b 02 00
	00		 je	 $LN92@LoadFloat_@6
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 04 02 00
	00		 je	 $LN91@LoadFloat_@6
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 ee 01 00
	00		 je	 $LN90@LoadFloat_@6
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 d9 01 00
	00		 je	 $LN89@LoadFloat_@6
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 c3 01 00
	00		 je	 $LN88@LoadFloat_@6
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 ac 01 00
	00		 je	 $LN87@LoadFloat_@6
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 96 01 00
	00		 je	 $LN86@LoadFloat_@6
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 81 01 00
	00		 je	 $LN85@LoadFloat_@6
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 6b 01 00
	00		 je	 $LN84@LoadFloat_@6
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 54 01 00
	00		 je	 $LN83@LoadFloat_@6
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 3e 01 00
	00		 je	 $LN82@LoadFloat_@6
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 29 01 00
	00		 je	 $LN81@LoadFloat_@6
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 13 01 00
	00		 je	 $LN80@LoadFloat_@6
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 fc 00 00
	00		 je	 $LN79@LoadFloat_@6
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 e6 00 00
	00		 je	 $LN78@LoadFloat_@6
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 d1 00 00
	00		 je	 $LN77@LoadFloat_@6
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 bb 00 00
	00		 je	 $LN76@LoadFloat_@6
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 a4 00 00
	00		 je	 $LN75@LoadFloat_@6
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 8e 00 00
	00		 je	 $LN74@LoadFloat_@6
  00191	32 d1		 xor	 dl, cl
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	74 7d		 je	 SHORT $LN73@LoadFloat_@6
  0019d	32 d3		 xor	 dl, bl
  0019f	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a2	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a5	84 d2		 test	 dl, dl
  001a7	74 68		 je	 SHORT $LN72@LoadFloat_@6
  001a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ac	80 78 19 00	 cmp	 BYTE PTR [eax+25], 0
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	0f 84 e5 00 00
	00		 je	 $LN1@LoadFloat_@6
  001b9	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bc	84 d2		 test	 dl, dl
  001be	74 49		 je	 SHORT $LN70@LoadFloat_@6
  001c0	32 d1		 xor	 dl, cl
  001c2	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c5	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001c8	84 d2		 test	 dl, dl
  001ca	74 35		 je	 SHORT $LN69@LoadFloat_@6
  001cc	32 d3		 xor	 dl, bl
  001ce	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d1	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d4	84 d2		 test	 dl, dl
  001d6	74 20		 je	 SHORT $LN68@LoadFloat_@6
  001d8	8a 40 1d	 mov	 al, BYTE PTR [eax+29]
  001db	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001de	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e1	84 c0		 test	 al, al
  001e3	74 0a		 je	 SHORT $LN67@LoadFloat_@6
  001e5	34 ec		 xor	 al, -20			; ffffffecH
  001e7	88 45 f9	 mov	 BYTE PTR __k$[ebp+29], al
  001ea	e9 af 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN67@LoadFloat_@6:
  001ef	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+29], -20 ; ffffffecH
  001f3	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN68@LoadFloat_@6:
  001f8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001fc	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN69@LoadFloat_@6:
  00201	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  00204	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN70@LoadFloat_@6:
  00209	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  0020c	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN72@LoadFloat_@6:
  00211	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00215	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@6
$LN73@LoadFloat_@6:
  0021a	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  0021d	eb 7f		 jmp	 SHORT $LN1@LoadFloat_@6
$LN74@LoadFloat_@6:
  0021f	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00222	eb 7a		 jmp	 SHORT $LN1@LoadFloat_@6
$LN75@LoadFloat_@6:
  00224	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  00228	eb 74		 jmp	 SHORT $LN1@LoadFloat_@6
$LN76@LoadFloat_@6:
  0022a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0022e	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN77@LoadFloat_@6:
  00230	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  00233	eb 69		 jmp	 SHORT $LN1@LoadFloat_@6
$LN78@LoadFloat_@6:
  00235	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00238	eb 64		 jmp	 SHORT $LN1@LoadFloat_@6
$LN79@LoadFloat_@6:
  0023a	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0023e	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN80@LoadFloat_@6:
  00240	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00244	eb 58		 jmp	 SHORT $LN1@LoadFloat_@6
$LN81@LoadFloat_@6:
  00246	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00249	eb 53		 jmp	 SHORT $LN1@LoadFloat_@6
$LN82@LoadFloat_@6:
  0024b	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0024e	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@6
$LN83@LoadFloat_@6:
  00250	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00254	eb 48		 jmp	 SHORT $LN1@LoadFloat_@6
$LN84@LoadFloat_@6:
  00256	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0025a	eb 42		 jmp	 SHORT $LN1@LoadFloat_@6
$LN85@LoadFloat_@6:
  0025c	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  0025f	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@6
$LN86@LoadFloat_@6:
  00261	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00264	eb 38		 jmp	 SHORT $LN1@LoadFloat_@6
$LN87@LoadFloat_@6:
  00266	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0026a	eb 32		 jmp	 SHORT $LN1@LoadFloat_@6
$LN88@LoadFloat_@6:
  0026c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00270	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN89@LoadFloat_@6:
  00272	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  00275	eb 27		 jmp	 SHORT $LN1@LoadFloat_@6
$LN90@LoadFloat_@6:
  00277	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  0027a	eb 22		 jmp	 SHORT $LN1@LoadFloat_@6
$LN91@LoadFloat_@6:
  0027c	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00280	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@6
$LN92@LoadFloat_@6:
  00282	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00286	eb 16		 jmp	 SHORT $LN1@LoadFloat_@6
$LN93@LoadFloat_@6:
  00288	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0028c	eb 10		 jmp	 SHORT $LN1@LoadFloat_@6
$LN94@LoadFloat_@6:
  0028e	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00292	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@6
$LN95@LoadFloat_@6:
  00294	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00298	eb 04		 jmp	 SHORT $LN1@LoadFloat_@6
$LN96@LoadFloat_@6:
  0029a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@6:
  0029e	6a 06		 push	 6
  002a0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002a3	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+25], 0
  002a7	5a		 pop	 edx
$LL104@LoadFloat_@6:
  002a8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002ae	83 c0 04	 add	 eax, 4
  002b1	4a		 dec	 edx
  002b2	75 f4		 jne	 SHORT $LL104@LoadFloat_@6

; 137  : 		return LoadFloat(_k, f);

  002b4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002b9	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002bd	51		 push	 ecx
  002be	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c6	50		 push	 eax
  002c7	8b ce		 mov	 ecx, esi
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002cf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d2	5e		 pop	 esi
  002d3	33 cd		 xor	 ecx, ebp
  002d5	5b		 pop	 ebx
  002d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002db	c9		 leave
  002dc	c2 08 00	 ret	 8
??$LoadFloat_e@$0BK@@ioINILoader@@QAEMAAY0BK@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<26>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BM@@ioINILoader@@QAEHAAY0BM@$$CBDH@Z ; ioINILoader::LoadInt_e<28>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BM@@ioINILoader@@QAEHAAY0BM@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BM@@ioINILoader@@QAEHAAY0BM@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<28>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 a9 02 00
	00		 je	 $LN96@LoadInt_e
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 92 02 00
	00		 je	 $LN95@LoadInt_e
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 7a 02 00
	00		 je	 $LN94@LoadInt_e
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 62 02 00
	00		 je	 $LN93@LoadInt_e
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 4b 02 00
	00		 je	 $LN92@LoadInt_e
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 35 02 00
	00		 je	 $LN91@LoadInt_e
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 20 02 00
	00		 je	 $LN90@LoadInt_e
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 0a 02 00
	00		 je	 $LN89@LoadInt_e
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 f3 01 00
	00		 je	 $LN88@LoadInt_e
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 dd 01 00
	00		 je	 $LN87@LoadInt_e
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 c8 01 00
	00		 je	 $LN86@LoadInt_e
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 b2 01 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 9b 01 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 85 01 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 70 01 00
	00		 je	 $LN82@LoadInt_e
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 5a 01 00
	00		 je	 $LN81@LoadInt_e
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 43 01 00
	00		 je	 $LN80@LoadInt_e
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 2d 01 00
	00		 je	 $LN79@LoadInt_e
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 18 01 00
	00		 je	 $LN78@LoadInt_e
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 02 01 00
	00		 je	 $LN77@LoadInt_e
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 eb 00 00
	00		 je	 $LN76@LoadInt_e
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 d5 00 00
	00		 je	 $LN75@LoadInt_e
  00180	32 d3		 xor	 dl, bl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 c0 00 00
	00		 je	 $LN74@LoadInt_e
  00190	32 d1		 xor	 dl, cl
  00192	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 aa 00 00
	00		 je	 $LN73@LoadInt_e
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 90 00 00
	00		 je	 $LN72@LoadInt_e
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	74 7b		 je	 SHORT $LN71@LoadInt_e
  001be	32 d3		 xor	 dl, bl
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001c6	84 d2		 test	 dl, dl
  001c8	74 67		 je	 SHORT $LN70@LoadInt_e
  001ca	32 d1		 xor	 dl, cl
  001cc	80 78 1b 00	 cmp	 BYTE PTR [eax+27], 0
  001d0	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	0f 84 f5 00 00
	00		 je	 $LN1@LoadInt_e
  001d9	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001dc	84 d2		 test	 dl, dl
  001de	74 48		 je	 SHORT $LN68@LoadInt_e
  001e0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001e3	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e6	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e9	84 d2		 test	 dl, dl
  001eb	74 33		 je	 SHORT $LN67@LoadInt_e
  001ed	32 d3		 xor	 dl, bl
  001ef	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f2	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f5	84 d2		 test	 dl, dl
  001f7	74 1f		 je	 SHORT $LN66@LoadInt_e
  001f9	8a 40 1f	 mov	 al, BYTE PTR [eax+31]
  001fc	32 d1		 xor	 dl, cl
  001fe	88 55 fa	 mov	 BYTE PTR __k$[ebp+30], dl
  00201	84 c0		 test	 al, al
  00203	74 0a		 je	 SHORT $LN65@LoadInt_e
  00205	34 ea		 xor	 al, -22			; ffffffeaH
  00207	88 45 fb	 mov	 BYTE PTR __k$[ebp+31], al
  0020a	e9 bf 00 00 00	 jmp	 $LN1@LoadInt_e
$LN65@LoadInt_e:
  0020f	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  00213	e9 b6 00 00 00	 jmp	 $LN1@LoadInt_e
$LN66@LoadInt_e:
  00218	88 4d fa	 mov	 BYTE PTR __k$[ebp+30], cl
  0021b	e9 ae 00 00 00	 jmp	 $LN1@LoadInt_e
$LN67@LoadInt_e:
  00220	88 5d f9	 mov	 BYTE PTR __k$[ebp+29], bl
  00223	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e
$LN68@LoadInt_e:
  00228	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0022c	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e
$LN70@LoadInt_e:
  00231	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  00234	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e
$LN71@LoadInt_e:
  00239	88 5d f5	 mov	 BYTE PTR __k$[ebp+25], bl
  0023c	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e
$LN72@LoadInt_e:
  00241	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00245	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e
$LN73@LoadInt_e:
  0024a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0024e	eb 7e		 jmp	 SHORT $LN1@LoadInt_e
$LN74@LoadInt_e:
  00250	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00253	eb 79		 jmp	 SHORT $LN1@LoadInt_e
$LN75@LoadInt_e:
  00255	88 5d f1	 mov	 BYTE PTR __k$[ebp+21], bl
  00258	eb 74		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  0025a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0025e	eb 6e		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  00260	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00264	eb 68		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00266	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00269	eb 63		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0026b	88 5d ed	 mov	 BYTE PTR __k$[ebp+17], bl
  0026e	eb 5e		 jmp	 SHORT $LN1@LoadInt_e
$LN80@LoadInt_e:
  00270	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00274	eb 58		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00276	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0027a	eb 52		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  0027c	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0027f	eb 4d		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  00281	88 5d e9	 mov	 BYTE PTR __k$[ebp+13], bl
  00284	eb 48		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00286	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0028a	eb 42		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  0028c	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00290	eb 3c		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  00292	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00295	eb 37		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00297	88 5d e5	 mov	 BYTE PTR __k$[ebp+9], bl
  0029a	eb 32		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  0029c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002a0	eb 2c		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  002a2	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002a6	eb 26		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  002a8	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  002ab	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  002ad	88 5d e1	 mov	 BYTE PTR __k$[ebp+5], bl
  002b0	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  002b2	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002b6	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  002b8	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002bc	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  002be	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002c2	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  002c4	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002c8	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  002ca	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  002ce	6a 06		 push	 6
  002d0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002d3	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+27], 0
  002d7	5a		 pop	 edx
$LL104@LoadInt_e:
  002d8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002de	83 c0 04	 add	 eax, 4
  002e1	4a		 dec	 edx
  002e2	75 f4		 jne	 SHORT $LL104@LoadInt_e
  002e4	6a 18		 push	 24			; 00000018H
  002e6	58		 pop	 eax
$LL101@LoadInt_e:
  002e7	8b c8		 mov	 ecx, eax
  002e9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002ef	79 05		 jns	 SHORT $LN111@LoadInt_e
  002f1	49		 dec	 ecx
  002f2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002f5	41		 inc	 ecx
$LN111@LoadInt_e:
  002f6	b2 ed		 mov	 dl, -19			; ffffffedH
  002f8	2a d1		 sub	 dl, cl
  002fa	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002fe	40		 inc	 eax
  002ff	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00302	7c e3		 jl	 SHORT $LL101@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  00304	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00307	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  0030a	50		 push	 eax
  0030b	8b ce		 mov	 ecx, esi
  0030d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00313	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00316	5e		 pop	 esi
  00317	33 cd		 xor	 ecx, ebp
  00319	5b		 pop	 ebx
  0031a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031f	c9		 leave
  00320	c2 08 00	 ret	 8
??$LoadInt_e@$0BM@@ioINILoader@@QAEHAAY0BM@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<28>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadAttackAttribute_e@$0BG@@@YAXAAY0BG@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute_e<22>
EXTRN	?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z:PROC ; LoadAttackAttribute
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
;	COMDAT ??$LoadAttackAttribute_e@$0BG@@@YAXAAY0BG@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z
_TEXT	SEGMENT
_szEncAttack$ = -32					; size = 22
__$ArrayPad$ = -4					; size = 4
_szAttack$ = 8						; size = 4
_rkAttribute$ = 12					; size = 4
_rkLoader$ = 16						; size = 4
??$LoadAttackAttribute_e@$0BG@@@YAXAAY0BG@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z PROC ; LoadAttackAttribute_e<22>, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szAttack$[ebp]

; 132  : 	_ENCSTR(szAttack, szEncAttack);

  00013	8a 08		 mov	 cl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _rkAttribute$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _rkLoader$[ebp]
  0001e	84 c9		 test	 cl, cl
  00020	0f 84 15 02 00
	00		 je	 $LN96@LoadAttack
  00026	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00029	88 4d e0	 mov	 BYTE PTR _szEncAttack$[ebp], cl
  0002c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002f	84 c9		 test	 cl, cl
  00031	0f 84 fe 01 00
	00		 je	 $LN95@LoadAttack
  00037	80 f1 ec	 xor	 cl, -20			; ffffffecH
  0003a	88 4d e1	 mov	 BYTE PTR _szEncAttack$[ebp+1], cl
  0003d	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00040	84 c9		 test	 cl, cl
  00042	0f 84 e7 01 00
	00		 je	 $LN94@LoadAttack
  00048	b3 eb		 mov	 bl, -21			; ffffffebH
  0004a	32 cb		 xor	 cl, bl
  0004c	88 4d e2	 mov	 BYTE PTR _szEncAttack$[ebp+2], cl
  0004f	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00052	84 c9		 test	 cl, cl
  00054	0f 84 cf 01 00
	00		 je	 $LN93@LoadAttack
  0005a	b2 ea		 mov	 dl, -22			; ffffffeaH
  0005c	32 ca		 xor	 cl, dl
  0005e	88 4d e3	 mov	 BYTE PTR _szEncAttack$[ebp+3], cl
  00061	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00064	84 c9		 test	 cl, cl
  00066	0f 84 b7 01 00
	00		 je	 $LN92@LoadAttack
  0006c	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0006f	88 4d e4	 mov	 BYTE PTR _szEncAttack$[ebp+4], cl
  00072	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00075	84 c9		 test	 cl, cl
  00077	0f 84 a0 01 00
	00		 je	 $LN91@LoadAttack
  0007d	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00080	88 4d e5	 mov	 BYTE PTR _szEncAttack$[ebp+5], cl
  00083	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00086	84 c9		 test	 cl, cl
  00088	0f 84 8a 01 00
	00		 je	 $LN90@LoadAttack
  0008e	32 cb		 xor	 cl, bl
  00090	88 4d e6	 mov	 BYTE PTR _szEncAttack$[ebp+6], cl
  00093	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00096	84 c9		 test	 cl, cl
  00098	0f 84 75 01 00
	00		 je	 $LN89@LoadAttack
  0009e	32 ca		 xor	 cl, dl
  000a0	88 4d e7	 mov	 BYTE PTR _szEncAttack$[ebp+7], cl
  000a3	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  000a6	84 c9		 test	 cl, cl
  000a8	0f 84 5f 01 00
	00		 je	 $LN88@LoadAttack
  000ae	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000b1	88 4d e8	 mov	 BYTE PTR _szEncAttack$[ebp+8], cl
  000b4	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000b7	84 c9		 test	 cl, cl
  000b9	0f 84 48 01 00
	00		 je	 $LN87@LoadAttack
  000bf	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000c2	88 4d e9	 mov	 BYTE PTR _szEncAttack$[ebp+9], cl
  000c5	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000c8	84 c9		 test	 cl, cl
  000ca	0f 84 32 01 00
	00		 je	 $LN86@LoadAttack
  000d0	32 cb		 xor	 cl, bl
  000d2	88 4d ea	 mov	 BYTE PTR _szEncAttack$[ebp+10], cl
  000d5	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000d8	84 c9		 test	 cl, cl
  000da	0f 84 1d 01 00
	00		 je	 $LN85@LoadAttack
  000e0	32 ca		 xor	 cl, dl
  000e2	88 4d eb	 mov	 BYTE PTR _szEncAttack$[ebp+11], cl
  000e5	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  000e8	84 c9		 test	 cl, cl
  000ea	0f 84 07 01 00
	00		 je	 $LN84@LoadAttack
  000f0	80 f1 ed	 xor	 cl, -19			; ffffffedH
  000f3	88 4d ec	 mov	 BYTE PTR _szEncAttack$[ebp+12], cl
  000f6	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000f9	84 c9		 test	 cl, cl
  000fb	0f 84 f0 00 00
	00		 je	 $LN83@LoadAttack
  00101	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00104	88 4d ed	 mov	 BYTE PTR _szEncAttack$[ebp+13], cl
  00107	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  0010a	84 c9		 test	 cl, cl
  0010c	0f 84 da 00 00
	00		 je	 $LN82@LoadAttack
  00112	32 cb		 xor	 cl, bl
  00114	88 4d ee	 mov	 BYTE PTR _szEncAttack$[ebp+14], cl
  00117	8a 48 0f	 mov	 cl, BYTE PTR [eax+15]
  0011a	84 c9		 test	 cl, cl
  0011c	0f 84 c5 00 00
	00		 je	 $LN81@LoadAttack
  00122	32 ca		 xor	 cl, dl
  00124	88 4d ef	 mov	 BYTE PTR _szEncAttack$[ebp+15], cl
  00127	8a 48 10	 mov	 cl, BYTE PTR [eax+16]
  0012a	84 c9		 test	 cl, cl
  0012c	0f 84 af 00 00
	00		 je	 $LN80@LoadAttack
  00132	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00135	88 4d f0	 mov	 BYTE PTR _szEncAttack$[ebp+16], cl
  00138	8a 48 11	 mov	 cl, BYTE PTR [eax+17]
  0013b	84 c9		 test	 cl, cl
  0013d	0f 84 98 00 00
	00		 je	 $LN79@LoadAttack
  00143	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00146	88 4d f1	 mov	 BYTE PTR _szEncAttack$[ebp+17], cl
  00149	8a 48 12	 mov	 cl, BYTE PTR [eax+18]
  0014c	84 c9		 test	 cl, cl
  0014e	0f 84 82 00 00
	00		 je	 $LN78@LoadAttack
  00154	32 cb		 xor	 cl, bl
  00156	88 4d f2	 mov	 BYTE PTR _szEncAttack$[ebp+18], cl
  00159	8a 48 13	 mov	 cl, BYTE PTR [eax+19]
  0015c	84 c9		 test	 cl, cl
  0015e	74 71		 je	 SHORT $LN77@LoadAttack
  00160	32 ca		 xor	 cl, dl
  00162	88 4d f3	 mov	 BYTE PTR _szEncAttack$[ebp+19], cl
  00165	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00168	84 c9		 test	 cl, cl
  0016a	74 5f		 je	 SHORT $LN76@LoadAttack
  0016c	80 f1 ed	 xor	 cl, -19			; ffffffedH
  0016f	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00173	88 4d f4	 mov	 BYTE PTR _szEncAttack$[ebp+20], cl
  00176	0f 84 c3 00 00
	00		 je	 $LN1@LoadAttack
  0017c	8a 48 16	 mov	 cl, BYTE PTR [eax+22]
  0017f	84 c9		 test	 cl, cl
  00181	74 43		 je	 SHORT $LN74@LoadAttack
  00183	32 cb		 xor	 cl, bl
  00185	88 4d f6	 mov	 BYTE PTR _szEncAttack$[ebp+22], cl
  00188	8a 48 17	 mov	 cl, BYTE PTR [eax+23]
  0018b	84 c9		 test	 cl, cl
  0018d	74 32		 je	 SHORT $LN73@LoadAttack
  0018f	32 ca		 xor	 cl, dl
  00191	88 4d f7	 mov	 BYTE PTR _szEncAttack$[ebp+23], cl
  00194	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  00197	84 c9		 test	 cl, cl
  00199	74 20		 je	 SHORT $LN72@LoadAttack
  0019b	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  0019e	80 f1 ed	 xor	 cl, -19			; ffffffedH
  001a1	88 4d f8	 mov	 BYTE PTR _szEncAttack$[ebp+24], cl
  001a4	84 c0		 test	 al, al
  001a6	74 0a		 je	 SHORT $LN71@LoadAttack
  001a8	34 ec		 xor	 al, -20			; ffffffecH
  001aa	88 45 f9	 mov	 BYTE PTR _szEncAttack$[ebp+25], al
  001ad	e9 8d 00 00 00	 jmp	 $LN1@LoadAttack
$LN71@LoadAttack:
  001b2	c6 45 f9 ec	 mov	 BYTE PTR _szEncAttack$[ebp+25], -20 ; ffffffecH
  001b6	e9 84 00 00 00	 jmp	 $LN1@LoadAttack
$LN72@LoadAttack:
  001bb	c6 45 f8 ed	 mov	 BYTE PTR _szEncAttack$[ebp+24], -19 ; ffffffedH
  001bf	eb 7e		 jmp	 SHORT $LN1@LoadAttack
$LN73@LoadAttack:
  001c1	88 55 f7	 mov	 BYTE PTR _szEncAttack$[ebp+23], dl
  001c4	eb 79		 jmp	 SHORT $LN1@LoadAttack
$LN74@LoadAttack:
  001c6	88 5d f6	 mov	 BYTE PTR _szEncAttack$[ebp+22], bl
  001c9	eb 74		 jmp	 SHORT $LN1@LoadAttack
$LN76@LoadAttack:
  001cb	c6 45 f4 ed	 mov	 BYTE PTR _szEncAttack$[ebp+20], -19 ; ffffffedH
  001cf	eb 6e		 jmp	 SHORT $LN1@LoadAttack
$LN77@LoadAttack:
  001d1	88 55 f3	 mov	 BYTE PTR _szEncAttack$[ebp+19], dl
  001d4	eb 69		 jmp	 SHORT $LN1@LoadAttack
$LN78@LoadAttack:
  001d6	88 5d f2	 mov	 BYTE PTR _szEncAttack$[ebp+18], bl
  001d9	eb 64		 jmp	 SHORT $LN1@LoadAttack
$LN79@LoadAttack:
  001db	c6 45 f1 ec	 mov	 BYTE PTR _szEncAttack$[ebp+17], -20 ; ffffffecH
  001df	eb 5e		 jmp	 SHORT $LN1@LoadAttack
$LN80@LoadAttack:
  001e1	c6 45 f0 ed	 mov	 BYTE PTR _szEncAttack$[ebp+16], -19 ; ffffffedH
  001e5	eb 58		 jmp	 SHORT $LN1@LoadAttack
$LN81@LoadAttack:
  001e7	88 55 ef	 mov	 BYTE PTR _szEncAttack$[ebp+15], dl
  001ea	eb 53		 jmp	 SHORT $LN1@LoadAttack
$LN82@LoadAttack:
  001ec	88 5d ee	 mov	 BYTE PTR _szEncAttack$[ebp+14], bl
  001ef	eb 4e		 jmp	 SHORT $LN1@LoadAttack
$LN83@LoadAttack:
  001f1	c6 45 ed ec	 mov	 BYTE PTR _szEncAttack$[ebp+13], -20 ; ffffffecH
  001f5	eb 48		 jmp	 SHORT $LN1@LoadAttack
$LN84@LoadAttack:
  001f7	c6 45 ec ed	 mov	 BYTE PTR _szEncAttack$[ebp+12], -19 ; ffffffedH
  001fb	eb 42		 jmp	 SHORT $LN1@LoadAttack
$LN85@LoadAttack:
  001fd	88 55 eb	 mov	 BYTE PTR _szEncAttack$[ebp+11], dl
  00200	eb 3d		 jmp	 SHORT $LN1@LoadAttack
$LN86@LoadAttack:
  00202	88 5d ea	 mov	 BYTE PTR _szEncAttack$[ebp+10], bl
  00205	eb 38		 jmp	 SHORT $LN1@LoadAttack
$LN87@LoadAttack:
  00207	c6 45 e9 ec	 mov	 BYTE PTR _szEncAttack$[ebp+9], -20 ; ffffffecH
  0020b	eb 32		 jmp	 SHORT $LN1@LoadAttack
$LN88@LoadAttack:
  0020d	c6 45 e8 ed	 mov	 BYTE PTR _szEncAttack$[ebp+8], -19 ; ffffffedH
  00211	eb 2c		 jmp	 SHORT $LN1@LoadAttack
$LN89@LoadAttack:
  00213	88 55 e7	 mov	 BYTE PTR _szEncAttack$[ebp+7], dl
  00216	eb 27		 jmp	 SHORT $LN1@LoadAttack
$LN90@LoadAttack:
  00218	88 5d e6	 mov	 BYTE PTR _szEncAttack$[ebp+6], bl
  0021b	eb 22		 jmp	 SHORT $LN1@LoadAttack
$LN91@LoadAttack:
  0021d	c6 45 e5 ec	 mov	 BYTE PTR _szEncAttack$[ebp+5], -20 ; ffffffecH
  00221	eb 1c		 jmp	 SHORT $LN1@LoadAttack
$LN92@LoadAttack:
  00223	c6 45 e4 ed	 mov	 BYTE PTR _szEncAttack$[ebp+4], -19 ; ffffffedH
  00227	eb 16		 jmp	 SHORT $LN1@LoadAttack
$LN93@LoadAttack:
  00229	c6 45 e3 ea	 mov	 BYTE PTR _szEncAttack$[ebp+3], -22 ; ffffffeaH
  0022d	eb 10		 jmp	 SHORT $LN1@LoadAttack
$LN94@LoadAttack:
  0022f	c6 45 e2 eb	 mov	 BYTE PTR _szEncAttack$[ebp+2], -21 ; ffffffebH
  00233	eb 0a		 jmp	 SHORT $LN1@LoadAttack
$LN95@LoadAttack:
  00235	c6 45 e1 ec	 mov	 BYTE PTR _szEncAttack$[ebp+1], -20 ; ffffffecH
  00239	eb 04		 jmp	 SHORT $LN1@LoadAttack
$LN96@LoadAttack:
  0023b	c6 45 e0 ed	 mov	 BYTE PTR _szEncAttack$[ebp], -19 ; ffffffedH
$LN1@LoadAttack:
  0023f	6a 05		 push	 5
  00241	8d 45 e0	 lea	 eax, DWORD PTR _szEncAttack$[ebp]
  00244	c6 45 f5 00	 mov	 BYTE PTR _szEncAttack$[ebp+21], 0
  00248	59		 pop	 ecx
$LL104@LoadAttack:
  00249	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0024f	83 c0 04	 add	 eax, 4
  00252	49		 dec	 ecx
  00253	75 f4		 jne	 SHORT $LL104@LoadAttack
  00255	80 75 f4 ed	 xor	 BYTE PTR _szEncAttack$[ebp+20], -19 ; ffffffedH

; 133  : 	LoadAttackAttribute(szEncAttack, rkAttribute, rkLoader);

  00259	57		 push	 edi
  0025a	8d 45 e0	 lea	 eax, DWORD PTR _szEncAttack$[ebp]
  0025d	56		 push	 esi
  0025e	50		 push	 eax
  0025f	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute

; 134  : }

  00264	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00267	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	33 cd		 xor	 ecx, ebp
  0026e	5b		 pop	 ebx
  0026f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00274	c9		 leave
  00275	c3		 ret	 0
??$LoadAttackAttribute_e@$0BG@@@YAXAAY0BG@$$CBDAAUAttackAttribute@@AAVioINILoader@@@Z ENDP ; LoadAttackAttribute_e<22>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<25>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<25>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 5f 02 00
	00		 je	 $LN96@LoadString@4
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 48 02 00
	00		 je	 $LN95@LoadString@4
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 30 02 00
	00		 je	 $LN94@LoadString@4
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 18 02 00
	00		 je	 $LN93@LoadString@4
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 01 02 00
	00		 je	 $LN92@LoadString@4
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 eb 01 00
	00		 je	 $LN91@LoadString@4
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 d6 01 00
	00		 je	 $LN90@LoadString@4
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 c0 01 00
	00		 je	 $LN89@LoadString@4
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 a9 01 00
	00		 je	 $LN88@LoadString@4
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 93 01 00
	00		 je	 $LN87@LoadString@4
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 7e 01 00
	00		 je	 $LN86@LoadString@4
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 68 01 00
	00		 je	 $LN85@LoadString@4
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 51 01 00
	00		 je	 $LN84@LoadString@4
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 3b 01 00
	00		 je	 $LN83@LoadString@4
  00104	32 d1		 xor	 dl, cl
  00106	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 26 01 00
	00		 je	 $LN82@LoadString@4
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 10 01 00
	00		 je	 $LN81@LoadString@4
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 f9 00 00
	00		 je	 $LN80@LoadString@4
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 e3 00 00
	00		 je	 $LN79@LoadString@4
  00146	32 d1		 xor	 dl, cl
  00148	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 ce 00 00
	00		 je	 $LN78@LoadString@4
  00156	32 d3		 xor	 dl, bl
  00158	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  0015b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015e	84 d2		 test	 dl, dl
  00160	0f 84 b8 00 00
	00		 je	 $LN77@LoadString@4
  00166	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00169	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 a1 00 00
	00		 je	 $LN76@LoadString@4
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	0f 84 8b 00 00
	00		 je	 $LN75@LoadString@4
  00188	32 d1		 xor	 dl, cl
  0018a	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  0018d	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00190	84 d2		 test	 dl, dl
  00192	74 7a		 je	 SHORT $LN74@LoadString@4
  00194	32 d3		 xor	 dl, bl
  00196	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00199	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0019c	84 d2		 test	 dl, dl
  0019e	74 68		 je	 SHORT $LN73@LoadString@4
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  001a7	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001aa	0f 84 dc 00 00
	00		 je	 $LN111@LoadString@4
  001b0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b3	84 d2		 test	 dl, dl
  001b5	74 49		 je	 SHORT $LN71@LoadString@4
  001b7	32 d1		 xor	 dl, cl
  001b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001bc	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bf	84 d2		 test	 dl, dl
  001c1	74 35		 je	 SHORT $LN70@LoadString@4
  001c3	32 d3		 xor	 dl, bl
  001c5	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cb	84 d2		 test	 dl, dl
  001cd	74 20		 je	 SHORT $LN69@LoadString@4
  001cf	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001d5	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d8	84 c0		 test	 al, al
  001da	74 0a		 je	 SHORT $LN68@LoadString@4
  001dc	34 ed		 xor	 al, -19			; ffffffedH
  001de	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001e1	e9 a6 00 00 00	 jmp	 $LN111@LoadString@4
$LN68@LoadString@4:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001ea	e9 9d 00 00 00	 jmp	 $LN111@LoadString@4
$LN69@LoadString@4:
  001ef	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001f3	e9 94 00 00 00	 jmp	 $LN111@LoadString@4
$LN70@LoadString@4:
  001f8	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001fb	e9 8c 00 00 00	 jmp	 $LN111@LoadString@4
$LN71@LoadString@4:
  00200	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00203	e9 84 00 00 00	 jmp	 $LN111@LoadString@4
$LN73@LoadString@4:
  00208	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0020c	eb 7e		 jmp	 SHORT $LN111@LoadString@4
$LN74@LoadString@4:
  0020e	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00211	eb 79		 jmp	 SHORT $LN111@LoadString@4
$LN75@LoadString@4:
  00213	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00216	eb 74		 jmp	 SHORT $LN111@LoadString@4
$LN76@LoadString@4:
  00218	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0021c	eb 6e		 jmp	 SHORT $LN111@LoadString@4
$LN77@LoadString@4:
  0021e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00222	eb 68		 jmp	 SHORT $LN111@LoadString@4
$LN78@LoadString@4:
  00224	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  00227	eb 63		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  00229	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  0022c	eb 5e		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  0022e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00232	eb 58		 jmp	 SHORT $LN111@LoadString@4
$LN81@LoadString@4:
  00234	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00238	eb 52		 jmp	 SHORT $LN111@LoadString@4
$LN82@LoadString@4:
  0023a	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  0023d	eb 4d		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  0023f	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  00242	eb 48		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  00244	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00248	eb 42		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  0024a	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0024e	eb 3c		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  00250	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  00253	eb 37		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  00255	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00258	eb 32		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  0025a	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0025e	eb 2c		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  00260	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00264	eb 26		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  00266	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00269	eb 21		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  0026b	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  0026e	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  00270	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00274	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  00276	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0027a	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  0027c	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00280	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  00282	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00286	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  00288	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  0028c	6a 06		 push	 6
  0028e	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00291	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  00295	5a		 pop	 edx
$LL104@LoadString@4:
  00296	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0029c	83 c0 04	 add	 eax, 4
  0029f	4a		 dec	 edx
  002a0	75 f4		 jne	 SHORT $LL104@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  002a2	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002a5	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002a8	57		 push	 edi
  002a9	56		 push	 esi
  002aa	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002ad	50		 push	 eax
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b7	5f		 pop	 edi
  002b8	5e		 pop	 esi
  002b9	33 cd		 xor	 ecx, ebp
  002bb	5b		 pop	 ebx
  002bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c1	c9		 leave
  002c2	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<25>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z ; ioINILoader::LoadFloat_e<30>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -40						; size = 30
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<30>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 dd 02 00
	00		 je	 $LN96@LoadFloat_@7
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 c6 02 00
	00		 je	 $LN95@LoadFloat_@7
  00032	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00035	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 af 02 00
	00		 je	 $LN94@LoadFloat_@7
  00043	b1 eb		 mov	 cl, -21			; ffffffebH
  00045	32 d1		 xor	 dl, cl
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 97 02 00
	00		 je	 $LN93@LoadFloat_@7
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 7f 02 00
	00		 je	 $LN92@LoadFloat_@7
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 68 02 00
	00		 je	 $LN91@LoadFloat_@7
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 52 02 00
	00		 je	 $LN90@LoadFloat_@7
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 3d 02 00
	00		 je	 $LN89@LoadFloat_@7
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 27 02 00
	00		 je	 $LN88@LoadFloat_@7
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 10 02 00
	00		 je	 $LN87@LoadFloat_@7
  000ba	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000bd	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 fa 01 00
	00		 je	 $LN86@LoadFloat_@7
  000cb	32 d1		 xor	 dl, cl
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 e5 01 00
	00		 je	 $LN85@LoadFloat_@7
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 cf 01 00
	00		 je	 $LN84@LoadFloat_@7
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 b8 01 00
	00		 je	 $LN83@LoadFloat_@7
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	0f 84 a2 01 00
	00		 je	 $LN82@LoadFloat_@7
  0010d	32 d1		 xor	 dl, cl
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 8d 01 00
	00		 je	 $LN81@LoadFloat_@7
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 77 01 00
	00		 je	 $LN80@LoadFloat_@7
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 60 01 00
	00		 je	 $LN79@LoadFloat_@7
  0013e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00141	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00147	84 d2		 test	 dl, dl
  00149	0f 84 4a 01 00
	00		 je	 $LN78@LoadFloat_@7
  0014f	32 d1		 xor	 dl, cl
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 35 01 00
	00		 je	 $LN77@LoadFloat_@7
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 1f 01 00
	00		 je	 $LN76@LoadFloat_@7
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 08 01 00
	00		 je	 $LN75@LoadFloat_@7
  00180	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00183	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00186	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00189	84 d2		 test	 dl, dl
  0018b	0f 84 f2 00 00
	00		 je	 $LN74@LoadFloat_@7
  00191	32 d1		 xor	 dl, cl
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 dd 00 00
	00		 je	 $LN73@LoadFloat_@7
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 c4 00 00
	00		 je	 $LN72@LoadFloat_@7
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 aa 00 00
	00		 je	 $LN71@LoadFloat_@7
  001c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  001c5	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c8	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001cb	84 d2		 test	 dl, dl
  001cd	0f 84 91 00 00
	00		 je	 $LN70@LoadFloat_@7
  001d3	32 d1		 xor	 dl, cl
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	74 7d		 je	 SHORT $LN69@LoadFloat_@7
  001df	32 d3		 xor	 dl, bl
  001e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e4	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001e7	84 d2		 test	 dl, dl
  001e9	74 68		 je	 SHORT $LN68@LoadFloat_@7
  001eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001ee	80 78 1d 00	 cmp	 BYTE PTR [eax+29], 0
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	0f 84 07 01 00
	00		 je	 $LN1@LoadFloat_@7
  001fb	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001fe	84 d2		 test	 dl, dl
  00200	74 49		 je	 SHORT $LN66@LoadFloat_@7
  00202	32 d1		 xor	 dl, cl
  00204	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00207	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020a	84 d2		 test	 dl, dl
  0020c	74 35		 je	 SHORT $LN65@LoadFloat_@7
  0020e	32 d3		 xor	 dl, bl
  00210	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00213	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  00216	84 d2		 test	 dl, dl
  00218	74 20		 je	 SHORT $LN64@LoadFloat_@7
  0021a	8a 40 21	 mov	 al, BYTE PTR [eax+33]
  0021d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00220	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00223	84 c0		 test	 al, al
  00225	74 0a		 je	 SHORT $LN63@LoadFloat_@7
  00227	34 ec		 xor	 al, -20			; ffffffecH
  00229	88 45 f9	 mov	 BYTE PTR __k$[ebp+33], al
  0022c	e9 d1 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN63@LoadFloat_@7:
  00231	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+33], -20 ; ffffffecH
  00235	e9 c8 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN64@LoadFloat_@7:
  0023a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  0023e	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN65@LoadFloat_@7:
  00243	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  00246	e9 b7 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN66@LoadFloat_@7:
  0024b	88 4d f6	 mov	 BYTE PTR __k$[ebp+30], cl
  0024e	e9 af 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN68@LoadFloat_@7:
  00253	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00257	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN69@LoadFloat_@7:
  0025c	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  0025f	e9 9e 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN70@LoadFloat_@7:
  00264	88 4d f2	 mov	 BYTE PTR __k$[ebp+26], cl
  00267	e9 96 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN71@LoadFloat_@7:
  0026c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  00270	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN72@LoadFloat_@7:
  00275	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00279	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@7
$LN73@LoadFloat_@7:
  0027e	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00281	eb 7f		 jmp	 SHORT $LN1@LoadFloat_@7
$LN74@LoadFloat_@7:
  00283	88 4d ee	 mov	 BYTE PTR __k$[ebp+22], cl
  00286	eb 7a		 jmp	 SHORT $LN1@LoadFloat_@7
$LN75@LoadFloat_@7:
  00288	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+21], -20 ; ffffffecH
  0028c	eb 74		 jmp	 SHORT $LN1@LoadFloat_@7
$LN76@LoadFloat_@7:
  0028e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00292	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@7
$LN77@LoadFloat_@7:
  00294	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  00297	eb 69		 jmp	 SHORT $LN1@LoadFloat_@7
$LN78@LoadFloat_@7:
  00299	88 4d ea	 mov	 BYTE PTR __k$[ebp+18], cl
  0029c	eb 64		 jmp	 SHORT $LN1@LoadFloat_@7
$LN79@LoadFloat_@7:
  0029e	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  002a2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@7
$LN80@LoadFloat_@7:
  002a4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002a8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@7
$LN81@LoadFloat_@7:
  002aa	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002ad	eb 53		 jmp	 SHORT $LN1@LoadFloat_@7
$LN82@LoadFloat_@7:
  002af	88 4d e6	 mov	 BYTE PTR __k$[ebp+14], cl
  002b2	eb 4e		 jmp	 SHORT $LN1@LoadFloat_@7
$LN83@LoadFloat_@7:
  002b4	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  002b8	eb 48		 jmp	 SHORT $LN1@LoadFloat_@7
$LN84@LoadFloat_@7:
  002ba	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002be	eb 42		 jmp	 SHORT $LN1@LoadFloat_@7
$LN85@LoadFloat_@7:
  002c0	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002c3	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@7
$LN86@LoadFloat_@7:
  002c5	88 4d e2	 mov	 BYTE PTR __k$[ebp+10], cl
  002c8	eb 38		 jmp	 SHORT $LN1@LoadFloat_@7
$LN87@LoadFloat_@7:
  002ca	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  002ce	eb 32		 jmp	 SHORT $LN1@LoadFloat_@7
$LN88@LoadFloat_@7:
  002d0	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002d4	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@7
$LN89@LoadFloat_@7:
  002d6	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002d9	eb 27		 jmp	 SHORT $LN1@LoadFloat_@7
$LN90@LoadFloat_@7:
  002db	88 4d de	 mov	 BYTE PTR __k$[ebp+6], cl
  002de	eb 22		 jmp	 SHORT $LN1@LoadFloat_@7
$LN91@LoadFloat_@7:
  002e0	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  002e4	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@7
$LN92@LoadFloat_@7:
  002e6	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002ea	eb 16		 jmp	 SHORT $LN1@LoadFloat_@7
$LN93@LoadFloat_@7:
  002ec	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002f0	eb 10		 jmp	 SHORT $LN1@LoadFloat_@7
$LN94@LoadFloat_@7:
  002f2	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002f6	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@7
$LN95@LoadFloat_@7:
  002f8	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002fc	eb 04		 jmp	 SHORT $LN1@LoadFloat_@7
$LN96@LoadFloat_@7:
  002fe	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@7:
  00302	6a 07		 push	 7
  00304	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00307	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+29], 0
  0030b	5a		 pop	 edx
$LL104@LoadFloat_@7:
  0030c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00312	83 c0 04	 add	 eax, 4
  00315	4a		 dec	 edx
  00316	75 f4		 jne	 SHORT $LL104@LoadFloat_@7

; 137  : 		return LoadFloat(_k, f);

  00318	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0031d	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00321	51		 push	 ecx
  00322	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	50		 push	 eax
  0032b	8b ce		 mov	 ecx, esi
  0032d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00333	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00336	5e		 pop	 esi
  00337	33 cd		 xor	 ecx, ebp
  00339	5b		 pop	 ebx
  0033a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0033f	c9		 leave
  00340	c2 08 00	 ret	 8
??$LoadFloat_e@$0BO@@ioINILoader@@QAEMAAY0BO@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<30>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0CE@@ioINILoader@@QAE_NAAY0CE@$$CBD_N@Z ; ioINILoader::LoadBool_e<36>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0CE@@ioINILoader@@QAE_NAAY0CE@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0CE@@ioINILoader@@QAE_NAAY0CE@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<36>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 71 03 00
	00		 je	 $LN96@LoadBool_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 5a 03 00
	00		 je	 $LN95@LoadBool_e@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 d5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 42 03 00
	00		 je	 $LN94@LoadBool_e@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 d6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 2a 03 00
	00		 je	 $LN93@LoadBool_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 d7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 13 03 00
	00		 je	 $LN92@LoadBool_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 d8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 fd 02 00
	00		 je	 $LN91@LoadBool_e@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 d9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 e8 02 00
	00		 je	 $LN90@LoadBool_e@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 da	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 d2 02 00
	00		 je	 $LN89@LoadBool_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 db	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 bb 02 00
	00		 je	 $LN88@LoadBool_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 dc	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 a5 02 00
	00		 je	 $LN87@LoadBool_e@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 dd	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 90 02 00
	00		 je	 $LN86@LoadBool_e@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 de	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 7a 02 00
	00		 je	 $LN85@LoadBool_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 df	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 63 02 00
	00		 je	 $LN84@LoadBool_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 4d 02 00
	00		 je	 $LN83@LoadBool_e@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 38 02 00
	00		 je	 $LN82@LoadBool_e@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 e2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 22 02 00
	00		 je	 $LN81@LoadBool_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 0b 02 00
	00		 je	 $LN80@LoadBool_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e4	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 f5 01 00
	00		 je	 $LN79@LoadBool_e@2
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 e5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 e0 01 00
	00		 je	 $LN78@LoadBool_e@2
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 e6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 ca 01 00
	00		 je	 $LN77@LoadBool_e@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 e7	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 b3 01 00
	00		 je	 $LN76@LoadBool_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 e8	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 9d 01 00
	00		 je	 $LN75@LoadBool_e@2
  00180	32 d3		 xor	 dl, bl
  00182	88 55 e9	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 88 01 00
	00		 je	 $LN74@LoadBool_e@2
  00190	32 d1		 xor	 dl, cl
  00192	88 55 ea	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 72 01 00
	00		 je	 $LN73@LoadBool_e@2
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 58 01 00
	00		 je	 $LN72@LoadBool_e@2
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 3f 01 00
	00		 je	 $LN71@LoadBool_e@2
  001c2	32 d3		 xor	 dl, bl
  001c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 27 01 00
	00		 je	 $LN70@LoadBool_e@2
  001d2	32 d1		 xor	 dl, cl
  001d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+26], dl
  001d7	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001da	84 d2		 test	 dl, dl
  001dc	0f 84 0e 01 00
	00		 je	 $LN69@LoadBool_e@2
  001e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	0f 84 f4 00 00
	00		 je	 $LN68@LoadBool_e@2
  001f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+28], dl
  001f9	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001fc	84 d2		 test	 dl, dl
  001fe	0f 84 db 00 00
	00		 je	 $LN67@LoadBool_e@2
  00204	32 d3		 xor	 dl, bl
  00206	88 55 f1	 mov	 BYTE PTR __k$[ebp+29], dl
  00209	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  0020c	84 d2		 test	 dl, dl
  0020e	0f 84 c3 00 00
	00		 je	 $LN66@LoadBool_e@2
  00214	32 d1		 xor	 dl, cl
  00216	88 55 f2	 mov	 BYTE PTR __k$[ebp+30], dl
  00219	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0021c	84 d2		 test	 dl, dl
  0021e	0f 84 aa 00 00
	00		 je	 $LN65@LoadBool_e@2
  00224	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00227	88 55 f3	 mov	 BYTE PTR __k$[ebp+31], dl
  0022a	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0022d	84 d2		 test	 dl, dl
  0022f	0f 84 90 00 00
	00		 je	 $LN64@LoadBool_e@2
  00235	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00238	88 55 f4	 mov	 BYTE PTR __k$[ebp+32], dl
  0023b	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  0023e	84 d2		 test	 dl, dl
  00240	74 7b		 je	 SHORT $LN63@LoadBool_e@2
  00242	32 d3		 xor	 dl, bl
  00244	88 55 f5	 mov	 BYTE PTR __k$[ebp+33], dl
  00247	8a 50 22	 mov	 dl, BYTE PTR [eax+34]
  0024a	84 d2		 test	 dl, dl
  0024c	74 67		 je	 SHORT $LN62@LoadBool_e@2
  0024e	32 d1		 xor	 dl, cl
  00250	80 78 23 00	 cmp	 BYTE PTR [eax+35], 0
  00254	88 55 f6	 mov	 BYTE PTR __k$[ebp+34], dl
  00257	0f 84 39 01 00
	00		 je	 $LN1@LoadBool_e@2
  0025d	8a 50 24	 mov	 dl, BYTE PTR [eax+36]
  00260	84 d2		 test	 dl, dl
  00262	74 48		 je	 SHORT $LN60@LoadBool_e@2
  00264	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00267	88 55 f8	 mov	 BYTE PTR __k$[ebp+36], dl
  0026a	8a 50 25	 mov	 dl, BYTE PTR [eax+37]
  0026d	84 d2		 test	 dl, dl
  0026f	74 33		 je	 SHORT $LN59@LoadBool_e@2
  00271	32 d3		 xor	 dl, bl
  00273	88 55 f9	 mov	 BYTE PTR __k$[ebp+37], dl
  00276	8a 50 26	 mov	 dl, BYTE PTR [eax+38]
  00279	84 d2		 test	 dl, dl
  0027b	74 1f		 je	 SHORT $LN58@LoadBool_e@2
  0027d	8a 40 27	 mov	 al, BYTE PTR [eax+39]
  00280	32 d1		 xor	 dl, cl
  00282	88 55 fa	 mov	 BYTE PTR __k$[ebp+38], dl
  00285	84 c0		 test	 al, al
  00287	74 0a		 je	 SHORT $LN57@LoadBool_e@2
  00289	34 ea		 xor	 al, -22			; ffffffeaH
  0028b	88 45 fb	 mov	 BYTE PTR __k$[ebp+39], al
  0028e	e9 03 01 00 00	 jmp	 $LN1@LoadBool_e@2
$LN57@LoadBool_e@2:
  00293	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+39], -22 ; ffffffeaH
  00297	e9 fa 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN58@LoadBool_e@2:
  0029c	88 4d fa	 mov	 BYTE PTR __k$[ebp+38], cl
  0029f	e9 f2 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN59@LoadBool_e@2:
  002a4	88 5d f9	 mov	 BYTE PTR __k$[ebp+37], bl
  002a7	e9 ea 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN60@LoadBool_e@2:
  002ac	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+36], -19 ; ffffffedH
  002b0	e9 e1 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN62@LoadBool_e@2:
  002b5	88 4d f6	 mov	 BYTE PTR __k$[ebp+34], cl
  002b8	e9 d9 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN63@LoadBool_e@2:
  002bd	88 5d f5	 mov	 BYTE PTR __k$[ebp+33], bl
  002c0	e9 d1 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN64@LoadBool_e@2:
  002c5	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  002c9	e9 c8 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN65@LoadBool_e@2:
  002ce	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  002d2	e9 bf 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN66@LoadBool_e@2:
  002d7	88 4d f2	 mov	 BYTE PTR __k$[ebp+30], cl
  002da	e9 b7 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN67@LoadBool_e@2:
  002df	88 5d f1	 mov	 BYTE PTR __k$[ebp+29], bl
  002e2	e9 af 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN68@LoadBool_e@2:
  002e7	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  002eb	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN69@LoadBool_e@2:
  002f0	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  002f4	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN70@LoadBool_e@2:
  002f9	88 4d ee	 mov	 BYTE PTR __k$[ebp+26], cl
  002fc	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN71@LoadBool_e@2:
  00301	88 5d ed	 mov	 BYTE PTR __k$[ebp+25], bl
  00304	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN72@LoadBool_e@2:
  00309	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0030d	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@2
$LN73@LoadBool_e@2:
  00312	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00316	eb 7e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN74@LoadBool_e@2:
  00318	88 4d ea	 mov	 BYTE PTR __k$[ebp+22], cl
  0031b	eb 79		 jmp	 SHORT $LN1@LoadBool_e@2
$LN75@LoadBool_e@2:
  0031d	88 5d e9	 mov	 BYTE PTR __k$[ebp+21], bl
  00320	eb 74		 jmp	 SHORT $LN1@LoadBool_e@2
$LN76@LoadBool_e@2:
  00322	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00326	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN77@LoadBool_e@2:
  00328	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0032c	eb 68		 jmp	 SHORT $LN1@LoadBool_e@2
$LN78@LoadBool_e@2:
  0032e	88 4d e6	 mov	 BYTE PTR __k$[ebp+18], cl
  00331	eb 63		 jmp	 SHORT $LN1@LoadBool_e@2
$LN79@LoadBool_e@2:
  00333	88 5d e5	 mov	 BYTE PTR __k$[ebp+17], bl
  00336	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@2
$LN80@LoadBool_e@2:
  00338	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0033c	eb 58		 jmp	 SHORT $LN1@LoadBool_e@2
$LN81@LoadBool_e@2:
  0033e	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00342	eb 52		 jmp	 SHORT $LN1@LoadBool_e@2
$LN82@LoadBool_e@2:
  00344	88 4d e2	 mov	 BYTE PTR __k$[ebp+14], cl
  00347	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@2
$LN83@LoadBool_e@2:
  00349	88 5d e1	 mov	 BYTE PTR __k$[ebp+13], bl
  0034c	eb 48		 jmp	 SHORT $LN1@LoadBool_e@2
$LN84@LoadBool_e@2:
  0034e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00352	eb 42		 jmp	 SHORT $LN1@LoadBool_e@2
$LN85@LoadBool_e@2:
  00354	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00358	eb 3c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN86@LoadBool_e@2:
  0035a	88 4d de	 mov	 BYTE PTR __k$[ebp+10], cl
  0035d	eb 37		 jmp	 SHORT $LN1@LoadBool_e@2
$LN87@LoadBool_e@2:
  0035f	88 5d dd	 mov	 BYTE PTR __k$[ebp+9], bl
  00362	eb 32		 jmp	 SHORT $LN1@LoadBool_e@2
$LN88@LoadBool_e@2:
  00364	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00368	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN89@LoadBool_e@2:
  0036a	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0036e	eb 26		 jmp	 SHORT $LN1@LoadBool_e@2
$LN90@LoadBool_e@2:
  00370	88 4d da	 mov	 BYTE PTR __k$[ebp+6], cl
  00373	eb 21		 jmp	 SHORT $LN1@LoadBool_e@2
$LN91@LoadBool_e@2:
  00375	88 5d d9	 mov	 BYTE PTR __k$[ebp+5], bl
  00378	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@2
$LN92@LoadBool_e@2:
  0037a	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0037e	eb 16		 jmp	 SHORT $LN1@LoadBool_e@2
$LN93@LoadBool_e@2:
  00380	c6 45 d7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00384	eb 10		 jmp	 SHORT $LN1@LoadBool_e@2
$LN94@LoadBool_e@2:
  00386	c6 45 d6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0038a	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@2
$LN95@LoadBool_e@2:
  0038c	c6 45 d5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00390	eb 04		 jmp	 SHORT $LN1@LoadBool_e@2
$LN96@LoadBool_e@2:
  00392	c6 45 d4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@2:
  00396	6a 08		 push	 8
  00398	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  0039b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+35], 0
  0039f	5a		 pop	 edx
$LL104@LoadBool_e@2:
  003a0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003a6	83 c0 04	 add	 eax, 4
  003a9	4a		 dec	 edx
  003aa	75 f4		 jne	 SHORT $LL104@LoadBool_e@2
  003ac	6a 20		 push	 32			; 00000020H
  003ae	58		 pop	 eax
$LL101@LoadBool_e@2:
  003af	8b c8		 mov	 ecx, eax
  003b1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003b7	79 05		 jns	 SHORT $LN111@LoadBool_e@2
  003b9	49		 dec	 ecx
  003ba	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003bd	41		 inc	 ecx
$LN111@LoadBool_e@2:
  003be	b2 ed		 mov	 dl, -19			; ffffffedH
  003c0	2a d1		 sub	 dl, cl
  003c2	30 54 05 d4	 xor	 BYTE PTR __k$[ebp+eax], dl
  003c6	40		 inc	 eax
  003c7	83 f8 23	 cmp	 eax, 35			; 00000023H
  003ca	7c e3		 jl	 SHORT $LL101@LoadBool_e@2

; 103  : 		return LoadBool(_k, b);

  003cc	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  003cf	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  003d2	50		 push	 eax
  003d3	8b ce		 mov	 ecx, esi
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  003db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003de	5e		 pop	 esi
  003df	33 cd		 xor	 ecx, ebp
  003e1	5b		 pop	 ebx
  003e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e7	c9		 leave
  003e8	c2 08 00	 ret	 8
??$LoadBool_e@$0CE@@ioINILoader@@QAE_NAAY0CE@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<36>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0CA@@ioINILoader@@QAEHAAY0CA@$$CBDH@Z ; ioINILoader::LoadInt_e<32>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0CA@@ioINILoader@@QAEHAAY0CA@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0CA@@ioINILoader@@QAEHAAY0CA@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<32>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 0d 03 00
	00		 je	 $LN96@LoadInt_e@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 f6 02 00
	00		 je	 $LN95@LoadInt_e@2
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 de 02 00
	00		 je	 $LN94@LoadInt_e@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 c6 02 00
	00		 je	 $LN93@LoadInt_e@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 af 02 00
	00		 je	 $LN92@LoadInt_e@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 99 02 00
	00		 je	 $LN91@LoadInt_e@2
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 84 02 00
	00		 je	 $LN90@LoadInt_e@2
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 6e 02 00
	00		 je	 $LN89@LoadInt_e@2
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 57 02 00
	00		 je	 $LN88@LoadInt_e@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 41 02 00
	00		 je	 $LN87@LoadInt_e@2
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 2c 02 00
	00		 je	 $LN86@LoadInt_e@2
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 16 02 00
	00		 je	 $LN85@LoadInt_e@2
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 ff 01 00
	00		 je	 $LN84@LoadInt_e@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 e9 01 00
	00		 je	 $LN83@LoadInt_e@2
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 d4 01 00
	00		 je	 $LN82@LoadInt_e@2
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 be 01 00
	00		 je	 $LN81@LoadInt_e@2
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 a7 01 00
	00		 je	 $LN80@LoadInt_e@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 91 01 00
	00		 je	 $LN79@LoadInt_e@2
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 7c 01 00
	00		 je	 $LN78@LoadInt_e@2
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 66 01 00
	00		 je	 $LN77@LoadInt_e@2
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 4f 01 00
	00		 je	 $LN76@LoadInt_e@2
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 39 01 00
	00		 je	 $LN75@LoadInt_e@2
  00180	32 d3		 xor	 dl, bl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 24 01 00
	00		 je	 $LN74@LoadInt_e@2
  00190	32 d1		 xor	 dl, cl
  00192	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 0e 01 00
	00		 je	 $LN73@LoadInt_e@2
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 f4 00 00
	00		 je	 $LN72@LoadInt_e@2
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 db 00 00
	00		 je	 $LN71@LoadInt_e@2
  001c2	32 d3		 xor	 dl, bl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 c3 00 00
	00		 je	 $LN70@LoadInt_e@2
  001d2	32 d1		 xor	 dl, cl
  001d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d7	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001da	84 d2		 test	 dl, dl
  001dc	0f 84 aa 00 00
	00		 je	 $LN69@LoadInt_e@2
  001e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	0f 84 90 00 00
	00		 je	 $LN68@LoadInt_e@2
  001f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f6	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f9	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001fc	84 d2		 test	 dl, dl
  001fe	74 7b		 je	 SHORT $LN67@LoadInt_e@2
  00200	32 d3		 xor	 dl, bl
  00202	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  00205	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  00208	84 d2		 test	 dl, dl
  0020a	74 67		 je	 SHORT $LN66@LoadInt_e@2
  0020c	32 d1		 xor	 dl, cl
  0020e	80 78 1f 00	 cmp	 BYTE PTR [eax+31], 0
  00212	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00215	0f 84 17 01 00
	00		 je	 $LN1@LoadInt_e@2
  0021b	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0021e	84 d2		 test	 dl, dl
  00220	74 48		 je	 SHORT $LN64@LoadInt_e@2
  00222	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00225	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00228	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  0022b	84 d2		 test	 dl, dl
  0022d	74 33		 je	 SHORT $LN63@LoadInt_e@2
  0022f	32 d3		 xor	 dl, bl
  00231	88 55 f9	 mov	 BYTE PTR __k$[ebp+33], dl
  00234	8a 50 22	 mov	 dl, BYTE PTR [eax+34]
  00237	84 d2		 test	 dl, dl
  00239	74 1f		 je	 SHORT $LN62@LoadInt_e@2
  0023b	8a 40 23	 mov	 al, BYTE PTR [eax+35]
  0023e	32 d1		 xor	 dl, cl
  00240	88 55 fa	 mov	 BYTE PTR __k$[ebp+34], dl
  00243	84 c0		 test	 al, al
  00245	74 0a		 je	 SHORT $LN61@LoadInt_e@2
  00247	34 ea		 xor	 al, -22			; ffffffeaH
  00249	88 45 fb	 mov	 BYTE PTR __k$[ebp+35], al
  0024c	e9 e1 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN61@LoadInt_e@2:
  00251	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+35], -22 ; ffffffeaH
  00255	e9 d8 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN62@LoadInt_e@2:
  0025a	88 4d fa	 mov	 BYTE PTR __k$[ebp+34], cl
  0025d	e9 d0 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN63@LoadInt_e@2:
  00262	88 5d f9	 mov	 BYTE PTR __k$[ebp+33], bl
  00265	e9 c8 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN64@LoadInt_e@2:
  0026a	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  0026e	e9 bf 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN66@LoadInt_e@2:
  00273	88 4d f6	 mov	 BYTE PTR __k$[ebp+30], cl
  00276	e9 b7 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN67@LoadInt_e@2:
  0027b	88 5d f5	 mov	 BYTE PTR __k$[ebp+29], bl
  0027e	e9 af 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN68@LoadInt_e@2:
  00283	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00287	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN69@LoadInt_e@2:
  0028c	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  00290	e9 9d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN70@LoadInt_e@2:
  00295	88 4d f2	 mov	 BYTE PTR __k$[ebp+26], cl
  00298	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN71@LoadInt_e@2:
  0029d	88 5d f1	 mov	 BYTE PTR __k$[ebp+25], bl
  002a0	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN72@LoadInt_e@2:
  002a5	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002a9	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@2
$LN73@LoadInt_e@2:
  002ae	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  002b2	eb 7e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN74@LoadInt_e@2:
  002b4	88 4d ee	 mov	 BYTE PTR __k$[ebp+22], cl
  002b7	eb 79		 jmp	 SHORT $LN1@LoadInt_e@2
$LN75@LoadInt_e@2:
  002b9	88 5d ed	 mov	 BYTE PTR __k$[ebp+21], bl
  002bc	eb 74		 jmp	 SHORT $LN1@LoadInt_e@2
$LN76@LoadInt_e@2:
  002be	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002c2	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN77@LoadInt_e@2:
  002c4	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  002c8	eb 68		 jmp	 SHORT $LN1@LoadInt_e@2
$LN78@LoadInt_e@2:
  002ca	88 4d ea	 mov	 BYTE PTR __k$[ebp+18], cl
  002cd	eb 63		 jmp	 SHORT $LN1@LoadInt_e@2
$LN79@LoadInt_e@2:
  002cf	88 5d e9	 mov	 BYTE PTR __k$[ebp+17], bl
  002d2	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@2
$LN80@LoadInt_e@2:
  002d4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002d8	eb 58		 jmp	 SHORT $LN1@LoadInt_e@2
$LN81@LoadInt_e@2:
  002da	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  002de	eb 52		 jmp	 SHORT $LN1@LoadInt_e@2
$LN82@LoadInt_e@2:
  002e0	88 4d e6	 mov	 BYTE PTR __k$[ebp+14], cl
  002e3	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@2
$LN83@LoadInt_e@2:
  002e5	88 5d e5	 mov	 BYTE PTR __k$[ebp+13], bl
  002e8	eb 48		 jmp	 SHORT $LN1@LoadInt_e@2
$LN84@LoadInt_e@2:
  002ea	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002ee	eb 42		 jmp	 SHORT $LN1@LoadInt_e@2
$LN85@LoadInt_e@2:
  002f0	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  002f4	eb 3c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN86@LoadInt_e@2:
  002f6	88 4d e2	 mov	 BYTE PTR __k$[ebp+10], cl
  002f9	eb 37		 jmp	 SHORT $LN1@LoadInt_e@2
$LN87@LoadInt_e@2:
  002fb	88 5d e1	 mov	 BYTE PTR __k$[ebp+9], bl
  002fe	eb 32		 jmp	 SHORT $LN1@LoadInt_e@2
$LN88@LoadInt_e@2:
  00300	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00304	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN89@LoadInt_e@2:
  00306	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0030a	eb 26		 jmp	 SHORT $LN1@LoadInt_e@2
$LN90@LoadInt_e@2:
  0030c	88 4d de	 mov	 BYTE PTR __k$[ebp+6], cl
  0030f	eb 21		 jmp	 SHORT $LN1@LoadInt_e@2
$LN91@LoadInt_e@2:
  00311	88 5d dd	 mov	 BYTE PTR __k$[ebp+5], bl
  00314	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@2
$LN92@LoadInt_e@2:
  00316	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0031a	eb 16		 jmp	 SHORT $LN1@LoadInt_e@2
$LN93@LoadInt_e@2:
  0031c	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00320	eb 10		 jmp	 SHORT $LN1@LoadInt_e@2
$LN94@LoadInt_e@2:
  00322	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00326	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@2
$LN95@LoadInt_e@2:
  00328	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0032c	eb 04		 jmp	 SHORT $LN1@LoadInt_e@2
$LN96@LoadInt_e@2:
  0032e	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@2:
  00332	6a 07		 push	 7
  00334	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00337	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+31], 0
  0033b	5a		 pop	 edx
$LL104@LoadInt_e@2:
  0033c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00342	83 c0 04	 add	 eax, 4
  00345	4a		 dec	 edx
  00346	75 f4		 jne	 SHORT $LL104@LoadInt_e@2
  00348	6a 1c		 push	 28			; 0000001cH
  0034a	58		 pop	 eax
$LL101@LoadInt_e@2:
  0034b	8b c8		 mov	 ecx, eax
  0034d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00353	79 05		 jns	 SHORT $LN111@LoadInt_e@2
  00355	49		 dec	 ecx
  00356	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00359	41		 inc	 ecx
$LN111@LoadInt_e@2:
  0035a	b2 ed		 mov	 dl, -19			; ffffffedH
  0035c	2a d1		 sub	 dl, cl
  0035e	30 54 05 d8	 xor	 BYTE PTR __k$[ebp+eax], dl
  00362	40		 inc	 eax
  00363	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00366	7c e3		 jl	 SHORT $LL101@LoadInt_e@2

; 120  : 		return LoadInt(_k, i);

  00368	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  0036b	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  0036e	50		 push	 eax
  0036f	8b ce		 mov	 ecx, esi
  00371	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  00377	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0037a	5e		 pop	 esi
  0037b	33 cd		 xor	 ecx, ebp
  0037d	5b		 pop	 ebx
  0037e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00383	c9		 leave
  00384	c2 08 00	 ret	 8
??$LoadInt_e@$0CA@@ioINILoader@@QAEHAAY0CA@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<32>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0CB@@ioINILoader@@QAEMAAY0CB@$$CBDM@Z ; ioINILoader::LoadFloat_e<33>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0CB@@ioINILoader@@QAEMAAY0CB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -44						; size = 33
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0CB@@ioINILoader@@QAEMAAY0CB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<33>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 27 03 00
	00		 je	 $LN96@LoadFloat_@8
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d4	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 10 03 00
	00		 je	 $LN95@LoadFloat_@8
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d5	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 f8 02 00
	00		 je	 $LN94@LoadFloat_@8
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 d6	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 e0 02 00
	00		 je	 $LN93@LoadFloat_@8
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 d7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 c9 02 00
	00		 je	 $LN92@LoadFloat_@8
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 d8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b3 02 00
	00		 je	 $LN91@LoadFloat_@8
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 d9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 9e 02 00
	00		 je	 $LN90@LoadFloat_@8
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 da	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 88 02 00
	00		 je	 $LN89@LoadFloat_@8
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 db	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 71 02 00
	00		 je	 $LN88@LoadFloat_@8
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 dc	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 5b 02 00
	00		 je	 $LN87@LoadFloat_@8
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 dd	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 46 02 00
	00		 je	 $LN86@LoadFloat_@8
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 de	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 30 02 00
	00		 je	 $LN85@LoadFloat_@8
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 df	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 19 02 00
	00		 je	 $LN84@LoadFloat_@8
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 03 02 00
	00		 je	 $LN83@LoadFloat_@8
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 ee 01 00
	00		 je	 $LN82@LoadFloat_@8
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 e2	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 d8 01 00
	00		 je	 $LN81@LoadFloat_@8
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e3	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c1 01 00
	00		 je	 $LN80@LoadFloat_@8
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e4	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 ab 01 00
	00		 je	 $LN79@LoadFloat_@8
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 96 01 00
	00		 je	 $LN78@LoadFloat_@8
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 e6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 80 01 00
	00		 je	 $LN77@LoadFloat_@8
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 e7	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 69 01 00
	00		 je	 $LN76@LoadFloat_@8
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 e8	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 53 01 00
	00		 je	 $LN75@LoadFloat_@8
  00180	32 d1		 xor	 dl, cl
  00182	88 55 e9	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 3e 01 00
	00		 je	 $LN74@LoadFloat_@8
  00190	32 d3		 xor	 dl, bl
  00192	88 55 ea	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 28 01 00
	00		 je	 $LN73@LoadFloat_@8
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 0e 01 00
	00		 je	 $LN72@LoadFloat_@8
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 f5 00 00
	00		 je	 $LN71@LoadFloat_@8
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 dd 00 00
	00		 je	 $LN70@LoadFloat_@8
  001d2	32 d3		 xor	 dl, bl
  001d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+26], dl
  001d7	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001da	84 d2		 test	 dl, dl
  001dc	0f 84 c4 00 00
	00		 je	 $LN69@LoadFloat_@8
  001e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	0f 84 aa 00 00
	00		 je	 $LN68@LoadFloat_@8
  001f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+28], dl
  001f9	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001fc	84 d2		 test	 dl, dl
  001fe	0f 84 91 00 00
	00		 je	 $LN67@LoadFloat_@8
  00204	32 d1		 xor	 dl, cl
  00206	88 55 f1	 mov	 BYTE PTR __k$[ebp+29], dl
  00209	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  0020c	84 d2		 test	 dl, dl
  0020e	74 7d		 je	 SHORT $LN66@LoadFloat_@8
  00210	32 d3		 xor	 dl, bl
  00212	88 55 f2	 mov	 BYTE PTR __k$[ebp+30], dl
  00215	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  00218	84 d2		 test	 dl, dl
  0021a	74 68		 je	 SHORT $LN65@LoadFloat_@8
  0021c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0021f	80 78 20 00	 cmp	 BYTE PTR [eax+32], 0
  00223	88 55 f3	 mov	 BYTE PTR __k$[ebp+31], dl
  00226	0f 84 20 01 00
	00		 je	 $LN1@LoadFloat_@8
  0022c	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  0022f	84 d2		 test	 dl, dl
  00231	74 49		 je	 SHORT $LN63@LoadFloat_@8
  00233	32 d1		 xor	 dl, cl
  00235	88 55 f5	 mov	 BYTE PTR __k$[ebp+33], dl
  00238	8a 50 22	 mov	 dl, BYTE PTR [eax+34]
  0023b	84 d2		 test	 dl, dl
  0023d	74 35		 je	 SHORT $LN62@LoadFloat_@8
  0023f	32 d3		 xor	 dl, bl
  00241	88 55 f6	 mov	 BYTE PTR __k$[ebp+34], dl
  00244	8a 50 23	 mov	 dl, BYTE PTR [eax+35]
  00247	84 d2		 test	 dl, dl
  00249	74 20		 je	 SHORT $LN61@LoadFloat_@8
  0024b	8a 40 24	 mov	 al, BYTE PTR [eax+36]
  0024e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00251	88 55 f7	 mov	 BYTE PTR __k$[ebp+35], dl
  00254	84 c0		 test	 al, al
  00256	74 0a		 je	 SHORT $LN60@LoadFloat_@8
  00258	34 ed		 xor	 al, -19			; ffffffedH
  0025a	88 45 f8	 mov	 BYTE PTR __k$[ebp+36], al
  0025d	e9 ea 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN60@LoadFloat_@8:
  00262	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+36], -19 ; ffffffedH
  00266	e9 e1 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN61@LoadFloat_@8:
  0026b	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+35], -22 ; ffffffeaH
  0026f	e9 d8 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN62@LoadFloat_@8:
  00274	88 5d f6	 mov	 BYTE PTR __k$[ebp+34], bl
  00277	e9 d0 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN63@LoadFloat_@8:
  0027c	88 4d f5	 mov	 BYTE PTR __k$[ebp+33], cl
  0027f	e9 c8 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN65@LoadFloat_@8:
  00284	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  00288	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN66@LoadFloat_@8:
  0028d	88 5d f2	 mov	 BYTE PTR __k$[ebp+30], bl
  00290	e9 b7 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN67@LoadFloat_@8:
  00295	88 4d f1	 mov	 BYTE PTR __k$[ebp+29], cl
  00298	e9 af 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN68@LoadFloat_@8:
  0029d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  002a1	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN69@LoadFloat_@8:
  002a6	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  002aa	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN70@LoadFloat_@8:
  002af	88 5d ee	 mov	 BYTE PTR __k$[ebp+26], bl
  002b2	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN71@LoadFloat_@8:
  002b7	88 4d ed	 mov	 BYTE PTR __k$[ebp+25], cl
  002ba	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN72@LoadFloat_@8:
  002bf	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  002c3	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@8
$LN73@LoadFloat_@8:
  002c8	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  002cc	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@8
$LN74@LoadFloat_@8:
  002ce	88 5d ea	 mov	 BYTE PTR __k$[ebp+22], bl
  002d1	eb 79		 jmp	 SHORT $LN1@LoadFloat_@8
$LN75@LoadFloat_@8:
  002d3	88 4d e9	 mov	 BYTE PTR __k$[ebp+21], cl
  002d6	eb 74		 jmp	 SHORT $LN1@LoadFloat_@8
$LN76@LoadFloat_@8:
  002d8	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002dc	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@8
$LN77@LoadFloat_@8:
  002de	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  002e2	eb 68		 jmp	 SHORT $LN1@LoadFloat_@8
$LN78@LoadFloat_@8:
  002e4	88 5d e6	 mov	 BYTE PTR __k$[ebp+18], bl
  002e7	eb 63		 jmp	 SHORT $LN1@LoadFloat_@8
$LN79@LoadFloat_@8:
  002e9	88 4d e5	 mov	 BYTE PTR __k$[ebp+17], cl
  002ec	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@8
$LN80@LoadFloat_@8:
  002ee	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002f2	eb 58		 jmp	 SHORT $LN1@LoadFloat_@8
$LN81@LoadFloat_@8:
  002f4	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  002f8	eb 52		 jmp	 SHORT $LN1@LoadFloat_@8
$LN82@LoadFloat_@8:
  002fa	88 5d e2	 mov	 BYTE PTR __k$[ebp+14], bl
  002fd	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@8
$LN83@LoadFloat_@8:
  002ff	88 4d e1	 mov	 BYTE PTR __k$[ebp+13], cl
  00302	eb 48		 jmp	 SHORT $LN1@LoadFloat_@8
$LN84@LoadFloat_@8:
  00304	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00308	eb 42		 jmp	 SHORT $LN1@LoadFloat_@8
$LN85@LoadFloat_@8:
  0030a	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0030e	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@8
$LN86@LoadFloat_@8:
  00310	88 5d de	 mov	 BYTE PTR __k$[ebp+10], bl
  00313	eb 37		 jmp	 SHORT $LN1@LoadFloat_@8
$LN87@LoadFloat_@8:
  00315	88 4d dd	 mov	 BYTE PTR __k$[ebp+9], cl
  00318	eb 32		 jmp	 SHORT $LN1@LoadFloat_@8
$LN88@LoadFloat_@8:
  0031a	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0031e	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@8
$LN89@LoadFloat_@8:
  00320	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00324	eb 26		 jmp	 SHORT $LN1@LoadFloat_@8
$LN90@LoadFloat_@8:
  00326	88 5d da	 mov	 BYTE PTR __k$[ebp+6], bl
  00329	eb 21		 jmp	 SHORT $LN1@LoadFloat_@8
$LN91@LoadFloat_@8:
  0032b	88 4d d9	 mov	 BYTE PTR __k$[ebp+5], cl
  0032e	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@8
$LN92@LoadFloat_@8:
  00330	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00334	eb 16		 jmp	 SHORT $LN1@LoadFloat_@8
$LN93@LoadFloat_@8:
  00336	c6 45 d7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0033a	eb 10		 jmp	 SHORT $LN1@LoadFloat_@8
$LN94@LoadFloat_@8:
  0033c	c6 45 d6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00340	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@8
$LN95@LoadFloat_@8:
  00342	c6 45 d5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00346	eb 04		 jmp	 SHORT $LN1@LoadFloat_@8
$LN96@LoadFloat_@8:
  00348	c6 45 d4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@8:
  0034c	6a 08		 push	 8
  0034e	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  00351	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+32], 0
  00355	5a		 pop	 edx
$LL104@LoadFloat_@8:
  00356	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0035c	83 c0 04	 add	 eax, 4
  0035f	4a		 dec	 edx
  00360	75 f4		 jne	 SHORT $LL104@LoadFloat_@8

; 137  : 		return LoadFloat(_k, f);

  00362	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00367	51		 push	 ecx
  00368	8d 45 d4	 lea	 eax, DWORD PTR __k$[ebp]
  0036b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00370	50		 push	 eax
  00371	8b ce		 mov	 ecx, esi
  00373	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00379	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0037c	5e		 pop	 esi
  0037d	33 cd		 xor	 ecx, ebp
  0037f	5b		 pop	 ebx
  00380	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00385	c9		 leave
  00386	c2 08 00	 ret	 8
??$LoadFloat_e@$0CB@@ioINILoader@@QAEMAAY0CB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<33>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z ; ioINILoader::LoadInt_e<31>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -40						; size = 31
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<31>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f5 02 00
	00		 je	 $LN96@LoadInt_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 de 02 00
	00		 je	 $LN95@LoadInt_e@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c6 02 00
	00		 je	 $LN94@LoadInt_e@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 af 02 00
	00		 je	 $LN93@LoadInt_e@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 97 02 00
	00		 je	 $LN92@LoadInt_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 81 02 00
	00		 je	 $LN91@LoadInt_e@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6b 02 00
	00		 je	 $LN90@LoadInt_e@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 55 02 00
	00		 je	 $LN89@LoadInt_e@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 3f 02 00
	00		 je	 $LN88@LoadInt_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 29 02 00
	00		 je	 $LN87@LoadInt_e@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 13 02 00
	00		 je	 $LN86@LoadInt_e@3
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 fd 01 00
	00		 je	 $LN85@LoadInt_e@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e7 01 00
	00		 je	 $LN84@LoadInt_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d1 01 00
	00		 je	 $LN83@LoadInt_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 bb 01 00
	00		 je	 $LN82@LoadInt_e@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 a5 01 00
	00		 je	 $LN81@LoadInt_e@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 8f 01 00
	00		 je	 $LN80@LoadInt_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 79 01 00
	00		 je	 $LN79@LoadInt_e@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 63 01 00
	00		 je	 $LN78@LoadInt_e@3
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 4d 01 00
	00		 je	 $LN77@LoadInt_e@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 37 01 00
	00		 je	 $LN76@LoadInt_e@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 21 01 00
	00		 je	 $LN75@LoadInt_e@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 0b 01 00
	00		 je	 $LN74@LoadInt_e@3
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 f5 00 00
	00		 je	 $LN73@LoadInt_e@3
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 dc 00 00
	00		 je	 $LN72@LoadInt_e@3
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 c3 00 00
	00		 je	 $LN71@LoadInt_e@3
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	0f 84 aa 00 00
	00		 je	 $LN70@LoadInt_e@3
  001d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  001d5	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001db	84 d2		 test	 dl, dl
  001dd	0f 84 91 00 00
	00		 je	 $LN69@LoadInt_e@3
  001e3	32 d3		 xor	 dl, bl
  001e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e8	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001eb	84 d2		 test	 dl, dl
  001ed	74 7c		 je	 SHORT $LN68@LoadInt_e@3
  001ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+28], dl
  001f5	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001f8	84 d2		 test	 dl, dl
  001fa	74 67		 je	 SHORT $LN67@LoadInt_e@3
  001fc	32 d1		 xor	 dl, cl
  001fe	80 78 1e 00	 cmp	 BYTE PTR [eax+30], 0
  00202	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  00205	0f 84 0f 01 00
	00		 je	 $LN1@LoadInt_e@3
  0020b	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  0020e	84 d2		 test	 dl, dl
  00210	74 49		 je	 SHORT $LN65@LoadInt_e@3
  00212	32 d3		 xor	 dl, bl
  00214	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00217	8a 50 20	 mov	 dl, BYTE PTR [eax+32]
  0021a	84 d2		 test	 dl, dl
  0021c	74 34		 je	 SHORT $LN64@LoadInt_e@3
  0021e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00221	88 55 f8	 mov	 BYTE PTR __k$[ebp+32], dl
  00224	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00227	84 d2		 test	 dl, dl
  00229	74 1f		 je	 SHORT $LN63@LoadInt_e@3
  0022b	8a 40 22	 mov	 al, BYTE PTR [eax+34]
  0022e	32 d1		 xor	 dl, cl
  00230	88 55 f9	 mov	 BYTE PTR __k$[ebp+33], dl
  00233	84 c0		 test	 al, al
  00235	74 0a		 je	 SHORT $LN62@LoadInt_e@3
  00237	34 eb		 xor	 al, -21			; ffffffebH
  00239	88 45 fa	 mov	 BYTE PTR __k$[ebp+34], al
  0023c	e9 d9 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN62@LoadInt_e@3:
  00241	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+34], -21 ; ffffffebH
  00245	e9 d0 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN63@LoadInt_e@3:
  0024a	88 4d f9	 mov	 BYTE PTR __k$[ebp+33], cl
  0024d	e9 c8 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN64@LoadInt_e@3:
  00252	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  00256	e9 bf 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN65@LoadInt_e@3:
  0025b	88 5d f7	 mov	 BYTE PTR __k$[ebp+31], bl
  0025e	e9 b7 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN67@LoadInt_e@3:
  00263	88 4d f5	 mov	 BYTE PTR __k$[ebp+29], cl
  00266	e9 af 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN68@LoadInt_e@3:
  0026b	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0026f	e9 a6 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN69@LoadInt_e@3:
  00274	88 5d f3	 mov	 BYTE PTR __k$[ebp+27], bl
  00277	e9 9e 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN70@LoadInt_e@3:
  0027c	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  00280	e9 95 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN71@LoadInt_e@3:
  00285	88 4d f1	 mov	 BYTE PTR __k$[ebp+25], cl
  00288	e9 8d 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN72@LoadInt_e@3:
  0028d	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00291	e9 84 00 00 00	 jmp	 $LN1@LoadInt_e@3
$LN73@LoadInt_e@3:
  00296	88 5d ef	 mov	 BYTE PTR __k$[ebp+23], bl
  00299	eb 7f		 jmp	 SHORT $LN1@LoadInt_e@3
$LN74@LoadInt_e@3:
  0029b	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0029f	eb 79		 jmp	 SHORT $LN1@LoadInt_e@3
$LN75@LoadInt_e@3:
  002a1	88 4d ed	 mov	 BYTE PTR __k$[ebp+21], cl
  002a4	eb 74		 jmp	 SHORT $LN1@LoadInt_e@3
$LN76@LoadInt_e@3:
  002a6	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  002aa	eb 6e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN77@LoadInt_e@3:
  002ac	88 5d eb	 mov	 BYTE PTR __k$[ebp+19], bl
  002af	eb 69		 jmp	 SHORT $LN1@LoadInt_e@3
$LN78@LoadInt_e@3:
  002b1	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  002b5	eb 63		 jmp	 SHORT $LN1@LoadInt_e@3
$LN79@LoadInt_e@3:
  002b7	88 4d e9	 mov	 BYTE PTR __k$[ebp+17], cl
  002ba	eb 5e		 jmp	 SHORT $LN1@LoadInt_e@3
$LN80@LoadInt_e@3:
  002bc	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  002c0	eb 58		 jmp	 SHORT $LN1@LoadInt_e@3
$LN81@LoadInt_e@3:
  002c2	88 5d e7	 mov	 BYTE PTR __k$[ebp+15], bl
  002c5	eb 53		 jmp	 SHORT $LN1@LoadInt_e@3
$LN82@LoadInt_e@3:
  002c7	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  002cb	eb 4d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN83@LoadInt_e@3:
  002cd	88 4d e5	 mov	 BYTE PTR __k$[ebp+13], cl
  002d0	eb 48		 jmp	 SHORT $LN1@LoadInt_e@3
$LN84@LoadInt_e@3:
  002d2	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002d6	eb 42		 jmp	 SHORT $LN1@LoadInt_e@3
$LN85@LoadInt_e@3:
  002d8	88 5d e3	 mov	 BYTE PTR __k$[ebp+11], bl
  002db	eb 3d		 jmp	 SHORT $LN1@LoadInt_e@3
$LN86@LoadInt_e@3:
  002dd	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  002e1	eb 37		 jmp	 SHORT $LN1@LoadInt_e@3
$LN87@LoadInt_e@3:
  002e3	88 4d e1	 mov	 BYTE PTR __k$[ebp+9], cl
  002e6	eb 32		 jmp	 SHORT $LN1@LoadInt_e@3
$LN88@LoadInt_e@3:
  002e8	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002ec	eb 2c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN89@LoadInt_e@3:
  002ee	88 5d df	 mov	 BYTE PTR __k$[ebp+7], bl
  002f1	eb 27		 jmp	 SHORT $LN1@LoadInt_e@3
$LN90@LoadInt_e@3:
  002f3	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  002f7	eb 21		 jmp	 SHORT $LN1@LoadInt_e@3
$LN91@LoadInt_e@3:
  002f9	88 4d dd	 mov	 BYTE PTR __k$[ebp+5], cl
  002fc	eb 1c		 jmp	 SHORT $LN1@LoadInt_e@3
$LN92@LoadInt_e@3:
  002fe	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00302	eb 16		 jmp	 SHORT $LN1@LoadInt_e@3
$LN93@LoadInt_e@3:
  00304	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00308	eb 10		 jmp	 SHORT $LN1@LoadInt_e@3
$LN94@LoadInt_e@3:
  0030a	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0030e	eb 0a		 jmp	 SHORT $LN1@LoadInt_e@3
$LN95@LoadInt_e@3:
  00310	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00314	eb 04		 jmp	 SHORT $LN1@LoadInt_e@3
$LN96@LoadInt_e@3:
  00316	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e@3:
  0031a	6a 07		 push	 7
  0031c	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  0031f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+30], 0
  00323	5a		 pop	 edx
$LL104@LoadInt_e@3:
  00324	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0032a	83 c0 04	 add	 eax, 4
  0032d	4a		 dec	 edx
  0032e	75 f4		 jne	 SHORT $LL104@LoadInt_e@3
  00330	6a 1c		 push	 28			; 0000001cH
  00332	58		 pop	 eax
$LL101@LoadInt_e@3:
  00333	8b c8		 mov	 ecx, eax
  00335	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0033b	79 05		 jns	 SHORT $LN111@LoadInt_e@3
  0033d	49		 dec	 ecx
  0033e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00341	41		 inc	 ecx
$LN111@LoadInt_e@3:
  00342	b2 ed		 mov	 dl, -19			; ffffffedH
  00344	2a d1		 sub	 dl, cl
  00346	30 54 05 d8	 xor	 BYTE PTR __k$[ebp+eax], dl
  0034a	40		 inc	 eax
  0034b	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0034e	7c e3		 jl	 SHORT $LL101@LoadInt_e@3

; 120  : 		return LoadInt(_k, i);

  00350	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  00353	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00356	50		 push	 eax
  00357	8b ce		 mov	 ecx, esi
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  0035f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00362	5e		 pop	 esi
  00363	33 cd		 xor	 ecx, ebp
  00365	5b		 pop	 ebx
  00366	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036b	c9		 leave
  0036c	c2 08 00	 ret	 8
??$LoadInt_e@$0BP@@ioINILoader@@QAEHAAY0BP@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<31>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ; ioINILoader::LoadFloat_e<15>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<15>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 75 01 00
	00		 je	 $LN96@LoadFloat_@9
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 5e 01 00
	00		 je	 $LN95@LoadFloat_@9
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 46 01 00
	00		 je	 $LN94@LoadFloat_@9
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 2f 01 00
	00		 je	 $LN93@LoadFloat_@9
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 18 01 00
	00		 je	 $LN92@LoadFloat_@9
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 02 01 00
	00		 je	 $LN91@LoadFloat_@9
  00076	32 d1		 xor	 dl, cl
  00078	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 ec 00 00
	00		 je	 $LN90@LoadFloat_@9
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 d5 00 00
	00		 je	 $LN89@LoadFloat_@9
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 be 00 00
	00		 je	 $LN88@LoadFloat_@9
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 a8 00 00
	00		 je	 $LN87@LoadFloat_@9
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 92 00 00
	00		 je	 $LN86@LoadFloat_@9
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	74 7f		 je	 SHORT $LN85@LoadFloat_@9
  000d6	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000d9	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000dc	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000df	84 d2		 test	 dl, dl
  000e1	74 6c		 je	 SHORT $LN84@LoadFloat_@9
  000e3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e6	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000e9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ec	84 d2		 test	 dl, dl
  000ee	74 5a		 je	 SHORT $LN83@LoadFloat_@9
  000f0	32 d1		 xor	 dl, cl
  000f2	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f6	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  000f9	0f 84 9a 00 00
	00		 je	 $LN1@LoadFloat_@9
  000ff	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00102	84 d2		 test	 dl, dl
  00104	74 3e		 je	 SHORT $LN81@LoadFloat_@9
  00106	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00109	88 55 f7	 mov	 BYTE PTR __k$[ebp+15], dl
  0010c	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0010f	84 d2		 test	 dl, dl
  00111	74 2b		 je	 SHORT $LN80@LoadFloat_@9
  00113	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00116	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00119	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011c	84 d2		 test	 dl, dl
  0011e	74 19		 je	 SHORT $LN79@LoadFloat_@9
  00120	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00123	32 d1		 xor	 dl, cl
  00125	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00128	84 c0		 test	 al, al
  0012a	74 07		 je	 SHORT $LN78@LoadFloat_@9
  0012c	34 eb		 xor	 al, -21			; ffffffebH
  0012e	88 45 fa	 mov	 BYTE PTR __k$[ebp+18], al
  00131	eb 66		 jmp	 SHORT $LN1@LoadFloat_@9
$LN78@LoadFloat_@9:
  00133	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00137	eb 60		 jmp	 SHORT $LN1@LoadFloat_@9
$LN79@LoadFloat_@9:
  00139	88 4d f9	 mov	 BYTE PTR __k$[ebp+17], cl
  0013c	eb 5b		 jmp	 SHORT $LN1@LoadFloat_@9
$LN80@LoadFloat_@9:
  0013e	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00142	eb 55		 jmp	 SHORT $LN1@LoadFloat_@9
$LN81@LoadFloat_@9:
  00144	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00148	eb 4f		 jmp	 SHORT $LN1@LoadFloat_@9
$LN83@LoadFloat_@9:
  0014a	88 4d f5	 mov	 BYTE PTR __k$[ebp+13], cl
  0014d	eb 4a		 jmp	 SHORT $LN1@LoadFloat_@9
$LN84@LoadFloat_@9:
  0014f	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00153	eb 44		 jmp	 SHORT $LN1@LoadFloat_@9
$LN85@LoadFloat_@9:
  00155	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00159	eb 3e		 jmp	 SHORT $LN1@LoadFloat_@9
$LN86@LoadFloat_@9:
  0015b	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0015f	eb 38		 jmp	 SHORT $LN1@LoadFloat_@9
$LN87@LoadFloat_@9:
  00161	88 4d f1	 mov	 BYTE PTR __k$[ebp+9], cl
  00164	eb 33		 jmp	 SHORT $LN1@LoadFloat_@9
$LN88@LoadFloat_@9:
  00166	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0016a	eb 2d		 jmp	 SHORT $LN1@LoadFloat_@9
$LN89@LoadFloat_@9:
  0016c	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00170	eb 27		 jmp	 SHORT $LN1@LoadFloat_@9
$LN90@LoadFloat_@9:
  00172	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00176	eb 21		 jmp	 SHORT $LN1@LoadFloat_@9
$LN91@LoadFloat_@9:
  00178	88 4d ed	 mov	 BYTE PTR __k$[ebp+5], cl
  0017b	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@9
$LN92@LoadFloat_@9:
  0017d	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00181	eb 16		 jmp	 SHORT $LN1@LoadFloat_@9
$LN93@LoadFloat_@9:
  00183	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00187	eb 10		 jmp	 SHORT $LN1@LoadFloat_@9
$LN94@LoadFloat_@9:
  00189	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0018d	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@9
$LN95@LoadFloat_@9:
  0018f	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00193	eb 04		 jmp	 SHORT $LN1@LoadFloat_@9
$LN96@LoadFloat_@9:
  00195	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@9:
  00199	6a 03		 push	 3
  0019b	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  0019e	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+14], 0
  001a2	5a		 pop	 edx
$LL104@LoadFloat_@9:
  001a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001a9	83 c0 04	 add	 eax, 4
  001ac	4a		 dec	 edx
  001ad	75 f4		 jne	 SHORT $LL104@LoadFloat_@9
  001af	6a 0c		 push	 12			; 0000000cH
  001b1	58		 pop	 eax
$LL101@LoadFloat_@9:
  001b2	8b c8		 mov	 ecx, eax
  001b4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ba	79 05		 jns	 SHORT $LN111@LoadFloat_@9
  001bc	49		 dec	 ecx
  001bd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c0	41		 inc	 ecx
$LN111@LoadFloat_@9:
  001c1	b2 ed		 mov	 dl, -19			; ffffffedH
  001c3	2a d1		 sub	 dl, cl
  001c5	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001c9	40		 inc	 eax
  001ca	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cd	7c e3		 jl	 SHORT $LL101@LoadFloat_@9

; 137  : 		return LoadFloat(_k, f);

  001cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	50		 push	 eax
  001de	8b ce		 mov	 ecx, esi
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	5e		 pop	 esi
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	c9		 leave
  001f2	c2 08 00	 ret	 8
??$LoadFloat_e@$0P@@ioINILoader@@QAEMAAY0P@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ; ioINILoader::LoadFloat_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<21>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 f7 01 00
	00		 je	 $LN96@LoadFloat_@10
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 e0 01 00
	00		 je	 $LN95@LoadFloat_@10
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 c8 01 00
	00		 je	 $LN94@LoadFloat_@10
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 b0 01 00
	00		 je	 $LN93@LoadFloat_@10
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 99 01 00
	00		 je	 $LN92@LoadFloat_@10
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 83 01 00
	00		 je	 $LN91@LoadFloat_@10
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 6e 01 00
	00		 je	 $LN90@LoadFloat_@10
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 58 01 00
	00		 je	 $LN89@LoadFloat_@10
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 41 01 00
	00		 je	 $LN88@LoadFloat_@10
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 2b 01 00
	00		 je	 $LN87@LoadFloat_@10
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 16 01 00
	00		 je	 $LN86@LoadFloat_@10
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 00 01 00
	00		 je	 $LN85@LoadFloat_@10
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 e9 00 00
	00		 je	 $LN84@LoadFloat_@10
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 d3 00 00
	00		 je	 $LN83@LoadFloat_@10
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 be 00 00
	00		 je	 $LN82@LoadFloat_@10
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 a8 00 00
	00		 je	 $LN81@LoadFloat_@10
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 91 00 00
	00		 je	 $LN80@LoadFloat_@10
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	74 7f		 je	 SHORT $LN79@LoadFloat_@10
  0013a	32 d1		 xor	 dl, cl
  0013c	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0013f	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00142	84 d2		 test	 dl, dl
  00144	74 6e		 je	 SHORT $LN78@LoadFloat_@10
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0014b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014e	84 d2		 test	 dl, dl
  00150	74 5c		 je	 SHORT $LN77@LoadFloat_@10
  00152	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00155	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00159	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0015c	0f 84 ba 00 00
	00		 je	 $LN1@LoadFloat_@10
  00162	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00165	84 d2		 test	 dl, dl
  00167	74 40		 je	 SHORT $LN75@LoadFloat_@10
  00169	32 d1		 xor	 dl, cl
  0016b	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  0016e	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00171	84 d2		 test	 dl, dl
  00173	74 2f		 je	 SHORT $LN74@LoadFloat_@10
  00175	32 d3		 xor	 dl, bl
  00177	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0017a	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0017d	84 d2		 test	 dl, dl
  0017f	74 1d		 je	 SHORT $LN73@LoadFloat_@10
  00181	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  00184	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00187	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0018a	84 c0		 test	 al, al
  0018c	74 0a		 je	 SHORT $LN72@LoadFloat_@10
  0018e	34 ed		 xor	 al, -19			; ffffffedH
  00190	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  00193	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@10
$LN72@LoadFloat_@10:
  00198	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0019c	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@10
$LN73@LoadFloat_@10:
  0019e	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001a2	eb 78		 jmp	 SHORT $LN1@LoadFloat_@10
$LN74@LoadFloat_@10:
  001a4	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001a7	eb 73		 jmp	 SHORT $LN1@LoadFloat_@10
$LN75@LoadFloat_@10:
  001a9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001ac	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@10
$LN77@LoadFloat_@10:
  001ae	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001b2	eb 68		 jmp	 SHORT $LN1@LoadFloat_@10
$LN78@LoadFloat_@10:
  001b4	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001b7	eb 63		 jmp	 SHORT $LN1@LoadFloat_@10
$LN79@LoadFloat_@10:
  001b9	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001bc	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@10
$LN80@LoadFloat_@10:
  001be	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001c2	eb 58		 jmp	 SHORT $LN1@LoadFloat_@10
$LN81@LoadFloat_@10:
  001c4	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001c8	eb 52		 jmp	 SHORT $LN1@LoadFloat_@10
$LN82@LoadFloat_@10:
  001ca	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001cd	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@10
$LN83@LoadFloat_@10:
  001cf	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001d2	eb 48		 jmp	 SHORT $LN1@LoadFloat_@10
$LN84@LoadFloat_@10:
  001d4	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001d8	eb 42		 jmp	 SHORT $LN1@LoadFloat_@10
$LN85@LoadFloat_@10:
  001da	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001de	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@10
$LN86@LoadFloat_@10:
  001e0	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001e3	eb 37		 jmp	 SHORT $LN1@LoadFloat_@10
$LN87@LoadFloat_@10:
  001e5	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001e8	eb 32		 jmp	 SHORT $LN1@LoadFloat_@10
$LN88@LoadFloat_@10:
  001ea	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001ee	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@10
$LN89@LoadFloat_@10:
  001f0	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001f4	eb 26		 jmp	 SHORT $LN1@LoadFloat_@10
$LN90@LoadFloat_@10:
  001f6	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  001f9	eb 21		 jmp	 SHORT $LN1@LoadFloat_@10
$LN91@LoadFloat_@10:
  001fb	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  001fe	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@10
$LN92@LoadFloat_@10:
  00200	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00204	eb 16		 jmp	 SHORT $LN1@LoadFloat_@10
$LN93@LoadFloat_@10:
  00206	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0020a	eb 10		 jmp	 SHORT $LN1@LoadFloat_@10
$LN94@LoadFloat_@10:
  0020c	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00210	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@10
$LN95@LoadFloat_@10:
  00212	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00216	eb 04		 jmp	 SHORT $LN1@LoadFloat_@10
$LN96@LoadFloat_@10:
  00218	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@10:
  0021c	6a 05		 push	 5
  0021e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00221	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  00225	5a		 pop	 edx
$LL104@LoadFloat_@10:
  00226	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0022c	83 c0 04	 add	 eax, 4
  0022f	4a		 dec	 edx
  00230	75 f4		 jne	 SHORT $LL104@LoadFloat_@10

; 137  : 		return LoadFloat(_k, f);

  00232	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00237	51		 push	 ecx
  00238	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	50		 push	 eax
  00241	8b ce		 mov	 ecx, esi
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00249	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024c	5e		 pop	 esi
  0024d	33 cd		 xor	 ecx, ebp
  0024f	5b		 pop	 ebx
  00250	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00255	c9		 leave
  00256	c2 08 00	 ret	 8
??$LoadFloat_e@$0BF@@ioINILoader@@QAEMAAY0BF@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<21>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BL@@ioINILoader@@QAE_NAAY0BL@$$CBD_N@Z ; ioINILoader::LoadBool_e<27>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BL@@ioINILoader@@QAE_NAAY0BL@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -36						; size = 27
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BL@@ioINILoader@@QAE_NAAY0BL@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<27>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 91 02 00
	00		 je	 $LN96@LoadBool_e@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 7a 02 00
	00		 je	 $LN95@LoadBool_e@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 62 02 00
	00		 je	 $LN94@LoadBool_e@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 4b 02 00
	00		 je	 $LN93@LoadBool_e@3
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 33 02 00
	00		 je	 $LN92@LoadBool_e@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 1d 02 00
	00		 je	 $LN91@LoadBool_e@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 07 02 00
	00		 je	 $LN90@LoadBool_e@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 f1 01 00
	00		 je	 $LN89@LoadBool_e@3
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 db 01 00
	00		 je	 $LN88@LoadBool_e@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 c5 01 00
	00		 je	 $LN87@LoadBool_e@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 af 01 00
	00		 je	 $LN86@LoadBool_e@3
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 99 01 00
	00		 je	 $LN85@LoadBool_e@3
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 83 01 00
	00		 je	 $LN84@LoadBool_e@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 6d 01 00
	00		 je	 $LN83@LoadBool_e@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 57 01 00
	00		 je	 $LN82@LoadBool_e@3
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 41 01 00
	00		 je	 $LN81@LoadBool_e@3
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 2b 01 00
	00		 je	 $LN80@LoadBool_e@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 15 01 00
	00		 je	 $LN79@LoadBool_e@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ff 00 00
	00		 je	 $LN78@LoadBool_e@3
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 e9 00 00
	00		 je	 $LN77@LoadBool_e@3
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 d3 00 00
	00		 je	 $LN76@LoadBool_e@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 bd 00 00
	00		 je	 $LN75@LoadBool_e@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 a7 00 00
	00		 je	 $LN74@LoadBool_e@3
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 91 00 00
	00		 je	 $LN73@LoadBool_e@3
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	74 7c		 je	 SHORT $LN72@LoadBool_e@3
  001ad	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b6	84 d2		 test	 dl, dl
  001b8	74 67		 je	 SHORT $LN71@LoadBool_e@3
  001ba	32 d1		 xor	 dl, cl
  001bc	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	0f 84 ed 00 00
	00		 je	 $LN1@LoadBool_e@3
  001c9	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cc	84 d2		 test	 dl, dl
  001ce	74 49		 je	 SHORT $LN69@LoadBool_e@3
  001d0	32 d3		 xor	 dl, bl
  001d2	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d5	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d8	84 d2		 test	 dl, dl
  001da	74 34		 je	 SHORT $LN68@LoadBool_e@3
  001dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001df	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e2	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e5	84 d2		 test	 dl, dl
  001e7	74 1f		 je	 SHORT $LN67@LoadBool_e@3
  001e9	8a 40 1e	 mov	 al, BYTE PTR [eax+30]
  001ec	32 d1		 xor	 dl, cl
  001ee	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f1	84 c0		 test	 al, al
  001f3	74 0a		 je	 SHORT $LN66@LoadBool_e@3
  001f5	34 eb		 xor	 al, -21			; ffffffebH
  001f7	88 45 fa	 mov	 BYTE PTR __k$[ebp+30], al
  001fa	e9 b7 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN66@LoadBool_e@3:
  001ff	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+30], -21 ; ffffffebH
  00203	e9 ae 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN67@LoadBool_e@3:
  00208	88 4d f9	 mov	 BYTE PTR __k$[ebp+29], cl
  0020b	e9 a6 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN68@LoadBool_e@3:
  00210	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00214	e9 9d 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN69@LoadBool_e@3:
  00219	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  0021c	e9 95 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN71@LoadBool_e@3:
  00221	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00224	e9 8d 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN72@LoadBool_e@3:
  00229	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0022d	e9 84 00 00 00	 jmp	 $LN1@LoadBool_e@3
$LN73@LoadBool_e@3:
  00232	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  00235	eb 7f		 jmp	 SHORT $LN1@LoadBool_e@3
$LN74@LoadBool_e@3:
  00237	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0023b	eb 79		 jmp	 SHORT $LN1@LoadBool_e@3
$LN75@LoadBool_e@3:
  0023d	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00240	eb 74		 jmp	 SHORT $LN1@LoadBool_e@3
$LN76@LoadBool_e@3:
  00242	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00246	eb 6e		 jmp	 SHORT $LN1@LoadBool_e@3
$LN77@LoadBool_e@3:
  00248	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  0024b	eb 69		 jmp	 SHORT $LN1@LoadBool_e@3
$LN78@LoadBool_e@3:
  0024d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00251	eb 63		 jmp	 SHORT $LN1@LoadBool_e@3
$LN79@LoadBool_e@3:
  00253	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00256	eb 5e		 jmp	 SHORT $LN1@LoadBool_e@3
$LN80@LoadBool_e@3:
  00258	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0025c	eb 58		 jmp	 SHORT $LN1@LoadBool_e@3
$LN81@LoadBool_e@3:
  0025e	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00261	eb 53		 jmp	 SHORT $LN1@LoadBool_e@3
$LN82@LoadBool_e@3:
  00263	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00267	eb 4d		 jmp	 SHORT $LN1@LoadBool_e@3
$LN83@LoadBool_e@3:
  00269	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0026c	eb 48		 jmp	 SHORT $LN1@LoadBool_e@3
$LN84@LoadBool_e@3:
  0026e	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00272	eb 42		 jmp	 SHORT $LN1@LoadBool_e@3
$LN85@LoadBool_e@3:
  00274	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  00277	eb 3d		 jmp	 SHORT $LN1@LoadBool_e@3
$LN86@LoadBool_e@3:
  00279	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0027d	eb 37		 jmp	 SHORT $LN1@LoadBool_e@3
$LN87@LoadBool_e@3:
  0027f	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00282	eb 32		 jmp	 SHORT $LN1@LoadBool_e@3
$LN88@LoadBool_e@3:
  00284	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00288	eb 2c		 jmp	 SHORT $LN1@LoadBool_e@3
$LN89@LoadBool_e@3:
  0028a	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  0028d	eb 27		 jmp	 SHORT $LN1@LoadBool_e@3
$LN90@LoadBool_e@3:
  0028f	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00293	eb 21		 jmp	 SHORT $LN1@LoadBool_e@3
$LN91@LoadBool_e@3:
  00295	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00298	eb 1c		 jmp	 SHORT $LN1@LoadBool_e@3
$LN92@LoadBool_e@3:
  0029a	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0029e	eb 16		 jmp	 SHORT $LN1@LoadBool_e@3
$LN93@LoadBool_e@3:
  002a0	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002a4	eb 10		 jmp	 SHORT $LN1@LoadBool_e@3
$LN94@LoadBool_e@3:
  002a6	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002aa	eb 0a		 jmp	 SHORT $LN1@LoadBool_e@3
$LN95@LoadBool_e@3:
  002ac	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002b0	eb 04		 jmp	 SHORT $LN1@LoadBool_e@3
$LN96@LoadBool_e@3:
  002b2	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e@3:
  002b6	6a 06		 push	 6
  002b8	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002bb	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+26], 0
  002bf	5a		 pop	 edx
$LL104@LoadBool_e@3:
  002c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c6	83 c0 04	 add	 eax, 4
  002c9	4a		 dec	 edx
  002ca	75 f4		 jne	 SHORT $LL104@LoadBool_e@3
  002cc	6a 18		 push	 24			; 00000018H
  002ce	58		 pop	 eax
$LL101@LoadBool_e@3:
  002cf	8b c8		 mov	 ecx, eax
  002d1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002d7	79 05		 jns	 SHORT $LN111@LoadBool_e@3
  002d9	49		 dec	 ecx
  002da	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002dd	41		 inc	 ecx
$LN111@LoadBool_e@3:
  002de	b2 ed		 mov	 dl, -19			; ffffffedH
  002e0	2a d1		 sub	 dl, cl
  002e2	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002e6	40		 inc	 eax
  002e7	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002ea	7c e3		 jl	 SHORT $LL101@LoadBool_e@3

; 103  : 		return LoadBool(_k, b);

  002ec	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  002ef	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002f2	50		 push	 eax
  002f3	8b ce		 mov	 ecx, esi
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  002fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fe	5e		 pop	 esi
  002ff	33 cd		 xor	 ecx, ebp
  00301	5b		 pop	 ebx
  00302	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00307	c9		 leave
  00308	c2 08 00	 ret	 8
??$LoadBool_e@$0BL@@ioINILoader@@QAE_NAAY0BL@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<27>
_TEXT	ENDS
PUBLIC	??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ; ioEntityGroup::GetAnimationEventTimeList_e<9>
EXTRN	__imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0
__ehfuncinfo$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
$T532264 = -48						; size = 16
_szEncEventType$ = -32					; size = 9
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
_vTimeList$ = 16					; size = 4
??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z PROC ; ioEntityGroup::GetAnimationEventTimeList_e<9>, COMDAT
; _this$ = ecx

; 406  : 	{

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b 75 10	 mov	 esi, DWORD PTR _vTimeList$[ebp]
  00012	8b f9		 mov	 edi, ecx

; 407  : 		_ENCSTR(szEventType, szEncEventType);

  00014	8a 08		 mov	 cl, BYTE PTR [eax]
  00016	84 c9		 test	 cl, cl
  00018	0f 84 ee 00 00
	00		 je	 $LN96@GetAnimati
  0001e	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00021	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00024	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00027	84 c9		 test	 cl, cl
  00029	0f 84 d7 00 00
	00		 je	 $LN95@GetAnimati
  0002f	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00032	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00035	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00038	84 c9		 test	 cl, cl
  0003a	0f 84 c0 00 00
	00		 je	 $LN94@GetAnimati
  00040	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00043	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00046	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00049	84 c9		 test	 cl, cl
  0004b	0f 84 a9 00 00
	00		 je	 $LN93@GetAnimati
  00051	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00054	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00057	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  0005a	84 c9		 test	 cl, cl
  0005c	0f 84 92 00 00
	00		 je	 $LN92@GetAnimati
  00062	80 f1 ed	 xor	 cl, -19			; ffffffedH
  00065	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00068	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  0006b	84 c9		 test	 cl, cl
  0006d	74 7f		 je	 SHORT $LN91@GetAnimati
  0006f	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00072	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  00075	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00078	84 c9		 test	 cl, cl
  0007a	74 6c		 je	 SHORT $LN90@GetAnimati
  0007c	80 f1 eb	 xor	 cl, -21			; ffffffebH
  0007f	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  00082	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  00085	84 c9		 test	 cl, cl
  00087	74 59		 je	 SHORT $LN89@GetAnimati
  00089	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  0008c	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00090	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  00093	74 7b		 je	 SHORT $LN1@GetAnimati
  00095	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  00098	84 c9		 test	 cl, cl
  0009a	74 40		 je	 SHORT $LN87@GetAnimati
  0009c	80 f1 ec	 xor	 cl, -20			; ffffffecH
  0009f	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000a2	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000a5	84 c9		 test	 cl, cl
  000a7	74 2d		 je	 SHORT $LN86@GetAnimati
  000a9	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000ac	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000af	8a 48 0b	 mov	 cl, BYTE PTR [eax+11]
  000b2	84 c9		 test	 cl, cl
  000b4	74 1a		 je	 SHORT $LN85@GetAnimati
  000b6	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000b9	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  000bc	88 4d eb	 mov	 BYTE PTR _szEncEventType$[ebp+11], cl
  000bf	84 c0		 test	 al, al
  000c1	74 07		 je	 SHORT $LN84@GetAnimati
  000c3	34 ed		 xor	 al, -19			; ffffffedH
  000c5	88 45 ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], al
  000c8	eb 46		 jmp	 SHORT $LN1@GetAnimati
$LN84@GetAnimati:
  000ca	c6 45 ec ed	 mov	 BYTE PTR _szEncEventType$[ebp+12], -19 ; ffffffedH
  000ce	eb 40		 jmp	 SHORT $LN1@GetAnimati
$LN85@GetAnimati:
  000d0	c6 45 eb ea	 mov	 BYTE PTR _szEncEventType$[ebp+11], -22 ; ffffffeaH
  000d4	eb 3a		 jmp	 SHORT $LN1@GetAnimati
$LN86@GetAnimati:
  000d6	c6 45 ea eb	 mov	 BYTE PTR _szEncEventType$[ebp+10], -21 ; ffffffebH
  000da	eb 34		 jmp	 SHORT $LN1@GetAnimati
$LN87@GetAnimati:
  000dc	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  000e0	eb 2e		 jmp	 SHORT $LN1@GetAnimati
$LN89@GetAnimati:
  000e2	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  000e6	eb 28		 jmp	 SHORT $LN1@GetAnimati
$LN90@GetAnimati:
  000e8	c6 45 e6 eb	 mov	 BYTE PTR _szEncEventType$[ebp+6], -21 ; ffffffebH
  000ec	eb 22		 jmp	 SHORT $LN1@GetAnimati
$LN91@GetAnimati:
  000ee	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  000f2	eb 1c		 jmp	 SHORT $LN1@GetAnimati
$LN92@GetAnimati:
  000f4	c6 45 e4 ed	 mov	 BYTE PTR _szEncEventType$[ebp+4], -19 ; ffffffedH
  000f8	eb 16		 jmp	 SHORT $LN1@GetAnimati
$LN93@GetAnimati:
  000fa	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  000fe	eb 10		 jmp	 SHORT $LN1@GetAnimati
$LN94@GetAnimati:
  00100	c6 45 e2 eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  00104	eb 0a		 jmp	 SHORT $LN1@GetAnimati
$LN95@GetAnimati:
  00106	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  0010a	eb 04		 jmp	 SHORT $LN1@GetAnimati
$LN96@GetAnimati:
  0010c	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati:
  00110	6a 02		 push	 2
  00112	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00115	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$[ebp+8], 0
  00119	59		 pop	 ecx
$LL105@GetAnimati:
  0011a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00120	83 c0 04	 add	 eax, 4
  00123	49		 dec	 ecx
  00124	75 f4		 jne	 SHORT $LL105@GetAnimati

; 408  : 		return GetAnimationEventTimeList(id, szEncEventType, vTimeList);

  00126	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d d0	 lea	 ecx, DWORD PTR $T532264[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00133	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00137	56		 push	 esi
  00138	8d 45 d0	 lea	 eax, DWORD PTR $T532264[ebp]
  0013b	50		 push	 eax
  0013c	ff 75 08	 push	 DWORD PTR _id$[ebp]
  0013f	8b cf		 mov	 ecx, edi
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  00147	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0014b	8d 4d d0	 lea	 ecx, DWORD PTR $T532264[ebp]
  0014e	8b f0		 mov	 esi, eax
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00156	8b c6		 mov	 eax, esi

; 409  : 	}

  00158	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0015d	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T532264[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTimeList_e@$08@ioEntityGroup@@QAEHHAAY08$$CBDAAV?$list@MV?$allocator@M@std@@@std@@@Z ENDP ; ioEntityGroup::GetAnimationEventTimeList_e<9>
PUBLIC	??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z ; ioEntityGroup::GetAnimationEventTime_e<12>
EXTRN	__imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z$0
__ehfuncinfo$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioentitygroup.h
xdata$x	ENDS
;	COMDAT ??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
_TEXT	SEGMENT
$T532297 = -52						; size = 16
$T532296 = -36						; size = 4
_szEncEventType$ = -32					; size = 12
__$EHRec$ = -12						; size = 12
_id$ = 8						; size = 4
_szEventType$ = 12					; size = 4
??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z PROC ; ioEntityGroup::GetAnimationEventTime_e<12>, COMDAT
; _this$ = ecx

; 414  : 	{

  00000	6a 28		 push	 40			; 00000028H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szEventType$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 415  : 		_ENCSTR(szEventType, szEncEventType);

  00011	8a 08		 mov	 cl, BYTE PTR [eax]
  00013	84 c9		 test	 cl, cl
  00015	0f 84 36 01 00
	00		 je	 $LN96@GetAnimati@2
  0001b	b2 ed		 mov	 dl, -19			; ffffffedH
  0001d	32 ca		 xor	 cl, dl
  0001f	88 4d e0	 mov	 BYTE PTR _szEncEventType$[ebp], cl
  00022	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00025	84 c9		 test	 cl, cl
  00027	0f 84 1e 01 00
	00		 je	 $LN95@GetAnimati@2
  0002d	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00030	88 4d e1	 mov	 BYTE PTR _szEncEventType$[ebp+1], cl
  00033	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00036	84 c9		 test	 cl, cl
  00038	0f 84 07 01 00
	00		 je	 $LN94@GetAnimati@2
  0003e	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00041	88 4d e2	 mov	 BYTE PTR _szEncEventType$[ebp+2], cl
  00044	8a 48 03	 mov	 cl, BYTE PTR [eax+3]
  00047	84 c9		 test	 cl, cl
  00049	0f 84 f0 00 00
	00		 je	 $LN93@GetAnimati@2
  0004f	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00052	88 4d e3	 mov	 BYTE PTR _szEncEventType$[ebp+3], cl
  00055	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00058	84 c9		 test	 cl, cl
  0005a	0f 84 da 00 00
	00		 je	 $LN92@GetAnimati@2
  00060	32 ca		 xor	 cl, dl
  00062	88 4d e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], cl
  00065	8a 48 05	 mov	 cl, BYTE PTR [eax+5]
  00068	84 c9		 test	 cl, cl
  0006a	0f 84 c4 00 00
	00		 je	 $LN91@GetAnimati@2
  00070	80 f1 ec	 xor	 cl, -20			; ffffffecH
  00073	88 4d e5	 mov	 BYTE PTR _szEncEventType$[ebp+5], cl
  00076	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00079	84 c9		 test	 cl, cl
  0007b	0f 84 ad 00 00
	00		 je	 $LN90@GetAnimati@2
  00081	80 f1 eb	 xor	 cl, -21			; ffffffebH
  00084	88 4d e6	 mov	 BYTE PTR _szEncEventType$[ebp+6], cl
  00087	8a 48 07	 mov	 cl, BYTE PTR [eax+7]
  0008a	84 c9		 test	 cl, cl
  0008c	0f 84 96 00 00
	00		 je	 $LN89@GetAnimati@2
  00092	80 f1 ea	 xor	 cl, -22			; ffffffeaH
  00095	88 4d e7	 mov	 BYTE PTR _szEncEventType$[ebp+7], cl
  00098	8a 48 08	 mov	 cl, BYTE PTR [eax+8]
  0009b	84 c9		 test	 cl, cl
  0009d	0f 84 80 00 00
	00		 je	 $LN88@GetAnimati@2
  000a3	32 ca		 xor	 cl, dl
  000a5	88 4d e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], cl
  000a8	8a 48 09	 mov	 cl, BYTE PTR [eax+9]
  000ab	84 c9		 test	 cl, cl
  000ad	74 6e		 je	 SHORT $LN87@GetAnimati@2
  000af	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000b2	88 4d e9	 mov	 BYTE PTR _szEncEventType$[ebp+9], cl
  000b5	8a 48 0a	 mov	 cl, BYTE PTR [eax+10]
  000b8	84 c9		 test	 cl, cl
  000ba	74 5b		 je	 SHORT $LN86@GetAnimati@2
  000bc	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000bf	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c3	88 4d ea	 mov	 BYTE PTR _szEncEventType$[ebp+10], cl
  000c6	0f 84 89 00 00
	00		 je	 $LN1@GetAnimati@2
  000cc	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  000cf	84 c9		 test	 cl, cl
  000d1	74 3f		 je	 SHORT $LN84@GetAnimati@2
  000d3	32 ca		 xor	 cl, dl
  000d5	88 4d ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], cl
  000d8	8a 48 0d	 mov	 cl, BYTE PTR [eax+13]
  000db	84 c9		 test	 cl, cl
  000dd	74 2d		 je	 SHORT $LN83@GetAnimati@2
  000df	80 f1 ec	 xor	 cl, -20			; ffffffecH
  000e2	88 4d ed	 mov	 BYTE PTR _szEncEventType$[ebp+13], cl
  000e5	8a 48 0e	 mov	 cl, BYTE PTR [eax+14]
  000e8	84 c9		 test	 cl, cl
  000ea	74 1a		 je	 SHORT $LN82@GetAnimati@2
  000ec	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000ef	80 f1 eb	 xor	 cl, -21			; ffffffebH
  000f2	88 4d ee	 mov	 BYTE PTR _szEncEventType$[ebp+14], cl
  000f5	84 c0		 test	 al, al
  000f7	74 07		 je	 SHORT $LN81@GetAnimati@2
  000f9	34 ea		 xor	 al, -22			; ffffffeaH
  000fb	88 45 ef	 mov	 BYTE PTR _szEncEventType$[ebp+15], al
  000fe	eb 55		 jmp	 SHORT $LN1@GetAnimati@2
$LN81@GetAnimati@2:
  00100	c6 45 ef ea	 mov	 BYTE PTR _szEncEventType$[ebp+15], -22 ; ffffffeaH
  00104	eb 4f		 jmp	 SHORT $LN1@GetAnimati@2
$LN82@GetAnimati@2:
  00106	c6 45 ee eb	 mov	 BYTE PTR _szEncEventType$[ebp+14], -21 ; ffffffebH
  0010a	eb 49		 jmp	 SHORT $LN1@GetAnimati@2
$LN83@GetAnimati@2:
  0010c	c6 45 ed ec	 mov	 BYTE PTR _szEncEventType$[ebp+13], -20 ; ffffffecH
  00110	eb 43		 jmp	 SHORT $LN1@GetAnimati@2
$LN84@GetAnimati@2:
  00112	88 55 ec	 mov	 BYTE PTR _szEncEventType$[ebp+12], dl
  00115	eb 3e		 jmp	 SHORT $LN1@GetAnimati@2
$LN86@GetAnimati@2:
  00117	c6 45 ea eb	 mov	 BYTE PTR _szEncEventType$[ebp+10], -21 ; ffffffebH
  0011b	eb 38		 jmp	 SHORT $LN1@GetAnimati@2
$LN87@GetAnimati@2:
  0011d	c6 45 e9 ec	 mov	 BYTE PTR _szEncEventType$[ebp+9], -20 ; ffffffecH
  00121	eb 32		 jmp	 SHORT $LN1@GetAnimati@2
$LN88@GetAnimati@2:
  00123	88 55 e8	 mov	 BYTE PTR _szEncEventType$[ebp+8], dl
  00126	eb 2d		 jmp	 SHORT $LN1@GetAnimati@2
$LN89@GetAnimati@2:
  00128	c6 45 e7 ea	 mov	 BYTE PTR _szEncEventType$[ebp+7], -22 ; ffffffeaH
  0012c	eb 27		 jmp	 SHORT $LN1@GetAnimati@2
$LN90@GetAnimati@2:
  0012e	c6 45 e6 eb	 mov	 BYTE PTR _szEncEventType$[ebp+6], -21 ; ffffffebH
  00132	eb 21		 jmp	 SHORT $LN1@GetAnimati@2
$LN91@GetAnimati@2:
  00134	c6 45 e5 ec	 mov	 BYTE PTR _szEncEventType$[ebp+5], -20 ; ffffffecH
  00138	eb 1b		 jmp	 SHORT $LN1@GetAnimati@2
$LN92@GetAnimati@2:
  0013a	88 55 e4	 mov	 BYTE PTR _szEncEventType$[ebp+4], dl
  0013d	eb 16		 jmp	 SHORT $LN1@GetAnimati@2
$LN93@GetAnimati@2:
  0013f	c6 45 e3 ea	 mov	 BYTE PTR _szEncEventType$[ebp+3], -22 ; ffffffeaH
  00143	eb 10		 jmp	 SHORT $LN1@GetAnimati@2
$LN94@GetAnimati@2:
  00145	c6 45 e2 eb	 mov	 BYTE PTR _szEncEventType$[ebp+2], -21 ; ffffffebH
  00149	eb 0a		 jmp	 SHORT $LN1@GetAnimati@2
$LN95@GetAnimati@2:
  0014b	c6 45 e1 ec	 mov	 BYTE PTR _szEncEventType$[ebp+1], -20 ; ffffffecH
  0014f	eb 04		 jmp	 SHORT $LN1@GetAnimati@2
$LN96@GetAnimati@2:
  00151	c6 45 e0 ed	 mov	 BYTE PTR _szEncEventType$[ebp], -19 ; ffffffedH
$LN1@GetAnimati@2:
  00155	6a 02		 push	 2
  00157	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0015a	c6 45 eb 00	 mov	 BYTE PTR _szEncEventType$[ebp+11], 0
  0015e	59		 pop	 ecx
$LL105@GetAnimati@2:
  0015f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00165	83 c0 04	 add	 eax, 4
  00168	49		 dec	 ecx
  00169	75 f4		 jne	 SHORT $LL105@GetAnimati@2
  0016b	6a 08		 push	 8
  0016d	58		 pop	 eax
$LL102@GetAnimati@2:
  0016e	8b c8		 mov	 ecx, eax
  00170	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00176	79 05		 jns	 SHORT $LN113@GetAnimati@2
  00178	49		 dec	 ecx
  00179	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017c	41		 inc	 ecx
$LN113@GetAnimati@2:
  0017d	b2 ed		 mov	 dl, -19			; ffffffedH
  0017f	2a d1		 sub	 dl, cl
  00181	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$[ebp+eax], dl
  00185	40		 inc	 eax
  00186	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00189	7c e3		 jl	 SHORT $LL102@GetAnimati@2

; 416  : 		return GetAnimationEventTime(id, szEncEventType);

  0018b	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$[ebp]
  0018e	50		 push	 eax
  0018f	8d 4d cc	 lea	 ecx, DWORD PTR $T532297[ebp]
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00198	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0019c	8d 45 cc	 lea	 eax, DWORD PTR $T532297[ebp]
  0019f	50		 push	 eax
  001a0	ff 75 08	 push	 DWORD PTR _id$[ebp]
  001a3	8b ce		 mov	 ecx, esi
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  001ab	d9 5d dc	 fstp	 DWORD PTR $T532296[ebp]
  001ae	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001b2	8d 4d cc	 lea	 ecx, DWORD PTR $T532297[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001bb	d9 45 dc	 fld	 DWORD PTR $T532296[ebp]

; 417  : 	}

  001be	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001c3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR $T532297[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$GetAnimationEventTime_e@$0M@@ioEntityGroup@@QAEMHAAY0M@$$CBD@Z ENDP ; ioEntityGroup::GetAnimationEventTime_e<12>
PUBLIC	??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z PROC ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z ENDP ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z ; std::_Destroy_range<std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z PROC ; std::_Destroy_range<std::allocator<AniEventTime const *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBUAniEventTime@@@std@@@std@@YAXPAPBUAniEventTime@@0AAV?$allocator@PBUAniEventTime@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z ; std::allocator<AniRotateInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z PROC ; std::allocator<AniRotateInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN5@construct@2:

; 198  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@ABU3@@Z ENDP ; std::allocator<AniRotateInfo>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z PROC ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@MV?$allocator@M@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0
__ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
$T532394 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z PROC ; std::allocator<ioHashString>::construct<ioHashString &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T532394[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct@3
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@3:

; 209  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T532394[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ENDP ; std::allocator<ioHashString>::construct<ioHashString &>
PUBLIC	??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<AniRotateInfo *,AniRotateInfo *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN11@Move:
  00009	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0000c	74 12		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	83 c0 08	 add	 eax, 8
  0001b	83 c1 08	 add	 ecx, 8
  0001e	eb e9		 jmp	 SHORT $LN11@Move
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<AniRotateInfo *,AniRotateInfo *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z ; std::allocator<AniRotateInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z PROC ; std::allocator<AniRotateInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@@Z ENDP ; std::allocator<AniRotateInfo>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0
__ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
_TEXT	SEGMENT
$T532428 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR $T532428[ebp], ecx
  00012	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00016	85 c9		 test	 ecx, ecx
  00018	74 09		 je	 SHORT $LN3@construct@4
  0001a	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
$LN3@construct@4:

; 203  : 		}

  00023	e8 00 00 00 00	 call	 __EH_epilog3
  00028	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T532428[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ENDP ; std::allocator<ioHashString>::construct
PUBLIC	?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ; std::allocator<ForceInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z PROC ; std::allocator<ForceInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct@5
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct@5:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@ABU3@@Z ENDP ; std::allocator<ForceInfo>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z ; std::allocator<AniRotateInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z PROC ; std::allocator<AniRotateInfo>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN3@construct@6
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@construct@6:

; 203  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?construct@?$allocator@UAniRotateInfo@@@std@@QAEXPAUAniRotateInfo@@$$QAU3@@Z ENDP ; std::allocator<AniRotateInfo>::construct
_TEXT	ENDS
PUBLIC	??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
xdata$x	SEGMENT
__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
_TEXT	SEGMENT
$T532484 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z PROC ; std::_Construct<WeaponInfo,WeaponInfo const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 47   : 	void _FARQ *_Vptr = _Ptr;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000f	89 4d 08	 mov	 DWORD PTR __Vptr$[ebp], ecx

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00012	89 4d f0	 mov	 DWORD PTR $T532484[ebp], ecx
  00015	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00019	85 c9		 test	 ecx, ecx
  0001b	74 08		 je	 SHORT $LN3@Construct@4
  0001d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00020	e8 00 00 00 00	 call	 ??0WeaponInfo@@QAE@ABU0@@Z
$LN3@Construct@4:

; 49   : 	}

  00025	e8 00 00 00 00	 call	 __EH_epilog3
  0002a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z$0:
  00000	ff 75 08	 push	 DWORD PTR __Vptr$[ebp]
  00003	ff 75 f0	 push	 DWORD PTR $T532484[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ENDP ; std::_Construct<WeaponInfo,WeaponInfo const &>
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@M@@QAEMXZ				; CEncrypt<float>::operator float
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@M@@QAEMXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@M@@QAEMXZ PROC				; CEncrypt<float>::operator float, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	d9 45 fc	 fld	 DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@M@@QAEMXZ ENDP				; CEncrypt<float>::operator float
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@V?$allocator@VioHashString@@@1@@Z ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z PROC ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@V?$allocator@UWeaponInfo@@@1@@Z ENDP ; std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z PROC ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@V?$allocator@UForceInfo@@@1@@Z ENDP ; std::_Vector_val<ForceInfo,std::allocator<ForceInfo> >::_Vector_val<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ; std::allocator<ioHashString>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@VioHashString@@@std@@QAEPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator==
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioHashString *,ioHashString *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 11		 jmp	 SHORT $LN11@Move@2
$LL3@Move@2:

; 2514 : 		*_Dest = _STD move(*_First);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000c	56		 push	 esi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z
  00013	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  00017	83 c6 10	 add	 esi, 16			; 00000010H
$LN11@Move@2:

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  0001a	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001d	75 ea		 jne	 SHORT $LL3@Move@2

; 2515 : 	return (_Dest);

  0001f	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00022	5e		 pop	 esi

; 2516 : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioHashString *,ioHashString *>
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ; std::allocator<WeaponInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z PROC ; std::allocator<WeaponInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UWeaponInfo@@@std@@QAEPAUWeaponInfo@@I@Z ENDP ; std::allocator<WeaponInfo>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ; std::allocator<ForceInfo>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z PROC ; std::allocator<ForceInfo>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@UForceInfo@@@std@@QAEPAUForceInfo@@I@Z ENDP ; std::allocator<ForceInfo>::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator==
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator==
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ; std::allocator<ForceInfo>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z PROC ; std::allocator<ForceInfo>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UForceInfo@@@std@@QAEXPAUForceInfo@@@Z ENDP ; std::allocator<ForceInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ; std::_Destroy<ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z PROC ; std::_Destroy<ioHashString>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ENDP ; std::_Destroy<ioHashString>
_TEXT	ENDS
PUBLIC	??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ; std::_Destroy<WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z PROC ; std::_Destroy<WeaponInfo>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 64   : 	}

  00009	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@UWeaponInfo@@@std@@YAXPAUWeaponInfo@@@Z ENDP ; std::_Destroy<WeaponInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ; std::allocator<ioHashString>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z PROC ; std::allocator<ioHashString>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@ABV3@@Z ENDP ; std::allocator<ioHashString>::construct
_TEXT	ENDS
PUBLIC	?GetGravityAmt@ioBaseChar@@QAEMXZ		; ioBaseChar::GetGravityAmt
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetGravityAmt@ioBaseChar@@QAEMXZ
_TEXT	SEGMENT
_value$532735 = -4					; size = 4
?GetGravityAmt@ioBaseChar@@QAEMXZ PROC			; ioBaseChar::GetGravityAmt, COMDAT
; _this$ = ecx

; 2632 : 	inline float GetGravityAmt() { return m_fGravityAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$532735[ebp]
  00007	50		 push	 eax
  00008	81 c1 e8 0b 00
	00		 add	 ecx, 3048		; 00000be8H
  0000e	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  00013	d9 45 fc	 fld	 DWORD PTR _value$532735[ebp]
  00016	c9		 leave
  00017	c3		 ret	 0
?GetGravityAmt@ioBaseChar@@QAEMXZ ENDP			; ioBaseChar::GetGravityAmt
_TEXT	ENDS
PUBLIC	?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z ; ioExtendJump::CheckKeyReserveTime
EXTRN	__ftol2:PROC
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
xdata$x	SEGMENT
__unwindtable$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z$0
__ehfuncinfo$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
xdata$x	ENDS
;	COMDAT ?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z
_TEXT	SEGMENT
$T532761 = -56						; size = 16
tv1037 = -40						; size = 4
tv1034 = -40						; size = 4
$T532760 = -36						; size = 4
_fEventTime$ = -36					; size = 4
_szEncEventType$532774 = -32				; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fTimeRate$ = 16					; size = 4
_dwPredelay$ = 20					; size = 4
?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z PROC ; ioExtendJump::CheckKeyReserveTime, COMDAT
; _this$ = ecx

; 314  : {

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 08	 mov	 eax, DWORD PTR _pOwner$[ebp]
  0000f	8b d9		 mov	 ebx, ecx

; 315  : 	if( !pOwner )

  00011	85 c0		 test	 eax, eax
  00013	75 07		 jne	 SHORT $LN3@CheckKeyRe
$LN123@CheckKeyRe:

; 316  : 		return 0.0f;

  00015	d9 ee		 fldz
  00017	e9 e7 00 00 00	 jmp	 $LN4@CheckKeyRe
$LN3@CheckKeyRe:

; 317  : 
; 318  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  0001c	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 319  : 	if( !pGrp )

  0001f	85 f6		 test	 esi, esi

; 320  : 		return 0.0f;

  00021	74 f2		 je	 SHORT $LN123@CheckKeyRe

; 321  : 
; 322  : 	DWORD dwCurTime = FRAMEGETTIME();

  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00029	8b c8		 mov	 ecx, eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00031	6a 02		 push	 2
  00033	8b f8		 mov	 edi, eax

; 323  : 
; 324  : 	float fEventTime = pGrp->GetAnimationEventTime_e( iAniID, "key_reserve" ) * fTimeRate;

  00035	c7 45 e0 86 89
	92 b5		 mov	 DWORD PTR _szEncEventType$532774[ebp], -1248687738 ; b5928986H
  0003c	c7 45 e4 9f 89
	98 8f		 mov	 DWORD PTR _szEncEventType$532774[ebp+4], -1885828705 ; 8f98899fH
  00043	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$532774[ebp]
  00046	c7 45 e8 9f 9a
	8e 00		 mov	 DWORD PTR _szEncEventType$532774[ebp+8], 9345695 ; 008e9a9fH
  0004d	59		 pop	 ecx
$LL112@CheckKeyRe:
  0004e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00054	83 c0 04	 add	 eax, 4
  00057	49		 dec	 ecx
  00058	75 f4		 jne	 SHORT $LL112@CheckKeyRe
  0005a	6a 08		 push	 8
  0005c	58		 pop	 eax
$LL109@CheckKeyRe:
  0005d	8b c8		 mov	 ecx, eax
  0005f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00065	79 05		 jns	 SHORT $LN120@CheckKeyRe
  00067	49		 dec	 ecx
  00068	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0006b	41		 inc	 ecx
$LN120@CheckKeyRe:
  0006c	b2 ed		 mov	 dl, -19			; ffffffedH
  0006e	2a d1		 sub	 dl, cl
  00070	30 54 05 e0	 xor	 BYTE PTR _szEncEventType$532774[ebp+eax], dl
  00074	40		 inc	 eax
  00075	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00078	7c e3		 jl	 SHORT $LL109@CheckKeyRe
  0007a	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$532774[ebp]
  0007d	50		 push	 eax
  0007e	8d 4d c8	 lea	 ecx, DWORD PTR $T532761[ebp]
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00087	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0008b	8d 45 c8	 lea	 eax, DWORD PTR $T532761[ebp]
  0008e	50		 push	 eax
  0008f	ff 75 0c	 push	 DWORD PTR _iAniID$[ebp]
  00092	8b ce		 mov	 ecx, esi
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTime@ioEntityGroup@@QAEMHABVioHashString@@@Z
  0009a	d9 5d dc	 fstp	 DWORD PTR $T532760[ebp]
  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000a1	8d 4d c8	 lea	 ecx, DWORD PTR $T532761[ebp]
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000aa	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR $T532760[ebp]
  000af	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fTimeRate$[ebp]
  000b4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b7	0f 5a c9	 cvtps2pd xmm1, xmm1
  000ba	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000be	66 0f 5a c0	 cvtpd2ps xmm0, xmm0

; 325  : 	if( fEventTime > 0 )

  000c2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000c9	f3 0f 11 45 dc	 movss	 DWORD PTR _fEventTime$[ebp], xmm0
  000ce	76 30		 jbe	 SHORT $LN1@CheckKeyRe

; 326  : 	{
; 327  : 		m_dwReserveEnableTime = dwCurTime + fEventTime + dwPredelay;

  000d0	89 7d d8	 mov	 DWORD PTR tv1037[ebp], edi
  000d3	db 45 d8	 fild	 DWORD PTR tv1037[ebp]
  000d6	85 ff		 test	 edi, edi
  000d8	79 06		 jns	 SHORT $LN121@CheckKeyRe
  000da	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN121@CheckKeyRe:
  000e0	8b 45 14	 mov	 eax, DWORD PTR _dwPredelay$[ebp]
  000e3	d8 45 dc	 fadd	 DWORD PTR _fEventTime$[ebp]
  000e6	db 45 14	 fild	 DWORD PTR _dwPredelay$[ebp]
  000e9	85 c0		 test	 eax, eax
  000eb	79 06		 jns	 SHORT $LN122@CheckKeyRe
  000ed	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN122@CheckKeyRe:
  000f3	de c1		 faddp	 ST(1), ST(0)
  000f5	e8 00 00 00 00	 call	 __ftol2
  000fa	89 83 e8 00 00
	00		 mov	 DWORD PTR [ebx+232], eax
$LN1@CheckKeyRe:

; 328  : 	}
; 329  : 
; 330  : 	return fEventTime;

  00100	d9 45 dc	 fld	 DWORD PTR _fEventTime$[ebp]
$LN4@CheckKeyRe:

; 331  : }

  00103	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00108	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T532761[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z ENDP ; ioExtendJump::CheckKeyReserveTime
PUBLIC	??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::vector<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::vector<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::vector<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*, COMDAT
; _this$ = ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QBEAAMXZ ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::vector<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::vector<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::vector<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@2@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::end
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniEventTime const *,std::allocator<AniEventTime const *> > >::operator!=
_TEXT	ENDS
PUBLIC	?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::end
_TEXT	ENDS
PUBLIC	??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
$T533065 = -16						; size = 12
$T533042 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z PROC ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 493  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 494  : 		this->_Mysize = 0;

  00009	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

  0000d	6a 0c		 push	 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	74 10		 je	 SHORT $LN13@List_val
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0001b	89 00		 mov	 DWORD PTR [eax], eax

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 498  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c9		 leave
  00026	c2 04 00	 ret	 4

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN13@List_val:
  00029	83 65 fc 00	 and	 DWORD PTR $T533042[ebp], 0
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T533042[ebp]
  00030	50		 push	 eax
  00031	8d 4d f0	 lea	 ecx, DWORD PTR $T533065[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 45 f0	 lea	 eax, DWORD PTR $T533065[ebp]
  00042	50		 push	 eax
  00043	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T533065[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@List_val:
$LN28@List_val:
  0004f	cc		 int	 3
??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ENDP ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@1@PBV?$_List_val@MV?$allocator@M@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<float,std::allocator<float> > >::_List_iterator<std::_List_val<float,std::allocator<float> > >
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  0000d	c1 f8 04	 sar	 eax, 4
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to@2
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXPAPBUAniEventTime@@0@Z ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Destroy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<AniRotateInfo,std::allocator<AniRotateInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@AAV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@AAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@std@@U_Node@?$_List_nod@MV?$allocator@M@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@MV?$allocator@M@std@@@std@@@0@PAU_Node@?$_List_nod@MV?$allocator@M@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<float,std::allocator<float> >::_Node>,std::_List_nod<float,std::allocator<float> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$533229 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z PROC ; std::_Move<AniRotateInfo *,AniRotateInfo *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$533229[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00@Z ENDP ; std::_Move<AniRotateInfo *,AniRotateInfo *>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z ; std::_Dest_val<std::allocator<AniRotateInfo>,AniRotateInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z PROC ; std::_Dest_val<std::allocator<AniRotateInfo>,AniRotateInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@@Z ENDP ; std::_Dest_val<std::allocator<AniRotateInfo>,AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val@3
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val@3:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@V3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@$$QAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z PROC ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN7@Cons_val@4
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN7@Cons_val@4:

; 281  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z ENDP ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ; std::allocator<WeaponInfo>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z PROC ; std::allocator<WeaponInfo>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 198  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?construct@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@ABU3@@Z ENDP ; std::allocator<WeaponInfo>::construct
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy
$LN4@Buy:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff ff ff ff
	0f		 cmp	 edi, 268435455		; 0fffffffH
  00022	76 0b		 jbe	 SHORT $LN2@Buy

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy:
$LN2@Buy:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	c1 e7 04	 shl	 edi, 4
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy:
?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z ; std::_Move<ioHashString *,ioHashString *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z
_TEXT	SEGMENT
__Cat$533613 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z PROC ; std::_Move<ioHashString *,ioHashString *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$533613[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00@Z ENDP ; std::_Move<ioHashString *,ioHashString *>
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@2

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@2
$LN4@Buy@2:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 66 66 66
	06		 cmp	 edi, 107374182		; 06666666H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@2

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@2:
$LN2@Buy@2:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UWeaponInfo@@@std@@YAPAUWeaponInfo@@IPAU1@@Z ; std::_Allocate<WeaponInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 28	 imul	 edi, 40			; 00000028H
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@2:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@2:
?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
; Function compile flags: /Ogsp
;	COMDAT ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1250 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1251 : 		this->_Myfirst = 0;

  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi

; 1252 : 		this->_Mylast = 0;
; 1253 : 		this->_Myend = 0;
; 1254 : 
; 1255 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 06		 mov	 DWORD PTR [esi], eax
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00014	3b f8		 cmp	 edi, eax
  00016	75 04		 jne	 SHORT $LN4@Buy@3

; 1256 : 			return (false);

  00018	32 c0		 xor	 al, al
  0001a	eb 2b		 jmp	 SHORT $LN5@Buy@3
$LN4@Buy@3:

; 1257 : 		else if (max_size() < _Capacity)

  0001c	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00022	76 0b		 jbe	 SHORT $LN2@Buy@3

; 1258 : 			_Xlen();	// result too long

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN19@Buy@3:
$LN2@Buy@3:

; 1259 : 		else
; 1260 : 			{	// nonempty array, allocate storage
; 1261 : 			this->_Myfirst = this->_Alval.allocate(_Capacity);

  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ??$_Allocate@UForceInfo@@@std@@YAPAUForceInfo@@IPAU1@@Z ; std::_Allocate<ForceInfo>

; 1262 : 			this->_Mylast = this->_Myfirst;
; 1263 : 			this->_Myend = this->_Myfirst + _Capacity;

  00036	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00039	03 f8		 add	 edi, eax
  0003b	59		 pop	 ecx
  0003c	89 06		 mov	 DWORD PTR [esi], eax
  0003e	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00041	59		 pop	 ecx
  00042	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 1264 : 			}
; 1265 : 		return (true);

  00045	b0 01		 mov	 al, 1
$LN5@Buy@3:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1266 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN18@Buy@3:
?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >::operator!=
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z PROC ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@@Z ENDP ; std::_Dest_val<std::allocator<ForceInfo>,ForceInfo>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ; std::allocator<ioHashString>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z PROC ; std::allocator<ioHashString>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ENDP ; std::allocator<ioHashString>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ; std::allocator<WeaponInfo>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z PROC ; std::allocator<WeaponInfo>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	83 c1 08	 add	 ecx, 8
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?destroy@?$allocator@UWeaponInfo@@@std@@QAEXPAUWeaponInfo@@@Z ENDP ; std::allocator<WeaponInfo>::destroy
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z PROC ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@VioHashString@@@std@@VioHashString@@ABV3@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@ABV2@@Z ENDP ; std::_Cons_val<std::allocator<ioHashString>,ioHashString,ioHashString const &>
_TEXT	ENDS
PUBLIC	??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T533746 = -4						; size = 4
$T533741 = -4						; size = 4
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 607  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	89 65 fc	 mov	 DWORD PTR $T533741[ebp], esp
  00009	8b f1		 mov	 esi, ecx
  0000b	89 65 fc	 mov	 DWORD PTR $T533746[ebp], esp
  0000e	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >

; 608  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c9		 leave
  00017	c3		 ret	 0
??0?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ; std::list<float,std::allocator<float> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ PROC ; std::list<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@XZ ENDP ; std::list<float,std::allocator<float> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::clear, COMDAT
; _this$ = ecx

; 1096 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);
; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1105 : 		this->_Mysize = 0;

  0000e	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00012	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00014	74 11		 je	 SHORT $LN1@clear
  00016	57		 push	 edi
$LL3@clear:

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

  00017	8b 39		 mov	 edi, DWORD PTR [ecx]

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);
; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	8b cf		 mov	 ecx, edi
  00022	3b 3e		 cmp	 edi, DWORD PTR [esi]
  00024	75 f1		 jne	 SHORT $LL3@clear
  00026	5f		 pop	 edi
$LN1@clear:
  00027	5e		 pop	 esi

; 1113 : 			}
; 1114 : 		}

  00028	c3		 ret	 0
?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::clear
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@MV?$allocator@M@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z ; std::list<float,std::allocator<float> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$list@MV?$allocator@M@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@MV?$allocator@M@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z PROC ; std::list<float,std::allocator<float> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$list@MV?$allocator@M@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z ENDP ; std::list<float,std::allocator<float> >::_Make_iter
_TEXT	ENDS
PUBLIC	?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z ; std::list<float,std::allocator<float> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z PROC ; std::list<float,std::allocator<float> >::erase, COMDAT
; _this$ = ecx

; 1054 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1055 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1056 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1057 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1058 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1059 : 		_Orphan_ptr(*this, _Pnode);
; 1060 : 
; 1061 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1062 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d 0c	 mov	 DWORD PTR __Where$[ebp], ecx

; 1063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1064 : 
; 1065 : 		if (_Pnode != this->_Myhead)

  0000e	3b 06		 cmp	 eax, DWORD PTR [esi]
  00010	74 19		 je	 SHORT $LN1@erase@2

; 1066 : 			{	// not list head, safe to erase
; 1067 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1068 : 				this->_Nextnode(_Pnode);

  00012	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	89 11		 mov	 DWORD PTR [ecx], edx

; 1069 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1070 : 				this->_Prevnode(_Pnode);

  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1071 : 
; 1072 : 			_Dest_val(this->_Alnod, _Pnode);
; 1073 : 			this->_Alnod.deallocate(_Pnode, 1);

  0001e	50		 push	 eax
  0001f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1074 : 
; 1075 : 			--this->_Mysize;

  00027	ff 4e 04	 dec	 DWORD PTR [esi+4]
  0002a	59		 pop	 ecx
$LN1@erase@2:

; 1076 : 			}
; 1077 : 		return (_Make_iter(_Where));

  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00031	89 08		 mov	 DWORD PTR [eax], ecx
  00033	5e		 pop	 esi

; 1078 : 		}

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z ENDP ; std::list<float,std::allocator<float> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ	; std::list<float,std::allocator<float> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::list<float,std::allocator<float> >::_Tidy, COMDAT
; _this$ = ecx

; 1497 : 		clear();

  00000	e9 00 00 00 00	 jmp	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
?_Tidy@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::list<float,std::allocator<float> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<AniRotateInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	eb 19		 jmp	 SHORT $LN35@Uninit_cop
$LL14@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00005	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UForceInfo@@@std@@UForceInfo@@ABU3@@std@@YAXAAV?$allocator@UForceInfo@@@0@PAUForceInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<ForceInfo>,ForceInfo,ForceInfo const &>
  00013	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN35@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00024	75 df		 jne	 SHORT $LL14@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00026	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 16		 jmp	 SHORT $LN24@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@U3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@$$QAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo>
  00015	83 45 10 08	 add	 DWORD PTR __Dest$[ebp], 8
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	83 c6 08	 add	 esi, 8
$LN24@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00022	75 e5		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00024	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00027	5e		 pop	 esi

; 438  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 281  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Cons_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@ABU3@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<WeaponInfo>,WeaponInfo,WeaponInfo const &>
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z PROC ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ENDP ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z PROC ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]
  00006	83 c1 08	 add	 ecx, 8

; 288  : 	}

  00009	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@UWeaponInfo@@@std@@UWeaponInfo@@@std@@YAXAAV?$allocator@UWeaponInfo@@@0@PAUWeaponInfo@@@Z ENDP ; std::_Dest_val<std::allocator<WeaponInfo>,WeaponInfo>
_TEXT	ENDS
PUBLIC	__mask@@AbsDouble@
PUBLIC	?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z ; ioExtendJump::SetAirJump
;	COMDAT __mask@@AbsDouble@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z$0
__ehfuncinfo$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
xdata$x	ENDS
;	COMDAT ?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z
_TEXT	SEGMENT
$T534370 = -56						; size = 16
tv1188 = -40						; size = 4
_fJumpPowerAmt$ = -40					; size = 4
_pGrp$ = -40						; size = 4
tv1308 = -36						; size = 4
tv1290 = -36						; size = 4
tv1281 = -36						; size = 4
tv1271 = -36						; size = 4
tv1262 = -36						; size = 4
tv1255 = -36						; size = 4
tv1152 = -36						; size = 4
tv206 = -36						; size = 4
tv187 = -36						; size = 4
_value$534532 = -36					; size = 4
_dwCurTime$ = -36					; size = 4
_szEncEventType$534270 = -32				; size = 9
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fTimeRate$ = 16					; size = 4
?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z PROC	; ioExtendJump::SetAirJump, COMDAT
; _this$ = ecx

; 232  : {

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _pOwner$[ebp]
  0000f	8b f1		 mov	 esi, ecx

; 233  : 	ClearAirJump();

  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	ff 50 74	 call	 DWORD PTR [eax+116]

; 234  : 
; 235  : 	if( !pOwner )

  00016	85 db		 test	 ebx, ebx
  00018	0f 84 12 02 00
	00		 je	 $LN1@SetAirJump

; 236  : 		return;
; 237  : 
; 238  : 	ioEntityGroup *pGrp = pOwner->GetGroup();

  0001e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00021	89 45 d8	 mov	 DWORD PTR _pGrp$[ebp], eax

; 239  : 	if( !pGrp )

  00024	85 c0		 test	 eax, eax
  00026	0f 84 04 02 00
	00		 je	 $LN1@SetAirJump

; 240  : 		return;
; 241  : 
; 242  : 	DWORD dwCurTime = FRAMEGETTIME();

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00032	8b c8		 mov	 ecx, eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0003a	6a 02		 push	 2
  0003c	89 45 dc	 mov	 DWORD PTR _dwCurTime$[ebp], eax

; 243  : 	
; 244  : 	pGrp->GetAnimationEventTimeList_e( iAniID, "air_jump", m_vAirJumpTimeList );

  0003f	c7 45 e0 8c 85
	99 b5		 mov	 DWORD PTR _szEncEventType$534270[ebp], -1248230004 ; b599858cH
  00046	c7 45 e4 87 99
	86 9a		 mov	 DWORD PTR _szEncEventType$534270[ebp+4], -1702454905 ; 9a869987H
  0004d	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$534270[ebp]
  00050	c6 45 e8 00	 mov	 BYTE PTR _szEncEventType$534270[ebp+8], 0
  00054	59		 pop	 ecx
$LL120@SetAirJump:
  00055	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0005b	83 c0 04	 add	 eax, 4
  0005e	49		 dec	 ecx
  0005f	75 f4		 jne	 SHORT $LL120@SetAirJump
  00061	8d 45 e0	 lea	 eax, DWORD PTR _szEncEventType$534270[ebp]
  00064	50		 push	 eax
  00065	8d 4d c8	 lea	 ecx, DWORD PTR $T534370[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0006e	8b 4d d8	 mov	 ecx, DWORD PTR _pGrp$[ebp]
  00071	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00075	8d be f0 00 00
	00		 lea	 edi, DWORD PTR [esi+240]
  0007b	57		 push	 edi
  0007c	8d 45 c8	 lea	 eax, DWORD PTR $T534370[ebp]
  0007f	50		 push	 eax
  00080	ff 75 0c	 push	 DWORD PTR _iAniID$[ebp]
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventTimeList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$list@MV?$allocator@M@std@@@std@@@Z
  00089	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 4d c8	 lea	 ecx, DWORD PTR $T534370[ebp]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 245  : 	std::list< float >::iterator iter = m_vAirJumpTimeList.begin();

  00096	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00098	8b 01		 mov	 eax, DWORD PTR [ecx]

; 246  : 	while( iter != m_vAirJumpTimeList.end() )

  0009a	3b c1		 cmp	 eax, ecx
  0009c	74 4e		 je	 SHORT $LN2@SetAirJump
  0009e	8b 4d dc	 mov	 ecx, DWORD PTR _dwCurTime$[ebp]
  000a1	db 45 dc	 fild	 DWORD PTR _dwCurTime$[ebp]
  000a4	85 c9		 test	 ecx, ecx
  000a6	79 06		 jns	 SHORT $LN196@SetAirJump
  000a8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN196@SetAirJump:
  000ae	d9 5d dc	 fstp	 DWORD PTR tv1152[ebp]
$LL3@SetAirJump:

; 247  : 	{
; 248  : 		(*iter) *= fTimeRate;

  000b1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000b6	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fTimeRate$[ebp]
  000bb	0f 5a c0	 cvtps2pd xmm0, xmm0
  000be	0f 5a c9	 cvtps2pd xmm1, xmm1
  000c1	f2 0f 59 c1	 mulsd	 xmm0, xmm1

; 249  : 		(*iter) += dwCurTime;

  000c5	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR tv1152[ebp]
  000ca	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000ce	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  000d3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000d6	0f 5a c9	 cvtps2pd xmm1, xmm1
  000d9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000dd	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000e1	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 250  : 		iter++;

  000e6	8b 00		 mov	 eax, DWORD PTR [eax]
  000e8	3b 07		 cmp	 eax, DWORD PTR [edi]
  000ea	75 c5		 jne	 SHORT $LL3@SetAirJump
$LN2@SetAirJump:

; 251  : 	}
; 252  : 
; 253  : 	// For AirJumpPower
; 254  : 	m_fAirJumpPowerRate = 0.0f;

  000ec	0f 57 c0	 xorps	 xmm0, xmm0
  000ef	f3 0f 11 86 04
	01 00 00	 movss	 DWORD PTR [esi+260], xmm0

; 255  : 
; 256  : 	float fJumpPowerAmt = pOwner->GetCurJumpPowerAmt();

  000f7	f3 0f 10 8b 90
	0e 00 00	 movss	 xmm1, DWORD PTR [ebx+3728]

; 257  : 	if( fJumpPowerAmt > 0.0f )

  000ff	0f 2f c8	 comiss	 xmm1, xmm0
  00102	f3 0f 11 4d d8	 movss	 DWORD PTR _fJumpPowerAmt$[ebp], xmm1
  00107	0f 86 23 01 00
	00		 jbe	 $LN1@SetAirJump

; 258  : 	{
; 259  : 		m_fAirJumpPowerRate = fabs( fJumpPowerAmt - pOwner->GetGravityAmt() ) / fJumpPowerAmt;

  0010d	8d 45 dc	 lea	 eax, DWORD PTR _value$534532[ebp]
  00110	50		 push	 eax
  00111	8d 8b e8 0b 00
	00		 lea	 ecx, DWORD PTR [ebx+3048]
  00117	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@M@@QAEXPAM@Z ; CEncrypt<float>::DecryptValueToPool
  0011c	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _value$534532[ebp]
  00121	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _fJumpPowerAmt$[ebp]
  00126	0f 5a c0	 cvtps2pd xmm0, xmm0
  00129	0f 5a c9	 cvtps2pd xmm1, xmm1
  0012c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00130	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _fJumpPowerAmt$[ebp]
  00135	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00139	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0013d	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __mask@@AbsDouble@
  00145	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00149	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0014d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00150	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00154	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00158	f3 0f 11 86 04
	01 00 00	 movss	 DWORD PTR [esi+260], xmm0

; 260  : 		m_fAirJumpPowerRate = max( 0.0f, min( FLOAT1, m_fAirJumpPowerRate ) );

  00160	b8 01 00 00 00	 mov	 eax, 1
  00165	d9 86 04 01 00
	00		 fld	 DWORD PTR [esi+260]
  0016b	d9 5d d8	 fstp	 DWORD PTR tv1188[ebp]
  0016e	89 45 dc	 mov	 DWORD PTR tv1290[ebp], eax
  00171	db 45 dc	 fild	 DWORD PTR tv1290[ebp]
  00174	85 c0		 test	 eax, eax
  00176	79 06		 jns	 SHORT $LN197@SetAirJump
  00178	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN197@SetAirJump:
  0017e	d9 45 d8	 fld	 DWORD PTR tv1188[ebp]
  00181	df f1		 fcomip	 ST(1)
  00183	dd d8		 fstp	 ST(0)
  00185	76 1f		 jbe	 SHORT $LN8@SetAirJump
  00187	b8 01 00 00 00	 mov	 eax, 1
  0018c	89 45 dc	 mov	 DWORD PTR tv1281[ebp], eax
  0018f	db 45 dc	 fild	 DWORD PTR tv1281[ebp]
  00192	85 c0		 test	 eax, eax
  00194	79 06		 jns	 SHORT $LN198@SetAirJump
  00196	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN198@SetAirJump:
  0019c	d9 5d dc	 fstp	 DWORD PTR tv187[ebp]
  0019f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv187[ebp]
  001a4	eb 05		 jmp	 SHORT $LN9@SetAirJump
$LN8@SetAirJump:
  001a6	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv1188[ebp]
$LN9@SetAirJump:
  001ab	0f 57 c9	 xorps	 xmm1, xmm1
  001ae	0f 5a c0	 cvtps2pd xmm0, xmm0
  001b1	66 0f 2f c8	 comisd	 xmm1, xmm0
  001b5	76 05		 jbe	 SHORT $LN12@SetAirJump
  001b7	0f 57 c0	 xorps	 xmm0, xmm0
  001ba	eb 4b		 jmp	 SHORT $LN11@SetAirJump
$LN12@SetAirJump:
  001bc	b8 01 00 00 00	 mov	 eax, 1
  001c1	d9 86 04 01 00
	00		 fld	 DWORD PTR [esi+260]
  001c7	d9 5d d8	 fstp	 DWORD PTR tv1188[ebp]
  001ca	89 45 dc	 mov	 DWORD PTR tv1271[ebp], eax
  001cd	db 45 dc	 fild	 DWORD PTR tv1271[ebp]
  001d0	85 c0		 test	 eax, eax
  001d2	79 06		 jns	 SHORT $LN199@SetAirJump
  001d4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN199@SetAirJump:
  001da	d9 45 d8	 fld	 DWORD PTR tv1188[ebp]
  001dd	df f1		 fcomip	 ST(1)
  001df	dd d8		 fstp	 ST(0)
  001e1	76 1f		 jbe	 SHORT $LN10@SetAirJump
  001e3	b8 01 00 00 00	 mov	 eax, 1
  001e8	89 45 dc	 mov	 DWORD PTR tv1262[ebp], eax
  001eb	db 45 dc	 fild	 DWORD PTR tv1262[ebp]
  001ee	85 c0		 test	 eax, eax
  001f0	79 06		 jns	 SHORT $LN200@SetAirJump
  001f2	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN200@SetAirJump:
  001f8	d9 5d dc	 fstp	 DWORD PTR tv206[ebp]
  001fb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv206[ebp]
  00200	eb 05		 jmp	 SHORT $LN11@SetAirJump
$LN10@SetAirJump:
  00202	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv1188[ebp]
$LN11@SetAirJump:
  00207	f3 0f 11 86 04
	01 00 00	 movss	 DWORD PTR [esi+260], xmm0

; 261  : 		m_fAirJumpPowerRate = FLOAT1 - m_fAirJumpPowerRate;

  0020f	b8 01 00 00 00	 mov	 eax, 1
  00214	89 45 dc	 mov	 DWORD PTR tv1255[ebp], eax
  00217	db 45 dc	 fild	 DWORD PTR tv1255[ebp]
  0021a	85 c0		 test	 eax, eax
  0021c	79 06		 jns	 SHORT $LN201@SetAirJump
  0021e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN201@SetAirJump:
  00224	d8 a6 04 01 00
	00		 fsub	 DWORD PTR [esi+260]
  0022a	d9 9e 04 01 00
	00		 fstp	 DWORD PTR [esi+260]
$LN1@SetAirJump:

; 262  : 	}
; 263  : }

  00230	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00235	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR $T534370[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z ENDP	; ioExtendJump::SetAirJump
PUBLIC	__$ArrayPad$
PUBLIC	?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z ; ioExtendJump::CheckAirJump
EXTRN	?SetForcePower@ioBaseChar@@QAEXABUD3DXVECTOR3@@MM_N@Z:PROC ; ioBaseChar::SetForcePower
EXTRN	?SetAirJumpPower@ioBaseChar@@QAEXM@Z:PROC	; ioBaseChar::SetAirJumpPower
; Function compile flags: /Ogsp
;	COMDAT ?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
tv468 = -32						; size = 4
tv458 = -32						; size = 4
tv448 = -32						; size = 4
_vAttDir$524369 = -28					; size = 12
$T524374 = -16						; size = 12
$T524371 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOwner$ = 8						; size = 4
?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z PROC	; ioExtendJump::CheckAirJump, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 267  : 	int iMaxCnt = m_vAirJumpTimeList.size();
; 268  : 
; 269  : 	if( m_iCurAirJump < iMaxCnt )

  00013	8b 96 ec 00 00
	00		 mov	 edx, DWORD PTR [esi+236]
  00019	57		 push	 edi
  0001a	8b 7d 08	 mov	 edi, DWORD PTR _pOwner$[ebp]
  0001d	3b 96 f4 00 00
	00		 cmp	 edx, DWORD PTR [esi+244]
  00023	0f 8d 61 01 00
	00		 jge	 $LN4@CheckAirJu

; 270  : 	{
; 271  : 		DWORD dwCurAirJumpTime = 0;
; 272  : 		std::list< float >::iterator iter = m_vAirJumpTimeList.begin();

  00029	8b 8e f0 00 00
	00		 mov	 ecx, DWORD PTR [esi+240]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	53		 push	 ebx

; 273  : 
; 274  : 		for( int i=0; iter != m_vAirJumpTimeList.end(); i++ )

  00032	33 db		 xor	 ebx, ebx
  00034	eb 07		 jmp	 SHORT $LN81@CheckAirJu
$LL8@CheckAirJu:

; 275  : 		{
; 276  : 			if( m_iCurAirJump == i )

  00036	3b d3		 cmp	 edx, ebx
  00038	74 0c		 je	 SHORT $LN75@CheckAirJu

; 279  : 				break;
; 280  : 			}
; 281  : 
; 282  : 			++iter;

  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	43		 inc	 ebx
$LN81@CheckAirJu:

; 273  : 
; 274  : 		for( int i=0; iter != m_vAirJumpTimeList.end(); i++ )

  0003d	3b c1		 cmp	 eax, ecx
  0003f	75 f5		 jne	 SHORT $LL8@CheckAirJu

; 275  : 		{
; 276  : 			if( m_iCurAirJump == i )

  00041	e9 43 01 00 00	 jmp	 $LN77@CheckAirJu
$LN75@CheckAirJu:

; 277  : 			{
; 278  : 				dwCurAirJumpTime = (DWORD)(*iter);

  00046	d9 40 08	 fld	 DWORD PTR [eax+8]
  00049	e8 00 00 00 00	 call	 __ftol2
  0004e	8b d8		 mov	 ebx, eax

; 283  : 		}
; 284  : 
; 285  : 		if( dwCurAirJumpTime > 0 && dwCurAirJumpTime < FRAMEGETTIME() )

  00050	85 db		 test	 ebx, ebx
  00052	0f 84 31 01 00
	00		 je	 $LN77@CheckAirJu
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0005e	8b c8		 mov	 ecx, eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00066	3b d8		 cmp	 ebx, eax
  00068	0f 83 1b 01 00
	00		 jae	 $LN77@CheckAirJu

; 286  : 		{
; 287  : 			if( m_fAirJumpPower >= 0.0f )

  0006e	f3 0f 10 86 fc
	00 00 00	 movss	 xmm0, DWORD PTR [esi+252]
  00076	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0007d	0f 82 00 01 00
	00		 jb	 $LN1@CheckAirJu

; 288  : 			{
; 289  : 				pOwner->SetAirJumpPower( m_fAirJumpPower*m_fAirJumpPowerRate );

  00083	f3 0f 10 8e 04
	01 00 00	 movss	 xmm1, DWORD PTR [esi+260]
  0008b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00091	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00095	51		 push	 ecx
  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  0009d	8b cf		 mov	 ecx, edi
  0009f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a4	e8 00 00 00 00	 call	 ?SetAirJumpPower@ioBaseChar@@QAEXM@Z ; ioBaseChar::SetAirJumpPower

; 290  : 
; 291  : 				D3DXVECTOR3 vAttDir =  pOwner->GetTargetRot() * D3DXVECTOR3(0.0f, 0.0f, -FLOAT1);

  000a9	b8 01 00 00 00	 mov	 eax, 1
  000ae	0f 57 c0	 xorps	 xmm0, xmm0
  000b1	89 45 e0	 mov	 DWORD PTR tv468[ebp], eax
  000b4	db 45 e0	 fild	 DWORD PTR tv468[ebp]
  000b7	f3 0f 11 45 f0	 movss	 DWORD PTR $T524371[ebp], xmm0
  000bc	f3 0f 11 45 f4	 movss	 DWORD PTR $T524371[ebp+4], xmm0
  000c1	85 c0		 test	 eax, eax
  000c3	79 06		 jns	 SHORT $LN78@CheckAirJu
  000c5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN78@CheckAirJu:
  000cb	8d 45 f0	 lea	 eax, DWORD PTR $T524371[ebp]
  000ce	d9 e0		 fchs
  000d0	50		 push	 eax
  000d1	d9 5d f8	 fstp	 DWORD PTR $T524371[ebp+8]
  000d4	8d 87 a4 06 00
	00		 lea	 eax, DWORD PTR [edi+1700]
  000da	50		 push	 eax
  000db	8d 45 e4	 lea	 eax, DWORD PTR _vAttDir$524369[ebp]
  000de	50		 push	 eax
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 292  : 				if( m_fAirForcePower < 0.0f )

  000e5	0f 57 c0	 xorps	 xmm0, xmm0
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	0f 2f 86 00 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+256]
  000f2	76 4b		 jbe	 SHORT $LN2@CheckAirJu

; 293  : 					pOwner->SetForcePower( -vAttDir, fabs(m_fAirForcePower), FLOAT1, true );

  000f4	b8 01 00 00 00	 mov	 eax, 1
  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  00101	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vAttDir$524369[ebp]
  00106	0f 57 c8	 xorps	 xmm1, xmm0
  00109	f3 0f 11 4d f0	 movss	 DWORD PTR $T524374[ebp], xmm1
  0010e	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vAttDir$524369[ebp+4]
  00113	0f 57 c8	 xorps	 xmm1, xmm0
  00116	f3 0f 11 4d f4	 movss	 DWORD PTR $T524374[ebp+4], xmm1
  0011b	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vAttDir$524369[ebp+8]
  00120	89 45 e0	 mov	 DWORD PTR tv458[ebp], eax
  00123	db 45 e0	 fild	 DWORD PTR tv458[ebp]
  00126	0f 57 c8	 xorps	 xmm1, xmm0
  00129	f3 0f 11 4d f8	 movss	 DWORD PTR $T524374[ebp+8], xmm1
  0012e	6a 01		 push	 1
  00130	85 c0		 test	 eax, eax
  00132	79 06		 jns	 SHORT $LN79@CheckAirJu
  00134	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN79@CheckAirJu:
  0013a	8d 45 f0	 lea	 eax, DWORD PTR $T524374[ebp]

; 294  : 				else

  0013d	eb 1a		 jmp	 SHORT $LN82@CheckAirJu
$LN2@CheckAirJu:

; 295  : 					pOwner->SetForcePower( vAttDir, fabs(m_fAirForcePower), FLOAT1, true );

  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	89 45 e0	 mov	 DWORD PTR tv448[ebp], eax
  00147	db 45 e0	 fild	 DWORD PTR tv448[ebp]
  0014a	6a 01		 push	 1
  0014c	85 c0		 test	 eax, eax
  0014e	79 06		 jns	 SHORT $LN80@CheckAirJu
  00150	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN80@CheckAirJu:
  00156	8d 45 e4	 lea	 eax, DWORD PTR _vAttDir$524369[ebp]
$LN82@CheckAirJu:
  00159	f3 0f 10 86 00
	01 00 00	 movss	 xmm0, DWORD PTR [esi+256]
  00161	51		 push	 ecx
  00162	51		 push	 ecx
  00163	0f 5a c0	 cvtps2pd xmm0, xmm0
  00166	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0016a	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __mask@@AbsDouble@
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017b	50		 push	 eax
  0017c	8b cf		 mov	 ecx, edi
  0017e	e8 00 00 00 00	 call	 ?SetForcePower@ioBaseChar@@QAEXABUD3DXVECTOR3@@MM_N@Z ; ioBaseChar::SetForcePower
$LN1@CheckAirJu:

; 296  : 			}
; 297  : 
; 298  : 			m_iCurAirJump++;

  00183	ff 86 ec 00 00
	00		 inc	 DWORD PTR [esi+236]
$LN77@CheckAirJu:
  00189	5b		 pop	 ebx
$LN4@CheckAirJu:

; 299  : 		}
; 300  : 	}
; 301  : }

  0018a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018d	5f		 pop	 edi
  0018e	33 cd		 xor	 ecx, ebp
  00190	5e		 pop	 esi
  00191	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00196	c9		 leave
  00197	c2 04 00	 ret	 4
?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z ENDP	; ioExtendJump::CheckAirJump
_TEXT	ENDS
PUBLIC	??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 769  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 770  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear

; 771  : 		}

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	59		 pop	 ecx
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@0@Z ; std::list<float,std::allocator<float> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T534793 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@0@Z PROC ; std::list<float,std::allocator<float> >::erase, COMDAT
; _this$ = ecx

; 1081 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1082 : 		if (_First == begin() && _Last == end())

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0000e	75 21		 jne	 SHORT $LN60@erase@3
  00010	39 4d 10	 cmp	 DWORD PTR __Last$[ebp], ecx
  00013	75 1c		 jne	 SHORT $LN60@erase@3

; 1083 : 			{	// erase all and return fresh iterator
; 1084 : 			clear();

  00015	8b ce		 mov	 ecx, esi
  00017	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear

; 1085 : 			return (end());

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	eb 19		 jmp	 SHORT $LN59@erase@3
$LL2@erase@3:

; 1090 : 				_First = erase(_First);

  00020	50		 push	 eax
  00021	8d 45 fc	 lea	 eax, DWORD PTR $T534793[ebp]
  00024	50		 push	 eax
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@@Z ; std::list<float,std::allocator<float> >::erase
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN60@erase@3:

; 1086 : 			}
; 1087 : 		else
; 1088 : 			{	// erase subrange
; 1089 : 			while (_First != _Last)

  00031	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00034	75 ea		 jne	 SHORT $LL2@erase@3

; 1091 : 			return (_Make_iter(_Last));

  00036	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
$LN59@erase@3:
  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	89 08		 mov	 DWORD PTR [eax], ecx
  0003e	5e		 pop	 esi

; 1092 : 			}
; 1093 : 		}

  0003f	c9		 leave
  00040	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@0@Z ENDP ; std::list<float,std::allocator<float> >::erase
_TEXT	ENDS
PUBLIC	??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ PROC ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Destroy_range<std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<AniRotateInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UAniRotateInfo@@@std@@@std@@YAXPAUAniRotateInfo@@0AAV?$allocator@UAniRotateInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$535013 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$535013[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$535019 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z PROC ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$535019[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@U1@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo>,AniRotateInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ENDP ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$3
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@2:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 34		 je	 SHORT $LN4@Uninit_cop@2

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@UWeaponInfo@@ABU1@@std@@YAXPAUWeaponInfo@@ABU1@@Z ; std::_Construct<WeaponInfo,WeaponInfo const &>
  00027	83 45 10 28	 add	 DWORD PTR __Dest$[ebp], 40 ; 00000028H
  0002b	83 45 08 28	 add	 DWORD PTR __First$[ebp], 40 ; 00000028H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@2
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0c		 jmp	 SHORT $LN48@Uninit_cop@2
$LL3@Uninit_cop@2:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00041	83 c6 28	 add	 esi, 40			; 00000028H
$LN48@Uninit_cop@2:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00044	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00047	75 ef		 jne	 SHORT $LL3@Uninit_cop@2

; 380  : 	_RERAISE;

  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN49@Uninit_cop@2:
$LN4@Uninit_cop@2:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00052	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c3		 ret	 0
$LN47@Uninit_cop@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
PUBLIC	??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 428  : 
; 429  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax
$LL6@Uninit_mov@2:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00019	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_mov@2

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  0001e	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00021	56		 push	 esi
  00022	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00025	e8 00 00 00 00	 call	 ?construct@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@$$QAV3@@Z ; std::allocator<ioHashString>::construct
  0002a	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002e	83 c6 10	 add	 esi, 16			; 00000010H
  00031	eb e6		 jmp	 SHORT $LL6@Uninit_mov@2
__catch$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN33@Uninit_mov@2
$LL3@Uninit_mov@2:

; 434  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN33@Uninit_mov@2:

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_mov@2

; 435  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN34@Uninit_mov@2:
$LN4@Uninit_mov@2:

; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 438  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN32@Uninit_mov@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ; std::_Destroy_range<std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ForceInfo> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@UForceInfo@@@std@@@std@@YAXPAUForceInfo@@0AAV?$allocator@UForceInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN17@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN17@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN20@Destroy_ra@2
$LL3@Destroy_ra@2:

; 97   : 		_Dest_val(_Al, _First);

  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN20@Destroy_ra@2:

; 96   : 	for (; _First != _Last; ++_First)

  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL3@Destroy_ra@2
  0001a	5e		 pop	 esi

; 98   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 373  : 
; 374  : 	_TRY_BEGIN

  0000f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00013	89 45 ec	 mov	 DWORD PTR __Next$[ebp], eax

; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

$LL14@Uninit_cop@3:
  00016	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00019	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001c	74 33		 je	 SHORT $LN4@Uninit_cop@3

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  0001e	50		 push	 eax
  0001f	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00027	83 45 10 10	 add	 DWORD PTR __Dest$[ebp], 16 ; 00000010H
  0002b	83 45 08 10	 add	 DWORD PTR __First$[ebp], 16 ; 00000010H
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
  00031	eb e3		 jmp	 SHORT $LL14@Uninit_cop@3
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00033	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00036	eb 0b		 jmp	 SHORT $LN45@Uninit_cop@3
$LL3@Uninit_cop@3:

; 379  : 		_Dest_val(_Al, _Next);

  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00040	83 c6 10	 add	 esi, 16			; 00000010H
$LN45@Uninit_cop@3:

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)

  00043	3b 75 10	 cmp	 esi, DWORD PTR __Dest$[ebp]
  00046	75 f0		 jne	 SHORT $LL3@Uninit_cop@3

; 380  : 	_RERAISE;

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN46@Uninit_cop@3:
$LN4@Uninit_cop@3:

; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00051	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00054	e8 00 00 00 00	 call	 __EH_epilog3
  00059	c3		 ret	 0
$LN44@Uninit_cop@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
PUBLIC	?ClearAirJump@ioExtendJump@@MAEXXZ		; ioExtendJump::ClearAirJump
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
;	COMDAT ?ClearAirJump@ioExtendJump@@MAEXXZ
_TEXT	SEGMENT
$T535479 = -4						; size = 4
?ClearAirJump@ioExtendJump@@MAEXXZ PROC			; ioExtendJump::ClearAirJump, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 227  : 	m_vAirJumpTimeList.erase( m_vAirJumpTimeList.begin(), m_vAirJumpTimeList.end() );

  00007	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	8d 45 fc	 lea	 eax, DWORD PTR $T535479[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?erase@?$list@MV?$allocator@M@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@MV?$allocator@M@std@@@std@@@2@0@Z ; std::list<float,std::allocator<float> >::erase

; 228  : 	m_iCurAirJump = 0;

  0001c	83 a6 ec 00 00
	00 00		 and	 DWORD PTR [esi+236], 0
  00023	5e		 pop	 esi

; 229  : }

  00024	c9		 leave
  00025	c3		 ret	 0
?ClearAirJump@ioExtendJump@@MAEXXZ ENDP			; ioExtendJump::ClearAirJump
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXPAUAniRotateInfo@@0@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$535626 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$535626[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Umove<AniRotateInfo *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Umove<AniRotateInfo *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUAniRotateInfo@@@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEPAUAniRotateInfo@@PAU2@00@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Umove<AniRotateInfo *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__Cat$535638 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$535638[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$535645 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$535645[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@V1@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioHashString *,ioHashString *,std::allocator<ioHashString>,ioHashString>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXPAUForceInfo@@0@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN21@Destroy_ra@3
$LL7@Destroy_ra@3:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN21@Destroy_ra@3:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@3
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z PROC ; std::_Destroy_range<std::allocator<WeaponInfo> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0c		 jmp	 SHORT $LN24@Destroy_ra@4
$LL7@Destroy_ra@4:
  00009	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00012	83 c6 28	 add	 esi, 40			; 00000028H
$LN24@Destroy_ra@4:
  00015	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00018	75 ef		 jne	 SHORT $LL7@Destroy_ra@4
  0001a	5e		 pop	 esi

; 89   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__Cat$535838 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$535838[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$535915 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase@4

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$535915[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAUAniRotateInfo@@PAU1@@std@@YAPAUAniRotateInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<AniRotateInfo *,AniRotateInfo *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase@4:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$525558 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00015	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  00022	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00025	2b 06		 sub	 eax, DWORD PTR [esi]
  00027	c1 f8 03	 sar	 eax, 3
  0002a	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0002d	73 65		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  0002f	6a 00		 push	 0
  00031	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00034	e8 00 00 00 00	 call	 ??$_Allocate@UAniRotateInfo@@@std@@YAPAUAniRotateInfo@@IPAU1@@Z ; std::_Allocate<AniRotateInfo>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00039	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003f	8b d8		 mov	 ebx, eax
  00041	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00044	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00047	52		 push	 edx
  00048	53		 push	 ebx
  00049	50		 push	 eax
  0004a	51		 push	 ecx
  0004b	89 5d ec	 mov	 DWORD PTR __Ptr$525558[ebp], ebx
  0004e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUAniRotateInfo@@PAU1@V?$allocator@UAniRotateInfo@@@std@@@std@@YAPAUAniRotateInfo@@PAU1@00AAV?$allocator@UAniRotateInfo@@@0@@Z ; std::_Uninitialized_move<AniRotateInfo *,AniRotateInfo *,std::allocator<AniRotateInfo> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00053	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005c	8b f9		 mov	 edi, ecx
  0005e	2b f8		 sub	 edi, eax
  00060	83 c4 18	 add	 esp, 24			; 00000018H
  00063	c1 ff 03	 sar	 edi, 3
  00066	85 c0		 test	 eax, eax
  00068	74 11		 je	 SHORT $LN48@reserve

; 761  : 			if (this->_Myfirst != 0)

  0006a	eb 03		 jmp	 SHORT $LN55@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve:
  0006c	83 c0 08	 add	 eax, 8
$LN55@reserve:
  0006f	3b c1		 cmp	 eax, ecx
  00071	75 f9		 jne	 SHORT $LL39@reserve

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00073	ff 36		 push	 DWORD PTR [esi]
  00075	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007a	59		 pop	 ecx
$LN48@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0007b	8b ce		 mov	 ecx, esi
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00083	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00086	8d 04 c3	 lea	 eax, DWORD PTR [ebx+eax*8]
  00089	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	8d 04 fb	 lea	 eax, DWORD PTR [ebx+edi*8]
  0008f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 771  : 			this->_Myfirst = _Ptr;

  00092	89 1e		 mov	 DWORD PTR [esi], ebx
$LN3@reserve:

; 772  : 			}
; 773  : 		}

  00094	e8 00 00 00 00	 call	 __EH_epilog3
  00099	c2 04 00	 ret	 4
__catch$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  0009c	ff 75 ec	 push	 DWORD PTR __Ptr$525558[ebp]
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a4	59		 pop	 ecx

; 757  : 			_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve:
$LN54@reserve:
  000ae	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$536220 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$536220[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVioHashString@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@PAV2@00@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Umove<ioHashString *>
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN23@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1271 : 		}

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Destroy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXPAUWeaponInfo@@0@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$536461 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$536461[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@1@0PAV2@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > > >
_TEXT	ENDS
PUBLIC	??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$536544 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 0c		 push	 12			; 0000000cH
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAE_NI@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$536544[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@std@@PAUForceInfo@@V?$allocator@UForceInfo@@@2@@std@@YAPAUForceInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UForceInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ForceInfo,std::allocator<ForceInfo> > >,ForceInfo *,std::allocator<ForceInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector:
$LN37@vector:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
PUBLIC	??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::~vector<AniRotateInfo,std::allocator<AniRotateInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::~vector<AniRotateInfo,std::allocator<AniRotateInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
??1?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::~vector<AniRotateInfo,std::allocator<AniRotateInfo> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T536573 = -4						; size = 4
?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T536573[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 03	 sar	 eax, 3
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 03	 sar	 edx, 3
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IBEII@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
_TEXT	ENDS
PUBLIC	?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv300 = -24						; size = 4
__Ptr$525538 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T536747 = 8						; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb ff ff ff
	0f		 cmp	 ebx, 268435455		; 0fffffffH
  00017	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN59@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	c1 f8 04	 sar	 eax, 4
  0002c	3b c3		 cmp	 eax, ebx
  0002e	73 7a		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00030	6a 00		 push	 0
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 ??$_Allocate@VioHashString@@@std@@YAPAVioHashString@@IPAV1@@Z ; std::_Allocate<ioHashString>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0003e	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00041	52		 push	 edx
  00042	89 45 ec	 mov	 DWORD PTR __Ptr$525538[ebp], eax
  00045	ff 75 ec	 push	 DWORD PTR __Ptr$525538[ebp]
  00048	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAVioHashString@@PAV1@V?$allocator@VioHashString@@@std@@@std@@YAPAVioHashString@@PAV1@00AAV?$allocator@VioHashString@@@0@@Z ; std::_Uninitialized_move<ioHashString *,ioHashString *,std::allocator<ioHashString> >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00052	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0005b	8b f9		 mov	 edi, ecx
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	2b f8		 sub	 edi, eax
  00062	89 4d e8	 mov	 DWORD PTR tv300[ebp], ecx
  00065	85 c0		 test	 eax, eax
  00067	74 24		 je	 SHORT $LN51@reserve@2

; 761  : 			if (this->_Myfirst != 0)
; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

  00069	89 45 08	 mov	 DWORD PTR $T536747[ebp], eax
  0006c	3b c1		 cmp	 eax, ecx
  0006e	74 15		 je	 SHORT $LN37@reserve@2
$LN39@reserve@2:
  00070	8b 4d 08	 mov	 ecx, DWORD PTR $T536747[ebp]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00079	83 45 08 10	 add	 DWORD PTR $T536747[ebp], 16 ; 00000010H
  0007d	8b 45 08	 mov	 eax, DWORD PTR $T536747[ebp]
  00080	3b 45 e8	 cmp	 eax, DWORD PTR tv300[ebp]
  00083	75 eb		 jne	 SHORT $LN39@reserve@2
$LN37@reserve@2:

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00085	ff 36		 push	 DWORD PTR [esi]
  00087	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008c	59		 pop	 ecx
$LN51@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0008d	8b ce		 mov	 ecx, esi
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$525538[ebp]
  00098	c1 e3 04	 shl	 ebx, 4
  0009b	03 d8		 add	 ebx, eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0009d	83 e7 f0	 and	 edi, -16		; fffffff0H
  000a0	03 f8		 add	 edi, eax
  000a2	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a5	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  000a8	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  000aa	e8 00 00 00 00	 call	 __EH_epilog3
  000af	c2 04 00	 ret	 4
__catch$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000b2	ff 75 ec	 push	 DWORD PTR __Ptr$525538[ebp]
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ba	59		 pop	 ecx

; 757  : 			_RERAISE;

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@reserve@2:
$LN58@reserve@2:
  000c4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
PUBLIC	??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T536949 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$536894 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR __Last_arg$[ebp]
  00012	74 38		 je	 SHORT $LN1@erase@5

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	ff 75 10	 push	 DWORD PTR __Cat$536894[ebp]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Move@PAVioHashString@@PAV1@@std@@YAPAVioHashString@@PAV1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<ioHashString *,ioHashString *>

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);

  00026	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00029	8b d8		 mov	 ebx, eax
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 5d fc	 mov	 DWORD PTR $T536949[ebp], ebx
  00031	3b df		 cmp	 ebx, edi
  00033	74 12		 je	 SHORT $LN36@erase@5
$LL52@erase@5:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR $T536949[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0003e	83 45 fc 10	 add	 DWORD PTR $T536949[ebp], 16 ; 00000010H
  00042	39 7d fc	 cmp	 DWORD PTR $T536949[ebp], edi
  00045	75 ee		 jne	 SHORT $LL52@erase@5
$LN36@erase@5:

; 1211 : 			this->_Mylast = _Ptr;

  00047	5f		 pop	 edi
  00048	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0004b	5b		 pop	 ebx
$LN1@erase@5:

; 1212 : 			}
; 1213 : 		return (_First);

  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	5e		 pop	 esi

; 1214 : 		}

  00050	c9		 leave
  00051	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN24@Tidy@5

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN28@Tidy@5
$LL12@Tidy@5:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 10	 add	 edi, 16			; 00000010H
$LN28@Tidy@5:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@5

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN24@Tidy@5:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 1e		 je	 SHORT $LN6@Tidy@6

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UWeaponInfo@@@std@@@std@@YAXPAUWeaponInfo@@0AAV?$allocator@UWeaponInfo@@@0@@Z ; std::_Destroy_range<std::allocator<WeaponInfo> >

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00023	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@Tidy@6:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00026	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00029	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0002d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00031	5e		 pop	 esi

; 1312 : 		}

  00032	c3		 ret	 0
?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
_TEXT	ENDS
PUBLIC	?InitAniRotate@ioExtendJump@@QAEXXZ		; ioExtendJump::InitAniRotate
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
;	COMDAT ?InitAniRotate@ioExtendJump@@QAEXXZ
_TEXT	SEGMENT
$T537178 = -4						; size = 4
?InitAniRotate@ioExtendJump@@QAEXXZ PROC		; ioExtendJump::InitAniRotate, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 370  : 	m_iCurAniRotate = 0;

  00004	83 a1 18 01 00
	00 00		 and	 DWORD PTR [ecx+280], 0

; 371  : 	m_dwAniRotateTime = 0;

  0000b	83 a1 1c 01 00
	00 00		 and	 DWORD PTR [ecx+284], 0

; 372  : 	m_fAniRotateAngle = 0.0f;

  00012	0f 57 c0	 xorps	 xmm0, xmm0
  00015	f3 0f 11 81 20
	01 00 00	 movss	 DWORD PTR [ecx+288], xmm0

; 373  : 	m_vAniRotateInfoList.clear();

  0001d	8b 81 0c 01 00
	00		 mov	 eax, DWORD PTR [ecx+268]
  00023	81 c1 08 01 00
	00		 add	 ecx, 264		; 00000108H
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	50		 push	 eax
  0002c	52		 push	 edx
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T537178[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?erase@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@@2@0@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::erase

; 374  : }

  00036	c9		 leave
  00037	c3		 ret	 0
?InitAniRotate@ioExtendJump@@QAEXXZ ENDP		; ioExtendJump::InitAniRotate
_TEXT	ENDS
PUBLIC	??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$537275 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	6a 28		 push	 40			; 00000028H
  00025	59		 pop	 ecx
  00026	99		 cdq
  00027	f7 f9		 idiv	 ecx
  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?_Buy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAE_NI@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Buy
  00031	84 c0		 test	 al, al
  00033	74 1f		 je	 SHORT $LN7@vector@2

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00035	ff 75 08	 push	 DWORD PTR __Cat$537275[ebp]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003d	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003f	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00042	52		 push	 edx
  00043	51		 push	 ecx
  00044	50		 push	 eax
  00045	57		 push	 edi
  00046	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00049	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@std@@PAUWeaponInfo@@V?$allocator@UWeaponInfo@@@2@@std@@YAPAUWeaponInfo@@V?$_Vector_const_iterator@V?$_Vector_val@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@@0@0PAU1@AAV?$allocator@UWeaponInfo@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<WeaponInfo,std::allocator<WeaponInfo> > >,WeaponInfo *,std::allocator<WeaponInfo> >
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
  00051	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@2:

; 543  : 			_CATCH_END
; 544  : 		}

  00054	8b c6		 mov	 eax, esi
  00056	e8 00 00 00 00	 call	 __EH_epilog3
  0005b	c2 04 00	 ret	 4
__catch$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy

; 542  : 			_RERAISE;

  00066	33 db		 xor	 ebx, ebx
  00068	53		 push	 ebx
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@2:
$LN37@vector@2:
  0006f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
PUBLIC	?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back
; Function compile flags: /Ogsp
;	COMDAT ?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z PROC ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 2d		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 27		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 06		 mov	 eax, DWORD PTR [esi]
  0002c	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  0002f	50		 push	 eax
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@AAU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@AAU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  0003c	eb 1b		 jmp	 SHORT $LN20@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003e	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00041	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  00043	6a 01		 push	 1
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXI@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  0004c	57		 push	 edi
  0004d	ff 76 04	 push	 DWORD PTR [esi+4]
  00050	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UAniRotateInfo@@@std@@UAniRotateInfo@@ABU3@@std@@YAXAAV?$allocator@UAniRotateInfo@@@0@PAUAniRotateInfo@@ABU2@@Z ; std::_Cons_val<std::allocator<AniRotateInfo>,AniRotateInfo,AniRotateInfo const &>
$LN20@push_back:
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 996  : 			++this->_Mylast;

  0005c	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z ENDP ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 04	 sar	 eax, 4
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve@2:
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 04	 sar	 edx, 4
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve@2

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IBEII@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::reserve
$LN1@Reserve@2:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve@2:
?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
_TEXT	ENDS
PUBLIC	??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$537423 = 8					; size = 1
__Right$ = 8						; size = 4
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 535  : 		{	// construct by copying _Right

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 536  : 		if (_Buy(_Right.size()))

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	89 1e		 mov	 DWORD PTR [esi], ebx
  00018	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0001b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0001e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00021	2b 07		 sub	 eax, DWORD PTR [edi]
  00023	c1 f8 04	 sar	 eax, 4
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Buy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAE_NI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Buy
  0002c	84 c0		 test	 al, al
  0002e	74 1f		 je	 SHORT $LN7@vector@3

; 537  : 			_TRY_BEGIN
; 538  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 539  : 				this->_Myfirst);

  00030	ff 75 08	 push	 DWORD PTR __Cat$537423[ebp]
  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	8b 3f		 mov	 edi, DWORD PTR [edi]
  0003a	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	57		 push	 edi
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  00044	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@std@@PAVioHashString@@V?$allocator@VioHashString@@@2@@std@@YAPAVioHashString@@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@0@0PAV1@AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<ioHashString,std::allocator<ioHashString> > >,ioHashString *,std::allocator<ioHashString> >
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector@3:

; 543  : 			_CATCH_END
; 544  : 		}

  0004f	8b c6		 mov	 eax, esi
  00051	e8 00 00 00 00	 call	 __EH_epilog3
  00056	c2 04 00	 ret	 4
__catch$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z$0:

; 540  : 			_CATCH_ALL
; 541  : 			_Tidy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy

; 542  : 			_RERAISE;

  00061	33 db		 xor	 ebx, ebx
  00063	53		 push	 ebx
  00064	53		 push	 ebx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@vector@3:
$LN37@vector@3:
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
PUBLIC	??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T537453 = -4						; size = 4
?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T537453[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
_TEXT	ENDS
PUBLIC	??1JumpGrappingWoundInfo@@QAE@XZ		; JumpGrappingWoundInfo::~JumpGrappingWoundInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1JumpGrappingWoundInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1JumpGrappingWoundInfo@@QAE@XZ$0
__ehfuncinfo$??1JumpGrappingWoundInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1JumpGrappingWoundInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1JumpGrappingWoundInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1JumpGrappingWoundInfo@@QAE@XZ PROC			; JumpGrappingWoundInfo::~JumpGrappingWoundInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1JumpGrappingWoundInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00015	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00018	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
  0001d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00021	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0002a	e8 00 00 00 00	 call	 __EH_epilog3
  0002f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1JumpGrappingWoundInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1JumpGrappingWoundInfo@@QAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1JumpGrappingWoundInfo@@QAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1JumpGrappingWoundInfo@@QAE@XZ ENDP			; JumpGrappingWoundInfo::~JumpGrappingWoundInfo
PUBLIC	??0JumpGrappingWoundInfo@@QAE@ABU0@@Z		; JumpGrappingWoundInfo::JumpGrappingWoundInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z$0
__ehfuncinfo$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0JumpGrappingWoundInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0JumpGrappingWoundInfo@@QAE@ABU0@@Z PROC		; JumpGrappingWoundInfo::JumpGrappingWoundInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8a 07		 mov	 al, BYTE PTR [edi]
  00016	88 06		 mov	 BYTE PTR [esi], al
  00018	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0001b	50		 push	 eax
  0001c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00025	d9 47 14	 fld	 DWORD PTR [edi+20]
  00028	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	d9 5e 14	 fstp	 DWORD PTR [esi+20]
  0002f	d9 47 18	 fld	 DWORD PTR [edi+24]
  00032	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00035	d9 5e 18	 fstp	 DWORD PTR [esi+24]
  00038	d9 47 1c	 fld	 DWORD PTR [edi+28]
  0003b	d9 5e 1c	 fstp	 DWORD PTR [esi+28]
  0003e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00041	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00044	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??0?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::vector<ioHashString,std::allocator<ioHashString> >
  0004d	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00050	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00053	8b c6		 mov	 eax, esi
  00055	e8 00 00 00 00	 call	 __EH_epilog3
  0005a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0JumpGrappingWoundInfo@@QAE@ABU0@@Z
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0JumpGrappingWoundInfo@@QAE@ABU0@@Z ENDP		; JumpGrappingWoundInfo::JumpGrappingWoundInfo
PUBLIC	??0AttackAttribute@@QAE@ABU0@@Z			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2
__ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0AttackAttribute@@QAE@ABU0@@Z PROC			; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	d9 47 10	 fld	 DWORD PTR [edi+16]
  00020	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00024	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00027	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0002a	50		 push	 eax
  0002b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0002e	ff d3		 call	 ebx
  00030	d9 47 24	 fld	 DWORD PTR [edi+36]
  00033	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  00036	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00039	50		 push	 eax
  0003a	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0003d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00041	e8 00 00 00 00	 call	 ??0?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::vector<WeaponInfo,std::allocator<WeaponInfo> >
  00046	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00049	50		 push	 eax
  0004a	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00051	e8 00 00 00 00	 call	 ??0?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ForceInfo,std::allocator<ForceInfo> >::vector<ForceInfo,std::allocator<ForceInfo> >
  00056	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00059	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0005c	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0005f	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00062	8b c6		 mov	 eax, esi
  00064	e8 00 00 00 00	 call	 __EH_epilog3
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??0AttackAttribute@@QAE@ABU0@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@ABU0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@ABU0@@Z ENDP			; AttackAttribute::AttackAttribute
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0L@PACFBADH@ani_rotate?$AA@		; `string'
PUBLIC	_this$GSCopy$
PUBLIC	?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z ; ioExtendJump::SetAniRotate
EXTRN	__imp_?ParseFloat@ioStringConverter@@SAMPBD@Z:PROC
EXTRN	__imp_?Split@ioStringConverter@@SAABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0H@Z:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?GetAnimationEventConstPtrList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@Z:PROC
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PACFBADH@ani_rotate?$AA@
CONST	SEGMENT
??_C@_0L@PACFBADH@ani_rotate?$AA@ DB 'ani_rotate', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$3
__ehfuncinfo$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
xdata$x	ENDS
;	COMDAT ?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z
_TEXT	SEGMENT
_vAniRotateList$ = -112					; size = 16
_dwCurTime$ = -96					; size = 4
$T537554 = -92						; size = 16
_kInfo$524916 = -84					; size = 8
_this$GSCopy$ = -76					; size = 4
$T524921 = -72						; size = 28
$T524922 = -44						; size = 28
__$EHRec$ = -12						; size = 12
_pChar$ = 8						; size = 4
_iAniID$ = 12						; size = 4
_fAniRate$ = 16						; size = 4
?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z PROC ; ioExtendJump::SetAniRotate, COMDAT
; _this$ = ecx

; 377  : {

  00000	6a 64		 push	 100			; 00000064H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 08	 mov	 eax, DWORD PTR _pChar$[ebp]

; 378  : 	if( !pChar ) return;

  0000f	33 db		 xor	 ebx, ebx
  00011	8b f1		 mov	 esi, ecx

; 408  : 			}
; 409  : 		}
; 410  : 
; 411  : 		m_vAniRotateInfoList.push_back(kInfo);

  00013	89 75 b4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00016	3b c3		 cmp	 eax, ebx
  00018	0f 84 85 01 00
	00		 je	 $LN146@SetAniRota

; 379  : 
; 380  : 	ioEntityGroup *pGrp = pChar->GetGroup();
; 381  : 	if( !pGrp ) return;

  0001e	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00021	3b fb		 cmp	 edi, ebx
  00023	0f 84 7a 01 00
	00		 je	 $LN146@SetAniRota

; 382  : 
; 383  : 	DWORD dwCurTime = FRAMEGETTIME();

  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0002f	8b c8		 mov	 ecx, eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 384  : 
; 385  : 	InitAniRotate();

  00037	8b ce		 mov	 ecx, esi
  00039	89 45 a0	 mov	 DWORD PTR _dwCurTime$[ebp], eax
  0003c	e8 00 00 00 00	 call	 ?InitAniRotate@ioExtendJump@@QAEXXZ ; ioExtendJump::InitAniRotate

; 386  : 
; 387  : 	AniEventConstPtrList vAniRotateList;

  00041	89 5d 90	 mov	 DWORD PTR _vAniRotateList$[ebp], ebx
  00044	89 5d 94	 mov	 DWORD PTR _vAniRotateList$[ebp+4], ebx
  00047	89 5d 98	 mov	 DWORD PTR _vAniRotateList$[ebp+8], ebx

; 388  : 	pGrp->GetAnimationEventConstPtrList( iAniID, "ani_rotate", vAniRotateList );

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PACFBADH@ani_rotate?$AA@
  0004f	8d 4d a4	 lea	 ecx, DWORD PTR $T537554[ebp]
  00052	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0005b	8d 45 90	 lea	 eax, DWORD PTR _vAniRotateList$[ebp]
  0005e	50		 push	 eax
  0005f	8d 45 a4	 lea	 eax, DWORD PTR $T537554[ebp]
  00062	50		 push	 eax
  00063	ff 75 0c	 push	 DWORD PTR _iAniID$[ebp]
  00066	8b cf		 mov	 ecx, edi
  00068	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAnimationEventConstPtrList@ioEntityGroup@@QAEHHABVioHashString@@AAV?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@@Z
  00072	8d 4d a4	 lea	 ecx, DWORD PTR $T537554[ebp]
  00075	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 389  : 
; 390  : 	AniEventConstPtrList::iterator iter_r = vAniRotateList.begin();

  0007e	8b 7d 90	 mov	 edi, DWORD PTR _vAniRotateList$[ebp]
  00081	e9 dd 00 00 00	 jmp	 $LN154@SetAniRota
$LL7@SetAniRota:

; 392  : 	{
; 393  : 		AniRotateInfo kInfo;
; 394  : 
; 395  : 		kInfo.m_dwTime = (*iter_r)->fEventTime * fAniRate;

  00086	8b 07		 mov	 eax, DWORD PTR [edi]
  00088	d9 00		 fld	 DWORD PTR [eax]
  0008a	0f 57 c0	 xorps	 xmm0, xmm0
  0008d	d8 4d 10	 fmul	 DWORD PTR _fAniRate$[ebp]
  00090	f3 0f 11 45 b0	 movss	 DWORD PTR _kInfo$524916[ebp+4], xmm0
  00095	e8 00 00 00 00	 call	 __ftol2

; 396  : 
; 397  : 		if( kInfo.m_dwTime > 0 )

  0009a	3b c3		 cmp	 eax, ebx
  0009c	76 08		 jbe	 SHORT $LN5@SetAniRota

; 398  : 			kInfo.m_dwTime += dwCurTime;

  0009e	03 45 a0	 add	 eax, DWORD PTR _dwCurTime$[ebp]
  000a1	89 45 ac	 mov	 DWORD PTR _kInfo$524916[ebp], eax

; 399  : 		else

  000a4	eb 03		 jmp	 SHORT $LN4@SetAniRota
$LN5@SetAniRota:

; 400  : 			kInfo.m_dwTime = 0;

  000a6	89 5d ac	 mov	 DWORD PTR _kInfo$524916[ebp], ebx
$LN4@SetAniRota:

; 401  : 
; 402  : 		if( !(*iter_r)->szSubInfo.IsEmpty() )

  000a9	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000ab	8d 49 14	 lea	 ecx, DWORD PTR [ecx+20]
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  000b4	84 c0		 test	 al, al
  000b6	0f 85 95 00 00
	00		 jne	 $LN2@SetAniRota

; 403  : 		{
; 404  : 			const StringVector &vParam = ioStringConverter::Split( (*iter_r)->szSubInfo.c_str(), " " );

  000bc	6a 0f		 push	 15			; 0000000fH
  000be	5e		 pop	 esi
  000bf	6a 01		 push	 1
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5?$AA@
  000c6	8d 4d b8	 lea	 ecx, DWORD PTR $T524921[ebp]
  000c9	89 75 cc	 mov	 DWORD PTR $T524921[ebp+20], esi
  000cc	89 5d c8	 mov	 DWORD PTR $T524921[ebp+16], ebx
  000cf	88 5d b8	 mov	 BYTE PTR $T524921[ebp], bl
  000d2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000d7	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000d9	83 c1 14	 add	 ecx, 20			; 00000014H
  000dc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  000e6	50		 push	 eax
  000e7	8d 4d d4	 lea	 ecx, DWORD PTR $T524922[ebp]
  000ea	89 75 e8	 mov	 DWORD PTR $T524922[ebp+20], esi
  000ed	89 5d e4	 mov	 DWORD PTR $T524922[ebp+16], ebx
  000f0	88 5d d4	 mov	 BYTE PTR $T524922[ebp], bl
  000f3	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000f8	53		 push	 ebx
  000f9	8d 45 b8	 lea	 eax, DWORD PTR $T524921[ebp]
  000fc	50		 push	 eax
  000fd	8d 45 d4	 lea	 eax, DWORD PTR $T524922[ebp]
  00100	50		 push	 eax
  00101	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Split@ioStringConverter@@SAABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@0H@Z
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010e	53		 push	 ebx
  0010f	6a 01		 push	 1
  00111	8d 4d d4	 lea	 ecx, DWORD PTR $T524922[ebp]
  00114	8b f0		 mov	 esi, eax
  00116	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0011b	53		 push	 ebx
  0011c	6a 01		 push	 1
  0011e	8d 4d b8	 lea	 ecx, DWORD PTR $T524921[ebp]
  00121	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00124	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 405  : 			if( vParam.size() == 1 )

  00129	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0012b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0012e	2b c1		 sub	 eax, ecx
  00130	6a 1c		 push	 28			; 0000001cH
  00132	99		 cdq
  00133	5e		 pop	 esi
  00134	f7 fe		 idiv	 esi
  00136	83 f8 01	 cmp	 eax, 1
  00139	75 13		 jne	 SHORT $LN152@SetAniRota

; 406  : 			{
; 407  : 				kInfo.m_fAngle = ioStringConverter::ParseFloat( vParam[0].c_str() );

  0013b	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0013f	72 02		 jb	 SHORT $LN134@SetAniRota
  00141	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN134@SetAniRota:
  00143	51		 push	 ecx
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ParseFloat@ioStringConverter@@SAMPBD@Z
  0014a	d9 5d b0	 fstp	 DWORD PTR _kInfo$524916[ebp+4]
  0014d	59		 pop	 ecx
$LN152@SetAniRota:
  0014e	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
$LN2@SetAniRota:

; 408  : 			}
; 409  : 		}
; 410  : 
; 411  : 		m_vAniRotateInfoList.push_back(kInfo);

  00151	8d 45 ac	 lea	 eax, DWORD PTR _kInfo$524916[ebp]
  00154	50		 push	 eax
  00155	8d 8e 08 01 00
	00		 lea	 ecx, DWORD PTR [esi+264]
  0015b	e8 00 00 00 00	 call	 ?push_back@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@QAEXABUAniRotateInfo@@@Z ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::push_back

; 412  : 
; 413  : 		++iter_r;

  00160	83 c7 04	 add	 edi, 4
$LN154@SetAniRota:

; 391  : 	while( iter_r != vAniRotateList.end() )

  00163	3b 7d 94	 cmp	 edi, DWORD PTR _vAniRotateList$[ebp+4]
  00166	0f 85 1a ff ff
	ff		 jne	 $LL7@SetAniRota

; 414  : 	}
; 415  : 
; 416  : 	if( !m_vAniRotateInfoList.empty() )

  0016c	8b 8e 08 01 00
	00		 mov	 ecx, DWORD PTR [esi+264]
  00172	3b 8e 0c 01 00
	00		 cmp	 ecx, DWORD PTR [esi+268]
  00178	74 1d		 je	 SHORT $LN1@SetAniRota

; 417  : 	{
; 418  : 		m_iCurAniRotate = 0;
; 419  : 		m_dwAniRotateTime = m_vAniRotateInfoList[m_iCurAniRotate].m_dwTime;

  0017a	8b 86 08 01 00
	00		 mov	 eax, DWORD PTR [esi+264]
  00180	89 9e 18 01 00
	00		 mov	 DWORD PTR [esi+280], ebx
  00186	8b 08		 mov	 ecx, DWORD PTR [eax]
  00188	89 8e 1c 01 00
	00		 mov	 DWORD PTR [esi+284], ecx

; 420  : 		m_fAniRotateAngle = m_vAniRotateInfoList[m_iCurAniRotate].m_fAngle;

  0018e	d9 40 04	 fld	 DWORD PTR [eax+4]
  00191	d9 9e 20 01 00
	00		 fstp	 DWORD PTR [esi+288]
$LN1@SetAniRota:

; 421  : 	}
; 422  : }

  00197	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0019b	8d 4d 90	 lea	 ecx, DWORD PTR _vAniRotateList$[ebp]
  0019e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@IAEXXZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::_Tidy
$LN146@SetAniRota:
  001a3	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001a8	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$0:
  00000	8d 4d 90	 lea	 ecx, DWORD PTR _vAniRotateList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PBUAniEventTime@@V?$allocator@PBUAniEventTime@@@std@@@std@@QAE@XZ ; std::vector<AniEventTime const *,std::allocator<AniEventTime const *> >::~vector<AniEventTime const *,std::allocator<AniEventTime const *> >
__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$1:
  00008	8d 4d a4	 lea	 ecx, DWORD PTR $T537554[ebp]
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$2:
  00011	8d 4d b8	 lea	 ecx, DWORD PTR $T524921[ebp]
  00014	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z$3:
  00019	8d 4d d4	 lea	 ecx, DWORD PTR $T524922[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetAniRotate@ioExtendJump@@QAEXPAVioBaseChar@@HM@Z ENDP ; ioExtendJump::SetAniRotate
PUBLIC	?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 29		 jae	 SHORT $LN4@push_back@2
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 23		 ja	 SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx

; 980  : 			if (this->_Mylast == this->_Myend)

  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  00027	83 e7 f0	 and	 edi, -16		; fffffff0H
  0002a	03 3e		 add	 edi, DWORD PTR [esi]
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	57		 push	 edi
  00030	ff 76 04	 push	 DWORD PTR [esi+4]
  00033	e8 00 00 00 00	 call	 ??$construct@AAVioHashString@@@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@AAV2@@Z ; std::allocator<ioHashString>::construct<ioHashString &>

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00038	eb 19		 jmp	 SHORT $LN30@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  0003a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003d	75 09		 jne	 SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

  0003f	6a 01		 push	 1
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXI@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00048	57		 push	 edi
  00049	ff 76 04	 push	 DWORD PTR [esi+4]
  0004c	e8 00 00 00 00	 call	 ??$_Construct@VioHashString@@ABV1@@std@@YAXPAVioHashString@@ABV1@@Z ; std::_Construct<ioHashString,ioHashString const &>
  00051	59		 pop	 ecx
  00052	59		 pop	 ecx
$LN30@push_back@2:

; 996  : 			++this->_Mylast;

  00053	83 46 04 10	 add	 DWORD PTR [esi+4], 16	; 00000010H
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
_TEXT	ENDS
PUBLIC	??0AttackAttribute@@QAE@XZ			; AttackAttribute::AttackAttribute
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AttackAttribute@@QAE@XZ$3
__ehfuncinfo$??0AttackAttribute@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioattackattribute.h
xdata$x	ENDS
;	COMDAT ??0AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AttackAttribute@@QAE@XZ PROC				; AttackAttribute::AttackAttribute, COMDAT
; _this$ = ecx

; 107  : 	AttackAttribute()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	33 db		 xor	 ebx, ebx
  0001b	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00021	ff d7		 call	 edi
  00023	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00026	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00029	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  0002c	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0002f	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  00032	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 108  : 	{
; 109  : 		Init();

  00035	8b ce		 mov	 ecx, esi
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	e8 00 00 00 00	 call	 ?Init@AttackAttribute@@QAEXXZ ; AttackAttribute::Init

; 110  : 	}

  00040	8b c6		 mov	 eax, esi
  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__unwindfunclet$??0AttackAttribute@@QAE@XZ$3:
  00020	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 38	 add	 ecx, 56			; 00000038H
  00026	e9 00 00 00 00	 jmp	 ??1?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@QAE@XZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::~vector<ForceInfo,std::allocator<ForceInfo> >
__ehhandler$??0AttackAttribute@@QAE@XZ:
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AttackAttribute@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::AttackAttribute
PUBLIC	??1AttackAttribute@@QAE@XZ			; AttackAttribute::~AttackAttribute
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AttackAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1AttackAttribute@@QAE@XZ$2
__ehfuncinfo$??1AttackAttribute@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1AttackAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1AttackAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AttackAttribute@@QAE@XZ PROC				; AttackAttribute::~AttackAttribute, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1AttackAttribute@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 38	 lea	 ecx, DWORD PTR [esi+56]
  00014	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UForceInfo@@V?$allocator@UForceInfo@@@std@@@std@@IAEXXZ ; std::vector<ForceInfo,std::allocator<ForceInfo> >::_Tidy
  00020	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00023	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@IAEXXZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::_Tidy
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00032	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00035	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00039	ff d7		 call	 edi
  0003b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d7		 call	 edi
  00043	e8 00 00 00 00	 call	 __EH_epilog3
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AttackAttribute@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 14	 add	 ecx, 20			; 00000014H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1AttackAttribute@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 28	 add	 ecx, 40			; 00000028H
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@UWeaponInfo@@V?$allocator@UWeaponInfo@@@std@@@std@@QAE@XZ ; std::vector<WeaponInfo,std::allocator<WeaponInfo> >::~vector<WeaponInfo,std::allocator<WeaponInfo> >
__ehhandler$??1AttackAttribute@@QAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AttackAttribute@@QAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AttackAttribute@@QAE@XZ ENDP				; AttackAttribute::~AttackAttribute
PUBLIC	?Init@JumpGrappingWoundInfo@@QAEXXZ		; JumpGrappingWoundInfo::Init
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
;	COMDAT ?Init@JumpGrappingWoundInfo@@QAEXXZ
_TEXT	SEGMENT
tv227 = -4						; size = 4
tv216 = -4						; size = 4
tv212 = -4						; size = 4
tv208 = -4						; size = 4
$T538159 = -4						; size = 4
?Init@JumpGrappingWoundInfo@@QAEXXZ PROC		; JumpGrappingWoundInfo::Init, COMDAT
; _this$ = ecx

; 1327 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1328 : 		m_bReverseTargetRot = false;
; 1329 : 
; 1330 : 		m_GrapplingColType = GCT_NONE;

  00007	83 66 34 00	 and	 DWORD PTR [esi+52], 0
  0000b	c6 06 00	 mov	 BYTE PTR [esi], 0

; 1331 : 
; 1332 : 		m_fWoundedAniRate = FLOAT1;

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	89 45 fc	 mov	 DWORD PTR tv227[ebp], eax
  00016	db 45 fc	 fild	 DWORD PTR tv227[ebp]
  00019	85 c0		 test	 eax, eax
  0001b	79 06		 jns	 SHORT $LN27@Init@2
  0001d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN27@Init@2:

; 1333 : 		m_CancelBuffList.clear();

  00023	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00026	d9 5e 14	 fstp	 DWORD PTR [esi+20]
  00029	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002e	50		 push	 eax
  0002f	52		 push	 edx
  00030	8d 45 fc	 lea	 eax, DWORD PTR $T538159[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?erase@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@2@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::erase

; 1334 : 
; 1335 : 		m_fOffSet = 0.0f;

  00039	0f 57 c0	 xorps	 xmm0, xmm0
  0003c	f3 0f 11 46 18	 movss	 DWORD PTR [esi+24], xmm0

; 1336 : 		m_fHeightRate = FLOAT05;

  00041	b8 05 00 00 00	 mov	 eax, 5
  00046	8b c8		 mov	 ecx, eax
  00048	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0004d	89 4d fc	 mov	 DWORD PTR tv216[ebp], ecx
  00050	db 45 fc	 fild	 DWORD PTR tv216[ebp]
  00053	85 c9		 test	 ecx, ecx
  00055	79 06		 jns	 SHORT $LN28@Init@2
  00057	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@Init@2:
  0005d	89 45 fc	 mov	 DWORD PTR tv212[ebp], eax
  00060	db 45 fc	 fild	 DWORD PTR tv212[ebp]
  00063	85 c0		 test	 eax, eax
  00065	79 06		 jns	 SHORT $LN29@Init@2
  00067	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@Init@2:
  0006d	de f9		 fdivp	 ST(1), ST(0)

; 1337 : 		m_dwJumpGrapplingRotateTime = 0;

  0006f	83 66 20 00	 and	 DWORD PTR [esi+32], 0
  00073	d9 5d fc	 fstp	 DWORD PTR tv208[ebp]
  00076	d9 45 fc	 fld	 DWORD PTR tv208[ebp]
  00079	d9 5e 1c	 fstp	 DWORD PTR [esi+28]
  0007c	5e		 pop	 esi

; 1338 : 	}

  0007d	c9		 leave
  0007e	c3		 ret	 0
?Init@JumpGrappingWoundInfo@@QAEXXZ ENDP		; JumpGrappingWoundInfo::Init
_TEXT	ENDS
PUBLIC	??1JumpGrapplingInfo@@QAE@XZ			; JumpGrapplingInfo::~JumpGrapplingInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1JumpGrapplingInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1JumpGrapplingInfo@@QAE@XZ$0
__ehfuncinfo$??1JumpGrapplingInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1JumpGrapplingInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1JumpGrapplingInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1JumpGrapplingInfo@@QAE@XZ PROC			; JumpGrapplingInfo::~JumpGrapplingInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1JumpGrapplingInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00015	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00018	e8 00 00 00 00	 call	 ??1AttackAttribute@@QAE@XZ
  0001d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00021	8b ce		 mov	 ecx, esi
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00029	e8 00 00 00 00	 call	 __EH_epilog3
  0002e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1JumpGrapplingInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1JumpGrapplingInfo@@QAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1JumpGrapplingInfo@@QAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1JumpGrapplingInfo@@QAE@XZ ENDP			; JumpGrapplingInfo::~JumpGrapplingInfo
PUBLIC	??0JumpGrapplingInfo@@QAE@ABU0@@Z		; JumpGrapplingInfo::JumpGrapplingInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0JumpGrapplingInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0JumpGrapplingInfo@@QAE@ABU0@@Z$0
__ehfuncinfo$??0JumpGrapplingInfo@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0JumpGrapplingInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0JumpGrapplingInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0JumpGrapplingInfo@@QAE@ABU0@@Z PROC			; JumpGrapplingInfo::JumpGrapplingInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0JumpGrapplingInfo@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	57		 push	 edi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001b	d9 47 10	 fld	 DWORD PTR [edi+16]
  0001e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00022	d9 5e 10	 fstp	 DWORD PTR [esi+16]
  00025	d9 47 14	 fld	 DWORD PTR [edi+20]
  00028	83 c7 1c	 add	 edi, 28			; 0000001cH
  0002b	d9 5e 14	 fstp	 DWORD PTR [esi+20]
  0002e	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  00031	57		 push	 edi
  00032	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00035	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00038	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@ABU0@@Z
  0003d	8b c6		 mov	 eax, esi
  0003f	e8 00 00 00 00	 call	 __EH_epilog3
  00044	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0JumpGrapplingInfo@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0JumpGrapplingInfo@@QAE@ABU0@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0JumpGrapplingInfo@@QAE@ABU0@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0JumpGrapplingInfo@@QAE@ABU0@@Z ENDP			; JumpGrapplingInfo::JumpGrapplingInfo
PUBLIC	??_7ioExtendJump@@6B@				; ioExtendJump::`vftable'
PUBLIC	??1ioExtendJump@@UAE@XZ				; ioExtendJump::~ioExtendJump
PUBLIC	??_R4ioExtendJump@@6B@				; ioExtendJump::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioExtendJump@@@8			; ioExtendJump `RTTI Type Descriptor'
PUBLIC	??_R3ioExtendJump@@8				; ioExtendJump::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioExtendJump@@8				; ioExtendJump::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioExtendJump@@8			; ioExtendJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z ; ioExtendJump::LoadProperty
EXTRN	__purecall:PROC
EXTRN	??_EioExtendJump@@UAEPAXI@Z:PROC		; ioExtendJump::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@ioExtendJump@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@ioExtendJump@@8 DD FLAT:??_R0?AVioExtendJump@@@8 ; ioExtendJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R2ioExtendJump@@8
rdata$r	SEGMENT
??_R2ioExtendJump@@8 DD FLAT:??_R1A@?0A@EA@ioExtendJump@@8 ; ioExtendJump::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioExtendJump@@8
rdata$r	SEGMENT
??_R3ioExtendJump@@8 DD 00H				; ioExtendJump::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioExtendJump@@@8
_DATA	SEGMENT
??_R0?AVioExtendJump@@@8 DD FLAT:??_7type_info@@6B@	; ioExtendJump `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioExtendJump@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioExtendJump@@6B@
rdata$r	SEGMENT
??_R4ioExtendJump@@6B@ DD 00H				; ioExtendJump::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioExtendJump@@@8
	DD	FLAT:??_R3ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_7ioExtendJump@@6B@
CONST	SEGMENT
??_7ioExtendJump@@6B@ DD FLAT:??_R4ioExtendJump@@6B@	; ioExtendJump::`vftable'
	DD	FLAT:?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?SetJumpState@ioExtendJump@@UAEXXZ
	DD	FLAT:?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpping@ioExtendJump@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z
	DD	FLAT:?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z
	DD	FLAT:?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetChargingTime@ioExtendJump@@UAEKPAVioBaseChar@@@Z
	DD	FLAT:?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ
	DD	FLAT:?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ
	DD	FLAT:?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ
	DD	FLAT:?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ
	DD	FLAT:?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z
	DD	FLAT:?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z
	DD	FLAT:?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z
	DD	FLAT:?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearAirJump@ioExtendJump@@MAEXXZ
	DD	FLAT:?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ
	DD	FLAT:?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z
	DD	FLAT:?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoProcessMove@ioExtendJump@@UAE_NXZ
	DD	FLAT:??_EioExtendJump@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ioExtendJump@@UAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1ioExtendJump@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1ioExtendJump@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioExtendJump@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1ioExtendJump@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1ioExtendJump@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1ioExtendJump@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1ioExtendJump@@UAE@XZ$4
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
xdata$x	ENDS
;	COMDAT ??1ioExtendJump@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioExtendJump@@UAE@XZ PROC				; ioExtendJump::~ioExtendJump, COMDAT
; _this$ = ecx

; 46   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioExtendJump@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioExtendJump@@6B@

; 47   : }

  00017	8d 8e 08 01 00
	00		 lea	 ecx, DWORD PTR [esi+264]
  0001d	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00024	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UAniRotateInfo@@V?$allocator@UAniRotateInfo@@@std@@@std@@IAEXXZ ; std::vector<AniRotateInfo,std::allocator<AniRotateInfo> >::_Tidy
  00029	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  0002f	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear
  00034	ff b6 f0 00 00
	00		 push	 DWORD PTR [esi+240]
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003f	59		 pop	 ecx
  00040	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00046	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0004a	e8 00 00 00 00	 call	 ??1JumpGrappingWoundInfo@@QAE@XZ
  0004f	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00052	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00056	e8 00 00 00 00	 call	 ??1JumpGrapplingInfo@@QAE@XZ
  0005b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00061	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00064	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00068	ff d7		 call	 edi
  0006a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006e	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00071	ff d7		 call	 edi
  00073	e8 00 00 00 00	 call	 __EH_epilog3
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioExtendJump@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioExtendJump@@UAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 28	 add	 ecx, 40			; 00000028H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1ioExtendJump@@UAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001e	e9 00 00 00 00	 jmp	 ??1JumpGrapplingInfo@@QAE@XZ
__unwindfunclet$??1ioExtendJump@@UAE@XZ$3:
  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0002c	e9 00 00 00 00	 jmp	 ??1JumpGrappingWoundInfo@@QAE@XZ
__unwindfunclet$??1ioExtendJump@@UAE@XZ$4:
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	81 c1 f0 00 00
	00		 add	 ecx, 240		; 000000f0H
  0003a	e9 00 00 00 00	 jmp	 ??1?$list@MV?$allocator@M@std@@@std@@QAE@XZ ; std::list<float,std::allocator<float> >::~list<float,std::allocator<float> >
__ehhandler$??1ioExtendJump@@UAE@XZ:
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioExtendJump@@UAE@XZ
  00055	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioExtendJump@@UAE@XZ ENDP				; ioExtendJump::~ioExtendJump
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z$0
__ehfuncinfo$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
xdata$x	ENDS
;	COMDAT ?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
$T538255 = -1296					; size = 16
tv24032 = -1280						; size = 4
tv24015 = -1280						; size = 4
tv24000 = -1280						; size = 4
tv23985 = -1280						; size = 4
tv23964 = -1280						; size = 4
tv23940 = -1280						; size = 4
tv23936 = -1280						; size = 4
_iBuffCnt$ = -1280					; size = 4
tv23932 = -1276						; size = 4
tv19232 = -1276						; size = 4
$T540534 = -1276					; size = 4
_i$539513 = -1276					; size = 4
_i$539259 = -1276					; size = 4
_i$538626 = -1276					; size = 4
_szKey$ = -1272						; size = 260
_szBuf$ = -1012						; size = 260
__k$540550 = -752					; size = 33
__k$540167 = -712					; size = 36
__k$540292 = -672					; size = 32
__k$540813 = -636					; size = 31
__k$540042 = -600					; size = 30
__k$538962 = -564					; size = 25
__k$539913 = -532					; size = 25
__k$539676 = -500					; size = 28
__k$539159 = -468					; size = 28
__k$540677 = -436					; size = 28
__k$540417 = -404					; size = 28
__k$541187 = -372					; size = 27
__k$539538 = -340					; size = 26
__k$541062 = -308					; size = 21
__k$539413 = -280					; size = 24
__k$538664 = -252					; size = 24
__k$539030 = -224					; size = 23
_szEncAttack$539867 = -196				; size = 22
__k$538397 = -168					; size = 17
__k$538789 = -144					; size = 20
__k$539284 = -120					; size = 19
__k$538526 = -96					; size = 16
__k$538272 = -76					; size = 16
__k$541042 = -56					; size = 15
___encStr$523881 = -36					; size = 14
__$EHRec$ = -12						; size = 12
_rkLoader$ = 8						; size = 4
?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z PROC	; ioExtendJump::LoadProperty, COMDAT
; _this$ = ecx

; 50   : {

  00000	68 04 05 00 00	 push	 1284			; 00000504H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 51   : 	char szBuf[MAX_PATH] = "";

  00012	33 db		 xor	 ebx, ebx
  00014	68 03 01 00 00	 push	 259			; 00000103H
  00019	8d 85 0d fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  0001f	53		 push	 ebx
  00020	50		 push	 eax
  00021	8b f1		 mov	 esi, ecx
  00023	88 9d 0c fc ff
	ff		 mov	 BYTE PTR _szBuf$[ebp], bl
  00029	e8 00 00 00 00	 call	 _memset

; 52   : 	char szKey[MAX_PATH] = "";

  0002e	68 03 01 00 00	 push	 259			; 00000103H
  00033	8d 85 09 fb ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp+1]
  00039	53		 push	 ebx
  0003a	50		 push	 eax
  0003b	88 9d 08 fb ff
	ff		 mov	 BYTE PTR _szKey$[ebp], bl
  00041	e8 00 00 00 00	 call	 _memset
  00046	83 c4 18	 add	 esp, 24			; 00000018H

; 53   : 
; 54   : 	m_fJumpNeedGauge = rkLoader.LoadFloat_e( "jump_need_gauge", 0.0f );

  00049	6a 03		 push	 3
  0004b	c7 45 b4 87 99
	86 9a		 mov	 DWORD PTR __k$538272[ebp], -1702454905 ; 9a869987H
  00052	c7 45 b8 b2 82
	8e 8f		 mov	 DWORD PTR __k$538272[ebp+4], -1886485838 ; 8f8e82b2H
  00059	c7 45 bc 89 b3
	8c 8b		 mov	 DWORD PTR __k$538272[ebp+8], -1953713271 ; 8b8cb389H
  00060	8d 45 b4	 lea	 eax, DWORD PTR __k$538272[ebp]
  00063	c7 45 c0 98 8b
	8e 00		 mov	 DWORD PTR __k$538272[ebp+12], 9341848 ; 008e8b98H
  0006a	59		 pop	 ecx
$LL209@LoadProper:
  0006b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00071	83 c0 04	 add	 eax, 4
  00074	49		 dec	 ecx
  00075	75 f4		 jne	 SHORT $LL209@LoadProper
  00077	6a 0c		 push	 12			; 0000000cH
  00079	58		 pop	 eax
$LL206@LoadProper:
  0007a	8b c8		 mov	 ecx, eax
  0007c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00082	79 05		 jns	 SHORT $LN2776@LoadProper
  00084	49		 dec	 ecx
  00085	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00088	41		 inc	 ecx
$LN2776@LoadProper:
  00089	b2 ed		 mov	 dl, -19			; ffffffedH
  0008b	2a d1		 sub	 dl, cl
  0008d	30 54 05 b4	 xor	 BYTE PTR __k$538272[ebp+eax], dl
  00091	40		 inc	 eax
  00092	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00095	7c e3		 jl	 SHORT $LL206@LoadProper
  00097	0f 57 c0	 xorps	 xmm0, xmm0
  0009a	51		 push	 ecx
  0009b	8d 45 b4	 lea	 eax, DWORD PTR __k$538272[ebp]
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	50		 push	 eax
  000a4	8b cf		 mov	 ecx, edi
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  000ac	d9 5e 04	 fstp	 DWORD PTR [esi+4]
  000af	6a 04		 push	 4

; 55   : 	m_fJumpExtraGauge = rkLoader.LoadFloat_e( "jump_extra_gauge", 0.0f );

  000b1	c7 85 58 ff ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$538397[ebp], -1702454905 ; 9a869987H
  000bb	c7 85 5c ff ff
	ff b2 89 93 9e	 mov	 DWORD PTR __k$538397[ebp+4], -1634498126 ; 9e9389b2H
  000c5	c7 85 60 ff ff
	ff 9f 8d b4 8d	 mov	 DWORD PTR __k$538397[ebp+8], -1917547105 ; 8db48d9fH
  000cf	c7 85 64 ff ff
	ff 8c 99 8c 8f	 mov	 DWORD PTR __k$538397[ebp+12], -1886611060 ; 8f8c998cH
  000d9	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR __k$538397[ebp]
  000df	88 9d 68 ff ff
	ff		 mov	 BYTE PTR __k$538397[ebp+16], bl
  000e5	59		 pop	 ecx
$LL315@LoadProper:
  000e6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000ec	83 c0 04	 add	 eax, 4
  000ef	49		 dec	 ecx
  000f0	75 f4		 jne	 SHORT $LL315@LoadProper
  000f2	0f 57 c0	 xorps	 xmm0, xmm0
  000f5	51		 push	 ecx
  000f6	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR __k$538397[ebp]
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	50		 push	 eax
  00102	8b cf		 mov	 ecx, edi
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0010a	d9 5e 08	 fstp	 DWORD PTR [esi+8]

; 56   : 
; 57   : 	m_fJumpSpeedRate = rkLoader.LoadFloat_e( "jump_speed_rate", FLOAT1 );

  0010d	b8 01 00 00 00	 mov	 eax, 1
  00112	6a 03		 push	 3
  00114	c7 45 a0 87 99
	86 9a		 mov	 DWORD PTR __k$538526[ebp], -1702454905 ; 9a869987H
  0011b	c7 45 a4 b2 9f
	9b 8f		 mov	 DWORD PTR __k$538526[ebp+4], -1885626446 ; 8f9b9fb2H
  00122	c7 45 a8 88 88
	b4 98		 mov	 DWORD PTR __k$538526[ebp+8], -1732999032 ; 98b48888H
  00129	8d 4d a0	 lea	 ecx, DWORD PTR __k$538526[ebp]
  0012c	c7 45 ac 8c 98
	8e 00		 mov	 DWORD PTR __k$538526[ebp+12], 9345164 ; 008e988cH
  00133	5a		 pop	 edx
$LL423@LoadProper:
  00134	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0013a	83 c1 04	 add	 ecx, 4
  0013d	4a		 dec	 edx
  0013e	75 f4		 jne	 SHORT $LL423@LoadProper
  00140	c7 85 04 fb ff
	ff 0c 00 00 00	 mov	 DWORD PTR _i$538626[ebp], 12 ; 0000000cH
$LL420@LoadProper:
  0014a	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR _i$538626[ebp]
  00150	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00156	79 05		 jns	 SHORT $LN2777@LoadProper
  00158	49		 dec	 ecx
  00159	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0015c	41		 inc	 ecx
$LN2777@LoadProper:
  0015d	b2 ed		 mov	 dl, -19			; ffffffedH
  0015f	2a d1		 sub	 dl, cl
  00161	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR _i$538626[ebp]
  00167	30 54 0d a0	 xor	 BYTE PTR __k$538526[ebp+ecx], dl
  0016b	ff 85 04 fb ff
	ff		 inc	 DWORD PTR _i$538626[ebp]
  00171	83 bd 04 fb ff
	ff 0f		 cmp	 DWORD PTR _i$538626[ebp], 15 ; 0000000fH
  00178	7c d0		 jl	 SHORT $LL420@LoadProper
  0017a	89 85 00 fb ff
	ff		 mov	 DWORD PTR tv24032[ebp], eax
  00180	db 85 00 fb ff
	ff		 fild	 DWORD PTR tv24032[ebp]
  00186	85 c0		 test	 eax, eax
  00188	79 06		 jns	 SHORT $LN2778@LoadProper
  0018a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2778@LoadProper:
  00190	51		 push	 ecx
  00191	8d 45 a0	 lea	 eax, DWORD PTR __k$538526[ebp]
  00194	d9 1c 24	 fstp	 DWORD PTR [esp]
  00197	50		 push	 eax
  00198	8b cf		 mov	 ecx, edi
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001a0	d9 5e 0c	 fstp	 DWORD PTR [esi+12]
  001a3	6a 05		 push	 5

; 58   : 
; 59   : 	m_bEnableLandAfterState = rkLoader.LoadBool_e( "enable_land_after_state", false );

  001a5	c7 85 04 ff ff
	ff 88 82 8a 88	 mov	 DWORD PTR __k$538664[ebp], -2004188536 ; 888a8288H
  001af	c7 85 08 ff ff
	ff 81 89 b4 86	 mov	 DWORD PTR __k$538664[ebp+4], -2034988671 ; 86b48981H
  001b9	c7 85 0c ff ff
	ff 8c 82 8f b5	 mov	 DWORD PTR __k$538664[ebp+8], -1248886132 ; b58f828cH
  001c3	c7 85 10 ff ff
	ff 8c 8a 9f 8f	 mov	 DWORD PTR __k$538664[ebp+12], -1885369716 ; 8f9f8a8cH
  001cd	c7 85 14 ff ff
	ff 9f b3 98 9e	 mov	 DWORD PTR __k$538664[ebp+16], -1634159713 ; 9e98b39fH
  001d7	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR __k$538664[ebp]
  001dd	c7 85 18 ff ff
	ff 8c 98 8e 00	 mov	 DWORD PTR __k$538664[ebp+20], 9345164 ; 008e988cH
  001e7	59		 pop	 ecx
$LL529@LoadProper:
  001e8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ee	83 c0 04	 add	 eax, 4
  001f1	49		 dec	 ecx
  001f2	75 f4		 jne	 SHORT $LL529@LoadProper
  001f4	6a 14		 push	 20			; 00000014H
  001f6	58		 pop	 eax
$LL526@LoadProper:
  001f7	8b c8		 mov	 ecx, eax
  001f9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001ff	79 05		 jns	 SHORT $LN2779@LoadProper
  00201	49		 dec	 ecx
  00202	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00205	41		 inc	 ecx
$LN2779@LoadProper:
  00206	b2 ed		 mov	 dl, -19			; ffffffedH
  00208	2a d1		 sub	 dl, cl
  0020a	30 94 05 04 ff
	ff ff		 xor	 BYTE PTR __k$538664[ebp+eax], dl
  00211	40		 inc	 eax
  00212	83 f8 17	 cmp	 eax, 23			; 00000017H
  00215	7c e0		 jl	 SHORT $LL526@LoadProper
  00217	53		 push	 ebx
  00218	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR __k$538664[ebp]
  0021e	50		 push	 eax
  0021f	8b cf		 mov	 ecx, edi
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00227	88 46 11	 mov	 BYTE PTR [esi+17], al
  0022a	6a 04		 push	 4

; 60   : 
; 61   : 	rkLoader.LoadString_e( "land_after_fail_ani", "", szBuf, MAX_PATH );

  0022c	c7 85 70 ff ff
	ff 81 8d 85 8e	 mov	 DWORD PTR __k$538789[ebp], -1903850111 ; 8e858d81H
  00236	c7 85 74 ff ff
	ff b2 8d 8d 9e	 mov	 DWORD PTR __k$538789[ebp+4], -1634890318 ; 9e8d8db2H
  00240	c7 85 78 ff ff
	ff 88 9e b4 8c	 mov	 DWORD PTR __k$538789[ebp+8], -1934319992 ; 8cb49e88H
  0024a	c7 85 7c ff ff
	ff 8c 85 87 b5	 mov	 DWORD PTR __k$538789[ebp+12], -1249409652 ; b587858cH
  00254	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR __k$538789[ebp]
  0025a	c7 45 80 8c 82
	82 00		 mov	 DWORD PTR __k$538789[ebp+16], 8553100 ; 0082828cH
  00261	59		 pop	 ecx
$LL635@LoadProper:
  00262	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00268	83 c0 04	 add	 eax, 4
  0026b	49		 dec	 ecx
  0026c	75 f4		 jne	 SHORT $LL635@LoadProper
  0026e	6a 10		 push	 16			; 00000010H
  00270	58		 pop	 eax
$LL632@LoadProper:
  00271	8b c8		 mov	 ecx, eax
  00273	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00279	79 05		 jns	 SHORT $LN2780@LoadProper
  0027b	49		 dec	 ecx
  0027c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0027f	41		 inc	 ecx
$LN2780@LoadProper:
  00280	b2 ed		 mov	 dl, -19			; ffffffedH
  00282	2a d1		 sub	 dl, cl
  00284	30 94 05 70 ff
	ff ff		 xor	 BYTE PTR __k$538789[ebp+eax], dl
  0028b	40		 inc	 eax
  0028c	83 f8 13	 cmp	 eax, 19			; 00000013H
  0028f	7c e0		 jl	 SHORT $LL632@LoadProper
  00291	68 04 01 00 00	 push	 260			; 00000104H
  00296	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0029c	50		 push	 eax
  0029d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002a2	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR __k$538789[ebp]
  002a8	50		 push	 eax
  002a9	8b cf		 mov	 ecx, edi
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 62   : 	m_LandAfterFailAni = szBuf;

  002b1	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002b7	50		 push	 eax
  002b8	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 63   : 	m_fLandAfterFailAniRate = rkLoader.LoadFloat_e( "land_after_fail_ani_rate", FLOAT1 );

  002c1	b8 01 00 00 00	 mov	 eax, 1
  002c6	6a 06		 push	 6
  002c8	c7 85 cc fd ff
	ff 81 8d 85 8e	 mov	 DWORD PTR __k$538962[ebp], -1903850111 ; 8e858d81H
  002d2	c7 85 d0 fd ff
	ff b2 8d 8d 9e	 mov	 DWORD PTR __k$538962[ebp+4], -1634890318 ; 9e8d8db2H
  002dc	c7 85 d4 fd ff
	ff 88 9e b4 8c	 mov	 DWORD PTR __k$538962[ebp+8], -1934319992 ; 8cb49e88H
  002e6	c7 85 d8 fd ff
	ff 8c 85 87 b5	 mov	 DWORD PTR __k$538962[ebp+12], -1249409652 ; b587858cH
  002f0	c7 85 dc fd ff
	ff 8c 82 82 b5	 mov	 DWORD PTR __k$538962[ebp+16], -1249738100 ; b582828cH
  002fa	c7 85 e0 fd ff
	ff 9f 8d 9f 8f	 mov	 DWORD PTR __k$538962[ebp+20], -1885368929 ; 8f9f8d9fH
  00304	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR __k$538962[ebp]
  0030a	88 9d e4 fd ff
	ff		 mov	 BYTE PTR __k$538962[ebp+24], bl
  00310	5a		 pop	 edx
$LL743@LoadProper:
  00311	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00317	83 c1 04	 add	 ecx, 4
  0031a	4a		 dec	 edx
  0031b	75 f4		 jne	 SHORT $LL743@LoadProper
  0031d	89 85 00 fb ff
	ff		 mov	 DWORD PTR tv24015[ebp], eax
  00323	db 85 00 fb ff
	ff		 fild	 DWORD PTR tv24015[ebp]
  00329	85 c0		 test	 eax, eax
  0032b	79 06		 jns	 SHORT $LN2781@LoadProper
  0032d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2781@LoadProper:
  00333	51		 push	 ecx
  00334	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR __k$538962[ebp]
  0033a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0033d	50		 push	 eax
  0033e	8b cf		 mov	 ecx, edi
  00340	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00346	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  00349	6a 05		 push	 5

; 64   : 
; 65   : 	rkLoader.LoadString_e( "land_after_success_ani", "", szBuf, MAX_PATH );

  0034b	c7 85 20 ff ff
	ff 81 8d 85 8e	 mov	 DWORD PTR __k$539030[ebp], -1903850111 ; 8e858d81H
  00355	c7 85 24 ff ff
	ff b2 8d 8d 9e	 mov	 DWORD PTR __k$539030[ebp+4], -1634890318 ; 9e8d8db2H
  0035f	c7 85 28 ff ff
	ff 88 9e b4 99	 mov	 DWORD PTR __k$539030[ebp+8], -1716216184 ; 99b49e88H
  00369	c7 85 2c ff ff
	ff 98 8f 88 8f	 mov	 DWORD PTR __k$539030[ebp+12], -1886875752 ; 8f888f98H
  00373	c7 85 30 ff ff
	ff 9e 9f b4 8b	 mov	 DWORD PTR __k$539030[ebp+16], -1951096930 ; 8bb49f9eH
  0037d	66 c7 85 34 ff
	ff ff 83 85	 mov	 WORD PTR __k$539030[ebp+20], 34179 ; 00008583H
  00386	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR __k$539030[ebp]
  0038c	88 9d 36 ff ff
	ff		 mov	 BYTE PTR __k$539030[ebp+22], bl
  00392	59		 pop	 ecx
$LL849@LoadProper:
  00393	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00399	83 c0 04	 add	 eax, 4
  0039c	49		 dec	 ecx
  0039d	75 f4		 jne	 SHORT $LL849@LoadProper
  0039f	6a 14		 push	 20			; 00000014H
  003a1	58		 pop	 eax
$LL846@LoadProper:
  003a2	8b c8		 mov	 ecx, eax
  003a4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003aa	79 05		 jns	 SHORT $LN2782@LoadProper
  003ac	49		 dec	 ecx
  003ad	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003b0	41		 inc	 ecx
$LN2782@LoadProper:
  003b1	b2 ed		 mov	 dl, -19			; ffffffedH
  003b3	2a d1		 sub	 dl, cl
  003b5	30 94 05 20 ff
	ff ff		 xor	 BYTE PTR __k$539030[ebp+eax], dl
  003bc	40		 inc	 eax
  003bd	83 f8 16	 cmp	 eax, 22			; 00000016H
  003c0	7c e0		 jl	 SHORT $LL846@LoadProper
  003c2	68 04 01 00 00	 push	 260			; 00000104H
  003c7	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003cd	50		 push	 eax
  003ce	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003d3	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR __k$539030[ebp]
  003d9	50		 push	 eax
  003da	8b cf		 mov	 ecx, edi
  003dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 66   : 	m_LandAfterSuccessAni = szBuf;

  003e2	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003e8	50		 push	 eax
  003e9	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  003ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 67   : 	m_fLandAfterSuccessAniRate = rkLoader.LoadFloat_e( "land_after_success_ani_rate", FLOAT1 );

  003f2	b8 01 00 00 00	 mov	 eax, 1
  003f7	6a 06		 push	 6
  003f9	c7 85 2c fe ff
	ff 81 8d 85 8e	 mov	 DWORD PTR __k$539159[ebp], -1903850111 ; 8e858d81H
  00403	c7 85 30 fe ff
	ff b2 8d 8d 9e	 mov	 DWORD PTR __k$539159[ebp+4], -1634890318 ; 9e8d8db2H
  0040d	c7 85 34 fe ff
	ff 88 9e b4 99	 mov	 DWORD PTR __k$539159[ebp+8], -1716216184 ; 99b49e88H
  00417	c7 85 38 fe ff
	ff 98 8f 88 8f	 mov	 DWORD PTR __k$539159[ebp+12], -1886875752 ; 8f888f98H
  00421	c7 85 3c fe ff
	ff 9e 9f b4 8b	 mov	 DWORD PTR __k$539159[ebp+16], -1951096930 ; 8bb49f9eH
  0042b	c7 85 40 fe ff
	ff 83 85 b4 98	 mov	 DWORD PTR __k$539159[ebp+20], -1732999805 ; 98b48583H
  00435	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR __k$539159[ebp]
  0043b	c7 85 44 fe ff
	ff 8c 98 8e 00	 mov	 DWORD PTR __k$539159[ebp+24], 9345164 ; 008e988cH
  00445	5a		 pop	 edx
$LL957@LoadProper:
  00446	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0044c	83 c1 04	 add	 ecx, 4
  0044f	4a		 dec	 edx
  00450	75 f4		 jne	 SHORT $LL957@LoadProper
  00452	c7 85 04 fb ff
	ff 18 00 00 00	 mov	 DWORD PTR _i$539259[ebp], 24 ; 00000018H
$LL954@LoadProper:
  0045c	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR _i$539259[ebp]
  00462	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00468	79 05		 jns	 SHORT $LN2783@LoadProper
  0046a	49		 dec	 ecx
  0046b	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0046e	41		 inc	 ecx
$LN2783@LoadProper:
  0046f	b2 ed		 mov	 dl, -19			; ffffffedH
  00471	2a d1		 sub	 dl, cl
  00473	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR _i$539259[ebp]
  00479	30 94 0d 2c fe
	ff ff		 xor	 BYTE PTR __k$539159[ebp+ecx], dl
  00480	ff 85 04 fb ff
	ff		 inc	 DWORD PTR _i$539259[ebp]
  00486	83 bd 04 fb ff
	ff 1b		 cmp	 DWORD PTR _i$539259[ebp], 27 ; 0000001bH
  0048d	7c cd		 jl	 SHORT $LL954@LoadProper
  0048f	89 85 00 fb ff
	ff		 mov	 DWORD PTR tv24000[ebp], eax
  00495	db 85 00 fb ff
	ff		 fild	 DWORD PTR tv24000[ebp]
  0049b	85 c0		 test	 eax, eax
  0049d	79 06		 jns	 SHORT $LN2784@LoadProper
  0049f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2784@LoadProper:
  004a5	51		 push	 ecx
  004a6	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR __k$539159[ebp]
  004ac	d9 1c 24	 fstp	 DWORD PTR [esp]
  004af	50		 push	 eax
  004b0	8b cf		 mov	 ecx, edi
  004b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004b8	d9 5e 38	 fstp	 DWORD PTR [esi+56]

; 68   : 
; 69   : 	//
; 70   : 	m_JumpGrapplingInfo.Init();

  004bb	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  004be	e8 00 00 00 00	 call	 ?Init@JumpGrapplingInfo@@QAEXXZ ; JumpGrapplingInfo::Init
  004c3	6a 04		 push	 4

; 71   : 
; 72   : 	rkLoader.LoadString_e( "jump_grappling_ani", "", szBuf, MAX_PATH );

  004c5	c7 45 88 87 99
	86 9a		 mov	 DWORD PTR __k$539284[ebp], -1702454905 ; 9a869987H
  004cc	c7 45 8c b2 8b
	99 8b		 mov	 DWORD PTR __k$539284[ebp+4], -1952871502 ; 8b998bb2H
  004d3	c7 45 90 9d 9c
	87 83		 mov	 DWORD PTR __k$539284[ebp+8], -2088264547 ; 83879c9dH
  004da	c7 45 94 83 8b
	b4 8b		 mov	 DWORD PTR __k$539284[ebp+12], -1951102077 ; 8bb48b83H
  004e1	66 c7 45 98 83
	85		 mov	 WORD PTR __k$539284[ebp+16], 34179 ; 00008583H
  004e7	8d 45 88	 lea	 eax, DWORD PTR __k$539284[ebp]
  004ea	88 5d 9a	 mov	 BYTE PTR __k$539284[ebp+18], bl
  004ed	59		 pop	 ecx
$LL1063@LoadProper:
  004ee	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004f4	83 c0 04	 add	 eax, 4
  004f7	49		 dec	 ecx
  004f8	75 f4		 jne	 SHORT $LL1063@LoadProper
  004fa	6a 10		 push	 16			; 00000010H
  004fc	58		 pop	 eax
$LL1060@LoadProper:
  004fd	8b c8		 mov	 ecx, eax
  004ff	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00505	79 05		 jns	 SHORT $LN2785@LoadProper
  00507	49		 dec	 ecx
  00508	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0050b	41		 inc	 ecx
$LN2785@LoadProper:
  0050c	b2 ed		 mov	 dl, -19			; ffffffedH
  0050e	2a d1		 sub	 dl, cl
  00510	30 54 05 88	 xor	 BYTE PTR __k$539284[ebp+eax], dl
  00514	40		 inc	 eax
  00515	83 f8 12	 cmp	 eax, 18			; 00000012H
  00518	7c e3		 jl	 SHORT $LL1060@LoadProper
  0051a	68 04 01 00 00	 push	 260			; 00000104H
  0051f	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00525	50		 push	 eax
  00526	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0052b	8d 45 88	 lea	 eax, DWORD PTR __k$539284[ebp]
  0052e	50		 push	 eax
  0052f	8b cf		 mov	 ecx, edi
  00531	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 73   : 	m_JumpGrapplingInfo.m_JumpGrapplingAni = szBuf;

  00537	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0053d	50		 push	 eax
  0053e	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00541	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 74   : 	m_JumpGrapplingInfo.m_fJumpGrapplingAniRate = rkLoader.LoadFloat_e( "jump_grappling_ani_rate", FLOAT1 );

  00547	b8 01 00 00 00	 mov	 eax, 1
  0054c	6a 05		 push	 5
  0054e	c7 85 e8 fe ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$539413[ebp], -1702454905 ; 9a869987H
  00558	c7 85 ec fe ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$539413[ebp+4], -1952871502 ; 8b998bb2H
  00562	c7 85 f0 fe ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$539413[ebp+8], -2088264547 ; 83879c9dH
  0056c	c7 85 f4 fe ff
	ff 83 8b b4 8b	 mov	 DWORD PTR __k$539413[ebp+12], -1951102077 ; 8bb48b83H
  00576	c7 85 f8 fe ff
	ff 83 85 b4 98	 mov	 DWORD PTR __k$539413[ebp+16], -1732999805 ; 98b48583H
  00580	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR __k$539413[ebp]
  00586	c7 85 fc fe ff
	ff 8c 98 8e 00	 mov	 DWORD PTR __k$539413[ebp+20], 9345164 ; 008e988cH
  00590	5a		 pop	 edx
$LL1171@LoadProper:
  00591	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00597	83 c1 04	 add	 ecx, 4
  0059a	4a		 dec	 edx
  0059b	75 f4		 jne	 SHORT $LL1171@LoadProper
  0059d	c7 85 04 fb ff
	ff 14 00 00 00	 mov	 DWORD PTR _i$539513[ebp], 20 ; 00000014H
$LL1168@LoadProper:
  005a7	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR _i$539513[ebp]
  005ad	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  005b3	79 05		 jns	 SHORT $LN2786@LoadProper
  005b5	49		 dec	 ecx
  005b6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  005b9	41		 inc	 ecx
$LN2786@LoadProper:
  005ba	b2 ed		 mov	 dl, -19			; ffffffedH
  005bc	2a d1		 sub	 dl, cl
  005be	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR _i$539513[ebp]
  005c4	30 94 0d e8 fe
	ff ff		 xor	 BYTE PTR __k$539413[ebp+ecx], dl
  005cb	ff 85 04 fb ff
	ff		 inc	 DWORD PTR _i$539513[ebp]
  005d1	83 bd 04 fb ff
	ff 17		 cmp	 DWORD PTR _i$539513[ebp], 23 ; 00000017H
  005d8	7c cd		 jl	 SHORT $LL1168@LoadProper
  005da	89 85 00 fb ff
	ff		 mov	 DWORD PTR tv23985[ebp], eax
  005e0	db 85 00 fb ff
	ff		 fild	 DWORD PTR tv23985[ebp]
  005e6	85 c0		 test	 eax, eax
  005e8	79 06		 jns	 SHORT $LN2787@LoadProper
  005ea	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2787@LoadProper:
  005f0	51		 push	 ecx
  005f1	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR __k$539413[ebp]
  005f7	d9 1c 24	 fstp	 DWORD PTR [esp]
  005fa	50		 push	 eax
  005fb	8b cf		 mov	 ecx, edi
  005fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00603	d9 5e 4c	 fstp	 DWORD PTR [esi+76]
  00606	6a 06		 push	 6

; 75   : 
; 76   : 	m_JumpGrapplingInfo.m_fJumpGrapplingMoveSpeed = rkLoader.LoadFloat_e( "jump_grappling_move_speed", 0.0f );

  00608	c7 85 ac fe ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$539538[ebp], -1702454905 ; 9a869987H
  00612	c7 85 b0 fe ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$539538[ebp+4], -1952871502 ; 8b998bb2H
  0061c	c7 85 b4 fe ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$539538[ebp+8], -2088264547 ; 83879c9dH
  00626	c7 85 b8 fe ff
	ff 83 8b b4 87	 mov	 DWORD PTR __k$539538[ebp+12], -2018210941 ; 87b48b83H
  00630	c7 85 bc fe ff
	ff 82 9a 8e b5	 mov	 DWORD PTR __k$539538[ebp+16], -1248945534 ; b58e9a82H
  0063a	c7 85 c0 fe ff
	ff 9e 9c 8e 8f	 mov	 DWORD PTR __k$539538[ebp+20], -1886479202 ; 8f8e9c9eH
  00644	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR __k$539538[ebp]
  0064a	66 c7 85 c4 fe
	ff ff 89 00	 mov	 WORD PTR __k$539538[ebp+24], 137 ; 00000089H
  00653	59		 pop	 ecx
$LL1277@LoadProper:
  00654	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0065a	83 c0 04	 add	 eax, 4
  0065d	49		 dec	 ecx
  0065e	75 f4		 jne	 SHORT $LL1277@LoadProper
  00660	0f 57 c0	 xorps	 xmm0, xmm0
  00663	80 b5 c4 fe ff
	ff ed		 xor	 BYTE PTR __k$539538[ebp+24], -19 ; ffffffedH
  0066a	51		 push	 ecx
  0066b	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR __k$539538[ebp]
  00671	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00676	50		 push	 eax
  00677	8b cf		 mov	 ecx, edi
  00679	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  0067f	d9 5e 50	 fstp	 DWORD PTR [esi+80]
  00682	6a 06		 push	 6

; 77   : 	m_JumpGrapplingInfo.m_dwJumpGrapplingRotateTime = (DWORD)rkLoader.LoadInt_e( "jump_grappling_rotate_speed", 0 );

  00684	c7 85 0c fe ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$539676[ebp], -1702454905 ; 9a869987H
  0068e	c7 85 10 fe ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$539676[ebp+4], -1952871502 ; 8b998bb2H
  00698	c7 85 14 fe ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$539676[ebp+8], -2088264547 ; 83879c9dH
  006a2	c7 85 18 fe ff
	ff 83 8b b4 98	 mov	 DWORD PTR __k$539676[ebp+12], -1732998269 ; 98b48b83H
  006ac	c7 85 1c fe ff
	ff 82 98 8a 9e	 mov	 DWORD PTR __k$539676[ebp+16], -1635084158 ; 9e8a9882H
  006b6	c7 85 20 fe ff
	ff 88 b3 98 9a	 mov	 DWORD PTR __k$539676[ebp+20], -1701268600 ; 9a98b388H
  006c0	8d 85 0c fe ff
	ff		 lea	 eax, DWORD PTR __k$539676[ebp]
  006c6	c7 85 24 fe ff
	ff 88 89 8f 00	 mov	 DWORD PTR __k$539676[ebp+24], 9406856 ; 008f8988H
  006d0	59		 pop	 ecx
$LL1383@LoadProper:
  006d1	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  006d7	83 c0 04	 add	 eax, 4
  006da	49		 dec	 ecx
  006db	75 f4		 jne	 SHORT $LL1383@LoadProper
  006dd	6a 18		 push	 24			; 00000018H
  006df	58		 pop	 eax
$LL1380@LoadProper:
  006e0	8b c8		 mov	 ecx, eax
  006e2	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  006e8	79 05		 jns	 SHORT $LN2788@LoadProper
  006ea	49		 dec	 ecx
  006eb	83 c9 fc	 or	 ecx, -4			; fffffffcH
  006ee	41		 inc	 ecx
$LN2788@LoadProper:
  006ef	b2 ed		 mov	 dl, -19			; ffffffedH
  006f1	2a d1		 sub	 dl, cl
  006f3	30 94 05 0c fe
	ff ff		 xor	 BYTE PTR __k$539676[ebp+eax], dl
  006fa	40		 inc	 eax
  006fb	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  006fe	7c e0		 jl	 SHORT $LL1380@LoadProper
  00700	53		 push	 ebx
  00701	8d 85 0c fe ff
	ff		 lea	 eax, DWORD PTR __k$539676[ebp]
  00707	50		 push	 eax
  00708	8b cf		 mov	 ecx, edi
  0070a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00710	89 46 54	 mov	 DWORD PTR [esi+84], eax
  00713	6a 05		 push	 5

; 78   : 
; 79   : 	LoadAttackAttribute_e( "jump_grappling_attack", m_JumpGrapplingInfo.m_JumpGrapplingAttack, rkLoader );

  00715	c7 85 3c ff ff
	ff 87 99 86 9a	 mov	 DWORD PTR _szEncAttack$539867[ebp], -1702454905 ; 9a869987H
  0071f	c7 85 40 ff ff
	ff b2 8b 99 8b	 mov	 DWORD PTR _szEncAttack$539867[ebp+4], -1952871502 ; 8b998bb2H
  00729	c7 85 44 ff ff
	ff 9d 9c 87 83	 mov	 DWORD PTR _szEncAttack$539867[ebp+8], -2088264547 ; 83879c9dH
  00733	c7 85 48 ff ff
	ff 83 8b b4 8b	 mov	 DWORD PTR _szEncAttack$539867[ebp+12], -1951102077 ; 8bb48b83H
  0073d	c7 85 4c ff ff
	ff 99 98 8a 89	 mov	 DWORD PTR _szEncAttack$539867[ebp+16], -1987405671 ; 898a9899H
  00747	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _szEncAttack$539867[ebp]
  0074d	66 c7 85 50 ff
	ff ff 86 00	 mov	 WORD PTR _szEncAttack$539867[ebp+20], 134 ; 00000086H
  00756	59		 pop	 ecx
$LL1489@LoadProper:
  00757	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0075d	83 c0 04	 add	 eax, 4
  00760	49		 dec	 ecx
  00761	75 f4		 jne	 SHORT $LL1489@LoadProper
  00763	80 b5 50 ff ff
	ff ed		 xor	 BYTE PTR _szEncAttack$539867[ebp+20], -19 ; ffffffedH
  0076a	57		 push	 edi
  0076b	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  0076e	50		 push	 eax
  0076f	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _szEncAttack$539867[ebp]
  00775	50		 push	 eax
  00776	e8 00 00 00 00	 call	 ?LoadAttackAttribute@@YAXPBDAAUAttackAttribute@@AAVioINILoader@@@Z ; LoadAttackAttribute
  0077b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : 
; 81   : 	//
; 82   : 	m_JumpGrapplingWoundInfo.Init();

  0077e	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00784	e8 00 00 00 00	 call	 ?Init@JumpGrappingWoundInfo@@QAEXXZ ; JumpGrappingWoundInfo::Init
  00789	6a 06		 push	 6

; 83   : 
; 84   : 	rkLoader.LoadString_e( "jump_grappling_wound_ani", "", szBuf, MAX_PATH );

  0078b	c7 85 ec fd ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$539913[ebp], -1702454905 ; 9a869987H
  00795	c7 85 f0 fd ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$539913[ebp+4], -1952871502 ; 8b998bb2H
  0079f	c7 85 f4 fd ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$539913[ebp+8], -2088264547 ; 83879c9dH
  007a9	c7 85 f8 fd ff
	ff 83 8b b4 9d	 mov	 DWORD PTR __k$539913[ebp+12], -1649112189 ; 9db48b83H
  007b3	c7 85 fc fd ff
	ff 82 99 85 8e	 mov	 DWORD PTR __k$539913[ebp+16], -1903847038 ; 8e859982H
  007bd	c7 85 00 fe ff
	ff b2 8d 85 83	 mov	 DWORD PTR __k$539913[ebp+20], -2088399438 ; 83858db2H
  007c7	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR __k$539913[ebp]
  007cd	88 9d 04 fe ff
	ff		 mov	 BYTE PTR __k$539913[ebp+24], bl
  007d3	59		 pop	 ecx
$LL1595@LoadProper:
  007d4	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  007da	83 c0 04	 add	 eax, 4
  007dd	49		 dec	 ecx
  007de	75 f4		 jne	 SHORT $LL1595@LoadProper
  007e0	68 04 01 00 00	 push	 260			; 00000104H
  007e5	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  007eb	50		 push	 eax
  007ec	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  007f1	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR __k$539913[ebp]
  007f7	50		 push	 eax
  007f8	8b cf		 mov	 ecx, edi
  007fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 85   : 	m_JumpGrapplingWoundInfo.m_WoundedAni = szBuf;

  00800	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00806	50		 push	 eax
  00807	8d 8e ac 00 00
	00		 lea	 ecx, DWORD PTR [esi+172]
  0080d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 86   : 	m_JumpGrapplingWoundInfo.m_fWoundedAniRate = rkLoader.LoadFloat_e( "jump_grappling_wound_ani_rate", FLOAT1 );

  00813	b8 01 00 00 00	 mov	 eax, 1
  00818	6a 07		 push	 7
  0081a	c7 85 a8 fd ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$540042[ebp], -1702454905 ; 9a869987H
  00824	c7 85 ac fd ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$540042[ebp+4], -1952871502 ; 8b998bb2H
  0082e	c7 85 b0 fd ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$540042[ebp+8], -2088264547 ; 83879c9dH
  00838	c7 85 b4 fd ff
	ff 83 8b b4 9d	 mov	 DWORD PTR __k$540042[ebp+12], -1649112189 ; 9db48b83H
  00842	c7 85 b8 fd ff
	ff 82 99 85 8e	 mov	 DWORD PTR __k$540042[ebp+16], -1903847038 ; 8e859982H
  0084c	c7 85 bc fd ff
	ff b2 8d 85 83	 mov	 DWORD PTR __k$540042[ebp+20], -2088399438 ; 83858db2H
  00856	c7 85 c0 fd ff
	ff b2 9e 8a 9e	 mov	 DWORD PTR __k$540042[ebp+24], -1635082574 ; 9e8a9eb2H
  00860	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR __k$540042[ebp]
  00866	66 c7 85 c4 fd
	ff ff 88 00	 mov	 WORD PTR __k$540042[ebp+28], 136 ; 00000088H
  0086f	5a		 pop	 edx
$LL1703@LoadProper:
  00870	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00876	83 c1 04	 add	 ecx, 4
  00879	4a		 dec	 edx
  0087a	75 f4		 jne	 SHORT $LL1703@LoadProper
  0087c	80 b5 c4 fd ff
	ff ed		 xor	 BYTE PTR __k$540042[ebp+28], -19 ; ffffffedH
  00883	89 85 00 fb ff
	ff		 mov	 DWORD PTR tv23964[ebp], eax
  00889	db 85 00 fb ff
	ff		 fild	 DWORD PTR tv23964[ebp]
  0088f	85 c0		 test	 eax, eax
  00891	79 06		 jns	 SHORT $LN2789@LoadProper
  00893	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2789@LoadProper:
  00899	51		 push	 ecx
  0089a	8d 85 a8 fd ff
	ff		 lea	 eax, DWORD PTR __k$540042[ebp]
  008a0	d9 1c 24	 fstp	 DWORD PTR [esp]
  008a3	50		 push	 eax
  008a4	8b cf		 mov	 ecx, edi
  008a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  008ac	d9 9e bc 00 00
	00		 fstp	 DWORD PTR [esi+188]
  008b2	6a 08		 push	 8

; 87   : 
; 88   : 	m_JumpGrapplingWoundInfo.m_bReverseTargetRot = rkLoader.LoadBool_e( "jump_grappling_wound_reverse_rotate", false );

  008b4	c7 85 38 fd ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$540167[ebp], -1702454905 ; 9a869987H
  008be	c7 85 3c fd ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$540167[ebp+4], -1952871502 ; 8b998bb2H
  008c8	c7 85 40 fd ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$540167[ebp+8], -2088264547 ; 83879c9dH
  008d2	c7 85 44 fd ff
	ff 83 8b b4 9d	 mov	 DWORD PTR __k$540167[ebp+12], -1649112189 ; 9db48b83H
  008dc	c7 85 48 fd ff
	ff 82 99 85 8e	 mov	 DWORD PTR __k$540167[ebp+16], -1903847038 ; 8e859982H
  008e6	c7 85 4c fd ff
	ff b2 9e 8e 9c	 mov	 DWORD PTR __k$540167[ebp+20], -1668374862 ; 9c8e9eb2H
  008f0	c7 85 50 fd ff
	ff 88 9e 98 8f	 mov	 DWORD PTR __k$540167[ebp+24], -1885823352 ; 8f989e88H
  008fa	c7 85 54 fd ff
	ff b2 9e 84 9e	 mov	 DWORD PTR __k$540167[ebp+28], -1635475790 ; 9e849eb2H
  00904	8d 85 38 fd ff
	ff		 lea	 eax, DWORD PTR __k$540167[ebp]
  0090a	c7 85 58 fd ff
	ff 8c 98 8e 00	 mov	 DWORD PTR __k$540167[ebp+32], 9345164 ; 008e988cH
  00914	59		 pop	 ecx
$LL1809@LoadProper:
  00915	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0091b	83 c0 04	 add	 eax, 4
  0091e	49		 dec	 ecx
  0091f	75 f4		 jne	 SHORT $LL1809@LoadProper
  00921	6a 20		 push	 32			; 00000020H
  00923	58		 pop	 eax
$LL1806@LoadProper:
  00924	8b c8		 mov	 ecx, eax
  00926	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0092c	79 05		 jns	 SHORT $LN2790@LoadProper
  0092e	49		 dec	 ecx
  0092f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00932	41		 inc	 ecx
$LN2790@LoadProper:
  00933	b2 ed		 mov	 dl, -19			; ffffffedH
  00935	2a d1		 sub	 dl, cl
  00937	30 94 05 38 fd
	ff ff		 xor	 BYTE PTR __k$540167[ebp+eax], dl
  0093e	40		 inc	 eax
  0093f	83 f8 23	 cmp	 eax, 35			; 00000023H
  00942	7c e0		 jl	 SHORT $LL1806@LoadProper
  00944	53		 push	 ebx
  00945	8d 85 38 fd ff
	ff		 lea	 eax, DWORD PTR __k$540167[ebp]
  0094b	50		 push	 eax
  0094c	8b cf		 mov	 ecx, edi
  0094e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00954	88 86 a8 00 00
	00		 mov	 BYTE PTR [esi+168], al
  0095a	6a 07		 push	 7

; 89   : 	m_JumpGrapplingWoundInfo.m_GrapplingColType = (GrapplingColType)rkLoader.LoadInt_e( "jump_grappling_wound_enable_col", GCT_NONE );

  0095c	c7 85 60 fd ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$540292[ebp], -1702454905 ; 9a869987H
  00966	c7 85 64 fd ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$540292[ebp+4], -1952871502 ; 8b998bb2H
  00970	c7 85 68 fd ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$540292[ebp+8], -2088264547 ; 83879c9dH
  0097a	c7 85 6c fd ff
	ff 83 8b b4 9d	 mov	 DWORD PTR __k$540292[ebp+12], -1649112189 ; 9db48b83H
  00984	c7 85 70 fd ff
	ff 82 99 85 8e	 mov	 DWORD PTR __k$540292[ebp+16], -1903847038 ; 8e859982H
  0098e	c7 85 74 fd ff
	ff b2 89 85 8b	 mov	 DWORD PTR __k$540292[ebp+20], -1954182734 ; 8b8589b2H
  00998	c7 85 78 fd ff
	ff 8f 80 8e b5	 mov	 DWORD PTR __k$540292[ebp+24], -1248952177 ; b58e808fH
  009a2	8d 85 60 fd ff
	ff		 lea	 eax, DWORD PTR __k$540292[ebp]
  009a8	c7 85 7c fd ff
	ff 8e 83 87 00	 mov	 DWORD PTR __k$540292[ebp+28], 8881038 ; 0087838eH
  009b2	59		 pop	 ecx
$LL1915@LoadProper:
  009b3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  009b9	83 c0 04	 add	 eax, 4
  009bc	49		 dec	 ecx
  009bd	75 f4		 jne	 SHORT $LL1915@LoadProper
  009bf	6a 1c		 push	 28			; 0000001cH
  009c1	58		 pop	 eax
$LL1912@LoadProper:
  009c2	8b c8		 mov	 ecx, eax
  009c4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  009ca	79 05		 jns	 SHORT $LN2791@LoadProper
  009cc	49		 dec	 ecx
  009cd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  009d0	41		 inc	 ecx
$LN2791@LoadProper:
  009d1	b2 ed		 mov	 dl, -19			; ffffffedH
  009d3	2a d1		 sub	 dl, cl
  009d5	30 94 05 60 fd
	ff ff		 xor	 BYTE PTR __k$540292[ebp+eax], dl
  009dc	40		 inc	 eax
  009dd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  009e0	7c e0		 jl	 SHORT $LL1912@LoadProper
  009e2	53		 push	 ebx
  009e3	8d 85 60 fd ff
	ff		 lea	 eax, DWORD PTR __k$540292[ebp]
  009e9	50		 push	 eax
  009ea	8b cf		 mov	 ecx, edi
  009ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  009f2	89 86 dc 00 00
	00		 mov	 DWORD PTR [esi+220], eax
  009f8	6a 06		 push	 6

; 90   : 
; 91   : 	m_JumpGrapplingWoundInfo.m_fOffSet = rkLoader.LoadFloat_e( "jump_grappling_wound_offset", 0.0f );

  009fa	c7 85 6c fe ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$540417[ebp], -1702454905 ; 9a869987H
  00a04	c7 85 70 fe ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$540417[ebp+4], -1952871502 ; 8b998bb2H
  00a0e	c7 85 74 fe ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$540417[ebp+8], -2088264547 ; 83879c9dH
  00a18	c7 85 78 fe ff
	ff 83 8b b4 9d	 mov	 DWORD PTR __k$540417[ebp+12], -1649112189 ; 9db48b83H
  00a22	c7 85 7c fe ff
	ff 82 99 85 8e	 mov	 DWORD PTR __k$540417[ebp+16], -1903847038 ; 8e859982H
  00a2c	c7 85 80 fe ff
	ff b2 83 8d 8c	 mov	 DWORD PTR __k$540417[ebp+20], -1936882766 ; 8c8d83b2H
  00a36	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR __k$540417[ebp]
  00a3c	c7 85 84 fe ff
	ff 9e 89 9f 00	 mov	 DWORD PTR __k$540417[ebp+24], 10455454 ; 009f899eH
  00a46	59		 pop	 ecx
$LL2021@LoadProper:
  00a47	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00a4d	83 c0 04	 add	 eax, 4
  00a50	49		 dec	 ecx
  00a51	75 f4		 jne	 SHORT $LL2021@LoadProper
  00a53	6a 18		 push	 24			; 00000018H
  00a55	58		 pop	 eax
$LL2018@LoadProper:
  00a56	8b c8		 mov	 ecx, eax
  00a58	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00a5e	79 05		 jns	 SHORT $LN2792@LoadProper
  00a60	49		 dec	 ecx
  00a61	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00a64	41		 inc	 ecx
$LN2792@LoadProper:
  00a65	b2 ed		 mov	 dl, -19			; ffffffedH
  00a67	2a d1		 sub	 dl, cl
  00a69	30 94 05 6c fe
	ff ff		 xor	 BYTE PTR __k$540417[ebp+eax], dl
  00a70	40		 inc	 eax
  00a71	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00a74	7c e0		 jl	 SHORT $LL2018@LoadProper
  00a76	0f 57 c0	 xorps	 xmm0, xmm0
  00a79	51		 push	 ecx
  00a7a	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR __k$540417[ebp]
  00a80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a85	50		 push	 eax
  00a86	8b cf		 mov	 ecx, edi
  00a88	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00a8e	d9 9e c0 00 00
	00		 fstp	 DWORD PTR [esi+192]

; 92   : 	m_JumpGrapplingWoundInfo.m_fHeightRate = rkLoader.LoadFloat_e( "jump_grappling_wound_height_rate", FLOAT05 );

  00a94	b8 05 00 00 00	 mov	 eax, 5
  00a99	8b d0		 mov	 edx, eax
  00a9b	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00aa0	6a 08		 push	 8
  00aa2	89 85 04 fb ff
	ff		 mov	 DWORD PTR $T540534[ebp], eax
  00aa8	c7 85 10 fd ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$540550[ebp], -1702454905 ; 9a869987H
  00ab2	c7 85 14 fd ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$540550[ebp+4], -1952871502 ; 8b998bb2H
  00abc	c7 85 18 fd ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$540550[ebp+8], -2088264547 ; 83879c9dH
  00ac6	c7 85 1c fd ff
	ff 83 8b b4 9d	 mov	 DWORD PTR __k$540550[ebp+12], -1649112189 ; 9db48b83H
  00ad0	c7 85 20 fd ff
	ff 82 99 85 8e	 mov	 DWORD PTR __k$540550[ebp+16], -1903847038 ; 8e859982H
  00ada	c7 85 24 fd ff
	ff b2 84 8e 83	 mov	 DWORD PTR __k$540550[ebp+20], -2087811918 ; 838e84b2H
  00ae4	c7 85 28 fd ff
	ff 8a 84 9f b5	 mov	 DWORD PTR __k$540550[ebp+24], -1247837046 ; b59f848aH
  00aee	c7 85 2c fd ff
	ff 9f 8d 9f 8f	 mov	 DWORD PTR __k$540550[ebp+28], -1885368929 ; 8f9f8d9fH
  00af8	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR __k$540550[ebp]
  00afe	88 9d 30 fd ff
	ff		 mov	 BYTE PTR __k$540550[ebp+32], bl
  00b04	58		 pop	 eax
$LL2131@LoadProper:
  00b05	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00b0b	83 c1 04	 add	 ecx, 4
  00b0e	48		 dec	 eax
  00b0f	75 f4		 jne	 SHORT $LL2131@LoadProper
  00b11	89 95 00 fb ff
	ff		 mov	 DWORD PTR tv23940[ebp], edx
  00b17	db 85 00 fb ff
	ff		 fild	 DWORD PTR tv23940[ebp]
  00b1d	85 d2		 test	 edx, edx
  00b1f	79 06		 jns	 SHORT $LN2793@LoadProper
  00b21	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2793@LoadProper:
  00b27	8b 85 04 fb ff
	ff		 mov	 eax, DWORD PTR $T540534[ebp]
  00b2d	db 85 04 fb ff
	ff		 fild	 DWORD PTR $T540534[ebp]
  00b33	85 c0		 test	 eax, eax
  00b35	79 06		 jns	 SHORT $LN2794@LoadProper
  00b37	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2794@LoadProper:
  00b3d	de f9		 fdivp	 ST(1), ST(0)
  00b3f	51		 push	 ecx
  00b40	8d 85 10 fd ff
	ff		 lea	 eax, DWORD PTR __k$540550[ebp]
  00b46	8b cf		 mov	 ecx, edi
  00b48	d9 9d 04 fb ff
	ff		 fstp	 DWORD PTR tv23932[ebp]
  00b4e	d9 85 04 fb ff
	ff		 fld	 DWORD PTR tv23932[ebp]
  00b54	d9 1c 24	 fstp	 DWORD PTR [esp]
  00b57	50		 push	 eax
  00b58	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00b5e	d9 9e c4 00 00
	00		 fstp	 DWORD PTR [esi+196]
  00b64	6a 06		 push	 6

; 93   : 
; 94   : 	m_JumpGrapplingWoundInfo.m_dwJumpGrapplingRotateTime = (DWORD)rkLoader.LoadInt_e( "jump_grappling_rotate_speed", 0 );

  00b66	c7 85 4c fe ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$540677[ebp], -1702454905 ; 9a869987H
  00b70	c7 85 50 fe ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$540677[ebp+4], -1952871502 ; 8b998bb2H
  00b7a	c7 85 54 fe ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$540677[ebp+8], -2088264547 ; 83879c9dH
  00b84	c7 85 58 fe ff
	ff 83 8b b4 98	 mov	 DWORD PTR __k$540677[ebp+12], -1732998269 ; 98b48b83H
  00b8e	c7 85 5c fe ff
	ff 82 98 8a 9e	 mov	 DWORD PTR __k$540677[ebp+16], -1635084158 ; 9e8a9882H
  00b98	c7 85 60 fe ff
	ff 88 b3 98 9a	 mov	 DWORD PTR __k$540677[ebp+20], -1701268600 ; 9a98b388H
  00ba2	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR __k$540677[ebp]
  00ba8	c7 85 64 fe ff
	ff 88 89 8f 00	 mov	 DWORD PTR __k$540677[ebp+24], 9406856 ; 008f8988H
  00bb2	59		 pop	 ecx
$LL2237@LoadProper:
  00bb3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00bb9	83 c0 04	 add	 eax, 4
  00bbc	49		 dec	 ecx
  00bbd	75 f4		 jne	 SHORT $LL2237@LoadProper
  00bbf	6a 18		 push	 24			; 00000018H
  00bc1	58		 pop	 eax
$LL2234@LoadProper:
  00bc2	8b c8		 mov	 ecx, eax
  00bc4	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00bca	79 05		 jns	 SHORT $LN2795@LoadProper
  00bcc	49		 dec	 ecx
  00bcd	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00bd0	41		 inc	 ecx
$LN2795@LoadProper:
  00bd1	b2 ed		 mov	 dl, -19			; ffffffedH
  00bd3	2a d1		 sub	 dl, cl
  00bd5	30 94 05 4c fe
	ff ff		 xor	 BYTE PTR __k$540677[ebp+eax], dl
  00bdc	40		 inc	 eax
  00bdd	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00be0	7c e0		 jl	 SHORT $LL2234@LoadProper
  00be2	53		 push	 ebx
  00be3	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR __k$540677[ebp]
  00be9	50		 push	 eax
  00bea	8b cf		 mov	 ecx, edi
  00bec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z
  00bf2	89 86 c8 00 00
	00		 mov	 DWORD PTR [esi+200], eax
  00bf8	6a 07		 push	 7

; 95   : 
; 96   : 	int iBuffCnt = rkLoader.LoadInt_e( "jump_grappling_cancel_buff_cnt", 0 );

  00bfa	c7 85 84 fd ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$540813[ebp], -1702454905 ; 9a869987H
  00c04	c7 85 88 fd ff
	ff b2 8b 99 8b	 mov	 DWORD PTR __k$540813[ebp+4], -1952871502 ; 8b998bb2H
  00c0e	c7 85 8c fd ff
	ff 9d 9c 87 83	 mov	 DWORD PTR __k$540813[ebp+8], -2088264547 ; 83879c9dH
  00c18	c7 85 90 fd ff
	ff 83 8b b4 89	 mov	 DWORD PTR __k$540813[ebp+12], -1984656509 ; 89b48b83H
  00c22	c7 85 94 fd ff
	ff 8c 82 88 8f	 mov	 DWORD PTR __k$540813[ebp+16], -1886879092 ; 8f88828cH
  00c2c	c7 85 98 fd ff
	ff 81 b3 89 9f	 mov	 DWORD PTR __k$540813[ebp+20], -1618365567 ; 9f89b381H
  00c36	c7 85 9c fd ff
	ff 8b 8a b4 89	 mov	 DWORD PTR __k$540813[ebp+24], -1984656757 ; 89b48a8bH
  00c40	66 c7 85 a0 fd
	ff ff 83 98	 mov	 WORD PTR __k$540813[ebp+28], 39043 ; 00009883H
  00c49	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR __k$540813[ebp]
  00c4f	88 9d a2 fd ff
	ff		 mov	 BYTE PTR __k$540813[ebp+30], bl
  00c55	59		 pop	 ecx
$LL2343@LoadProper:
  00c56	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00c5c	83 c0 04	 add	 eax, 4
  00c5f	49		 dec	 ecx
  00c60	75 f4		 jne	 SHORT $LL2343@LoadProper
  00c62	6a 1c		 push	 28			; 0000001cH
  00c64	58		 pop	 eax
$LL2340@LoadProper:
  00c65	8b c8		 mov	 ecx, eax
  00c67	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00c6d	79 05		 jns	 SHORT $LN2796@LoadProper
  00c6f	49		 dec	 ecx
  00c70	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00c73	41		 inc	 ecx
$LN2796@LoadProper:
  00c74	b2 ed		 mov	 dl, -19			; ffffffedH
  00c76	2a d1		 sub	 dl, cl
  00c78	30 94 05 84 fd
	ff ff		 xor	 BYTE PTR __k$540813[ebp+eax], dl
  00c7f	40		 inc	 eax
  00c80	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  00c83	7c e0		 jl	 SHORT $LL2340@LoadProper
  00c85	53		 push	 ebx
  00c86	8d 85 84 fd ff
	ff		 lea	 eax, DWORD PTR __k$540813[ebp]
  00c8c	50		 push	 eax
  00c8d	8b cf		 mov	 ecx, edi
  00c8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 97   : 	for( int i=0; i < iBuffCnt; ++i )

  00c95	33 c9		 xor	 ecx, ecx
  00c97	89 85 00 fb ff
	ff		 mov	 DWORD PTR _iBuffCnt$[ebp], eax
  00c9d	3b c3		 cmp	 eax, ebx
  00c9f	0f 8e b9 00 00
	00		 jle	 $LN100@LoadProper
$LL102@LoadProper:

; 98   : 	{
; 99   : 		wsprintf_e( szKey, "cancel_buff%d", i+1 );

  00ca5	6a 03		 push	 3
  00ca7	c7 45 dc 8e 8d
	85 89		 mov	 DWORD PTR ___encStr$523881[ebp], -1987736178 ; 89858d8eH
  00cae	c7 45 e0 88 80
	b4 88		 mov	 DWORD PTR ___encStr$523881[ebp+4], -2001436536 ; 88b48088H
  00cb5	c7 45 e4 98 8a
	8d cf		 mov	 DWORD PTR ___encStr$523881[ebp+8], -812807528 ; cf8d8a98H
  00cbc	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$523881[ebp]
  00cbf	66 c7 45 e8 89
	00		 mov	 WORD PTR ___encStr$523881[ebp+12], 137 ; 00000089H
  00cc5	5a		 pop	 edx
$LL2351@LoadProper:
  00cc6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00ccc	83 c0 04	 add	 eax, 4
  00ccf	4a		 dec	 edx
  00cd0	75 f4		 jne	 SHORT $LL2351@LoadProper
  00cd2	80 75 e8 ed	 xor	 BYTE PTR ___encStr$523881[ebp+12], -19 ; ffffffedH
  00cd6	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00cd9	50		 push	 eax
  00cda	89 85 04 fb ff
	ff		 mov	 DWORD PTR tv19232[ebp], eax
  00ce0	8d 45 dc	 lea	 eax, DWORD PTR ___encStr$523881[ebp]
  00ce3	50		 push	 eax
  00ce4	8d 85 08 fb ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00cea	50		 push	 eax
  00ceb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00cf1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 100  : 		rkLoader.LoadString( szKey, "", szBuf, MAX_PATH );

  00cf4	68 04 01 00 00	 push	 260			; 00000104H
  00cf9	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00cff	50		 push	 eax
  00d00	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00d05	8d 85 08 fb ff
	ff		 lea	 eax, DWORD PTR _szKey$[ebp]
  00d0b	50		 push	 eax
  00d0c	8b cf		 mov	 ecx, edi
  00d0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 101  : 
; 102  : 		m_JumpGrapplingWoundInfo.m_CancelBuffList.push_back( szBuf );

  00d14	8d 85 0c fc ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00d1a	50		 push	 eax
  00d1b	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR $T538255[ebp]
  00d21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00d27	8d 85 f0 fa ff
	ff		 lea	 eax, DWORD PTR $T538255[ebp]
  00d2d	50		 push	 eax
  00d2e	8d 8e cc 00 00
	00		 lea	 ecx, DWORD PTR [esi+204]
  00d34	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00d37	e8 00 00 00 00	 call	 ?push_back@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEXABVioHashString@@@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::push_back
  00d3c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00d40	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR $T538255[ebp]
  00d46	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00d4c	8b 8d 04 fb ff
	ff		 mov	 ecx, DWORD PTR tv19232[ebp]
  00d52	3b 8d 00 fb ff
	ff		 cmp	 ecx, DWORD PTR _iBuffCnt$[ebp]
  00d58	0f 8c 47 ff ff
	ff		 jl	 $LL102@LoadProper
$LN100@LoadProper:

; 103  : 	}
; 104  : 
; 105  : 	// air_jump
; 106  : 	m_fAirJumpPower = rkLoader.LoadFloat_e( "jump_air_power", 0.0f );

  00d5e	6a 03		 push	 3
  00d60	c7 45 c8 87 99
	86 9a		 mov	 DWORD PTR __k$541042[ebp], -1702454905 ; 9a869987H
  00d67	c7 45 cc b2 8d
	82 98		 mov	 DWORD PTR __k$541042[ebp+4], -1736274510 ; 98828db2H
  00d6e	c7 45 d0 b2 9c
	84 9d		 mov	 DWORD PTR __k$541042[ebp+8], -1652253518 ; 9d849cb2H
  00d75	66 c7 45 d4 88
	9e		 mov	 WORD PTR __k$541042[ebp+12], 40584 ; 00009e88H
  00d7b	8d 45 c8	 lea	 eax, DWORD PTR __k$541042[ebp]
  00d7e	88 5d d6	 mov	 BYTE PTR __k$541042[ebp+14], bl
  00d81	59		 pop	 ecx
$LL2457@LoadProper:
  00d82	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00d88	83 c0 04	 add	 eax, 4
  00d8b	49		 dec	 ecx
  00d8c	75 f4		 jne	 SHORT $LL2457@LoadProper
  00d8e	6a 0c		 push	 12			; 0000000cH
  00d90	58		 pop	 eax
$LL2454@LoadProper:
  00d91	8b c8		 mov	 ecx, eax
  00d93	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00d99	79 05		 jns	 SHORT $LN2797@LoadProper
  00d9b	49		 dec	 ecx
  00d9c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00d9f	41		 inc	 ecx
$LN2797@LoadProper:
  00da0	b2 ed		 mov	 dl, -19			; ffffffedH
  00da2	2a d1		 sub	 dl, cl
  00da4	30 54 05 c8	 xor	 BYTE PTR __k$541042[ebp+eax], dl
  00da8	40		 inc	 eax
  00da9	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00dac	7c e3		 jl	 SHORT $LL2454@LoadProper
  00dae	0f 57 c0	 xorps	 xmm0, xmm0
  00db1	51		 push	 ecx
  00db2	8d 45 c8	 lea	 eax, DWORD PTR __k$541042[ebp]
  00db5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dba	50		 push	 eax
  00dbb	8b cf		 mov	 ecx, edi
  00dbd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00dc3	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  00dc9	6a 05		 push	 5

; 107  : 	m_fAirForcePower = rkLoader.LoadFloat_e( "jump_air_force_power", 0.0f );

  00dcb	c7 85 cc fe ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$541062[ebp], -1702454905 ; 9a869987H
  00dd5	c7 85 d0 fe ff
	ff b2 8d 82 98	 mov	 DWORD PTR __k$541062[ebp+4], -1736274510 ; 98828db2H
  00ddf	c7 85 d4 fe ff
	ff b2 8a 84 98	 mov	 DWORD PTR __k$541062[ebp+8], -1736144206 ; 98848ab2H
  00de9	c7 85 d8 fe ff
	ff 8e 89 b4 9a	 mov	 DWORD PTR __k$541062[ebp+12], -1699444338 ; 9ab4898eH
  00df3	c7 85 dc fe ff
	ff 82 9b 8e 98	 mov	 DWORD PTR __k$541062[ebp+16], -1735484542 ; 988e9b82H
  00dfd	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR __k$541062[ebp]
  00e03	88 9d e0 fe ff
	ff		 mov	 BYTE PTR __k$541062[ebp+20], bl
  00e09	59		 pop	 ecx
$LL2563@LoadProper:
  00e0a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00e10	83 c0 04	 add	 eax, 4
  00e13	49		 dec	 ecx
  00e14	75 f4		 jne	 SHORT $LL2563@LoadProper
  00e16	0f 57 c0	 xorps	 xmm0, xmm0
  00e19	51		 push	 ecx
  00e1a	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR __k$541062[ebp]
  00e20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e25	50		 push	 eax
  00e26	8b cf		 mov	 ecx, edi
  00e28	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00e2e	d9 9e 00 01 00
	00		 fstp	 DWORD PTR [esi+256]
  00e34	6a 06		 push	 6

; 108  : 
; 109  : 	m_bUseJumpDashAndLandDash = rkLoader.LoadBool_e( "jump_use_jumpdash_landdash", false );

  00e36	c7 85 8c fe ff
	ff 87 99 86 9a	 mov	 DWORD PTR __k$541187[ebp], -1702454905 ; 9a869987H
  00e40	c7 85 90 fe ff
	ff b2 99 98 8f	 mov	 DWORD PTR __k$541187[ebp+4], -1885824590 ; 8f9899b2H
  00e4a	c7 85 94 fe ff
	ff b2 86 9e 87	 mov	 DWORD PTR __k$541187[ebp+8], -2019653966 ; 879e86b2H
  00e54	c7 85 98 fe ff
	ff 9d 88 8a 99	 mov	 DWORD PTR __k$541187[ebp+12], -1718974307 ; 998a889dH
  00e5e	c7 85 9c fe ff
	ff 85 b3 87 8b	 mov	 DWORD PTR __k$541187[ebp+16], -1954040955 ; 8b87b385H
  00e68	c7 85 a0 fe ff
	ff 83 88 8f 8b	 mov	 DWORD PTR __k$541187[ebp+20], -1953527677 ; 8b8f8883H
  00e72	66 c7 85 a4 fe
	ff ff 9e 84	 mov	 WORD PTR __k$541187[ebp+24], 33950 ; 0000849eH
  00e7b	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR __k$541187[ebp]
  00e81	88 9d a6 fe ff
	ff		 mov	 BYTE PTR __k$541187[ebp+26], bl
  00e87	59		 pop	 ecx
$LL2669@LoadProper:
  00e88	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00e8e	83 c0 04	 add	 eax, 4
  00e91	49		 dec	 ecx
  00e92	75 f4		 jne	 SHORT $LL2669@LoadProper
  00e94	6a 18		 push	 24			; 00000018H
  00e96	58		 pop	 eax
$LL2666@LoadProper:
  00e97	8b c8		 mov	 ecx, eax
  00e99	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00e9f	79 05		 jns	 SHORT $LN2798@LoadProper
  00ea1	49		 dec	 ecx
  00ea2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00ea5	41		 inc	 ecx
$LN2798@LoadProper:
  00ea6	b2 ed		 mov	 dl, -19			; ffffffedH
  00ea8	2a d1		 sub	 dl, cl
  00eaa	30 94 05 8c fe
	ff ff		 xor	 BYTE PTR __k$541187[ebp+eax], dl
  00eb1	40		 inc	 eax
  00eb2	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  00eb5	7c e0		 jl	 SHORT $LL2666@LoadProper
  00eb7	53		 push	 ebx
  00eb8	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR __k$541187[ebp]
  00ebe	50		 push	 eax
  00ebf	8b cf		 mov	 ecx, edi
  00ec1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z
  00ec7	88 86 e0 00 00
	00		 mov	 BYTE PTR [esi+224], al

; 110  : }

  00ecd	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00ed2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z$0:
  00000	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR $T538255[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 8a ec fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1300]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z ENDP	; ioExtendJump::LoadProperty
PUBLIC	??0JumpGrapplingInfo@@QAE@XZ			; JumpGrapplingInfo::JumpGrapplingInfo
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	SEGMENT
__unwindtable$??0JumpGrapplingInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0JumpGrapplingInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0JumpGrapplingInfo@@QAE@XZ$1
__ehfuncinfo$??0JumpGrapplingInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0JumpGrapplingInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0JumpGrapplingInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0JumpGrapplingInfo@@QAE@XZ PROC			; JumpGrapplingInfo::JumpGrapplingInfo, COMDAT
; _this$ = ecx

; 1291 : 	JumpGrapplingInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0JumpGrapplingInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001b	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0001e	e8 00 00 00 00	 call	 ??0AttackAttribute@@QAE@XZ ; AttackAttribute::AttackAttribute

; 1292 : 	{
; 1293 : 		Init();

  00023	8b ce		 mov	 ecx, esi
  00025	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00029	e8 00 00 00 00	 call	 ?Init@JumpGrapplingInfo@@QAEXXZ ; JumpGrapplingInfo::Init

; 1294 : 	}

  0002e	8b c6		 mov	 eax, esi
  00030	e8 00 00 00 00	 call	 __EH_epilog3
  00035	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0JumpGrapplingInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0JumpGrapplingInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000f	e9 00 00 00 00	 jmp	 ??1AttackAttribute@@QAE@XZ
__ehhandler$??0JumpGrapplingInfo@@QAE@XZ:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0JumpGrapplingInfo@@QAE@XZ
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0JumpGrapplingInfo@@QAE@XZ ENDP			; JumpGrapplingInfo::JumpGrapplingInfo
PUBLIC	??0JumpGrappingWoundInfo@@QAE@XZ		; JumpGrappingWoundInfo::JumpGrappingWoundInfo
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0JumpGrappingWoundInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0JumpGrappingWoundInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0JumpGrappingWoundInfo@@QAE@XZ$1
__ehfuncinfo$??0JumpGrappingWoundInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0JumpGrappingWoundInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	ENDS
;	COMDAT ??0JumpGrappingWoundInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0JumpGrappingWoundInfo@@QAE@XZ PROC			; JumpGrappingWoundInfo::JumpGrappingWoundInfo, COMDAT
; _this$ = ecx

; 1321 : 	JumpGrappingWoundInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0JumpGrappingWoundInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0001a	33 c0		 xor	 eax, eax
  0001c	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0001f	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00022	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00025	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 1322 : 	{
; 1323 : 		Init();

  00028	8b ce		 mov	 ecx, esi
  0002a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0002e	e8 00 00 00 00	 call	 ?Init@JumpGrappingWoundInfo@@QAEXXZ ; JumpGrappingWoundInfo::Init

; 1324 : 	}

  00033	8b c6		 mov	 eax, esi
  00035	e8 00 00 00 00	 call	 __EH_epilog3
  0003a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0JumpGrappingWoundInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0JumpGrappingWoundInfo@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 24	 add	 ecx, 36			; 00000024H
  00012	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__ehhandler$??0JumpGrappingWoundInfo@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0JumpGrappingWoundInfo@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0JumpGrappingWoundInfo@@QAE@XZ ENDP			; JumpGrappingWoundInfo::JumpGrappingWoundInfo
PUBLIC	??0ioExtendJump@@QAE@XZ				; ioExtendJump::ioExtendJump
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0ioExtendJump@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@XZ$3
__ehfuncinfo$??0ioExtendJump@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ioExtendJump@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
xdata$x	ENDS
;	COMDAT ??0ioExtendJump@@QAE@XZ
_TEXT	SEGMENT
$T541491 = -20						; size = 4
$T541493 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioExtendJump@@QAE@XZ PROC				; ioExtendJump::ioExtendJump, COMDAT
; _this$ = ecx

; 7    : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioExtendJump@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioExtendJump@@6B@
  00020	ff d7		 call	 edi
  00022	33 db		 xor	 ebx, ebx
  00024	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00027	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002a	ff d7		 call	 edi
  0002c	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0002f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00033	e8 00 00 00 00	 call	 ??0JumpGrapplingInfo@@QAE@XZ ; JumpGrapplingInfo::JumpGrapplingInfo
  00038	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  0003e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00042	e8 00 00 00 00	 call	 ??0JumpGrappingWoundInfo@@QAE@XZ ; JumpGrappingWoundInfo::JumpGrappingWoundInfo
  00047	51		 push	 ecx
  00048	89 65 ec	 mov	 DWORD PTR $T541493[ebp], esp
  0004b	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  00051	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00055	89 65 ec	 mov	 DWORD PTR $T541491[ebp], esp
  00058	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >

; 8    : 	m_bUseExtendJump = false;
; 9    : 	m_bUseJumpDashAndLandDash = false;
; 10   : 	m_JumpDashDownKey = ioUserKeyInput::DKI_NONE;
; 11   : 
; 12   : 	// air_jump
; 13   : 	m_iCurAirJump = 0;
; 14   : 	m_fAirJumpPowerRate = 0.0f;

  0005d	0f 57 c0	 xorps	 xmm0, xmm0
  00060	89 9e 08 01 00
	00		 mov	 DWORD PTR [esi+264], ebx
  00066	89 9e 0c 01 00
	00		 mov	 DWORD PTR [esi+268], ebx
  0006c	89 9e 10 01 00
	00		 mov	 DWORD PTR [esi+272], ebx

; 15   : 	m_vAirJumpTimeList.clear();

  00072	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  00078	88 5e 10	 mov	 BYTE PTR [esi+16], bl
  0007b	88 9e e0 00 00
	00		 mov	 BYTE PTR [esi+224], bl
  00081	89 9e e4 00 00
	00		 mov	 DWORD PTR [esi+228], ebx
  00087	89 9e ec 00 00
	00		 mov	 DWORD PTR [esi+236], ebx
  0008d	f3 0f 11 86 04
	01 00 00	 movss	 DWORD PTR [esi+260], xmm0
  00095	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear

; 16   : 
; 17   : 	m_dwReserveEnableTime = 0;

  0009a	89 9e e8 00 00
	00		 mov	 DWORD PTR [esi+232], ebx

; 18   : }

  000a0	8b c6		 mov	 eax, esi
  000a2	e8 00 00 00 00	 call	 __EH_epilog3
  000a7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioExtendJump@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioExtendJump@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 28	 add	 ecx, 40			; 00000028H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioExtendJump@@QAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001e	e9 00 00 00 00	 jmp	 ??1JumpGrapplingInfo@@QAE@XZ
__unwindfunclet$??0ioExtendJump@@QAE@XZ$3:
  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0002c	e9 00 00 00 00	 jmp	 ??1JumpGrappingWoundInfo@@QAE@XZ
__ehhandler$??0ioExtendJump@@QAE@XZ:
  00031	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00035	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00038	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioExtendJump@@QAE@XZ
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioExtendJump@@QAE@XZ ENDP				; ioExtendJump::ioExtendJump
; Function compile flags: /Ogsp
;	COMDAT ??_GioExtendJump@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioExtendJump@@UAEPAXI@Z PROC			; ioExtendJump::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioExtendJump@@UAE@XZ	; ioExtendJump::~ioExtendJump
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioExtendJump@@UAEPAXI@Z ENDP			; ioExtendJump::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0ioExtendJump@@QAE@ABV0@@Z			; ioExtendJump::ioExtendJump
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0ioExtendJump@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$3
__ehfuncinfo$??0ioExtendJump@@QAE@ABV0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ioExtendJump@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioextendjump.cpp
xdata$x	ENDS
;	COMDAT ??0ioExtendJump@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T541545 = 8						; size = 4
$T541547 = 8						; size = 4
_rhs$ = 8						; size = 4
??0ioExtendJump@@QAE@ABV0@@Z PROC			; ioExtendJump::ioExtendJump, COMDAT
; _this$ = ecx

; 34   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioExtendJump@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioExtendJump@@6B@
  00020	d9 47 04	 fld	 DWORD PTR [edi+4]
  00023	d9 5e 04	 fstp	 DWORD PTR [esi+4]
  00026	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00029	d9 47 08	 fld	 DWORD PTR [edi+8]
  0002c	d9 5e 08	 fstp	 DWORD PTR [esi+8]
  0002f	d9 47 0c	 fld	 DWORD PTR [edi+12]
  00032	d9 5e 0c	 fstp	 DWORD PTR [esi+12]
  00035	8a 47 11	 mov	 al, BYTE PTR [edi+17]
  00038	88 46 11	 mov	 BYTE PTR [esi+17], al
  0003b	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0003e	50		 push	 eax
  0003f	ff d3		 call	 ebx
  00041	d9 47 24	 fld	 DWORD PTR [edi+36]
  00044	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	d9 5e 24	 fstp	 DWORD PTR [esi+36]
  0004b	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  0004e	50		 push	 eax
  0004f	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00052	ff d3		 call	 ebx
  00054	d9 47 38	 fld	 DWORD PTR [edi+56]
  00057	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  0005a	d9 5e 38	 fstp	 DWORD PTR [esi+56]
  0005d	50		 push	 eax
  0005e	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00061	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00065	e8 00 00 00 00	 call	 ??0JumpGrapplingInfo@@QAE@ABU0@@Z
  0006a	8d 87 a8 00 00
	00		 lea	 eax, DWORD PTR [edi+168]
  00070	50		 push	 eax
  00071	8d 8e a8 00 00
	00		 lea	 ecx, DWORD PTR [esi+168]
  00077	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0007b	e8 00 00 00 00	 call	 ??0JumpGrappingWoundInfo@@QAE@ABU0@@Z
  00080	8a 87 e0 00 00
	00		 mov	 al, BYTE PTR [edi+224]
  00086	51		 push	 ecx
  00087	89 65 08	 mov	 DWORD PTR $T541547[ebp], esp
  0008a	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  00090	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00094	88 86 e0 00 00
	00		 mov	 BYTE PTR [esi+224], al
  0009a	89 65 08	 mov	 DWORD PTR $T541545[ebp], esp
  0009d	e8 00 00 00 00	 call	 ??0?$_List_val@MV?$allocator@M@std@@@std@@QAE@V?$allocator@M@1@@Z ; std::_List_val<float,std::allocator<float> >::_List_val<float,std::allocator<float> >
  000a2	d9 87 fc 00 00
	00		 fld	 DWORD PTR [edi+252]

; 35   : 	m_bUseExtendJump = false;
; 36   : 
; 37   : 	// air_jump
; 38   : 	m_iCurAirJump = 0;
; 39   : 	m_fAirJumpPowerRate = 0.0f;

  000a8	0f 57 c0	 xorps	 xmm0, xmm0
  000ab	d9 9e fc 00 00
	00		 fstp	 DWORD PTR [esi+252]
  000b1	d9 87 00 01 00
	00		 fld	 DWORD PTR [edi+256]
  000b7	33 ff		 xor	 edi, edi
  000b9	d9 9e 00 01 00
	00		 fstp	 DWORD PTR [esi+256]
  000bf	89 be 08 01 00
	00		 mov	 DWORD PTR [esi+264], edi
  000c5	89 be 0c 01 00
	00		 mov	 DWORD PTR [esi+268], edi
  000cb	89 be 10 01 00
	00		 mov	 DWORD PTR [esi+272], edi

; 40   : 	m_vAirJumpTimeList.clear();

  000d1	8d 8e f0 00 00
	00		 lea	 ecx, DWORD PTR [esi+240]
  000d7	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  000db	89 be ec 00 00
	00		 mov	 DWORD PTR [esi+236], edi
  000e1	f3 0f 11 86 04
	01 00 00	 movss	 DWORD PTR [esi+260], xmm0
  000e9	e8 00 00 00 00	 call	 ?clear@?$list@MV?$allocator@M@std@@@std@@QAEXXZ ; std::list<float,std::allocator<float> >::clear

; 41   : 
; 42   : 	m_dwReserveEnableTime = 0;

  000ee	89 be e8 00 00
	00		 mov	 DWORD PTR [esi+232], edi

; 43   : }

  000f4	8b c6		 mov	 eax, esi
  000f6	e8 00 00 00 00	 call	 __EH_epilog3
  000fb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 28	 add	 ecx, 40			; 00000028H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001e	e9 00 00 00 00	 jmp	 ??1JumpGrapplingInfo@@QAE@XZ
__unwindfunclet$??0ioExtendJump@@QAE@ABV0@@Z$3:
  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0002c	e9 00 00 00 00	 jmp	 ??1JumpGrappingWoundInfo@@QAE@XZ
__ehhandler$??0ioExtendJump@@QAE@ABV0@@Z:
  00031	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00035	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00038	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioExtendJump@@QAE@ABV0@@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioExtendJump@@QAE@ABV0@@Z ENDP			; ioExtendJump::ioExtendJump
END
