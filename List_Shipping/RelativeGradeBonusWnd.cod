; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\RelativeGradeBonusWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	??_7RelativeGradeBonusWnd@@6B@			; RelativeGradeBonusWnd::`vftable'
PUBLIC	??0RelativeGradeBonusWnd@@QAE@XZ		; RelativeGradeBonusWnd::RelativeGradeBonusWnd
PUBLIC	??_R4RelativeGradeBonusWnd@@6B@			; RelativeGradeBonusWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRelativeGradeBonusWnd@@@8		; RelativeGradeBonusWnd `RTTI Type Descriptor'
PUBLIC	??_R3RelativeGradeBonusWnd@@8			; RelativeGradeBonusWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RelativeGradeBonusWnd@@8			; RelativeGradeBonusWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RelativeGradeBonusWnd@@8		; RelativeGradeBonusWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderImage@RelativeGradeBonusWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ; RelativeGradeBonusWnd::AddRenderImage
PUBLIC	?OnRender@RelativeGradeBonusWnd@@MAEXXZ		; RelativeGradeBonusWnd::OnRender
PUBLIC	?iwm_command@RelativeGradeBonusWnd@@UAEXPAVioWnd@@HK@Z ; RelativeGradeBonusWnd::iwm_command
PUBLIC	?iwm_show@RelativeGradeBonusWnd@@UAEXXZ		; RelativeGradeBonusWnd::iwm_show
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	__imp_?Clear@ioHashString@@QAEXXZ:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnProcess@ioWnd@@MAEXM@Z:PROC			; ioWnd::OnProcess
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_hide@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_hide
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_ERelativeGradeBonusWnd@@UAEPAXI@Z:PROC	; RelativeGradeBonusWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\relativegradebonuswnd.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RelativeGradeBonusWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RelativeGradeBonusWnd@@8 DD FLAT:??_R0?AVRelativeGradeBonusWnd@@@8 ; RelativeGradeBonusWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RelativeGradeBonusWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2RelativeGradeBonusWnd@@8
rdata$r	SEGMENT
??_R2RelativeGradeBonusWnd@@8 DD FLAT:??_R1A@?0A@EA@RelativeGradeBonusWnd@@8 ; RelativeGradeBonusWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3RelativeGradeBonusWnd@@8
rdata$r	SEGMENT
??_R3RelativeGradeBonusWnd@@8 DD 00H			; RelativeGradeBonusWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2RelativeGradeBonusWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRelativeGradeBonusWnd@@@8
_DATA	SEGMENT
??_R0?AVRelativeGradeBonusWnd@@@8 DD FLAT:??_7type_info@@6B@ ; RelativeGradeBonusWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRelativeGradeBonusWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RelativeGradeBonusWnd@@6B@
rdata$r	SEGMENT
??_R4RelativeGradeBonusWnd@@6B@ DD 00H			; RelativeGradeBonusWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRelativeGradeBonusWnd@@@8
	DD	FLAT:??_R3RelativeGradeBonusWnd@@8
rdata$r	ENDS
;	COMDAT ??_7RelativeGradeBonusWnd@@6B@
CONST	SEGMENT
??_7RelativeGradeBonusWnd@@6B@ DD FLAT:??_R4RelativeGradeBonusWnd@@6B@ ; RelativeGradeBonusWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@RelativeGradeBonusWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@RelativeGradeBonusWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@ioWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@RelativeGradeBonusWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@RelativeGradeBonusWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_ERelativeGradeBonusWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RelativeGradeBonusWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RelativeGradeBonusWnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RelativeGradeBonusWnd@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0RelativeGradeBonusWnd@@QAE@XZ$2
__ehfuncinfo$??0RelativeGradeBonusWnd@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0RelativeGradeBonusWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0RelativeGradeBonusWnd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0RelativeGradeBonusWnd@@QAE@XZ PROC			; RelativeGradeBonusWnd::RelativeGradeBonusWnd, COMDAT
; _this$ = ecx

; 30   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0RelativeGradeBonusWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ
  00017	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00023	57		 push	 edi
  00024	6a 02		 push	 2
  00026	6a 10		 push	 16			; 00000010H
  00028	8d 86 a0 01 00
	00		 lea	 eax, DWORD PTR [esi+416]
  0002e	33 db		 xor	 ebx, ebx
  00030	50		 push	 eax
  00031	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7RelativeGradeBonusWnd@@6B@
  0003a	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0003f	8d 8e c0 01 00
	00		 lea	 ecx, DWORD PTR [esi+448]
  00045	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00049	ff d7		 call	 edi
  0004b	6a 05		 push	 5
  0004d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 31   : 	m_pIconBack = NULL;

  00051	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx

; 32   : 	m_pInfoBack = NULL;

  00057	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx

; 33   : 	m_pRankingIcon = NULL;

  0005d	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
  00063	8d 86 80 01 00
	00		 lea	 eax, DWORD PTR [esi+384]
  00069	59		 pop	 ecx
$LL3@RelativeGr:

; 34   : 	for( int i=GRADE_LEVEL_0; i<GRADE_LEVEL_MAX; ++i )
; 35   : 	{
; 36   : 		m_pGradeText[i] = NULL;

  0006a	89 58 ec	 mov	 DWORD PTR [eax-20], ebx

; 37   : 		m_pGradeIcon[i] = NULL;

  0006d	89 18		 mov	 DWORD PTR [eax], ebx
  0006f	83 c0 04	 add	 eax, 4
  00072	49		 dec	 ecx
  00073	75 f5		 jne	 SHORT $LL3@RelativeGr

; 38   : 	}
; 39   : 
; 40   : 	m_pRewardIcon[0] = NULL;
; 41   : 	m_pRewardIcon[1] = NULL;
; 42   : 
; 43   : 	m_iGradeType = GRADE_LEVEL_0;
; 44   : 	m_szLastExp.Clear();

  00075	8d 8e c0 01 00
	00		 lea	 ecx, DWORD PTR [esi+448]
  0007b	89 9e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ebx
  00081	89 9e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ebx
  00087	89 9e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ebx
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 45   : }

  00093	8b c6		 mov	 eax, esi
  00095	e8 00 00 00 00	 call	 __EH_epilog3
  0009a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RelativeGradeBonusWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??0RelativeGradeBonusWnd@@QAE@XZ$1:
  00009	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	6a 02		 push	 2
  00011	6a 10		 push	 16			; 00000010H
  00013	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00016	05 a0 01 00 00	 add	 eax, 416		; 000001a0H
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00021	c3		 ret	 0
__unwindfunclet$??0RelativeGradeBonusWnd@@QAE@XZ$2:
  00022	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	81 c1 c0 01 00
	00		 add	 ecx, 448		; 000001c0H
  0002b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0RelativeGradeBonusWnd@@QAE@XZ:
  00031	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00035	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00038	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0RelativeGradeBonusWnd@@QAE@XZ
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0RelativeGradeBonusWnd@@QAE@XZ ENDP			; RelativeGradeBonusWnd::RelativeGradeBonusWnd
PUBLIC	??1RelativeGradeBonusWnd@@UAE@XZ		; RelativeGradeBonusWnd::~RelativeGradeBonusWnd
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RelativeGradeBonusWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RelativeGradeBonusWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1RelativeGradeBonusWnd@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1RelativeGradeBonusWnd@@UAE@XZ$2
__ehfuncinfo$??1RelativeGradeBonusWnd@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1RelativeGradeBonusWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1RelativeGradeBonusWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
tv179 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RelativeGradeBonusWnd@@UAE@XZ PROC			; RelativeGradeBonusWnd::~RelativeGradeBonusWnd, COMDAT
; _this$ = ecx

; 48   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1RelativeGradeBonusWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7RelativeGradeBonusWnd@@6B@

; 49   : 	SAFEDELETE( m_pIconBack );

  00017	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0001d	33 db		 xor	 ebx, ebx
  0001f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00026	3b cb		 cmp	 ecx, ebx
  00028	74 0d		 je	 SHORT $LN10@RelativeGr@2
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	6a 01		 push	 1
  0002e	ff 50 40	 call	 DWORD PTR [eax+64]
  00031	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
$LN10@RelativeGr@2:

; 50   : 	SAFEDELETE( m_pInfoBack );

  00037	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0003d	3b cb		 cmp	 ecx, ebx
  0003f	74 0d		 je	 SHORT $LN9@RelativeGr@2
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	6a 01		 push	 1
  00045	ff 50 40	 call	 DWORD PTR [eax+64]
  00048	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
$LN9@RelativeGr@2:

; 51   : 	SAFEDELETE( m_pRankingIcon );

  0004e	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00054	3b cb		 cmp	 ecx, ebx
  00056	74 0d		 je	 SHORT $LN8@RelativeGr@2
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	6a 01		 push	 1
  0005c	ff 50 40	 call	 DWORD PTR [eax+64]
  0005f	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
$LN8@RelativeGr@2:

; 52   : 	for( int i=GRADE_LEVEL_0; i<GRADE_LEVEL_MAX; ++i )

  00065	8d be 80 01 00
	00		 lea	 edi, DWORD PTR [esi+384]
  0006b	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR tv179[ebp], 5
$LL7@RelativeGr@2:

; 53   : 	{
; 54   : 		SAFEDELETE( m_pGradeText[i] );

  00072	8b 4f ec	 mov	 ecx, DWORD PTR [edi-20]
  00075	3b cb		 cmp	 ecx, ebx
  00077	74 0a		 je	 SHORT $LN4@RelativeGr@2
  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	6a 01		 push	 1
  0007d	ff 50 40	 call	 DWORD PTR [eax+64]
  00080	89 5f ec	 mov	 DWORD PTR [edi-20], ebx
$LN4@RelativeGr@2:

; 55   : 		SAFEDELETE( m_pGradeIcon[i] );

  00083	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00085	3b cb		 cmp	 ecx, ebx
  00087	74 09		 je	 SHORT $LN6@RelativeGr@2
  00089	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008b	6a 01		 push	 1
  0008d	ff 50 40	 call	 DWORD PTR [eax+64]
  00090	89 1f		 mov	 DWORD PTR [edi], ebx
$LN6@RelativeGr@2:

; 52   : 	for( int i=GRADE_LEVEL_0; i<GRADE_LEVEL_MAX; ++i )

  00092	83 c7 04	 add	 edi, 4
  00095	ff 4d f0	 dec	 DWORD PTR tv179[ebp]
  00098	75 d8		 jne	 SHORT $LL7@RelativeGr@2

; 56   : 	}
; 57   : 	SAFEDELETE( m_pRewardIcon[0] );

  0009a	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  000a0	3b cb		 cmp	 ecx, ebx
  000a2	74 0d		 je	 SHORT $LN2@RelativeGr@2
  000a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a6	6a 01		 push	 1
  000a8	ff 50 40	 call	 DWORD PTR [eax+64]
  000ab	89 9e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ebx
$LN2@RelativeGr@2:

; 58   : 	SAFEDELETE( m_pRewardIcon[1] );

  000b1	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  000b7	3b cb		 cmp	 ecx, ebx
  000b9	74 0d		 je	 SHORT $LN1@RelativeGr@2
  000bb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bd	6a 01		 push	 1
  000bf	ff 50 40	 call	 DWORD PTR [eax+64]
  000c2	89 9e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ebx
$LN1@RelativeGr@2:

; 59   : 	m_szLastExp.Clear();

  000c8	8d 8e c0 01 00
	00		 lea	 ecx, DWORD PTR [esi+448]
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ

; 60   : }

  000d4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  000da	8d 8e c0 01 00
	00		 lea	 ecx, DWORD PTR [esi+448]
  000e0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e4	ff d7		 call	 edi
  000e6	57		 push	 edi
  000e7	6a 02		 push	 2
  000e9	6a 10		 push	 16			; 00000010H
  000eb	8d 86 a0 01 00
	00		 lea	 eax, DWORD PTR [esi+416]
  000f1	50		 push	 eax
  000f2	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000f5	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  000fa	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000fe	8b ce		 mov	 ecx, esi
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  00106	e8 00 00 00 00	 call	 __EH_epilog3
  0010b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RelativeGradeBonusWnd@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__unwindfunclet$??1RelativeGradeBonusWnd@@UAE@XZ$1:
  00009	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000f	6a 02		 push	 2
  00011	6a 10		 push	 16			; 00000010H
  00013	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00016	05 a0 01 00 00	 add	 eax, 416		; 000001a0H
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00021	c3		 ret	 0
__unwindfunclet$??1RelativeGradeBonusWnd@@UAE@XZ$2:
  00022	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	81 c1 c0 01 00
	00		 add	 ecx, 448		; 000001c0H
  0002b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1RelativeGradeBonusWnd@@UAE@XZ:
  00031	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00035	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00038	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1RelativeGradeBonusWnd@@UAE@XZ
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1RelativeGradeBonusWnd@@UAE@XZ ENDP			; RelativeGradeBonusWnd::~RelativeGradeBonusWnd
; Function compile flags: /Ogsp
;	COMDAT ?iwm_show@RelativeGradeBonusWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@RelativeGradeBonusWnd@@UAEXXZ PROC		; RelativeGradeBonusWnd::iwm_show, COMDAT
; _this$ = ecx

; 137  : 
; 138  : }

  00000	c3		 ret	 0
?iwm_show@RelativeGradeBonusWnd@@UAEXXZ ENDP		; RelativeGradeBonusWnd::iwm_show
_TEXT	ENDS
EXTRN	__imp_?HideWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_command@RelativeGradeBonusWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
_param$ = 16						; size = 4
?iwm_command@RelativeGradeBonusWnd@@UAEXPAVioWnd@@HK@Z PROC ; RelativeGradeBonusWnd::iwm_command, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 142  : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 143  : 	switch( dwID )

  0000f	48		 dec	 eax
  00010	83 f8 01	 cmp	 eax, 1
  00013	77 0e		 ja	 SHORT $LN1@iwm_comman

; 144  : 	{	
; 145  : 	case ID_EXIT:
; 146  : 	case ID_CLOSE:
; 147  : 		if( cmd == IOBN_BTNUP )

  00015	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  00019	75 08		 jne	 SHORT $LN1@iwm_comman

; 148  : 		{
; 149  : 			HideWnd();

  0001b	8b ce		 mov	 ecx, esi
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideWnd@ioWnd@@QAEXXZ
$LN1@iwm_comman:
  00023	5e		 pop	 esi

; 150  : 		}
; 151  : 		break;
; 152  : 	}
; 153  : }

  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
?iwm_command@RelativeGradeBonusWnd@@UAEXPAVioWnd@@HK@Z ENDP ; RelativeGradeBonusWnd::iwm_command
_TEXT	ENDS
PUBLIC	_rkPacket$GSCopy$
PUBLIC	?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z ; RelativeGradeBonusWnd::SetInfoToPacket
EXTRN	__imp_?ShowWnd@ioWnd@@QAEXXZ:PROC
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?GetPresentValue1Text@ioPresentMgr@@QAEABVioHashString@@FHH@Z:PROC ; ioPresentMgr::GetPresentValue1Text
EXTRN	?GetPresentValue2Text@ioPresentMgr@@QAEABVioHashString@@FHH@Z:PROC ; ioPresentMgr::GetPresentValue2Text
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	?GetPresentIconText@ioPresentMgr@@QAEABVioHashString@@FHH@Z:PROC ; ioPresentMgr::GetPresentIconText
EXTRN	?GetSingleton@ioPresentMgr@@SAAAV1@XZ:PROC	; ioPresentMgr::GetSingleton
EXTRN	??5SP2Packet@@QAEAAV0@AAF@Z:PROC		; SP2Packet::operator>>
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?ConvertNumToStrComma@Help@@YAXHPADH@Z:PROC	; Help::ConvertNumToStrComma
EXTRN	??5SP2Packet@@QAEAAV0@AAH@Z:PROC		; SP2Packet::operator>>
EXTRN	?GetMaxGradeUp@ioMyLevelMgr@@QAEHXZ:PROC	; ioMyLevelMgr::GetMaxGradeUp
EXTRN	?GetSingleton@ioMyLevelMgr@@SAAAV1@XZ:PROC	; ioMyLevelMgr::GetSingleton
EXTRN	?GetGradeLevel@ioMyInfo@@QAEHXZ:PROC		; ioMyInfo::GetGradeLevel
EXTRN	?IsGeneralGrade@ioMyInfo@@QAE_NXZ:PROC		; ioMyInfo::IsGeneralGrade
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
EXTRN	_memset:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z$0
__ehfuncinfo$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z
_TEXT	SEGMENT
_szIconName$512066 = -320				; size = 16
tv84 = -304						; size = 4
_rkPacket$GSCopy$ = -300				; size = 4
_iLastExp$ = -296					; size = 4
_iValue2$512065 = -292					; size = 4
_iType$512063 = -288					; size = 2
_iValue1$512064 = -284					; size = 4
tv348 = -280						; size = 4
_szConvertNum$512062 = -276				; size = 260
__$EHRec$ = -12						; size = 12
_rkPacket$ = 8						; size = 4
?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z PROC ; RelativeGradeBonusWnd::SetInfoToPacket, COMDAT
; _this$ = ecx

; 220  : {

  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 45 08	 mov	 eax, DWORD PTR _rkPacket$[ebp]
  00012	8b f1		 mov	 esi, ecx

; 228  : 	m_szReward[0].Clear();

  00014	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _rkPacket$GSCopy$[ebp], eax
  0001a	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 ?IsGeneralGrade@ioMyInfo@@QAE_NXZ ; ioMyInfo::IsGeneralGrade
  00026	84 c0		 test	 al, al
  00028	0f 84 d5 01 00
	00		 je	 $LN1@SetInfoToP

; 221  : 	if( !g_MyInfo.IsGeneralGrade() )
; 222  : 		return;
; 223  : 
; 224  : 	m_iGradeType = g_MyInfo.GetGradeLevel() - g_LevelMgr.GetMaxGradeUp();

  0002e	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00033	8b c8		 mov	 ecx, eax
  00035	e8 00 00 00 00	 call	 ?GetGradeLevel@ioMyInfo@@QAEHXZ ; ioMyInfo::GetGradeLevel
  0003a	8b f8		 mov	 edi, eax
  0003c	e8 00 00 00 00	 call	 ?GetSingleton@ioMyLevelMgr@@SAAAV1@XZ ; ioMyLevelMgr::GetSingleton
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?GetMaxGradeUp@ioMyLevelMgr@@QAEHXZ ; ioMyLevelMgr::GetMaxGradeUp

; 225  : 	
; 226  : 	SAFEDELETE( m_pRewardIcon[0] );

  00048	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  0004e	2b f8		 sub	 edi, eax
  00050	89 be 9c 01 00
	00		 mov	 DWORD PTR [esi+412], edi
  00056	85 c9		 test	 ecx, ecx
  00058	74 0e		 je	 SHORT $LN8@SetInfoToP
  0005a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005c	6a 01		 push	 1
  0005e	ff 50 40	 call	 DWORD PTR [eax+64]
  00061	83 a6 94 01 00
	00 00		 and	 DWORD PTR [esi+404], 0
$LN8@SetInfoToP:

; 227  : 	SAFEDELETE( m_pRewardIcon[1] );

  00068	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0e		 je	 SHORT $LN7@SetInfoToP
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	6a 01		 push	 1
  00076	ff 50 40	 call	 DWORD PTR [eax+64]
  00079	83 a6 98 01 00
	00 00		 and	 DWORD PTR [esi+408], 0
$LN7@SetInfoToP:

; 228  : 	m_szReward[0].Clear();

  00080	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?Clear@ioHashString@@QAEXXZ
  00086	8d 9e a0 01 00
	00		 lea	 ebx, DWORD PTR [esi+416]
  0008c	8b cb		 mov	 ecx, ebx
  0008e	ff d7		 call	 edi

; 229  : 	m_szReward[1].Clear();

  00090	8d 8e b0 01 00
	00		 lea	 ecx, DWORD PTR [esi+432]
  00096	ff d7		 call	 edi

; 230  : 
; 231  : 	int iLastExp = 0;
; 232  : 	rkPacket >> iLastExp;

  00098	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkPacket$GSCopy$[ebp]
  0009e	83 a5 d8 fe ff
	ff 00		 and	 DWORD PTR _iLastExp$[ebp], 0
  000a5	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _iLastExp$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  000b1	89 9d e8 fe ff
	ff		 mov	 DWORD PTR tv348[ebp], ebx
  000b7	8d 9e 94 01 00
	00		 lea	 ebx, DWORD PTR [esi+404]
  000bd	c7 85 d0 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR tv84[ebp], 2
$LL6@SetInfoToP:

; 233  : 
; 234  : 	for( int i=0; i<2; ++i )
; 235  : 	{
; 236  : 		char szConvertNum[MAX_PATH] = "";

  000c7	68 03 01 00 00	 push	 259			; 00000103H
  000cc	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szConvertNum$512062[ebp+1]
  000d2	6a 00		 push	 0
  000d4	50		 push	 eax
  000d5	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _szConvertNum$512062[ebp], 0
  000dc	e8 00 00 00 00	 call	 _memset

; 237  : 		Help::ConvertNumToStrComma( iLastExp, szConvertNum, sizeof( szConvertNum ) );

  000e1	68 04 01 00 00	 push	 260			; 00000104H
  000e6	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szConvertNum$512062[ebp]
  000ec	50		 push	 eax
  000ed	ff b5 d8 fe ff
	ff		 push	 DWORD PTR _iLastExp$[ebp]
  000f3	e8 00 00 00 00	 call	 ?ConvertNumToStrComma@Help@@YAXHPADH@Z ; Help::ConvertNumToStrComma
  000f8	83 c4 18	 add	 esp, 24			; 00000018H

; 238  : 		m_szLastExp = szConvertNum;

  000fb	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szConvertNum$512062[ebp]
  00101	50		 push	 eax
  00102	8d 8e c0 01 00
	00		 lea	 ecx, DWORD PTR [esi+448]
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z

; 239  : 
; 240  : 		short iType;
; 241  : 		int iValue1, iValue2;
; 242  : 		rkPacket >> iType >> iValue1 >> iValue2;

  0010e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _rkPacket$GSCopy$[ebp]
  00114	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _iValue2$512065[ebp]
  0011a	50		 push	 eax
  0011b	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _iValue1$512064[ebp]
  00121	50		 push	 eax
  00122	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _iType$512063[ebp]
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAF@Z ; SP2Packet::operator>>
  0012e	8b c8		 mov	 ecx, eax
  00130	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>
  00135	8b c8		 mov	 ecx, eax
  00137	e8 00 00 00 00	 call	 ??5SP2Packet@@QAEAAV0@AAH@Z ; SP2Packet::operator>>

; 243  : 
; 244  : 		ioHashString szIconName = g_PresentMgr.GetPresentIconText( iType, iValue1, iValue2 );

  0013c	ff b5 dc fe ff
	ff		 push	 DWORD PTR _iValue2$512065[ebp]
  00142	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _iValue1$512064[ebp]
  00148	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _iType$512063[ebp]
  0014e	e8 00 00 00 00	 call	 ?GetSingleton@ioPresentMgr@@SAAAV1@XZ ; ioPresentMgr::GetSingleton
  00153	8b c8		 mov	 ecx, eax
  00155	e8 00 00 00 00	 call	 ?GetPresentIconText@ioPresentMgr@@QAEABVioHashString@@FHH@Z ; ioPresentMgr::GetPresentIconText
  0015a	50		 push	 eax
  0015b	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szIconName$512066[ebp]
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  00167	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 245  : 		m_pRewardIcon[i] = g_UIImageSetMgr.CreateImageByFullName(szIconName);

  0016b	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _szIconName$512066[ebp]
  00171	6a 00		 push	 0
  00173	50		 push	 eax
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0017a	8b c8		 mov	 ecx, eax
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z

; 246  : 		if( iType == PRESENT_PESO )

  00182	66 83 bd e0 fe
	ff ff 04	 cmp	 WORD PTR _iType$512063[ebp], 4

; 247  : 			m_szReward[i] = g_PresentMgr.GetPresentValue2Text( iType, iValue1, iValue2 );

  0018a	ff b5 dc fe ff
	ff		 push	 DWORD PTR _iValue2$512065[ebp]
  00190	89 03		 mov	 DWORD PTR [ebx], eax
  00192	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _iValue1$512064[ebp]
  00198	75 10		 jne	 SHORT $LN3@SetInfoToP
  0019a	6a 04		 push	 4
  0019c	e8 00 00 00 00	 call	 ?GetSingleton@ioPresentMgr@@SAAAV1@XZ ; ioPresentMgr::GetSingleton
  001a1	8b c8		 mov	 ecx, eax
  001a3	e8 00 00 00 00	 call	 ?GetPresentValue2Text@ioPresentMgr@@QAEABVioHashString@@FHH@Z ; ioPresentMgr::GetPresentValue2Text

; 248  : 		else

  001a8	eb 12		 jmp	 SHORT $LN20@SetInfoToP
$LN3@SetInfoToP:

; 249  : 			m_szReward[i] = g_PresentMgr.GetPresentValue1Text( iType, iValue1, iValue2 );

  001aa	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _iType$512063[ebp]
  001b0	e8 00 00 00 00	 call	 ?GetSingleton@ioPresentMgr@@SAAAV1@XZ ; ioPresentMgr::GetSingleton
  001b5	8b c8		 mov	 ecx, eax
  001b7	e8 00 00 00 00	 call	 ?GetPresentValue1Text@ioPresentMgr@@QAEABVioHashString@@FHH@Z ; ioPresentMgr::GetPresentValue1Text
$LN20@SetInfoToP:
  001bc	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv348[ebp]
  001c2	50		 push	 eax
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 250  : 	}

  001c9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001cd	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szIconName$512066[ebp]
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001d9	83 85 e8 fe ff
	ff 10		 add	 DWORD PTR tv348[ebp], 16 ; 00000010H
  001e0	83 c3 04	 add	 ebx, 4
  001e3	ff 8d d0 fe ff
	ff		 dec	 DWORD PTR tv84[ebp]
  001e9	0f 85 d8 fe ff
	ff		 jne	 $LL6@SetInfoToP

; 251  : 
; 252  : 	if( !IsShow() )

  001ef	8b ce		 mov	 ecx, esi
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  001f7	84 c0		 test	 al, al
  001f9	75 08		 jne	 SHORT $LN1@SetInfoToP

; 253  : 		ShowWnd();

  001fb	8b ce		 mov	 ecx, esi
  001fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWnd@ioWnd@@QAEXXZ
$LN1@SetInfoToP:

; 254  : }

  00203	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00208	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z$0:
  00000	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _szIconName$512066[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 8a bc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-324]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetInfoToPacket@RelativeGradeBonusWnd@@QAEXAAVSP2Packet@@@Z ENDP ; RelativeGradeBonusWnd::SetInfoToPacket
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetUserRanking@ioMyInfo@@QBE?BHXZ		; ioMyInfo::GetUserRanking
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iomyinfo.h
;	COMDAT ?GetUserRanking@ioMyInfo@@QBE?BHXZ
_TEXT	SEGMENT
?GetUserRanking@ioMyInfo@@QBE?BHXZ PROC			; ioMyInfo::GetUserRanking, COMDAT
; _this$ = ecx

; 520  : 	const int GetUserRanking() const { return m_user_data.m_user_rank; }

  00000	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00003	c3		 ret	 0
?GetUserRanking@ioMyInfo@@QBE?BHXZ ENDP			; ioMyInfo::GetUserRanking
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GRelativeGradeBonusWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GRelativeGradeBonusWnd@@UAEPAXI@Z PROC		; RelativeGradeBonusWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1RelativeGradeBonusWnd@@UAE@XZ ; RelativeGradeBonusWnd::~RelativeGradeBonusWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GRelativeGradeBonusWnd@@UAEPAXI@Z ENDP		; RelativeGradeBonusWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3f266666
PUBLIC	??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_this$GSCopy$
EXTRN	??1ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::~ioComplexStringPrinter
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z:PROC
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBDH@Z:PROC
EXTRN	__imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	?ClearList@ioComplexStringPrinter@@QAEXXZ:PROC	; ioComplexStringPrinter::ClearList
EXTRN	?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z:PROC ; ioComplexStringPrinter::PrintFullText
EXTRN	?GetGradeName@ioMyLevelMgr@@QBEXHPADH_N1@Z:PROC	; ioMyLevelMgr::GetGradeName
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z:PROC ; ioComplexStringPrinter::AddTextPiece
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	?SetTextColor@ioComplexStringPrinter@@QAEXK@Z:PROC ; ioComplexStringPrinter::SetTextColor
EXTRN	?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z:PROC ; ioComplexStringPrinter::SetBkColor
EXTRN	?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z:PROC ; ioComplexStringPrinter::SetTextStyle
EXTRN	??0ioComplexStringPrinter@@QAE@XZ:PROC		; ioComplexStringPrinter::ioComplexStringPrinter
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
CONST	SEGMENT
??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@ DB 'RelativeGra'
	DB	'deBonusWnd::OnRender', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRender@RelativeGradeBonusWnd@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRender@RelativeGradeBonusWnd@@MAEXXZ$0
__ehfuncinfo$?OnRender@RelativeGradeBonusWnd@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnRender@RelativeGradeBonusWnd@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\relativegradebonuswnd.cpp
xdata$x	ENDS
;	COMDAT ?OnRender@RelativeGradeBonusWnd@@MAEXXZ
_TEXT	SEGMENT
_kPrinter$ = -336					; size = 32
tv713 = -304						; size = 4
tv763 = -300						; size = 4
_this$GSCopy$ = -300					; size = 4
_iYPos$ = -296						; size = 4
tv727 = -292						; size = 4
tv679 = -292						; size = 4
tv760 = -288						; size = 4
_iXPos$ = -288						; size = 4
tv671 = -284						; size = 4
tv755 = -280						; size = 4
tv711 = -280						; size = 4
_szGradeName$ = -276					; size = 260
__$EHRec$ = -12						; size = 12
?OnRender@RelativeGradeBonusWnd@@MAEXXZ PROC		; RelativeGradeBonusWnd::OnRender, COMDAT
; _this$ = ecx

; 156  : {

  00000	68 44 01 00 00	 push	 324			; 00000144H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?OnRender@RelativeGradeBonusWnd@@MAEXXZ
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b f9		 mov	 edi, ecx

; 157  : 	ioWnd::OnRender();
; 158  : 
; 159  : 	int iXPos = GetDerivedPosX();

  00011	89 bd d4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ
  0001d	8b cf		 mov	 ecx, edi
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ
  00025	8b d8		 mov	 ebx, eax

; 160  : 	int iYPos = GetDerivedPosY();

  00027	8b cf		 mov	 ecx, edi
  00029	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _iXPos$[ebp], ebx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 161  : 
; 162  : 	if( m_pGradeIcon[m_iGradeType] || m_pGradeText[m_iGradeType] && m_pIconBack )

  00035	8b 8f 9c 01 00
	00		 mov	 ecx, DWORD PTR [edi+412]
  0003b	33 f6		 xor	 esi, esi
  0003d	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _iYPos$[ebp], eax
  00043	39 b4 8f 80 01
	00 00		 cmp	 DWORD PTR [edi+ecx*4+384], esi
  0004a	75 19		 jne	 SHORT $LN4@OnRender
  0004c	39 b4 8f 6c 01
	00 00		 cmp	 DWORD PTR [edi+ecx*4+364], esi
  00053	0f 84 bd 00 00
	00		 je	 $LN5@OnRender
  00059	39 b7 60 01 00
	00		 cmp	 DWORD PTR [edi+352], esi
  0005f	0f 84 b1 00 00
	00		 je	 $LN5@OnRender
$LN4@OnRender:

; 163  : 	{
; 164  : 		m_pGradeText[m_iGradeType]->Render( iXPos + 173, iYPos + 53 );

  00065	8b 8c 8f 6c 01
	00 00		 mov	 ecx, DWORD PTR [edi+ecx*4+364]
  0006c	56		 push	 esi
  0006d	56		 push	 esi
  0006e	56		 push	 esi
  0006f	56		 push	 esi
  00070	51		 push	 ecx
  00071	8d 93 ad 00 00
	00		 lea	 edx, DWORD PTR [ebx+173]
  00077	83 c0 35	 add	 eax, 53			; 00000035H
  0007a	51		 push	 ecx
  0007b	0f 57 c0	 xorps	 xmm0, xmm0
  0007e	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	0f 57 c9	 xorps	 xmm1, xmm1
  00087	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0008b	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00091	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR tv671[ebp], xmm0
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	ff 12		 call	 DWORD PTR [edx]

; 165  : 		m_pIconBack->Render( iXPos + 173, iYPos + 135, UI_RENDER_MULTIPLY );

  000a0	8b 8f 60 01 00
	00		 mov	 ecx, DWORD PTR [edi+352]
  000a6	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  000ac	56		 push	 esi
  000ad	56		 push	 esi
  000ae	56		 push	 esi
  000af	6a 08		 push	 8
  000b1	05 87 00 00 00	 add	 eax, 135		; 00000087H
  000b6	51		 push	 ecx
  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000be	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c0	51		 push	 ecx
  000c1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c7	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR tv679[ebp], xmm0
  000cf	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv671[ebp]
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	ff 10		 call	 DWORD PTR [eax]

; 166  : 		m_pGradeIcon[m_iGradeType]->Render( iXPos + 173, iYPos + 135 );

  000de	8b 87 9c 01 00
	00		 mov	 eax, DWORD PTR [edi+412]
  000e4	8b 8c 87 80 01
	00 00		 mov	 ecx, DWORD PTR [edi+eax*4+384]
  000eb	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR tv679[ebp]
  000f3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f5	56		 push	 esi
  000f6	56		 push	 esi
  000f7	56		 push	 esi
  000f8	56		 push	 esi
  000f9	51		 push	 ecx
  000fa	51		 push	 ecx
  000fb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00101	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv671[ebp]
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	ff 10		 call	 DWORD PTR [eax]
  00110	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
$LN5@OnRender:

; 167  : 	}
; 168  : 
; 169  : 	if( m_pInfoBack && m_pRewardIcon && m_pRewardIcon[0] && m_pRewardIcon[1] )

  00116	39 b7 64 01 00
	00		 cmp	 DWORD PTR [edi+356], esi
  0011c	0f 84 57 01 00
	00		 je	 $LN3@OnRender
  00122	8d 8f 94 01 00
	00		 lea	 ecx, DWORD PTR [edi+404]
  00128	3b ce		 cmp	 ecx, esi
  0012a	0f 84 49 01 00
	00		 je	 $LN3@OnRender
  00130	39 31		 cmp	 DWORD PTR [ecx], esi
  00132	0f 84 41 01 00
	00		 je	 $LN3@OnRender
  00138	39 b7 98 01 00
	00		 cmp	 DWORD PTR [edi+408], esi
  0013e	0f 84 35 01 00
	00		 je	 $LN3@OnRender

; 170  : 	{
; 171  : 		m_pInfoBack->Render( iXPos + 69, iYPos + 277, UI_RENDER_MULTIPLY );

  00144	8b 8f 64 01 00
	00		 mov	 ecx, DWORD PTR [edi+356]
  0014a	56		 push	 esi
  0014b	56		 push	 esi
  0014c	56		 push	 esi
  0014d	05 15 01 00 00	 add	 eax, 277		; 00000115H
  00152	6a 08		 push	 8
  00154	0f 57 c0	 xorps	 xmm0, xmm0
  00157	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0015b	51		 push	 ecx
  0015c	8d 43 45	 lea	 eax, DWORD PTR [ebx+69]
  0015f	51		 push	 ecx
  00160	0f 57 c9	 xorps	 xmm1, xmm1
  00163	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00167	8b 01		 mov	 eax, DWORD PTR [ecx]
  00169	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0016f	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR tv711[ebp], xmm0
  00177	f3 0f 11 8d d0
	fe ff ff	 movss	 DWORD PTR tv713[ebp], xmm1
  0017f	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00184	ff 10		 call	 DWORD PTR [eax]

; 172  : 		m_pInfoBack->Render( iXPos + 173, iYPos + 277, UI_RENDER_MULTIPLY );

  00186	8b 8f 64 01 00
	00		 mov	 ecx, DWORD PTR [edi+356]
  0018c	f3 0f 10 8d e8
	fe ff ff	 movss	 xmm1, DWORD PTR tv711[ebp]
  00194	56		 push	 esi
  00195	56		 push	 esi
  00196	56		 push	 esi
  00197	6a 08		 push	 8
  00199	51		 push	 ecx
  0019a	8d 83 ad 00 00
	00		 lea	 eax, DWORD PTR [ebx+173]
  001a0	51		 push	 ecx
  001a1	0f 57 c0	 xorps	 xmm0, xmm0
  001a4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001a8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001aa	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  001b0	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR tv671[ebp], xmm0
  001b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bd	ff 10		 call	 DWORD PTR [eax]

; 173  : 		m_pInfoBack->Render( iXPos + 277, iYPos + 277, UI_RENDER_MULTIPLY );

  001bf	8b 8f 64 01 00
	00		 mov	 ecx, DWORD PTR [edi+356]
  001c5	f3 0f 10 8d e8
	fe ff ff	 movss	 xmm1, DWORD PTR tv711[ebp]
  001cd	8b 01		 mov	 eax, DWORD PTR [ecx]
  001cf	56		 push	 esi
  001d0	56		 push	 esi
  001d1	56		 push	 esi
  001d2	6a 08		 push	 8
  001d4	51		 push	 ecx
  001d5	51		 push	 ecx
  001d6	81 c3 15 01 00
	00		 add	 ebx, 277		; 00000115H
  001dc	0f 57 c0	 xorps	 xmm0, xmm0
  001df	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  001e3	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  001e9	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR tv727[ebp], xmm0
  001f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f6	ff 10		 call	 DWORD PTR [eax]

; 174  : 
; 175  : 		m_pRankingIcon->Render( iXPos + 69, iYPos + 277 );

  001f8	8b 8f 68 01 00
	00		 mov	 ecx, DWORD PTR [edi+360]
  001fe	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv711[ebp]
  00206	8b 01		 mov	 eax, DWORD PTR [ecx]
  00208	56		 push	 esi
  00209	56		 push	 esi
  0020a	56		 push	 esi
  0020b	56		 push	 esi
  0020c	51		 push	 ecx
  0020d	51		 push	 ecx
  0020e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00214	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR tv713[ebp]
  0021c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00221	ff 10		 call	 DWORD PTR [eax]

; 176  : 		m_pRewardIcon[0]->Render( iXPos + 173, iYPos + 277 );

  00223	8b 8f 94 01 00
	00		 mov	 ecx, DWORD PTR [edi+404]
  00229	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv711[ebp]
  00231	8b 01		 mov	 eax, DWORD PTR [ecx]
  00233	56		 push	 esi
  00234	56		 push	 esi
  00235	56		 push	 esi
  00236	56		 push	 esi
  00237	51		 push	 ecx
  00238	51		 push	 ecx
  00239	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0023f	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv671[ebp]
  00247	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024c	ff 10		 call	 DWORD PTR [eax]

; 177  : 		m_pRewardIcon[1]->Render( iXPos + 277, iYPos + 277 );

  0024e	8b 8f 98 01 00
	00		 mov	 ecx, DWORD PTR [edi+408]
  00254	8b 01		 mov	 eax, DWORD PTR [ecx]
  00256	56		 push	 esi
  00257	56		 push	 esi
  00258	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv711[ebp]
  00260	56		 push	 esi
  00261	56		 push	 esi
  00262	51		 push	 ecx
  00263	51		 push	 ecx
  00264	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0026a	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR tv727[ebp]
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	ff 10		 call	 DWORD PTR [eax]
$LN3@OnRender:

; 178  : 	}
; 179  : 
; 180  : 	ioComplexStringPrinter kPrinter;

  00279	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0027f	e8 00 00 00 00	 call	 ??0ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::ioComplexStringPrinter

; 181  : 	kPrinter.SetTextStyle( TS_NORMAL );

  00284	56		 push	 esi
  00285	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0028b	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0028e	e8 00 00 00 00	 call	 ?SetTextStyle@ioComplexStringPrinter@@QAEXW4TextStyle@@@Z ; ioComplexStringPrinter::SetTextStyle

; 182  : 	kPrinter.SetBkColor( 0, 0, 0 );

  00293	56		 push	 esi
  00294	56		 push	 esi
  00295	56		 push	 esi
  00296	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0029c	e8 00 00 00 00	 call	 ?SetBkColor@ioComplexStringPrinter@@QAEXHHH@Z ; ioComplexStringPrinter::SetBkColor

; 183  : 
; 184  : 	kPrinter.SetTextColor( TCT_DEFAULT_GREEN );

  002a1	68 22 72 11 ff	 push	 -15633886		; ff117222H
  002a6	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  002ac	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 185  : 	kPrinter.AddTextPiece( FONT_SIZE_13, STR(1), m_szLastExp.c_str() );

  002b1	8d 8f c0 01 00
	00		 lea	 ecx, DWORD PTR [edi+448]
  002b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  002bd	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  002c3	50		 push	 eax
  002c4	56		 push	 esi
  002c5	6a 01		 push	 1
  002c7	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  002d1	ff d7		 call	 edi
  002d3	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  002d9	8b c8		 mov	 ecx, eax
  002db	ff d3		 call	 ebx
  002dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  002e5	50		 push	 eax
  002e6	51		 push	 ecx
  002e7	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  002ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f2	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 186  : 
; 187  : 	kPrinter.SetTextColor( TCT_DEFAULT_GRAY );

  002f7	68 6e 6e 6e ff	 push	 -9539986		; ff6e6e6eH
  002fc	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00302	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 188  : 	kPrinter.AddTextPiece( FONT_SIZE_13, STR(2) );

  00307	56		 push	 esi
  00308	6a 02		 push	 2
  0030a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  00314	ff d7		 call	 edi
  00316	8b c8		 mov	 ecx, eax
  00318	ff d3		 call	 ebx
  0031a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00322	50		 push	 eax
  00323	51		 push	 ecx
  00324	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp]
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	50		 push	 eax
  00330	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 189  : 
; 190  : 	char szGradeName[MAX_PATH] = "";

  00335	68 03 01 00 00	 push	 259			; 00000103H
  0033a	8d 85 ed fe ff
	ff		 lea	 eax, DWORD PTR _szGradeName$[ebp+1]
  00340	56		 push	 esi
  00341	50		 push	 eax
  00342	c6 85 ec fe ff
	ff 00		 mov	 BYTE PTR _szGradeName$[ebp], 0
  00349	e8 00 00 00 00	 call	 _memset
  0034e	83 c4 18	 add	 esp, 24			; 00000018H

; 191  : 	g_LevelMgr.GetGradeName( g_MyInfo.GetGradeLevel(), szGradeName, sizeof( szGradeName ), false, true );

  00351	6a 01		 push	 1
  00353	56		 push	 esi
  00354	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szGradeName$[ebp]
  0035a	68 04 01 00 00	 push	 260			; 00000104H
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00365	8b c8		 mov	 ecx, eax
  00367	e8 00 00 00 00	 call	 ?GetGradeLevel@ioMyInfo@@QAEHXZ ; ioMyInfo::GetGradeLevel
  0036c	50		 push	 eax
  0036d	e8 00 00 00 00	 call	 ?GetSingleton@ioMyLevelMgr@@SAAAV1@XZ ; ioMyLevelMgr::GetSingleton
  00372	8b c8		 mov	 ecx, eax
  00374	e8 00 00 00 00	 call	 ?GetGradeName@ioMyLevelMgr@@QBEXHPADH_N1@Z ; ioMyLevelMgr::GetGradeName

; 192  : 	kPrinter.SetTextColor( TCT_DEFAULT_GREEN );

  00379	68 22 72 11 ff	 push	 -15633886		; ff117222H
  0037e	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00384	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 193  : 	kPrinter.AddTextPiece( FONT_SIZE_13, STR(3), szGradeName );

  00389	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szGradeName$[ebp]
  0038f	50		 push	 eax
  00390	56		 push	 esi
  00391	6a 03		 push	 3
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  0039d	ff d7		 call	 edi
  0039f	8b c8		 mov	 ecx, eax
  003a1	ff d3		 call	 ebx
  003a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  003ab	50		 push	 eax
  003ac	51		 push	 ecx
  003ad	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  003b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b8	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAEXMPBD0@Z ; ioComplexStringPrinter::AddTextPiece

; 194  : 
; 195  : 	kPrinter.PrintFullText( iXPos + 173, iYPos + 181, TAT_CENTER );

  003bd	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _iXPos$[ebp]
  003c3	05 ad 00 00 00	 add	 eax, 173		; 000000adH
  003c8	68 ff 00 00 00	 push	 255			; 000000ffH
  003cd	0f 57 c0	 xorps	 xmm0, xmm0
  003d0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003d4	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  003da	6a 01		 push	 1
  003dc	51		 push	 ecx
  003dd	51		 push	 ecx
  003de	05 b5 00 00 00	 add	 eax, 181		; 000000b5H
  003e3	0f 57 c9	 xorps	 xmm1, xmm1
  003e6	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  003ea	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  003f0	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  003f6	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR tv671[ebp], xmm0
  003fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00403	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 196  : 	kPrinter.ClearList();

  00408	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0040e	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 197  : 
; 198  : 	kPrinter.SetTextColor( TCT_DEFAULT_GRAY );

  00413	68 6e 6e 6e ff	 push	 -9539986		; ff6e6e6eH
  00418	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  0041e	e8 00 00 00 00	 call	 ?SetTextColor@ioComplexStringPrinter@@QAEXK@Z ; ioComplexStringPrinter::SetTextColor

; 199  : 	kPrinter.AddTextPiece( FONT_SIZE_13, STR(4) );

  00423	56		 push	 esi
  00424	6a 04		 push	 4
  00426	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0042b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  00430	ff d7		 call	 edi
  00432	8b c8		 mov	 ecx, eax
  00434	ff d3		 call	 ebx
  00436	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0043e	50		 push	 eax
  0043f	51		 push	 ecx
  00440	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _kPrinter$[ebp]
  00446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044b	50		 push	 eax
  0044c	e8 00 00 00 00	 call	 ?AddTextPiece@ioComplexStringPrinter@@QAAXMPBDZZ ; ioComplexStringPrinter::AddTextPiece

; 200  : 	kPrinter.PrintFullText( iXPos + 173, iYPos + 199, TAT_CENTER );

  00451	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  00457	83 c4 0c	 add	 esp, 12			; 0000000cH
  0045a	68 ff 00 00 00	 push	 255			; 000000ffH
  0045f	6a 01		 push	 1
  00461	51		 push	 ecx
  00462	51		 push	 ecx
  00463	05 c7 00 00 00	 add	 eax, 199		; 000000c7H
  00468	0f 57 c0	 xorps	 xmm0, xmm0
  0046b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0046f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00475	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv671[ebp]
  0047d	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00488	e8 00 00 00 00	 call	 ?PrintFullText@ioComplexStringPrinter@@QAEXMMW4TextAlignType@@E@Z ; ioComplexStringPrinter::PrintFullText

; 201  : 	kPrinter.ClearList();

  0048d	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00493	e8 00 00 00 00	 call	 ?ClearList@ioComplexStringPrinter@@QAEXXZ ; ioComplexStringPrinter::ClearList

; 202  : 
; 203  : 	g_FontMgr.SetTextStyle( TS_NORMAL );

  00498	56		 push	 esi
  00499	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  0049f	ff d6		 call	 esi
  004a1	8b c8		 mov	 ecx, eax
  004a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 204  : 	g_FontMgr.SetAlignType( TAT_CENTER );

  004a9	6a 01		 push	 1
  004ab	ff d6		 call	 esi
  004ad	8b c8		 mov	 ecx, eax
  004af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 205  : 	g_FontMgr.SetBkColor( TCT_DEFAULT_DARKGRAY );

  004b5	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  004ba	ff d6		 call	 esi
  004bc	8b c8		 mov	 ecx, eax
  004be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXK@Z

; 206  : 	g_FontMgr.SetTextColor( TCT_DEFAULT_DARKGRAY );

  004c4	68 3a 3a 3a ff	 push	 -12961222		; ff3a3a3aH
  004c9	ff d6		 call	 esi
  004cb	8b c8		 mov	 ecx, eax
  004cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 207  : 	g_FontMgr.PrintText( iXPos + 69, iYPos + 323, FONT_SIZE_13, STR(5) );

  004d3	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iYPos$[ebp]
  004d9	05 43 01 00 00	 add	 eax, 323		; 00000143H
  004de	0f 57 c0	 xorps	 xmm0, xmm0
  004e1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004e5	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _iXPos$[ebp]
  004eb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR tv755[ebp], xmm0
  004f3	6a 00		 push	 0
  004f5	6a 05		 push	 5
  004f7	83 c0 45	 add	 eax, 69			; 00000045H
  004fa	0f 57 c0	 xorps	 xmm0, xmm0
  004fd	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00502	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00506	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  0050b	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR tv713[ebp], xmm0
  00513	ff d7		 call	 edi
  00515	8b c8		 mov	 ecx, eax
  00517	ff d3		 call	 ebx
  00519	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00521	50		 push	 eax
  00522	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00525	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0052b	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv755[ebp]
  00533	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00539	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR tv713[ebp]
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	ff d6		 call	 esi
  00548	50		 push	 eax
  00549	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  0054f	83 c4 14	 add	 esp, 20			; 00000014H

; 208  : 	g_FontMgr.PrintText( iXPos + 173, iYPos + 323, FONT_SIZE_13, STR(6) );

  00552	6a 00		 push	 0
  00554	6a 06		 push	 6
  00556	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0055b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  00560	ff d7		 call	 edi
  00562	8b c8		 mov	 ecx, eax
  00564	ff d3		 call	 ebx
  00566	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0056e	50		 push	 eax
  0056f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00572	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00578	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv755[ebp]
  00580	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00586	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv671[ebp]
  0058e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00593	ff d6		 call	 esi
  00595	50		 push	 eax
  00596	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ

; 209  : 	g_FontMgr.PrintText( iXPos + 277, iYPos + 323, FONT_SIZE_13, STR(7) );

  0059c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _iXPos$[ebp]
  005a2	83 c4 14	 add	 esp, 20			; 00000014H
  005a5	6a 00		 push	 0
  005a7	6a 07		 push	 7
  005a9	05 15 01 00 00	 add	 eax, 277		; 00000115H
  005ae	0f 57 c0	 xorps	 xmm0, xmm0
  005b1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  005b6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005ba	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  005bf	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR tv727[ebp], xmm0
  005c7	ff d7		 call	 edi
  005c9	8b c8		 mov	 ecx, eax
  005cb	ff d3		 call	 ebx
  005cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  005d5	50		 push	 eax
  005d6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  005d9	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  005df	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv755[ebp]
  005e7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  005ed	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR tv727[ebp]
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	ff d6		 call	 esi
  005fc	50		 push	 eax
  005fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  00603	83 c4 14	 add	 esp, 20			; 00000014H

; 210  : 
; 211  : 	g_FontMgr.SetTextColor( TCT_DEFAULT_GREEN );

  00606	68 22 72 11 ff	 push	 -15633886		; ff117222H
  0060b	ff d6		 call	 esi
  0060d	8b c8		 mov	 ecx, eax
  0060f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 212  : 	g_FontMgr.PrintText( iXPos + 69, iYPos + 341, FONT_SIZE_13, STR(8), g_MyInfo.GetUserRanking() );

  00615	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0061a	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  0061d	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _iYPos$[ebp]
  00623	50		 push	 eax
  00624	6a 00		 push	 0
  00626	81 c1 55 01 00
	00		 add	 ecx, 341		; 00000155H
  0062c	0f 57 c0	 xorps	 xmm0, xmm0
  0062f	6a 08		 push	 8
  00631	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00635	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR tv760[ebp], xmm0
  0063d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00642	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  00647	ff d7		 call	 edi
  00649	8b c8		 mov	 ecx, eax
  0064b	ff d3		 call	 ebx
  0064d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00655	50		 push	 eax
  00656	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00659	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0065f	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR tv760[ebp]
  00667	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0066d	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR tv713[ebp]
  00675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067a	ff d6		 call	 esi
  0067c	8b c8		 mov	 ecx, eax
  0067e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBDH@Z

; 213  : 	if( !m_szReward[0].IsEmpty() )

  00684	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0068a	81 c1 a0 01 00
	00		 add	 ecx, 416		; 000001a0H
  00690	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00696	84 c0		 test	 al, al
  00698	75 5e		 jne	 SHORT $LN2@OnRender

; 214  : 		g_FontMgr.PrintText( iXPos + 173, iYPos + 341, FONT_SIZE_13, STR(9), m_szReward[0].c_str() );

  0069a	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  006a0	81 c1 a0 01 00
	00		 add	 ecx, 416		; 000001a0H
  006a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  006ac	50		 push	 eax
  006ad	6a 00		 push	 0
  006af	6a 09		 push	 9
  006b1	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  006b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  006bb	ff d7		 call	 edi
  006bd	8b c8		 mov	 ecx, eax
  006bf	ff d3		 call	 ebx
  006c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  006c9	50		 push	 eax
  006ca	83 ec 0c	 sub	 esp, 12			; 0000000cH
  006cd	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  006d3	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR tv760[ebp]
  006db	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  006e1	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv671[ebp]
  006e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ee	ff d6		 call	 esi
  006f0	8b c8		 mov	 ecx, eax
  006f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z
$LN2@OnRender:

; 215  : 	if( !m_szReward[1].IsEmpty() )

  006f8	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  006fe	81 c1 b0 01 00
	00		 add	 ecx, 432		; 000001b0H
  00704	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv763[ebp], ecx
  0070a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00710	84 c0		 test	 al, al
  00712	75 58		 jne	 SHORT $LN1@OnRender

; 216  : 		g_FontMgr.PrintText( iXPos + 277, iYPos + 341, FONT_SIZE_13, STR(10), m_szReward[1].c_str() );

  00714	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv763[ebp]
  0071a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  00720	50		 push	 eax
  00721	6a 00		 push	 0
  00723	6a 0a		 push	 10			; 0000000aH
  00725	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0072a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LCGGPECJ@RelativeGradeBonusWnd?3?3OnRender?$AA@
  0072f	ff d7		 call	 edi
  00731	8b c8		 mov	 ecx, eax
  00733	ff d3		 call	 ebx
  00735	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  0073d	50		 push	 eax
  0073e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00741	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00747	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR tv760[ebp]
  0074f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00755	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR tv727[ebp]
  0075d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00762	ff d6		 call	 esi
  00764	8b c8		 mov	 ecx, eax
  00766	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBD0@Z
$LN1@OnRender:

; 217  : }

  0076c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00770	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00776	e8 00 00 00 00	 call	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
  0077b	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00780	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRender@RelativeGradeBonusWnd@@MAEXXZ$0:
  00000	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _kPrinter$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ioComplexStringPrinter@@QAE@XZ ; ioComplexStringPrinter::~ioComplexStringPrinter
__ehhandler$?OnRender@RelativeGradeBonusWnd@@MAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a ac fe ff
	ff		 mov	 ecx, DWORD PTR [edx-340]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRender@RelativeGradeBonusWnd@@MAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRender@RelativeGradeBonusWnd@@MAEXXZ ENDP		; RelativeGradeBonusWnd::OnRender
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z	; operator==<8>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z PROC	; operator==<8>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 d7 00 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 c0 00 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 a9 00 00
	00		 je	 $LN94@operator@2
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 92 00 00
	00		 je	 $LN93@operator@2
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	74 7f		 je	 SHORT $LN92@operator@2
  00062	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00065	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00068	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006b	84 d2		 test	 dl, dl
  0006d	74 6c		 je	 SHORT $LN91@operator@2
  0006f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00078	84 d2		 test	 dl, dl
  0007a	74 59		 je	 SHORT $LN90@operator@2
  0007c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007f	80 78 07 00	 cmp	 BYTE PTR [eax+7], 0
  00083	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  00086	74 75		 je	 SHORT $LN1@operator@2
  00088	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0008b	84 d2		 test	 dl, dl
  0008d	74 40		 je	 SHORT $LN88@operator@2
  0008f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00092	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00095	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00098	84 d2		 test	 dl, dl
  0009a	74 2d		 je	 SHORT $LN87@operator@2
  0009c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009f	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a2	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a5	84 d2		 test	 dl, dl
  000a7	74 1a		 je	 SHORT $LN86@operator@2
  000a9	8a 40 0b	 mov	 al, BYTE PTR [eax+11]
  000ac	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000af	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b2	84 c0		 test	 al, al
  000b4	74 07		 je	 SHORT $LN85@operator@2
  000b6	34 ea		 xor	 al, -22			; ffffffeaH
  000b8	88 45 fb	 mov	 BYTE PTR __t$[ebp+11], al
  000bb	eb 40		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  000bd	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000c1	eb 3a		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  000c3	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000c7	eb 34		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  000c9	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000cd	eb 2e		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  000cf	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000d3	eb 28		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000d9	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000df	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  000e1	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000e5	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  000e7	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000eb	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  000ed	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000f1	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  000f3	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000f7	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  000f9	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  000fd	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  00104	6a 04		 push	 4
  00106	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+7], 0
  0010a	58		 pop	 eax
$LL101@operator@2:
  0010b	8b c8		 mov	 ecx, eax
  0010d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00113	79 05		 jns	 SHORT $LN115@operator@2
  00115	49		 dec	 ecx
  00116	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00119	41		 inc	 ecx
$LN115@operator@2:
  0011a	b2 ed		 mov	 dl, -19			; ffffffedH
  0011c	2a d1		 sub	 dl, cl
  0011e	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00122	40		 inc	 eax
  00123	83 f8 07	 cmp	 eax, 7
  00126	7c e3		 jl	 SHORT $LL101@operator@2
  00128	8b cf		 mov	 ecx, edi
  0012a	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00137	75 1a		 jne	 SHORT $LN112@operator@2
  00139	84 c9		 test	 cl, cl
  0013b	74 12		 je	 SHORT $LN113@operator@2
  0013d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00140	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00143	75 0e		 jne	 SHORT $LN112@operator@2
  00145	83 c0 02	 add	 eax, 2
  00148	83 c6 02	 add	 esi, 2
  0014b	84 c9		 test	 cl, cl
  0014d	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  0014f	33 c0		 xor	 eax, eax
  00151	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  00153	1b c0		 sbb	 eax, eax
  00155	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  00158	33 c9		 xor	 ecx, ecx
  0015a	85 c0		 test	 eax, eax
  0015c	0f 94 c0	 sete	 al

; 148  : }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c3		 ret	 0
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z ENDP	; operator==<8>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z	; operator==<11>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z PROC	; operator==<11>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 24 01 00
	00		 je	 $LN96@operator@3
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 0d 01 00
	00		 je	 $LN95@operator@3
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 f6 00 00
	00		 je	 $LN94@operator@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 df 00 00
	00		 je	 $LN93@operator@3
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	0f 84 c8 00 00
	00		 je	 $LN92@operator@3
  00066	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00069	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006c	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006f	84 d2		 test	 dl, dl
  00071	0f 84 b1 00 00
	00		 je	 $LN91@operator@3
  00077	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007a	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 9a 00 00
	00		 je	 $LN90@operator@3
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 83 00 00
	00		 je	 $LN89@operator@3
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 70		 je	 SHORT $LN88@operator@3
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5d		 je	 SHORT $LN87@operator@3
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000ba	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000bd	0f 84 87 00 00
	00		 je	 $LN1@operator@3
  000c3	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c6	84 d2		 test	 dl, dl
  000c8	74 40		 je	 SHORT $LN85@operator@3
  000ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cd	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000d0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d3	84 d2		 test	 dl, dl
  000d5	74 2d		 je	 SHORT $LN84@operator@3
  000d7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000da	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dd	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e0	84 d2		 test	 dl, dl
  000e2	74 1a		 je	 SHORT $LN83@operator@3
  000e4	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ea	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000ed	84 c0		 test	 al, al
  000ef	74 07		 je	 SHORT $LN82@operator@3
  000f1	34 eb		 xor	 al, -21			; ffffffebH
  000f3	88 45 fa	 mov	 BYTE PTR __t$[ebp+14], al
  000f6	eb 52		 jmp	 SHORT $LN1@operator@3
$LN82@operator@3:
  000f8	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  000fc	eb 4c		 jmp	 SHORT $LN1@operator@3
$LN83@operator@3:
  000fe	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00102	eb 46		 jmp	 SHORT $LN1@operator@3
$LN84@operator@3:
  00104	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00108	eb 40		 jmp	 SHORT $LN1@operator@3
$LN85@operator@3:
  0010a	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0010e	eb 3a		 jmp	 SHORT $LN1@operator@3
$LN87@operator@3:
  00110	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00114	eb 34		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  00116	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0011a	eb 2e		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  0011c	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00120	eb 28		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  00122	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00126	eb 22		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  00128	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0012c	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  0012e	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00132	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  00134	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00138	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  0013a	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0013e	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  00140	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00144	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  00146	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  0014a	6a 02		 push	 2
  0014c	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0014f	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+10], 0
  00153	5a		 pop	 edx
$LL104@operator@3:
  00154	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0015a	83 c0 04	 add	 eax, 4
  0015d	4a		 dec	 edx
  0015e	75 f4		 jne	 SHORT $LL104@operator@3
  00160	6a 08		 push	 8
  00162	58		 pop	 eax
$LL101@operator@3:
  00163	8b c8		 mov	 ecx, eax
  00165	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0016b	79 05		 jns	 SHORT $LN115@operator@3
  0016d	49		 dec	 ecx
  0016e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00171	41		 inc	 ecx
$LN115@operator@3:
  00172	b2 ed		 mov	 dl, -19			; ffffffedH
  00174	2a d1		 sub	 dl, cl
  00176	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  0017a	40		 inc	 eax
  0017b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017e	7c e3		 jl	 SHORT $LL101@operator@3
  00180	8b cf		 mov	 ecx, edi
  00182	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  0018b	8a 08		 mov	 cl, BYTE PTR [eax]
  0018d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0018f	75 1a		 jne	 SHORT $LN112@operator@3
  00191	84 c9		 test	 cl, cl
  00193	74 12		 je	 SHORT $LN113@operator@3
  00195	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00198	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0019b	75 0e		 jne	 SHORT $LN112@operator@3
  0019d	83 c0 02	 add	 eax, 2
  001a0	83 c6 02	 add	 esi, 2
  001a3	84 c9		 test	 cl, cl
  001a5	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  001a7	33 c0		 xor	 eax, eax
  001a9	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  001ab	1b c0		 sbb	 eax, eax
  001ad	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  001b0	33 c9		 xor	 ecx, ecx
  001b2	85 c0		 test	 eax, eax
  001b4	0f 94 c0	 sete	 al

; 148  : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	5f		 pop	 edi
  001bb	33 cd		 xor	 ecx, ebp
  001bd	5e		 pop	 esi
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	c9		 leave
  001c4	c3		 ret	 0
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z ENDP	; operator==<11>
_TEXT	ENDS
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_szType$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\relativegradebonuswnd.cpp
;	COMDAT ?AddRenderImage@RelativeGradeBonusWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_pImage$GSCopy$ = -32					; size = 4
_this$GSCopy$ = -28					; size = 4
_szType$GSCopy$ = -24					; size = 4
__t$514513 = -20					; size = 11
__t$514401 = -20					; size = 11
__t$514276 = -20					; size = 11
__t$514151 = -20					; size = 11
__t$514013 = -20					; size = 11
__t$513888 = -20					; size = 11
__t$513763 = -20					; size = 11
__t$513638 = -20					; size = 11
__t$513513 = -20					; size = 11
__t$513401 = -20					; size = 11
__t$513276 = -20					; size = 8
__t$513138 = -20					; size = 9
__t$513013 = -20					; size = 9
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@RelativeGradeBonusWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; RelativeGradeBonusWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szType$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 123  : 	}
; 124  : 	else if( szType == "GradeIcon4" )

  00016	89 45 e8	 mov	 DWORD PTR _szType$GSCopy$[ebp], eax
  00019	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  0001c	6a 02		 push	 2
  0001e	33 db		 xor	 ebx, ebx
  00020	5f		 pop	 edi
  00021	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00024	89 45 e0	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00027	c7 45 ec a4 8f
	84 84		 mov	 DWORD PTR __t$513013[ebp], -2071687260 ; 84848fa4H
  0002e	c7 45 f0 af 8d
	88 81		 mov	 DWORD PTR __t$513013[ebp+4], -2121757265 ; 81888dafH
  00035	8d 45 ec	 lea	 eax, DWORD PTR __t$513013[ebp]
  00038	88 5d f4	 mov	 BYTE PTR __t$513013[ebp+8], bl
  0003b	8b cf		 mov	 ecx, edi
$LL171@AddRenderI:

; 64   : 	if( szType == "IconBack" )

  0003d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00043	83 c0 04	 add	 eax, 4
  00046	49		 dec	 ecx
  00047	75 f4		 jne	 SHORT $LL171@AddRenderI
  00049	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0004c	8d 75 ec	 lea	 esi, DWORD PTR __t$513013[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1510@AddRenderI:
  00055	8a 08		 mov	 cl, BYTE PTR [eax]
  00057	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00059	75 18		 jne	 SHORT $LN1511@AddRenderI
  0005b	3a cb		 cmp	 cl, bl
  0005d	74 10		 je	 SHORT $LN1512@AddRenderI
  0005f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00062	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00065	75 0c		 jne	 SHORT $LN1511@AddRenderI
  00067	03 c7		 add	 eax, edi
  00069	03 f7		 add	 esi, edi
  0006b	3a cb		 cmp	 cl, bl
  0006d	75 e6		 jne	 SHORT $LL1510@AddRenderI
$LN1512@AddRenderI:
  0006f	33 c0		 xor	 eax, eax
  00071	eb 05		 jmp	 SHORT $LN1513@AddRenderI
$LN1511@AddRenderI:
  00073	1b c0		 sbb	 eax, eax
  00075	83 d8 ff	 sbb	 eax, -1
$LN1513@AddRenderI:
  00078	3b c3		 cmp	 eax, ebx
  0007a	75 28		 jne	 SHORT $LN1498@AddRenderI

; 65   : 	{
; 66   : 		SAFEDELETE( m_pIconBack );

  0007c	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0007f	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00085	3b cb		 cmp	 ecx, ebx
  00087	74 0d		 je	 SHORT $LN38@AddRenderI
  00089	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008b	6a 01		 push	 1
  0008d	ff 50 40	 call	 DWORD PTR [eax+64]
  00090	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
$LN38@AddRenderI:

; 67   : 		m_pIconBack = pImage;

  00096	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00099	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax
  0009f	e9 77 07 00 00	 jmp	 $LN1@AddRenderI
$LN1498@AddRenderI:

; 68   : 	}
; 69   : 	else if( szType == "InfoBack" )

  000a4	c7 45 ec a4 82
	8d 85		 mov	 DWORD PTR __t$513138[ebp], -2054323548 ; 858d82a4H
  000ab	c7 45 f0 af 8d
	88 81		 mov	 DWORD PTR __t$513138[ebp+4], -2121757265 ; 81888dafH
  000b2	8d 45 ec	 lea	 eax, DWORD PTR __t$513138[ebp]
  000b5	88 5d f4	 mov	 BYTE PTR __t$513138[ebp+8], bl
  000b8	8b cf		 mov	 ecx, edi
$LL277@AddRenderI:
  000ba	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000c0	83 c0 04	 add	 eax, 4
  000c3	49		 dec	 ecx
  000c4	75 f4		 jne	 SHORT $LL277@AddRenderI
  000c6	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000c9	8d 75 ec	 lea	 esi, DWORD PTR __t$513138[ebp]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1514@AddRenderI:
  000d2	8a 08		 mov	 cl, BYTE PTR [eax]
  000d4	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000d6	75 18		 jne	 SHORT $LN1515@AddRenderI
  000d8	3a cb		 cmp	 cl, bl
  000da	74 10		 je	 SHORT $LN1516@AddRenderI
  000dc	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000df	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000e2	75 0c		 jne	 SHORT $LN1515@AddRenderI
  000e4	03 c7		 add	 eax, edi
  000e6	03 f7		 add	 esi, edi
  000e8	3a cb		 cmp	 cl, bl
  000ea	75 e6		 jne	 SHORT $LL1514@AddRenderI
$LN1516@AddRenderI:
  000ec	33 c0		 xor	 eax, eax
  000ee	eb 05		 jmp	 SHORT $LN1517@AddRenderI
$LN1515@AddRenderI:
  000f0	1b c0		 sbb	 eax, eax
  000f2	83 d8 ff	 sbb	 eax, -1
$LN1517@AddRenderI:
  000f5	3b c3		 cmp	 eax, ebx
  000f7	75 28		 jne	 SHORT $LN1499@AddRenderI

; 70   : 	{
; 71   : 		SAFEDELETE( m_pInfoBack );

  000f9	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000fc	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00102	3b cb		 cmp	 ecx, ebx
  00104	74 0d		 je	 SHORT $LN35@AddRenderI
  00106	8b 01		 mov	 eax, DWORD PTR [ecx]
  00108	6a 01		 push	 1
  0010a	ff 50 40	 call	 DWORD PTR [eax+64]
  0010d	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
$LN35@AddRenderI:

; 72   : 		m_pInfoBack = pImage;

  00113	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00116	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax
  0011c	e9 fa 06 00 00	 jmp	 $LN1@AddRenderI
$LN1499@AddRenderI:

; 73   : 	}
; 74   : 	else if( szType == "ranking" )

  00121	6a 04		 push	 4
  00123	c7 45 ec 9f 8d
	85 81		 mov	 DWORD PTR __t$513276[ebp], -2121953889 ; 81858d9fH
  0012a	81 75 ec ed ec
	eb ea		 xor	 DWORD PTR __t$513276[ebp], -353637139 ; eaebecedH
  00131	c7 45 f0 84 82
	8c 00		 mov	 DWORD PTR __t$513276[ebp+4], 9208452 ; 008c8284H
  00138	58		 pop	 eax
$LL380@AddRenderI:
  00139	8b c8		 mov	 ecx, eax
  0013b	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00141	79 05		 jns	 SHORT $LN1562@AddRenderI
  00143	49		 dec	 ecx
  00144	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00147	41		 inc	 ecx
$LN1562@AddRenderI:
  00148	b2 ed		 mov	 dl, -19			; ffffffedH
  0014a	2a d1		 sub	 dl, cl
  0014c	30 54 05 ec	 xor	 BYTE PTR __t$513276[ebp+eax], dl
  00150	40		 inc	 eax
  00151	83 f8 07	 cmp	 eax, 7
  00154	7c e3		 jl	 SHORT $LL380@AddRenderI
  00156	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00159	8d 75 ec	 lea	 esi, DWORD PTR __t$513276[ebp]
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1518@AddRenderI:
  00162	8a 08		 mov	 cl, BYTE PTR [eax]
  00164	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00166	75 18		 jne	 SHORT $LN1519@AddRenderI
  00168	3a cb		 cmp	 cl, bl
  0016a	74 10		 je	 SHORT $LN1520@AddRenderI
  0016c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0016f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00172	75 0c		 jne	 SHORT $LN1519@AddRenderI
  00174	03 c7		 add	 eax, edi
  00176	03 f7		 add	 esi, edi
  00178	3a cb		 cmp	 cl, bl
  0017a	75 e6		 jne	 SHORT $LL1518@AddRenderI
$LN1520@AddRenderI:
  0017c	33 c0		 xor	 eax, eax
  0017e	eb 05		 jmp	 SHORT $LN1521@AddRenderI
$LN1519@AddRenderI:
  00180	1b c0		 sbb	 eax, eax
  00182	83 d8 ff	 sbb	 eax, -1
$LN1521@AddRenderI:
  00185	3b c3		 cmp	 eax, ebx
  00187	75 28		 jne	 SHORT $LN1500@AddRenderI

; 75   : 	{
; 76   : 		SAFEDELETE( m_pRankingIcon );

  00189	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0018c	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  00192	3b cb		 cmp	 ecx, ebx
  00194	74 0d		 je	 SHORT $LN32@AddRenderI
  00196	8b 01		 mov	 eax, DWORD PTR [ecx]
  00198	6a 01		 push	 1
  0019a	ff 50 40	 call	 DWORD PTR [eax+64]
  0019d	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
$LN32@AddRenderI:

; 77   : 		m_pRankingIcon = pImage;

  001a3	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  001a6	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  001ac	e9 6a 06 00 00	 jmp	 $LN1@AddRenderI
$LN1500@AddRenderI:

; 78   : 	}
; 79   : 	else if( szType == "GradeText0" )

  001b1	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$513401[ebp], -1903518038 ; 8e8a9eaaH
  001b8	c7 45 f0 88 b8
	8e 92		 mov	 DWORD PTR __t$513401[ebp+4], -1836140408 ; 928eb888H
  001bf	66 c7 45 f4 99
	dc		 mov	 WORD PTR __t$513401[ebp+8], 56473 ; 0000dc99H
  001c5	8d 45 ec	 lea	 eax, DWORD PTR __t$513401[ebp]
  001c8	88 5d f6	 mov	 BYTE PTR __t$513401[ebp+10], bl
  001cb	8b cf		 mov	 ecx, edi
$LL489@AddRenderI:
  001cd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001d3	83 c0 04	 add	 eax, 4
  001d6	49		 dec	 ecx
  001d7	75 f4		 jne	 SHORT $LL489@AddRenderI
  001d9	6a 08		 push	 8
  001db	58		 pop	 eax
$LL486@AddRenderI:
  001dc	8b c8		 mov	 ecx, eax
  001de	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001e4	79 05		 jns	 SHORT $LN1563@AddRenderI
  001e6	49		 dec	 ecx
  001e7	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001ea	41		 inc	 ecx
$LN1563@AddRenderI:
  001eb	b2 ed		 mov	 dl, -19			; ffffffedH
  001ed	2a d1		 sub	 dl, cl
  001ef	30 54 05 ec	 xor	 BYTE PTR __t$513401[ebp+eax], dl
  001f3	40		 inc	 eax
  001f4	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  001f7	7c e3		 jl	 SHORT $LL486@AddRenderI
  001f9	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  001fc	8d 75 ec	 lea	 esi, DWORD PTR __t$513401[ebp]
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1522@AddRenderI:
  00205	8a 08		 mov	 cl, BYTE PTR [eax]
  00207	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00209	75 18		 jne	 SHORT $LN1523@AddRenderI
  0020b	3a cb		 cmp	 cl, bl
  0020d	74 10		 je	 SHORT $LN1524@AddRenderI
  0020f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00212	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00215	75 0c		 jne	 SHORT $LN1523@AddRenderI
  00217	03 c7		 add	 eax, edi
  00219	03 f7		 add	 esi, edi
  0021b	3a cb		 cmp	 cl, bl
  0021d	75 e6		 jne	 SHORT $LL1522@AddRenderI
$LN1524@AddRenderI:
  0021f	33 c0		 xor	 eax, eax
  00221	eb 05		 jmp	 SHORT $LN1525@AddRenderI
$LN1523@AddRenderI:
  00223	1b c0		 sbb	 eax, eax
  00225	83 d8 ff	 sbb	 eax, -1
$LN1525@AddRenderI:
  00228	3b c3		 cmp	 eax, ebx
  0022a	75 28		 jne	 SHORT $LN1501@AddRenderI

; 80   : 	{
; 81   : 		SAFEDELETE( m_pGradeText[GRADE_LEVEL_0] );

  0022c	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0022f	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00235	3b cb		 cmp	 ecx, ebx
  00237	74 0d		 je	 SHORT $LN29@AddRenderI
  00239	8b 01		 mov	 eax, DWORD PTR [ecx]
  0023b	6a 01		 push	 1
  0023d	ff 50 40	 call	 DWORD PTR [eax+64]
  00240	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
$LN29@AddRenderI:

; 82   : 		m_pGradeText[GRADE_LEVEL_0] = pImage;

  00246	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00249	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax
  0024f	e9 c7 05 00 00	 jmp	 $LN1@AddRenderI
$LN1501@AddRenderI:

; 83   : 	}
; 84   : 	else if( szType == "GradeText1" )

  00254	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$513513[ebp], -1903518038 ; 8e8a9eaaH
  0025b	c7 45 f0 88 b8
	8e 92		 mov	 DWORD PTR __t$513513[ebp+4], -1836140408 ; 928eb888H
  00262	66 c7 45 f4 99
	dd		 mov	 WORD PTR __t$513513[ebp+8], 56729 ; 0000dd99H
  00268	8d 45 ec	 lea	 eax, DWORD PTR __t$513513[ebp]
  0026b	88 5d f6	 mov	 BYTE PTR __t$513513[ebp+10], bl
  0026e	8b cf		 mov	 ecx, edi
$LL595@AddRenderI:
  00270	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00276	83 c0 04	 add	 eax, 4
  00279	49		 dec	 ecx
  0027a	75 f4		 jne	 SHORT $LL595@AddRenderI
  0027c	6a 08		 push	 8
  0027e	58		 pop	 eax
$LL592@AddRenderI:
  0027f	8b c8		 mov	 ecx, eax
  00281	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00287	79 05		 jns	 SHORT $LN1564@AddRenderI
  00289	49		 dec	 ecx
  0028a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0028d	41		 inc	 ecx
$LN1564@AddRenderI:
  0028e	b2 ed		 mov	 dl, -19			; ffffffedH
  00290	2a d1		 sub	 dl, cl
  00292	30 54 05 ec	 xor	 BYTE PTR __t$513513[ebp+eax], dl
  00296	40		 inc	 eax
  00297	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0029a	7c e3		 jl	 SHORT $LL592@AddRenderI
  0029c	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0029f	8d 75 ec	 lea	 esi, DWORD PTR __t$513513[ebp]
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1526@AddRenderI:
  002a8	8a 08		 mov	 cl, BYTE PTR [eax]
  002aa	3a 0e		 cmp	 cl, BYTE PTR [esi]
  002ac	75 18		 jne	 SHORT $LN1527@AddRenderI
  002ae	3a cb		 cmp	 cl, bl
  002b0	74 10		 je	 SHORT $LN1528@AddRenderI
  002b2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  002b5	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  002b8	75 0c		 jne	 SHORT $LN1527@AddRenderI
  002ba	03 c7		 add	 eax, edi
  002bc	03 f7		 add	 esi, edi
  002be	3a cb		 cmp	 cl, bl
  002c0	75 e6		 jne	 SHORT $LL1526@AddRenderI
$LN1528@AddRenderI:
  002c2	33 c0		 xor	 eax, eax
  002c4	eb 05		 jmp	 SHORT $LN1529@AddRenderI
$LN1527@AddRenderI:
  002c6	1b c0		 sbb	 eax, eax
  002c8	83 d8 ff	 sbb	 eax, -1
$LN1529@AddRenderI:
  002cb	3b c3		 cmp	 eax, ebx
  002cd	75 28		 jne	 SHORT $LN1502@AddRenderI

; 85   : 	{
; 86   : 		SAFEDELETE( m_pGradeText[GRADE_LEVEL_1] );

  002cf	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  002d2	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  002d8	3b cb		 cmp	 ecx, ebx
  002da	74 0d		 je	 SHORT $LN26@AddRenderI
  002dc	8b 01		 mov	 eax, DWORD PTR [ecx]
  002de	6a 01		 push	 1
  002e0	ff 50 40	 call	 DWORD PTR [eax+64]
  002e3	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
$LN26@AddRenderI:

; 87   : 		m_pGradeText[GRADE_LEVEL_1] = pImage;

  002e9	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  002ec	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax
  002f2	e9 24 05 00 00	 jmp	 $LN1@AddRenderI
$LN1502@AddRenderI:

; 88   : 	}
; 89   : 	else if( szType == "GradeText2" )

  002f7	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$513638[ebp], -1903518038 ; 8e8a9eaaH
  002fe	c7 45 f0 88 b8
	8e 92		 mov	 DWORD PTR __t$513638[ebp+4], -1836140408 ; 928eb888H
  00305	66 c7 45 f4 99
	de		 mov	 WORD PTR __t$513638[ebp+8], 56985 ; 0000de99H
  0030b	8d 45 ec	 lea	 eax, DWORD PTR __t$513638[ebp]
  0030e	88 5d f6	 mov	 BYTE PTR __t$513638[ebp+10], bl
  00311	8b cf		 mov	 ecx, edi
$LL701@AddRenderI:
  00313	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00319	83 c0 04	 add	 eax, 4
  0031c	49		 dec	 ecx
  0031d	75 f4		 jne	 SHORT $LL701@AddRenderI
  0031f	6a 08		 push	 8
  00321	58		 pop	 eax
$LL698@AddRenderI:
  00322	8b c8		 mov	 ecx, eax
  00324	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0032a	79 05		 jns	 SHORT $LN1565@AddRenderI
  0032c	49		 dec	 ecx
  0032d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00330	41		 inc	 ecx
$LN1565@AddRenderI:
  00331	b2 ed		 mov	 dl, -19			; ffffffedH
  00333	2a d1		 sub	 dl, cl
  00335	30 54 05 ec	 xor	 BYTE PTR __t$513638[ebp+eax], dl
  00339	40		 inc	 eax
  0033a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0033d	7c e3		 jl	 SHORT $LL698@AddRenderI
  0033f	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00342	8d 75 ec	 lea	 esi, DWORD PTR __t$513638[ebp]
  00345	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1530@AddRenderI:
  0034b	8a 08		 mov	 cl, BYTE PTR [eax]
  0034d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0034f	75 18		 jne	 SHORT $LN1531@AddRenderI
  00351	3a cb		 cmp	 cl, bl
  00353	74 10		 je	 SHORT $LN1532@AddRenderI
  00355	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00358	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0035b	75 0c		 jne	 SHORT $LN1531@AddRenderI
  0035d	03 c7		 add	 eax, edi
  0035f	03 f7		 add	 esi, edi
  00361	3a cb		 cmp	 cl, bl
  00363	75 e6		 jne	 SHORT $LL1530@AddRenderI
$LN1532@AddRenderI:
  00365	33 c0		 xor	 eax, eax
  00367	eb 05		 jmp	 SHORT $LN1533@AddRenderI
$LN1531@AddRenderI:
  00369	1b c0		 sbb	 eax, eax
  0036b	83 d8 ff	 sbb	 eax, -1
$LN1533@AddRenderI:
  0036e	3b c3		 cmp	 eax, ebx
  00370	75 28		 jne	 SHORT $LN1503@AddRenderI

; 90   : 	{
; 91   : 		SAFEDELETE( m_pGradeText[GRADE_LEVEL_2] );

  00372	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00375	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  0037b	3b cb		 cmp	 ecx, ebx
  0037d	74 0d		 je	 SHORT $LN23@AddRenderI
  0037f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00381	6a 01		 push	 1
  00383	ff 50 40	 call	 DWORD PTR [eax+64]
  00386	89 9e 74 01 00
	00		 mov	 DWORD PTR [esi+372], ebx
$LN23@AddRenderI:

; 92   : 		m_pGradeText[GRADE_LEVEL_2] = pImage;

  0038c	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0038f	89 86 74 01 00
	00		 mov	 DWORD PTR [esi+372], eax
  00395	e9 81 04 00 00	 jmp	 $LN1@AddRenderI
$LN1503@AddRenderI:

; 93   : 	}
; 94   : 	else if( szType == "GradeText3" )

  0039a	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$513763[ebp], -1903518038 ; 8e8a9eaaH
  003a1	c7 45 f0 88 b8
	8e 92		 mov	 DWORD PTR __t$513763[ebp+4], -1836140408 ; 928eb888H
  003a8	66 c7 45 f4 99
	df		 mov	 WORD PTR __t$513763[ebp+8], 57241 ; 0000df99H
  003ae	8d 45 ec	 lea	 eax, DWORD PTR __t$513763[ebp]
  003b1	88 5d f6	 mov	 BYTE PTR __t$513763[ebp+10], bl
  003b4	8b cf		 mov	 ecx, edi
$LL807@AddRenderI:
  003b6	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003bc	83 c0 04	 add	 eax, 4
  003bf	49		 dec	 ecx
  003c0	75 f4		 jne	 SHORT $LL807@AddRenderI
  003c2	6a 08		 push	 8
  003c4	58		 pop	 eax
$LL804@AddRenderI:
  003c5	8b c8		 mov	 ecx, eax
  003c7	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  003cd	79 05		 jns	 SHORT $LN1566@AddRenderI
  003cf	49		 dec	 ecx
  003d0	83 c9 fc	 or	 ecx, -4			; fffffffcH
  003d3	41		 inc	 ecx
$LN1566@AddRenderI:
  003d4	b2 ed		 mov	 dl, -19			; ffffffedH
  003d6	2a d1		 sub	 dl, cl
  003d8	30 54 05 ec	 xor	 BYTE PTR __t$513763[ebp+eax], dl
  003dc	40		 inc	 eax
  003dd	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  003e0	7c e3		 jl	 SHORT $LL804@AddRenderI
  003e2	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  003e5	8d 75 ec	 lea	 esi, DWORD PTR __t$513763[ebp]
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1534@AddRenderI:
  003ee	8a 08		 mov	 cl, BYTE PTR [eax]
  003f0	3a 0e		 cmp	 cl, BYTE PTR [esi]
  003f2	75 18		 jne	 SHORT $LN1535@AddRenderI
  003f4	3a cb		 cmp	 cl, bl
  003f6	74 10		 je	 SHORT $LN1536@AddRenderI
  003f8	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  003fb	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  003fe	75 0c		 jne	 SHORT $LN1535@AddRenderI
  00400	03 c7		 add	 eax, edi
  00402	03 f7		 add	 esi, edi
  00404	3a cb		 cmp	 cl, bl
  00406	75 e6		 jne	 SHORT $LL1534@AddRenderI
$LN1536@AddRenderI:
  00408	33 c0		 xor	 eax, eax
  0040a	eb 05		 jmp	 SHORT $LN1537@AddRenderI
$LN1535@AddRenderI:
  0040c	1b c0		 sbb	 eax, eax
  0040e	83 d8 ff	 sbb	 eax, -1
$LN1537@AddRenderI:
  00411	3b c3		 cmp	 eax, ebx
  00413	75 28		 jne	 SHORT $LN1504@AddRenderI

; 95   : 	{
; 96   : 		SAFEDELETE( m_pGradeText[GRADE_LEVEL_3] );

  00415	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00418	8b 8e 78 01 00
	00		 mov	 ecx, DWORD PTR [esi+376]
  0041e	3b cb		 cmp	 ecx, ebx
  00420	74 0d		 je	 SHORT $LN20@AddRenderI
  00422	8b 01		 mov	 eax, DWORD PTR [ecx]
  00424	6a 01		 push	 1
  00426	ff 50 40	 call	 DWORD PTR [eax+64]
  00429	89 9e 78 01 00
	00		 mov	 DWORD PTR [esi+376], ebx
$LN20@AddRenderI:

; 97   : 		m_pGradeText[GRADE_LEVEL_3] = pImage;

  0042f	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00432	89 86 78 01 00
	00		 mov	 DWORD PTR [esi+376], eax
  00438	e9 de 03 00 00	 jmp	 $LN1@AddRenderI
$LN1504@AddRenderI:

; 98   : 	}
; 99   : 	else if( szType == "GradeText4" )

  0043d	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$513888[ebp], -1903518038 ; 8e8a9eaaH
  00444	c7 45 f0 88 b8
	8e 92		 mov	 DWORD PTR __t$513888[ebp+4], -1836140408 ; 928eb888H
  0044b	66 c7 45 f4 99
	d8		 mov	 WORD PTR __t$513888[ebp+8], 55449 ; 0000d899H
  00451	8d 45 ec	 lea	 eax, DWORD PTR __t$513888[ebp]
  00454	88 5d f6	 mov	 BYTE PTR __t$513888[ebp+10], bl
  00457	8b cf		 mov	 ecx, edi
$LL913@AddRenderI:
  00459	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0045f	83 c0 04	 add	 eax, 4
  00462	49		 dec	 ecx
  00463	75 f4		 jne	 SHORT $LL913@AddRenderI
  00465	6a 08		 push	 8
  00467	58		 pop	 eax
$LL910@AddRenderI:
  00468	8b c8		 mov	 ecx, eax
  0046a	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00470	79 05		 jns	 SHORT $LN1567@AddRenderI
  00472	49		 dec	 ecx
  00473	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00476	41		 inc	 ecx
$LN1567@AddRenderI:
  00477	b2 ed		 mov	 dl, -19			; ffffffedH
  00479	2a d1		 sub	 dl, cl
  0047b	30 54 05 ec	 xor	 BYTE PTR __t$513888[ebp+eax], dl
  0047f	40		 inc	 eax
  00480	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00483	7c e3		 jl	 SHORT $LL910@AddRenderI
  00485	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00488	8d 75 ec	 lea	 esi, DWORD PTR __t$513888[ebp]
  0048b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1538@AddRenderI:
  00491	8a 08		 mov	 cl, BYTE PTR [eax]
  00493	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00495	75 18		 jne	 SHORT $LN1539@AddRenderI
  00497	3a cb		 cmp	 cl, bl
  00499	74 10		 je	 SHORT $LN1540@AddRenderI
  0049b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0049e	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  004a1	75 0c		 jne	 SHORT $LN1539@AddRenderI
  004a3	03 c7		 add	 eax, edi
  004a5	03 f7		 add	 esi, edi
  004a7	3a cb		 cmp	 cl, bl
  004a9	75 e6		 jne	 SHORT $LL1538@AddRenderI
$LN1540@AddRenderI:
  004ab	33 c0		 xor	 eax, eax
  004ad	eb 05		 jmp	 SHORT $LN1541@AddRenderI
$LN1539@AddRenderI:
  004af	1b c0		 sbb	 eax, eax
  004b1	83 d8 ff	 sbb	 eax, -1
$LN1541@AddRenderI:
  004b4	3b c3		 cmp	 eax, ebx
  004b6	75 28		 jne	 SHORT $LN1505@AddRenderI

; 100  : 	{
; 101  : 		SAFEDELETE( m_pGradeText[GRADE_LEVEL_4] );

  004b8	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  004bb	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  004c1	3b cb		 cmp	 ecx, ebx
  004c3	74 0d		 je	 SHORT $LN17@AddRenderI
  004c5	8b 01		 mov	 eax, DWORD PTR [ecx]
  004c7	6a 01		 push	 1
  004c9	ff 50 40	 call	 DWORD PTR [eax+64]
  004cc	89 9e 7c 01 00
	00		 mov	 DWORD PTR [esi+380], ebx
$LN17@AddRenderI:

; 102  : 		m_pGradeText[GRADE_LEVEL_4] = pImage;

  004d2	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  004d5	89 86 7c 01 00
	00		 mov	 DWORD PTR [esi+380], eax
  004db	e9 3b 03 00 00	 jmp	 $LN1@AddRenderI
$LN1505@AddRenderI:

; 103  : 	}
; 104  : 	else if( szType == "GradeIcon0" )

  004e0	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$514013[ebp], -1903518038 ; 8e8a9eaaH
  004e7	c7 45 f0 88 a5
	88 85		 mov	 DWORD PTR __t$514013[ebp+4], -2054642296 ; 8588a588H
  004ee	66 c7 45 f4 83
	dc		 mov	 WORD PTR __t$514013[ebp+8], 56451 ; 0000dc83H
  004f4	8d 45 ec	 lea	 eax, DWORD PTR __t$514013[ebp]
  004f7	88 5d f6	 mov	 BYTE PTR __t$514013[ebp+10], bl
  004fa	8b cf		 mov	 ecx, edi
$LL1019@AddRenderI:
  004fc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00502	83 c0 04	 add	 eax, 4
  00505	49		 dec	 ecx
  00506	75 f4		 jne	 SHORT $LL1019@AddRenderI
  00508	6a 08		 push	 8
  0050a	58		 pop	 eax
$LL1016@AddRenderI:
  0050b	8b c8		 mov	 ecx, eax
  0050d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00513	79 05		 jns	 SHORT $LN1568@AddRenderI
  00515	49		 dec	 ecx
  00516	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00519	41		 inc	 ecx
$LN1568@AddRenderI:
  0051a	b2 ed		 mov	 dl, -19			; ffffffedH
  0051c	2a d1		 sub	 dl, cl
  0051e	30 54 05 ec	 xor	 BYTE PTR __t$514013[ebp+eax], dl
  00522	40		 inc	 eax
  00523	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00526	7c e3		 jl	 SHORT $LL1016@AddRenderI
  00528	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0052b	8d 75 ec	 lea	 esi, DWORD PTR __t$514013[ebp]
  0052e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1542@AddRenderI:
  00534	8a 08		 mov	 cl, BYTE PTR [eax]
  00536	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00538	75 18		 jne	 SHORT $LN1543@AddRenderI
  0053a	3a cb		 cmp	 cl, bl
  0053c	74 10		 je	 SHORT $LN1544@AddRenderI
  0053e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00541	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00544	75 0c		 jne	 SHORT $LN1543@AddRenderI
  00546	03 c7		 add	 eax, edi
  00548	03 f7		 add	 esi, edi
  0054a	3a cb		 cmp	 cl, bl
  0054c	75 e6		 jne	 SHORT $LL1542@AddRenderI
$LN1544@AddRenderI:
  0054e	33 c0		 xor	 eax, eax
  00550	eb 05		 jmp	 SHORT $LN1545@AddRenderI
$LN1543@AddRenderI:
  00552	1b c0		 sbb	 eax, eax
  00554	83 d8 ff	 sbb	 eax, -1
$LN1545@AddRenderI:
  00557	3b c3		 cmp	 eax, ebx
  00559	75 28		 jne	 SHORT $LN1506@AddRenderI

; 105  : 	{
; 106  : 		SAFEDELETE( m_pGradeIcon[GRADE_LEVEL_0] );

  0055b	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0055e	8b 8e 80 01 00
	00		 mov	 ecx, DWORD PTR [esi+384]
  00564	3b cb		 cmp	 ecx, ebx
  00566	74 0d		 je	 SHORT $LN14@AddRenderI
  00568	8b 01		 mov	 eax, DWORD PTR [ecx]
  0056a	6a 01		 push	 1
  0056c	ff 50 40	 call	 DWORD PTR [eax+64]
  0056f	89 9e 80 01 00
	00		 mov	 DWORD PTR [esi+384], ebx
$LN14@AddRenderI:

; 107  : 		m_pGradeIcon[GRADE_LEVEL_0] = pImage;

  00575	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00578	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax
  0057e	e9 98 02 00 00	 jmp	 $LN1@AddRenderI
$LN1506@AddRenderI:

; 108  : 	}
; 109  : 	else if( szType == "GradeIcon1" )

  00583	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$514151[ebp], -1903518038 ; 8e8a9eaaH
  0058a	c7 45 f0 88 a5
	88 85		 mov	 DWORD PTR __t$514151[ebp+4], -2054642296 ; 8588a588H
  00591	66 c7 45 f4 83
	dd		 mov	 WORD PTR __t$514151[ebp+8], 56707 ; 0000dd83H
  00597	8d 45 ec	 lea	 eax, DWORD PTR __t$514151[ebp]
  0059a	88 5d f6	 mov	 BYTE PTR __t$514151[ebp+10], bl
  0059d	8b cf		 mov	 ecx, edi
$LL1125@AddRenderI:
  0059f	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  005a5	83 c0 04	 add	 eax, 4
  005a8	49		 dec	 ecx
  005a9	75 f4		 jne	 SHORT $LL1125@AddRenderI
  005ab	6a 08		 push	 8
  005ad	58		 pop	 eax
$LL1122@AddRenderI:
  005ae	8b c8		 mov	 ecx, eax
  005b0	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  005b6	79 05		 jns	 SHORT $LN1569@AddRenderI
  005b8	49		 dec	 ecx
  005b9	83 c9 fc	 or	 ecx, -4			; fffffffcH
  005bc	41		 inc	 ecx
$LN1569@AddRenderI:
  005bd	b2 ed		 mov	 dl, -19			; ffffffedH
  005bf	2a d1		 sub	 dl, cl
  005c1	30 54 05 ec	 xor	 BYTE PTR __t$514151[ebp+eax], dl
  005c5	40		 inc	 eax
  005c6	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  005c9	7c e3		 jl	 SHORT $LL1122@AddRenderI
  005cb	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  005ce	8d 75 ec	 lea	 esi, DWORD PTR __t$514151[ebp]
  005d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1546@AddRenderI:
  005d7	8a 08		 mov	 cl, BYTE PTR [eax]
  005d9	3a 0e		 cmp	 cl, BYTE PTR [esi]
  005db	75 18		 jne	 SHORT $LN1547@AddRenderI
  005dd	3a cb		 cmp	 cl, bl
  005df	74 10		 je	 SHORT $LN1548@AddRenderI
  005e1	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  005e4	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  005e7	75 0c		 jne	 SHORT $LN1547@AddRenderI
  005e9	03 c7		 add	 eax, edi
  005eb	03 f7		 add	 esi, edi
  005ed	3a cb		 cmp	 cl, bl
  005ef	75 e6		 jne	 SHORT $LL1546@AddRenderI
$LN1548@AddRenderI:
  005f1	33 c0		 xor	 eax, eax
  005f3	eb 05		 jmp	 SHORT $LN1549@AddRenderI
$LN1547@AddRenderI:
  005f5	1b c0		 sbb	 eax, eax
  005f7	83 d8 ff	 sbb	 eax, -1
$LN1549@AddRenderI:
  005fa	3b c3		 cmp	 eax, ebx
  005fc	75 28		 jne	 SHORT $LN1507@AddRenderI

; 110  : 	{
; 111  : 		SAFEDELETE( m_pGradeIcon[GRADE_LEVEL_1] );

  005fe	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00601	8b 8e 84 01 00
	00		 mov	 ecx, DWORD PTR [esi+388]
  00607	3b cb		 cmp	 ecx, ebx
  00609	74 0d		 je	 SHORT $LN11@AddRenderI
  0060b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0060d	6a 01		 push	 1
  0060f	ff 50 40	 call	 DWORD PTR [eax+64]
  00612	89 9e 84 01 00
	00		 mov	 DWORD PTR [esi+388], ebx
$LN11@AddRenderI:

; 112  : 		m_pGradeIcon[GRADE_LEVEL_1] = pImage;

  00618	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0061b	89 86 84 01 00
	00		 mov	 DWORD PTR [esi+388], eax
  00621	e9 f5 01 00 00	 jmp	 $LN1@AddRenderI
$LN1507@AddRenderI:

; 113  : 	}
; 114  : 	else if( szType == "GradeIcon2" )

  00626	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$514276[ebp], -1903518038 ; 8e8a9eaaH
  0062d	c7 45 f0 88 a5
	88 85		 mov	 DWORD PTR __t$514276[ebp+4], -2054642296 ; 8588a588H
  00634	66 c7 45 f4 83
	de		 mov	 WORD PTR __t$514276[ebp+8], 56963 ; 0000de83H
  0063a	8d 45 ec	 lea	 eax, DWORD PTR __t$514276[ebp]
  0063d	88 5d f6	 mov	 BYTE PTR __t$514276[ebp+10], bl
  00640	8b cf		 mov	 ecx, edi
$LL1231@AddRenderI:
  00642	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00648	83 c0 04	 add	 eax, 4
  0064b	49		 dec	 ecx
  0064c	75 f4		 jne	 SHORT $LL1231@AddRenderI
  0064e	6a 08		 push	 8
  00650	58		 pop	 eax
$LL1228@AddRenderI:
  00651	8b c8		 mov	 ecx, eax
  00653	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00659	79 05		 jns	 SHORT $LN1570@AddRenderI
  0065b	49		 dec	 ecx
  0065c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0065f	41		 inc	 ecx
$LN1570@AddRenderI:
  00660	b2 ed		 mov	 dl, -19			; ffffffedH
  00662	2a d1		 sub	 dl, cl
  00664	30 54 05 ec	 xor	 BYTE PTR __t$514276[ebp+eax], dl
  00668	40		 inc	 eax
  00669	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0066c	7c e3		 jl	 SHORT $LL1228@AddRenderI
  0066e	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00671	8d 75 ec	 lea	 esi, DWORD PTR __t$514276[ebp]
  00674	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1550@AddRenderI:
  0067a	8a 08		 mov	 cl, BYTE PTR [eax]
  0067c	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0067e	75 18		 jne	 SHORT $LN1551@AddRenderI
  00680	3a cb		 cmp	 cl, bl
  00682	74 10		 je	 SHORT $LN1552@AddRenderI
  00684	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00687	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0068a	75 0c		 jne	 SHORT $LN1551@AddRenderI
  0068c	03 c7		 add	 eax, edi
  0068e	03 f7		 add	 esi, edi
  00690	3a cb		 cmp	 cl, bl
  00692	75 e6		 jne	 SHORT $LL1550@AddRenderI
$LN1552@AddRenderI:
  00694	33 c0		 xor	 eax, eax
  00696	eb 05		 jmp	 SHORT $LN1553@AddRenderI
$LN1551@AddRenderI:
  00698	1b c0		 sbb	 eax, eax
  0069a	83 d8 ff	 sbb	 eax, -1
$LN1553@AddRenderI:
  0069d	3b c3		 cmp	 eax, ebx
  0069f	75 28		 jne	 SHORT $LN1508@AddRenderI

; 115  : 	{
; 116  : 		SAFEDELETE( m_pGradeIcon[GRADE_LEVEL_2] );

  006a1	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  006a4	8b 8e 88 01 00
	00		 mov	 ecx, DWORD PTR [esi+392]
  006aa	3b cb		 cmp	 ecx, ebx
  006ac	74 0d		 je	 SHORT $LN8@AddRenderI
  006ae	8b 01		 mov	 eax, DWORD PTR [ecx]
  006b0	6a 01		 push	 1
  006b2	ff 50 40	 call	 DWORD PTR [eax+64]
  006b5	89 9e 88 01 00
	00		 mov	 DWORD PTR [esi+392], ebx
$LN8@AddRenderI:

; 117  : 		m_pGradeIcon[GRADE_LEVEL_2] = pImage;

  006bb	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  006be	89 86 88 01 00
	00		 mov	 DWORD PTR [esi+392], eax
  006c4	e9 52 01 00 00	 jmp	 $LN1@AddRenderI
$LN1508@AddRenderI:

; 118  : 	}
; 119  : 	else if( szType == "GradeIcon3" )

  006c9	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$514401[ebp], -1903518038 ; 8e8a9eaaH
  006d0	c7 45 f0 88 a5
	88 85		 mov	 DWORD PTR __t$514401[ebp+4], -2054642296 ; 8588a588H
  006d7	66 c7 45 f4 83
	df		 mov	 WORD PTR __t$514401[ebp+8], 57219 ; 0000df83H
  006dd	8d 45 ec	 lea	 eax, DWORD PTR __t$514401[ebp]
  006e0	88 5d f6	 mov	 BYTE PTR __t$514401[ebp+10], bl
  006e3	8b cf		 mov	 ecx, edi
$LL1337@AddRenderI:
  006e5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  006eb	83 c0 04	 add	 eax, 4
  006ee	49		 dec	 ecx
  006ef	75 f4		 jne	 SHORT $LL1337@AddRenderI
  006f1	6a 08		 push	 8
  006f3	58		 pop	 eax
$LL1334@AddRenderI:
  006f4	8b c8		 mov	 ecx, eax
  006f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  006fc	79 05		 jns	 SHORT $LN1571@AddRenderI
  006fe	49		 dec	 ecx
  006ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00702	41		 inc	 ecx
$LN1571@AddRenderI:
  00703	b2 ed		 mov	 dl, -19			; ffffffedH
  00705	2a d1		 sub	 dl, cl
  00707	30 54 05 ec	 xor	 BYTE PTR __t$514401[ebp+eax], dl
  0070b	40		 inc	 eax
  0070c	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0070f	7c e3		 jl	 SHORT $LL1334@AddRenderI
  00711	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00714	8d 75 ec	 lea	 esi, DWORD PTR __t$514401[ebp]
  00717	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1554@AddRenderI:
  0071d	8a 08		 mov	 cl, BYTE PTR [eax]
  0071f	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00721	75 18		 jne	 SHORT $LN1555@AddRenderI
  00723	3a cb		 cmp	 cl, bl
  00725	74 10		 je	 SHORT $LN1556@AddRenderI
  00727	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0072a	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0072d	75 0c		 jne	 SHORT $LN1555@AddRenderI
  0072f	03 c7		 add	 eax, edi
  00731	03 f7		 add	 esi, edi
  00733	3a cb		 cmp	 cl, bl
  00735	75 e6		 jne	 SHORT $LL1554@AddRenderI
$LN1556@AddRenderI:
  00737	33 c0		 xor	 eax, eax
  00739	eb 05		 jmp	 SHORT $LN1557@AddRenderI
$LN1555@AddRenderI:
  0073b	1b c0		 sbb	 eax, eax
  0073d	83 d8 ff	 sbb	 eax, -1
$LN1557@AddRenderI:
  00740	3b c3		 cmp	 eax, ebx
  00742	75 28		 jne	 SHORT $LN1509@AddRenderI

; 120  : 	{
; 121  : 		SAFEDELETE( m_pGradeIcon[GRADE_LEVEL_3] );

  00744	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00747	8b 8e 8c 01 00
	00		 mov	 ecx, DWORD PTR [esi+396]
  0074d	3b cb		 cmp	 ecx, ebx
  0074f	74 0d		 je	 SHORT $LN5@AddRenderI
  00751	8b 01		 mov	 eax, DWORD PTR [ecx]
  00753	6a 01		 push	 1
  00755	ff 50 40	 call	 DWORD PTR [eax+64]
  00758	89 9e 8c 01 00
	00		 mov	 DWORD PTR [esi+396], ebx
$LN5@AddRenderI:

; 122  : 		m_pGradeIcon[GRADE_LEVEL_3] = pImage;

  0075e	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00761	89 86 8c 01 00
	00		 mov	 DWORD PTR [esi+396], eax
  00767	e9 af 00 00 00	 jmp	 $LN1@AddRenderI
$LN1509@AddRenderI:

; 123  : 	}
; 124  : 	else if( szType == "GradeIcon4" )

  0076c	c7 45 ec aa 9e
	8a 8e		 mov	 DWORD PTR __t$514513[ebp], -1903518038 ; 8e8a9eaaH
  00773	c7 45 f0 88 a5
	88 85		 mov	 DWORD PTR __t$514513[ebp+4], -2054642296 ; 8588a588H
  0077a	66 c7 45 f4 83
	d8		 mov	 WORD PTR __t$514513[ebp+8], 55427 ; 0000d883H
  00780	8d 45 ec	 lea	 eax, DWORD PTR __t$514513[ebp]
  00783	88 5d f6	 mov	 BYTE PTR __t$514513[ebp+10], bl
  00786	8b cf		 mov	 ecx, edi
$LL1443@AddRenderI:
  00788	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0078e	83 c0 04	 add	 eax, 4
  00791	49		 dec	 ecx
  00792	75 f4		 jne	 SHORT $LL1443@AddRenderI
  00794	6a 08		 push	 8
  00796	58		 pop	 eax
$LL1440@AddRenderI:
  00797	8b c8		 mov	 ecx, eax
  00799	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0079f	79 05		 jns	 SHORT $LN1572@AddRenderI
  007a1	49		 dec	 ecx
  007a2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  007a5	41		 inc	 ecx
$LN1572@AddRenderI:
  007a6	b2 ed		 mov	 dl, -19			; ffffffedH
  007a8	2a d1		 sub	 dl, cl
  007aa	30 54 05 ec	 xor	 BYTE PTR __t$514513[ebp+eax], dl
  007ae	40		 inc	 eax
  007af	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  007b2	7c e3		 jl	 SHORT $LL1440@AddRenderI
  007b4	8b 4d e8	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  007b7	8d 75 ec	 lea	 esi, DWORD PTR __t$514513[ebp]
  007ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1558@AddRenderI:
  007c0	8a 08		 mov	 cl, BYTE PTR [eax]
  007c2	3a 0e		 cmp	 cl, BYTE PTR [esi]
  007c4	75 18		 jne	 SHORT $LN1559@AddRenderI
  007c6	3a cb		 cmp	 cl, bl
  007c8	74 10		 je	 SHORT $LN1560@AddRenderI
  007ca	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  007cd	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  007d0	75 0c		 jne	 SHORT $LN1559@AddRenderI
  007d2	03 c7		 add	 eax, edi
  007d4	03 f7		 add	 esi, edi
  007d6	3a cb		 cmp	 cl, bl
  007d8	75 e6		 jne	 SHORT $LL1558@AddRenderI
$LN1560@AddRenderI:
  007da	33 c0		 xor	 eax, eax
  007dc	eb 05		 jmp	 SHORT $LN1561@AddRenderI
$LN1559@AddRenderI:
  007de	1b c0		 sbb	 eax, eax
  007e0	83 d8 ff	 sbb	 eax, -1
$LN1561@AddRenderI:
  007e3	3b c3		 cmp	 eax, ebx
  007e5	75 25		 jne	 SHORT $LN3@AddRenderI

; 125  : 	{
; 126  : 		SAFEDELETE( m_pGradeIcon[GRADE_LEVEL_4] );

  007e7	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  007ea	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  007f0	3b cb		 cmp	 ecx, ebx
  007f2	74 0d		 je	 SHORT $LN2@AddRenderI
  007f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  007f6	6a 01		 push	 1
  007f8	ff 50 40	 call	 DWORD PTR [eax+64]
  007fb	89 9e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ebx
$LN2@AddRenderI:

; 127  : 		m_pGradeIcon[GRADE_LEVEL_4] = pImage;

  00801	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00804	89 86 90 01 00
	00		 mov	 DWORD PTR [esi+400], eax

; 128  : 	}
; 129  : 	else

  0080a	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 130  : 	{
; 131  : 		ioWnd::AddRenderImage( szType, pImage );

  0080c	ff 75 e0	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  0080f	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00812	ff 75 e8	 push	 DWORD PTR _szType$GSCopy$[ebp]
  00815	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 132  : 	}
; 133  : }

  0081b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0081e	5f		 pop	 edi
  0081f	5e		 pop	 esi
  00820	33 cd		 xor	 ecx, ebp
  00822	5b		 pop	 ebx
  00823	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00828	c9		 leave
  00829	c2 08 00	 ret	 8
?AddRenderImage@RelativeGradeBonusWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; RelativeGradeBonusWnd::AddRenderImage
_TEXT	ENDS
END
