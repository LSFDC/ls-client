; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\io2DRotateQuad.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7ioRotateQuad@@6B@				; ioRotateQuad::`vftable'
PUBLIC	??0ioRotateQuad@@QAE@PAVio2DRotateQuad@@@Z	; ioRotateQuad::ioRotateQuad
PUBLIC	??_R4ioRotateQuad@@6B@				; ioRotateQuad::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioRotateQuad@@@8			; ioRotateQuad `RTTI Type Descriptor'
PUBLIC	??_R3ioRotateQuad@@8				; ioRotateQuad::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioRotateQuad@@8				; ioRotateQuad::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioRotateQuad@@8			; ioRotateQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUIQuad@@8			; IUIQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVIUIQuad@@@8				; IUIQuad `RTTI Type Descriptor'
PUBLIC	??_R3IUIQuad@@8					; IUIQuad::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUIQuad@@8					; IUIQuad::`RTTI Base Class Array'
PUBLIC	?AddInfo@ioRotateQuad@@UAEXPAVioQuadRenderArray@@@Z ; ioRotateQuad::AddInfo
PUBLIC	?GetQuadCount@ioRotateQuad@@UBEHXZ		; ioRotateQuad::GetQuadCount
PUBLIC	?IsDirectQuad@ioRotateQuad@@UBE_NXZ		; ioRotateQuad::IsDirectQuad
PUBLIC	?RenderDirect@ioRotateQuad@@UAEXPAVioRenderSystem@@@Z ; ioRotateQuad::RenderDirect
EXTRN	__imp_??0IUIQuad@@QAE@XZ:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EioRotateQuad@@UAEPAXI@Z:PROC		; ioRotateQuad::`vector deleting destructor'
;	COMDAT ??_R2IUIQuad@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.cpp
rdata$r	SEGMENT
??_R2IUIQuad@@8 DD FLAT:??_R1A@?0A@EA@IUIQuad@@8	; IUIQuad::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUIQuad@@8
rdata$r	SEGMENT
??_R3IUIQuad@@8 DD 00H					; IUIQuad::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUIQuad@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIUIQuad@@@8
_DATA	SEGMENT
??_R0?AVIUIQuad@@@8 DD FLAT:??_7type_info@@6B@		; IUIQuad `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIUIQuad@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUIQuad@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUIQuad@@8 DD FLAT:??_R0?AVIUIQuad@@@8	; IUIQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUIQuad@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioRotateQuad@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioRotateQuad@@8 DD FLAT:??_R0?AVioRotateQuad@@@8 ; ioRotateQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioRotateQuad@@8
rdata$r	ENDS
;	COMDAT ??_R2ioRotateQuad@@8
rdata$r	SEGMENT
??_R2ioRotateQuad@@8 DD FLAT:??_R1A@?0A@EA@ioRotateQuad@@8 ; ioRotateQuad::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUIQuad@@8
rdata$r	ENDS
;	COMDAT ??_R3ioRotateQuad@@8
rdata$r	SEGMENT
??_R3ioRotateQuad@@8 DD 00H				; ioRotateQuad::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioRotateQuad@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioRotateQuad@@@8
_DATA	SEGMENT
??_R0?AVioRotateQuad@@@8 DD FLAT:??_7type_info@@6B@	; ioRotateQuad `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioRotateQuad@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioRotateQuad@@6B@
rdata$r	SEGMENT
??_R4ioRotateQuad@@6B@ DD 00H				; ioRotateQuad::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioRotateQuad@@@8
	DD	FLAT:??_R3ioRotateQuad@@8
rdata$r	ENDS
;	COMDAT ??_7ioRotateQuad@@6B@
CONST	SEGMENT
??_7ioRotateQuad@@6B@ DD FLAT:??_R4ioRotateQuad@@6B@	; ioRotateQuad::`vftable'
	DD	FLAT:?AddInfo@ioRotateQuad@@UAEXPAVioQuadRenderArray@@@Z
	DD	FLAT:?GetQuadCount@ioRotateQuad@@UBEHXZ
	DD	FLAT:?IsDirectQuad@ioRotateQuad@@UBE_NXZ
	DD	FLAT:?RenderDirect@ioRotateQuad@@UAEXPAVioRenderSystem@@@Z
	DD	FLAT:??_EioRotateQuad@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioRotateQuad@@QAE@PAVio2DRotateQuad@@@Z
_TEXT	SEGMENT
_pQuad$ = 8						; size = 4
??0ioRotateQuad@@QAE@PAVio2DRotateQuad@@@Z PROC		; ioRotateQuad::ioRotateQuad, COMDAT
; _this$ = ecx

; 11   : ioRotateQuad::ioRotateQuad( io2DRotateQuad *pQuad ) : m_pQuad( pQuad ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0IUIQuad@@QAE@XZ
  0000c	8b 45 08	 mov	 eax, DWORD PTR _pQuad$[ebp]
  0000f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioRotateQuad@@6B@
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0ioRotateQuad@@QAE@PAVio2DRotateQuad@@@Z ENDP		; ioRotateQuad::ioRotateQuad
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.h
_TEXT	ENDS
;	COMDAT ?GetQuadCount@ioRotateQuad@@UBEHXZ
_TEXT	SEGMENT
?GetQuadCount@ioRotateQuad@@UBEHXZ PROC			; ioRotateQuad::GetQuadCount, COMDAT
; _this$ = ecx

; 44   : 	virtual int GetQuadCount() const { return 0; }

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetQuadCount@ioRotateQuad@@UBEHXZ ENDP			; ioRotateQuad::GetQuadCount
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?IsDirectQuad@ioRotateQuad@@UBE_NXZ
_TEXT	SEGMENT
?IsDirectQuad@ioRotateQuad@@UBE_NXZ PROC		; ioRotateQuad::IsDirectQuad, COMDAT
; _this$ = ecx

; 45   : 	virtual bool IsDirectQuad() const { return true; }

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsDirectQuad@ioRotateQuad@@UBE_NXZ ENDP		; ioRotateQuad::IsDirectQuad
_TEXT	ENDS
PUBLIC	??1ioRotateQuad@@UAE@XZ				; ioRotateQuad::~ioRotateQuad
EXTRN	__imp_??1IUIQuad@@UAE@XZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.cpp
;	COMDAT ??1ioRotateQuad@@UAE@XZ
_TEXT	SEGMENT
??1ioRotateQuad@@UAE@XZ PROC				; ioRotateQuad::~ioRotateQuad, COMDAT
; _this$ = ecx

; 12   : ioRotateQuad::~ioRotateQuad() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioRotateQuad@@6B@
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1IUIQuad@@UAE@XZ
??1ioRotateQuad@@UAE@XZ ENDP				; ioRotateQuad::~ioRotateQuad
_TEXT	ENDS
EXTRN	__imp_?AddDirectQuadInfo@ioQuadRenderArray@@QAEXPAVIUIQuad@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddInfo@ioRotateQuad@@UAEXPAVioQuadRenderArray@@@Z
_TEXT	SEGMENT
_pQuadArray$ = 8					; size = 4
?AddInfo@ioRotateQuad@@UAEXPAVioQuadRenderArray@@@Z PROC ; ioRotateQuad::AddInfo, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : 	pQuadArray->AddDirectQuadInfo( this );

  00003	51		 push	 ecx
  00004	8b 4d 08	 mov	 ecx, DWORD PTR _pQuadArray$[ebp]
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddDirectQuadInfo@ioQuadRenderArray@@QAEXPAVIUIQuad@@@Z

; 17   : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?AddInfo@ioRotateQuad@@UAEXPAVioQuadRenderArray@@@Z ENDP ; ioRotateQuad::AddInfo
_TEXT	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	??_GioMeshData@@QAEPAXI@Z			; ioMeshData::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp_??1ioMeshData@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??_GioMeshData@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioMeshData@@QAEPAXI@Z PROC				; ioMeshData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioMeshData@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioMeshData@@QAEPAXI@Z ENDP				; ioMeshData::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	c1 e0 04	 shl	 eax, 4
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAEAAVioHashString@@I@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::size
; Function compile flags: /Ogsp
;	COMDAT ?size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE_NXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::empty
; Function compile flags: /Ogsp
;	COMDAT ?empty@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE_NXZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::empty, COMDAT
; _this$ = ecx

; 889  : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax

; 890  : 		}

  0000a	c3		 ret	 0
?empty@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::empty
_TEXT	ENDS
PUBLIC	??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEABQAVioTexture@@I@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEABQAVioTexture@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEABQAVioTexture@@I@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::operator[], COMDAT
; _this$ = ecx

; 912  : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 914  : 		if (size() <= _Pos)
; 915  : 			{	// report error
; 916  : 			_DEBUG_ERROR("vector subscript out of range");
; 917  : 			_SCL_SECURE_OUT_OF_RANGE;
; 918  : 			}
; 919  : 
; 920  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 921  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 922  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 923  : 
; 924  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 925  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEABQAVioTexture@@I@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEAAPAVioTexture@@I@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEAAPAVioTexture@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEAAPAVioTexture@@I@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00008	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEAAPAVioTexture@@I@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::operator[]
_TEXT	ENDS
PUBLIC	?_Inside@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBE_NPBQAVioTexture@@@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBE_NPBQAVioTexture@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBE_NPBQAVioTexture@@@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 09		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 05		 ja	 SHORT $LN3@Inside
  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 02		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  00014	33 c0		 xor	 eax, eax
$LN4@Inside:

; 1287 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?_Inside@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBE_NPBQAVioTexture@@@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Inside
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXPAPAVioTexture@@0@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXPAPAVioTexture@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXPAPAVioTexture@@0@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXPAPAVioTexture@@0@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioTexture *,std::allocator<ioTexture *> >::~_Vector_val<ioTexture *,std::allocator<ioTexture *> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioTexture *,std::allocator<ioTexture *> >::~_Vector_val<ioTexture *,std::allocator<ioTexture *> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioTexture *,std::allocator<ioTexture *> >::~_Vector_val<ioTexture *,std::allocator<ioTexture *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioTexture@@@std@@QAE@XZ	; std::allocator<ioTexture *>::allocator<ioTexture *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioTexture@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVioTexture@@@std@@QAE@XZ PROC		; std::allocator<ioTexture *>::allocator<ioTexture *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVioTexture@@@std@@QAE@XZ ENDP		; std::allocator<ioTexture *>::allocator<ioTexture *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEABQAVioTexture@@XZ ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEABQAVioTexture@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEABQAVioTexture@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEABQAVioTexture@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator*
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar@2
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar@2:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 778  : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXXZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEXXZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Xlen
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVioTexture@@@std@@QAE@ABV01@@Z	; std::allocator<ioTexture *>::allocator<ioTexture *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVioTexture@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVioTexture@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ioTexture *>::allocator<ioTexture *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVioTexture@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ioTexture *>::allocator<ioTexture *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@I@Z ; std::allocator<ioTexture *>::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@I@Z PROC ; std::allocator<ioTexture *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@I@Z ENDP ; std::allocator<ioTexture *>::deallocate
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Compat
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVioTexture@@@std@@QBEIXZ ; std::allocator<ioTexture *>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVioTexture@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVioTexture@@@std@@QBEIXZ PROC	; std::allocator<ioTexture *>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVioTexture@@@std@@QBEIXZ ENDP	; std::allocator<ioTexture *>::max_size
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
EXTRN	__fltused:DWORD
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	??$addressof@QAVioTexture@@@std@@YAPBQAVioTexture@@ABQAV1@@Z ; std::addressof<ioTexture * const>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$addressof@QAVioTexture@@@std@@YAPBQAVioTexture@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVioTexture@@@std@@YAPBQAVioTexture@@ABQAV1@@Z PROC ; std::addressof<ioTexture * const>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAVioTexture@@@std@@YAPBQAVioTexture@@ABQAV1@@Z ENDP ; std::addressof<ioTexture * const>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVioTexture@@@std@@YAPAPAVioTexture@@IPAPAV1@@Z ; std::_Allocate<ioTexture *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVioTexture@@@std@@YAPAPAVioTexture@@IPAPAV1@@Z
_TEXT	SEGMENT
$T506724 = -12						; size = 12
$T506729 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVioTexture@@@std@@YAPAPAVioTexture@@IPAPAV1@@Z PROC ; std::_Allocate<ioTexture *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3e		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00015	77 10		 ja	 SHORT $LN1@Allocate
  00017	8b c1		 mov	 eax, ecx
  00019	c1 e0 02	 shl	 eax, 2
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00025	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00027	83 65 08 00	 and	 DWORD PTR $T506729[ebp], 0
  0002b	8d 45 08	 lea	 eax, DWORD PTR $T506729[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d f4	 lea	 ecx, DWORD PTR $T506724[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003d	8d 45 f4	 lea	 eax, DWORD PTR $T506724[ebp]
  00040	50		 push	 eax
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506724[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00048	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004d	c9		 leave
  0004e	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@PAVioTexture@@@std@@YAPAPAVioTexture@@IPAPAV1@@Z ENDP ; std::_Allocate<ioTexture *>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$forward@AAPAVioTexture@@@std@@YAAAPAVioTexture@@AAPAV1@@Z ; std::forward<ioTexture * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAPAVioTexture@@@std@@YAAAPAVioTexture@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVioTexture@@@std@@YAAAPAVioTexture@@AAPAV1@@Z PROC ; std::forward<ioTexture * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVioTexture@@@std@@YAAAPAVioTexture@@AAPAV1@@Z ENDP ; std::forward<ioTexture * &>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVioTexture@@@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@AAPAV2@@Z ; std::allocator<ioTexture *>::construct<ioTexture * &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAPAVioTexture@@@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@AAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVioTexture@@@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@AAPAV2@@Z PROC ; std::allocator<ioTexture *>::construct<ioTexture * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAPAVioTexture@@@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@AAPAV2@@Z ENDP ; std::allocator<ioTexture *>::construct<ioTexture * &>
_TEXT	ENDS
PUBLIC	??$forward@ABQAVioTexture@@@std@@YAABQAVioTexture@@ABQAV1@@Z ; std::forward<ioTexture * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAVioTexture@@@std@@YAABQAVioTexture@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVioTexture@@@std@@YAABQAVioTexture@@ABQAV1@@Z PROC ; std::forward<ioTexture * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAVioTexture@@@std@@YAABQAVioTexture@@ABQAV1@@Z ENDP ; std::forward<ioTexture * const &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVioTexture@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTexture@@0@Z ; std::_Ptr_cat<ioTexture *,ioTexture *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVioTexture@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTexture@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVioTexture@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTexture@@0@Z PROC ; std::_Ptr_cat<ioTexture *,ioTexture *>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@PAVioTexture@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVioTexture@@0@Z ENDP ; std::_Ptr_cat<ioTexture *,ioTexture *>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTexture * *,ioTexture * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<ioTexture * *,ioTexture * *>, COMDAT

; 2522 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2523 : 	ptrdiff_t _Count = _Last - _First;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	57		 push	 edi

; 2524 : 	_CSTD memmove(&*_Dest, &*_First,
; 2525 : 		_Count * sizeof (*_First));

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000e	c1 fe 02	 sar	 esi, 2
  00011	c1 e6 02	 shl	 esi, 2
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2526 : 	return (_Dest + _Count);

  00022	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 2527 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<ioTexture * *,ioTexture * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioTexture *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioTexture *> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioTexture *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVioTexture@@ABQAV1@@std@@YAXPAPAVioTexture@@ABQAV1@@Z ; std::_Construct<ioTexture *,ioTexture * const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@PAVioTexture@@ABQAV1@@std@@YAXPAPAVioTexture@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVioTexture@@ABQAV1@@std@@YAXPAPAVioTexture@@ABQAV1@@Z PROC ; std::_Construct<ioTexture *,ioTexture * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@Construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@Construct:

; 49   : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Construct@PAVioTexture@@ABQAV1@@std@@YAXPAPAVioTexture@@ABQAV1@@Z ENDP ; std::_Construct<ioTexture *,ioTexture * const &>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAPAVioTexture@@@std@@YAPAPAVioTexture@@PAPAV1@@Z ; std::_Val_type<ioTexture * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVioTexture@@@std@@YAPAPAVioTexture@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVioTexture@@@std@@YAPAPAVioTexture@@PAPAV1@@Z PROC ; std::_Val_type<ioTexture * *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVioTexture@@@std@@YAPAPAVioTexture@@PAPAV1@@Z ENDP ; std::_Val_type<ioTexture * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVioTexture@@PAV1@PAV1@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ioTexture *,ioTexture *,ioTexture *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVioTexture@@PAV1@PAV1@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVioTexture@@PAV1@PAV1@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ioTexture *,ioTexture *,ioTexture *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 462  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninit_move@PAVioTexture@@PAV1@PAV1@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ioTexture *,ioTexture *,ioTexture *>
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z		; D3DXQUATERNION::operator*
EXTRN	_D3DXQuaternionMultiply@12:PROC
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z PROC			; D3DXQUATERNION::operator*, COMDAT
; _this$ = ecx

; 1181 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1182 :     D3DXQUATERNION qT;
; 1183 :     D3DXQuaternionMultiply(&qT, this, &q);

  00003	ff 75 0c	 push	 DWORD PTR _q$[ebp]
  00006	51		 push	 ecx
  00007	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000a	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 1184 :     return qT;

  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1185 : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z ENDP			; D3DXQUATERNION::operator*
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z PROC ; D3DXQuaternionIdentity, COMDAT

; 2063 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2064 : #ifdef D3DX_DEBUG
; 2065 :     if(!pOut)
; 2066 :         return NULL;
; 2067 : #endif
; 2068 : 
; 2069 :     pOut->x = pOut->y = pOut->z = 0.0f;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  0000e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00013	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 2070 :     pOut->w = 1.0f;

  00017	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0001f	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 2071 :     return pOut;
; 2072 : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ENDP ; D3DXQuaternionIdentity
_TEXT	ENDS
PUBLIC	?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 04	 sar	 eax, 4

; 880  : 		}

  00008	c3		 ret	 0
?size@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::size
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ioHashString,std::allocator<ioHashString> >::~_Vector_val<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ; std::allocator<ioHashString>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z PROC ; std::allocator<ioHashString>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@I@Z ENDP ; std::allocator<ioHashString>::deallocate
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ; std::_Ptr_cat<ioHashString,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z PROC ; std::_Ptr_cat<ioHashString,ioHashString>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@VioHashString@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVioHashString@@0@Z ENDP ; std::_Ptr_cat<ioHashString,ioHashString>
_TEXT	ENDS
PUBLIC	??_GioHashString@@QAEPAXI@Z			; ioHashString::`scalar deleting destructor'
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??_GioHashString@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioHashString@@QAEPAXI@Z PROC			; ioHashString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@3
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@3:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_GioHashString@@QAEPAXI@Z ENDP			; ioHashString::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioRotateQuad@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioRotateQuad@@UAEPAXI@Z PROC			; ioRotateQuad::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioRotateQuad@@UAE@XZ	; ioRotateQuad::~ioRotateQuad
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@4
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@4:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioRotateQuad@@UAEPAXI@Z ENDP			; ioRotateQuad::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c23d70a
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?Update@io2DRotateQuad@@QAEXHHMH@Z		; io2DRotateQuad::Update
EXTRN	__imp_?UnLock@ioVertexBufferInstance@@QAE_NXZ:PROC
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp_?UNIT_Z@ioMath@@2UD3DXVECTOR3@@A:BYTE
EXTRN	__imp_?ArrangeHead@ioMath@@SAMM@Z:PROC
EXTRN	__imp_?GetBuffer@ioVertexBufferInstance@@QAEPAXXZ:PROC
EXTRN	__imp_?GetHeight@ioTexture@@QBEHXZ:PROC
EXTRN	__imp_?GetWidth@ioTexture@@QBEHXZ:PROC
EXTRN	__imp_?Lock@ioVertexBufferInstance@@QAE_NKHH@Z:PROC
EXTRN	__imp_?GetVtxInstance@ioMeshData@@QAEPAVioVertexBufferInstance@@I@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.cpp
CONST	ENDS
;	COMDAT ?Update@io2DRotateQuad@@QAEXHHMH@Z
_TEXT	SEGMENT
_pInstance$ = -104					; size = 4
_this$GSCopy$ = -100					; size = 4
_fHalfHeight$ = -96					; size = 4
tv838 = -92						; size = 4
tv837 = -88						; size = 4
_vOffset$ = -84						; size = 12
_fHalfWidth$ = -72					; size = 4
_qtRot$ = -68						; size = 16
_qtResult$ = -52					; size = 16
tv987 = -36						; size = 4
tv935 = -36						; size = 4
tv930 = -36						; size = 4
tv892 = -36						; size = 4
tv852 = -36						; size = 4
tv848 = -36						; size = 4
tv806 = -36						; size = 4
tv802 = -36						; size = 4
tv779 = -36						; size = 4
_fAngle2$ = -36						; size = 4
$T506837 = -32						; size = 16
$T505808 = -28						; size = 12
$T505807 = -28						; size = 12
$T505806 = -28						; size = 12
$T505803 = -28						; size = 12
$T505802 = -28						; size = 12
$T505801 = -28						; size = 12
$T505799 = -28						; size = 12
$T505798 = -28						; size = 12
$T505797 = -28						; size = 12
$T505794 = -28						; size = 12
$T505793 = -28						; size = 12
$T505792 = -28						; size = 12
$T505786 = -28						; size = 12
$T505780 = -28						; size = 12
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
_fAngle$ = 16						; size = 4
_iArray$ = 20						; size = 4
?Update@io2DRotateQuad@@QAEXHHMH@Z PROC			; io2DRotateQuad::Update, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 90   : 	if( m_vTexList.empty() )

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 101  : 
; 102  : 	int iTexWidth  = m_vTexList[m_iCurArray]->GetWidth();

  00019	89 75 9c	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0001c	3b c8		 cmp	 ecx, eax
  0001e	0f 84 ef 04 00
	00		 je	 $LN5@Update

; 91   : 		return;
; 92   : 
; 93   : 	if( (int)m_vTexList.size() <= iArray )

  00024	2b c1		 sub	 eax, ecx
  00026	8b 4d 14	 mov	 ecx, DWORD PTR _iArray$[ebp]
  00029	c1 f8 02	 sar	 eax, 2
  0002c	3b c1		 cmp	 eax, ecx
  0002e	0f 8e df 04 00
	00		 jle	 $LN5@Update

; 94   : 		return;
; 95   : 
; 96   : 	m_iCurArray = iArray;

  00034	53		 push	 ebx
  00035	57		 push	 edi
  00036	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 97   : 
; 98   : 	ioVertexBufferInstance *pInstance = m_pMeshData->GetVtxInstance(0);

  00039	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003c	33 ff		 xor	 edi, edi
  0003e	57		 push	 edi
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetVtxInstance@ioMeshData@@QAEPAVioVertexBufferInstance@@I@Z
  00045	8b d8		 mov	 ebx, eax
  00047	89 5d 98	 mov	 DWORD PTR _pInstance$[ebp], ebx

; 99   : 	if( !pInstance )	return;

  0004a	3b df		 cmp	 ebx, edi
  0004c	0f 84 bf 04 00
	00		 je	 $LN73@Update

; 100  : 	if( !pInstance->Lock() )	return;

  00052	57		 push	 edi
  00053	57		 push	 edi
  00054	57		 push	 edi
  00055	8b cb		 mov	 ecx, ebx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Lock@ioVertexBufferInstance@@QAE_NKHH@Z
  0005d	84 c0		 test	 al, al
  0005f	0f 84 ac 04 00
	00		 je	 $LN73@Update

; 101  : 
; 102  : 	int iTexWidth  = m_vTexList[m_iCurArray]->GetWidth();

  00065	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00068	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0006b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioTexture@@QBEHXZ

; 103  : 	int iTexHeight = m_vTexList[m_iCurArray]->GetHeight();

  00076	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00079	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0007c	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  0007f	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 104  : 
; 105  : 	float fHalfWidth = static_cast<float>( iTexWidth / 2 );

  00081	99		 cdq
  00082	2b c2		 sub	 eax, edx
  00084	d1 f8		 sar	 eax, 1
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0008d	f3 0f 11 45 b8	 movss	 DWORD PTR _fHalfWidth$[ebp], xmm0
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioTexture@@QBEHXZ

; 106  : 	float fHalfHeight = static_cast<float>( iTexHeight / 2 );
; 107  : 
; 108  : 	float fXPos = static_cast<float>(iXPos);
; 109  : 	float fYPos = static_cast<float>(iYPos);
; 110  : 	D3DXVECTOR3 vOffset = D3DXVECTOR3( fXPos, fYPos, 0.0f );

  00098	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _iXPos$[ebp]

; 111  : 	
; 112  : 	D3DXVECTOR3 vPos = ioMath::VEC3_ZERO;
; 113  : 	vPos = D3DXVECTOR3( -fHalfWidth, -fHalfHeight, 0.01f );

  0009d	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _fHalfWidth$[ebp]
  000a2	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __mask@@NegFloat@
  000a9	99		 cdq
  000aa	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ad	2b c2		 sub	 eax, edx
  000af	f3 0f 11 45 ac	 movss	 DWORD PTR _vOffset$[ebp], xmm0
  000b4	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _iYPos$[ebp]
  000b9	f3 0f 11 4d e4	 movss	 DWORD PTR $T505780[ebp], xmm1
  000be	d1 f8		 sar	 eax, 1
  000c0	0f 57 d2	 xorps	 xmm2, xmm2
  000c3	f3 0f 2a d0	 cvtsi2ss xmm2, eax
  000c7	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ca	f3 0f 11 4d a8	 movss	 DWORD PTR tv837[ebp], xmm1
  000cf	f3 0f 11 45 b0	 movss	 DWORD PTR _vOffset$[ebp+4], xmm0
  000d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  000dc	0f 28 ca	 movaps	 xmm1, xmm2
  000df	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __mask@@NegFloat@
  000e6	f3 0f 11 4d e8	 movss	 DWORD PTR $T505780[ebp+4], xmm1
  000eb	f3 0f 11 45 ec	 movss	 DWORD PTR $T505780[ebp+8], xmm0
  000f0	8d 75 e4	 lea	 esi, DWORD PTR $T505780[ebp]
  000f3	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  000f6	a5		 movsd
  000f7	a5		 movsd

; 114  : 	
; 115  : 	ioVtxRHWTex *pBuf = (ioVtxRHWTex*)pInstance->GetBuffer();

  000f8	8b cb		 mov	 ecx, ebx
  000fa	f3 0f 11 55 a0	 movss	 DWORD PTR _fHalfHeight$[ebp], xmm2
  000ff	f3 0f 11 4d a4	 movss	 DWORD PTR tv838[ebp], xmm1
  00104	a5		 movsd
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBuffer@ioVertexBufferInstance@@QAEPAXXZ

; 116  : 
; 117  : 	float fAngle2 = ioMath::ArrangeHead( fAngle );

  0010b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fAngle$[ebp]
  00110	51		 push	 ecx
  00111	8b d8		 mov	 ebx, eax
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ArrangeHead@ioMath@@SAMM@Z
  0011e	d9 5d dc	 fstp	 DWORD PTR _fAngle2$[ebp]

; 118  : 	D3DXQUATERNION qtRot, qtResult;
; 119  : 	D3DXQuaternionRotationAxis( &qtRot, &-ioMath::UNIT_Z, DEGtoRAD(fAngle2) );

  00121	d9 45 dc	 fld	 DWORD PTR _fAngle2$[ebp]
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?UNIT_Z@ioMath@@2UD3DXVECTOR3@@A
  00129	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0012f	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00134	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00139	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  00145	d9 5d dc	 fstp	 DWORD PTR tv987[ebp]
  00148	d9 45 dc	 fld	 DWORD PTR tv987[ebp]
  0014b	8d 45 e4	 lea	 eax, DWORD PTR $T505786[ebp]
  0014e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00151	50		 push	 eax
  00152	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$[ebp]
  00155	0f 57 c8	 xorps	 xmm1, xmm0
  00158	0f 57 d0	 xorps	 xmm2, xmm0
  0015b	0f 57 d8	 xorps	 xmm3, xmm0
  0015e	50		 push	 eax
  0015f	f3 0f 11 5d e4	 movss	 DWORD PTR $T505786[ebp], xmm3
  00164	f3 0f 11 4d e8	 movss	 DWORD PTR $T505786[ebp+4], xmm1
  00169	f3 0f 11 55 ec	 movss	 DWORD PTR $T505786[ebp+8], xmm2
  0016e	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 120  : 	qtResult = m_qtOriginal * qtRot;

  00173	8d 45 bc	 lea	 eax, DWORD PTR _qtRot$[ebp]
  00176	50		 push	 eax
  00177	8b 45 9c	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  0017a	83 c0 24	 add	 eax, 36			; 00000024H
  0017d	50		 push	 eax
  0017e	8d 45 e0	 lea	 eax, DWORD PTR $T506837[ebp]
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
  00187	8d 75 e0	 lea	 esi, DWORD PTR $T506837[ebp]

; 121  : 
; 122  : 	vPos = D3DXVECTOR3( -fHalfWidth, fHalfHeight, 0.01f );

  0018a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv837[ebp]
  0018f	8d 7d cc	 lea	 edi, DWORD PTR _qtResult$[ebp]
  00192	a5		 movsd
  00193	a5		 movsd
  00194	a5		 movsd
  00195	a5		 movsd
  00196	f3 0f 11 45 e4	 movss	 DWORD PTR $T505792[ebp], xmm0
  0019b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _fHalfHeight$[ebp]
  001a0	f3 0f 11 45 e8	 movss	 DWORD PTR $T505792[ebp+4], xmm0
  001a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  001ad	f3 0f 11 45 ec	 movss	 DWORD PTR $T505792[ebp+8], xmm0
  001b2	8d 75 e4	 lea	 esi, DWORD PTR $T505792[ebp]
  001b5	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  001b8	a5		 movsd

; 123  : 	vPos = qtResult * vPos;

  001b9	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  001bc	50		 push	 eax
  001bd	8d 45 cc	 lea	 eax, DWORD PTR _qtResult$[ebp]
  001c0	a5		 movsd
  001c1	50		 push	 eax
  001c2	8d 45 e4	 lea	 eax, DWORD PTR $T505793[ebp]
  001c5	50		 push	 eax
  001c6	a5		 movsd
  001c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 124  : 	pBuf[0].vPos = vPos + vOffset;

  001cd	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _vOffset$[ebp]
  001d2	8b f0		 mov	 esi, eax
  001d4	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  001d7	a5		 movsd
  001d8	a5		 movsd
  001d9	a5		 movsd
  001da	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  001df	0f 5a c0	 cvtps2pd xmm0, xmm0
  001e2	0f 5a c9	 cvtps2pd xmm1, xmm1
  001e5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001e9	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _vOffset$[ebp+4]
  001ee	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001f2	f3 0f 11 45 e4	 movss	 DWORD PTR $T505794[ebp], xmm0
  001f7	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  001fc	0f 5a c0	 cvtps2pd xmm0, xmm0
  001ff	0f 5a c9	 cvtps2pd xmm1, xmm1
  00202	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00206	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0020a	f3 0f 11 45 e8	 movss	 DWORD PTR $T505794[ebp+4], xmm0
  0020f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  00214	0f 5a c0	 cvtps2pd xmm0, xmm0
  00217	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  0021f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00223	f3 0f 11 45 ec	 movss	 DWORD PTR $T505794[ebp+8], xmm0
  00228	8d 75 e4	 lea	 esi, DWORD PTR $T505794[ebp]
  0022b	8b fb		 mov	 edi, ebx
  0022d	a5		 movsd
  0022e	a5		 movsd
  0022f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00232	a5		 movsd

; 125  : 	pBuf[0].fRHW = FLOAT1;

  00233	b8 01 00 00 00	 mov	 eax, 1
  00238	89 45 dc	 mov	 DWORD PTR tv935[ebp], eax
  0023b	db 45 dc	 fild	 DWORD PTR tv935[ebp]
  0023e	85 c0		 test	 eax, eax
  00240	79 06		 jns	 SHORT $LN75@Update
  00242	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN75@Update:

; 126  : 	pBuf[0].u = 0.0f;

  00248	0f 57 c0	 xorps	 xmm0, xmm0
  0024b	d9 5b 0c	 fstp	 DWORD PTR [ebx+12]
  0024e	f3 0f 11 43 10	 movss	 DWORD PTR [ebx+16], xmm0

; 127  : 	pBuf[0].v = FLOAT1;

  00253	b8 01 00 00 00	 mov	 eax, 1
  00258	89 45 dc	 mov	 DWORD PTR tv930[ebp], eax
  0025b	db 45 dc	 fild	 DWORD PTR tv930[ebp]
  0025e	85 c0		 test	 eax, eax
  00260	79 06		 jns	 SHORT $LN76@Update
  00262	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN76@Update:

; 128  : 
; 129  : 	vPos = D3DXVECTOR3( -fHalfWidth, -fHalfHeight, 0.01f );

  00268	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv837[ebp]
  0026d	d9 5b 14	 fstp	 DWORD PTR [ebx+20]
  00270	f3 0f 11 45 e4	 movss	 DWORD PTR $T505797[ebp], xmm0
  00275	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv838[ebp]
  0027a	f3 0f 11 45 e8	 movss	 DWORD PTR $T505797[ebp+4], xmm0
  0027f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  00287	f3 0f 11 45 ec	 movss	 DWORD PTR $T505797[ebp+8], xmm0
  0028c	8d 75 e4	 lea	 esi, DWORD PTR $T505797[ebp]
  0028f	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00292	a5		 movsd

; 130  : 	vPos = qtResult * vPos;

  00293	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00296	50		 push	 eax
  00297	8d 45 cc	 lea	 eax, DWORD PTR _qtResult$[ebp]
  0029a	a5		 movsd
  0029b	50		 push	 eax
  0029c	8d 45 e4	 lea	 eax, DWORD PTR $T505798[ebp]
  0029f	50		 push	 eax
  002a0	a5		 movsd
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 131  : 	pBuf[1].vPos = vPos + vOffset;

  002a7	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _vOffset$[ebp]
  002ac	8b f0		 mov	 esi, eax
  002ae	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  002b1	a5		 movsd
  002b2	a5		 movsd
  002b3	a5		 movsd
  002b4	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  002b9	0f 5a c0	 cvtps2pd xmm0, xmm0
  002bc	0f 5a c9	 cvtps2pd xmm1, xmm1
  002bf	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002c3	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _vOffset$[ebp+4]
  002c8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002cc	f3 0f 11 45 e4	 movss	 DWORD PTR $T505799[ebp], xmm0
  002d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  002d6	0f 5a c0	 cvtps2pd xmm0, xmm0
  002d9	0f 5a c9	 cvtps2pd xmm1, xmm1
  002dc	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002e0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002e4	f3 0f 11 45 e8	 movss	 DWORD PTR $T505799[ebp+4], xmm0
  002e9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  002ee	0f 5a c0	 cvtps2pd xmm0, xmm0
  002f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  002f9	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002fd	f3 0f 11 45 ec	 movss	 DWORD PTR $T505799[ebp+8], xmm0
  00302	8d 7b 18	 lea	 edi, DWORD PTR [ebx+24]
  00305	8d 75 e4	 lea	 esi, DWORD PTR $T505799[ebp]
  00308	a5		 movsd
  00309	a5		 movsd
  0030a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0030d	a5		 movsd

; 132  : 	pBuf[1].fRHW = FLOAT1;

  0030e	b8 01 00 00 00	 mov	 eax, 1
  00313	89 45 dc	 mov	 DWORD PTR tv892[ebp], eax
  00316	db 45 dc	 fild	 DWORD PTR tv892[ebp]
  00319	85 c0		 test	 eax, eax
  0031b	79 06		 jns	 SHORT $LN77@Update
  0031d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN77@Update:

; 133  : 	pBuf[1].u = 0.0f;

  00323	0f 57 c0	 xorps	 xmm0, xmm0
  00326	d9 5b 24	 fstp	 DWORD PTR [ebx+36]
  00329	f3 0f 11 43 28	 movss	 DWORD PTR [ebx+40], xmm0

; 134  : 	pBuf[1].v = 0.0f;

  0032e	f3 0f 11 43 2c	 movss	 DWORD PTR [ebx+44], xmm0

; 135  : 
; 136  : 	vPos = D3DXVECTOR3( fHalfWidth, -fHalfHeight, 0.01f );

  00333	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _fHalfWidth$[ebp]
  00338	f3 0f 11 45 e4	 movss	 DWORD PTR $T505801[ebp], xmm0
  0033d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv838[ebp]
  00342	f3 0f 11 45 e8	 movss	 DWORD PTR $T505801[ebp+4], xmm0
  00347	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0034f	f3 0f 11 45 ec	 movss	 DWORD PTR $T505801[ebp+8], xmm0
  00354	8d 75 e4	 lea	 esi, DWORD PTR $T505801[ebp]
  00357	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  0035a	a5		 movsd

; 137  : 	vPos = qtResult * vPos;

  0035b	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  0035e	50		 push	 eax
  0035f	8d 45 cc	 lea	 eax, DWORD PTR _qtResult$[ebp]
  00362	a5		 movsd
  00363	50		 push	 eax
  00364	8d 45 e4	 lea	 eax, DWORD PTR $T505802[ebp]
  00367	50		 push	 eax
  00368	a5		 movsd
  00369	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 138  : 	pBuf[2].vPos = vPos + vOffset;

  0036f	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _vOffset$[ebp]
  00374	8b f0		 mov	 esi, eax
  00376	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00379	a5		 movsd
  0037a	a5		 movsd
  0037b	a5		 movsd
  0037c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  00381	0f 5a c0	 cvtps2pd xmm0, xmm0
  00384	0f 5a c9	 cvtps2pd xmm1, xmm1
  00387	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0038b	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _vOffset$[ebp+4]
  00390	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00394	f3 0f 11 45 e4	 movss	 DWORD PTR $T505803[ebp], xmm0
  00399	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  0039e	0f 5a c0	 cvtps2pd xmm0, xmm0
  003a1	0f 5a c9	 cvtps2pd xmm1, xmm1
  003a4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003a8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  003ac	f3 0f 11 45 e8	 movss	 DWORD PTR $T505803[ebp+4], xmm0
  003b1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  003b6	0f 5a c0	 cvtps2pd xmm0, xmm0
  003b9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  003c1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  003c5	f3 0f 11 45 ec	 movss	 DWORD PTR $T505803[ebp+8], xmm0
  003ca	8d 7b 30	 lea	 edi, DWORD PTR [ebx+48]
  003cd	8d 75 e4	 lea	 esi, DWORD PTR $T505803[ebp]
  003d0	a5		 movsd
  003d1	a5		 movsd
  003d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d5	a5		 movsd

; 139  : 	pBuf[2].fRHW = FLOAT1;

  003d6	b8 01 00 00 00	 mov	 eax, 1
  003db	89 45 dc	 mov	 DWORD PTR tv852[ebp], eax
  003de	db 45 dc	 fild	 DWORD PTR tv852[ebp]
  003e1	85 c0		 test	 eax, eax
  003e3	79 06		 jns	 SHORT $LN78@Update
  003e5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN78@Update:
  003eb	d9 5b 3c	 fstp	 DWORD PTR [ebx+60]

; 140  : 	pBuf[2].u = FLOAT1;

  003ee	b8 01 00 00 00	 mov	 eax, 1
  003f3	89 45 dc	 mov	 DWORD PTR tv848[ebp], eax
  003f6	db 45 dc	 fild	 DWORD PTR tv848[ebp]
  003f9	85 c0		 test	 eax, eax
  003fb	79 06		 jns	 SHORT $LN79@Update
  003fd	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN79@Update:

; 141  : 	pBuf[2].v = 0.0f;

  00403	0f 57 c0	 xorps	 xmm0, xmm0
  00406	d9 5b 40	 fstp	 DWORD PTR [ebx+64]
  00409	f3 0f 11 43 44	 movss	 DWORD PTR [ebx+68], xmm0

; 142  : 
; 143  : 	vPos = D3DXVECTOR3( fHalfWidth, fHalfHeight, 0.01f );

  0040e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _fHalfWidth$[ebp]
  00413	f3 0f 11 45 e4	 movss	 DWORD PTR $T505806[ebp], xmm0
  00418	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _fHalfHeight$[ebp]
  0041d	f3 0f 11 45 e8	 movss	 DWORD PTR $T505806[ebp+4], xmm0
  00422	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0042a	f3 0f 11 45 ec	 movss	 DWORD PTR $T505806[ebp+8], xmm0
  0042f	8d 75 e4	 lea	 esi, DWORD PTR $T505806[ebp]
  00432	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00435	a5		 movsd

; 144  : 	vPos = qtResult * vPos;

  00436	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00439	50		 push	 eax
  0043a	8d 45 cc	 lea	 eax, DWORD PTR _qtResult$[ebp]
  0043d	a5		 movsd
  0043e	50		 push	 eax
  0043f	8d 45 e4	 lea	 eax, DWORD PTR $T505807[ebp]
  00442	50		 push	 eax
  00443	a5		 movsd
  00444	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 145  : 	pBuf[3].vPos = vPos + vOffset;

  0044a	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _vOffset$[ebp]
  0044f	8b f0		 mov	 esi, eax
  00451	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  00454	a5		 movsd
  00455	a5		 movsd
  00456	a5		 movsd
  00457	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vPos$[ebp]
  0045c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0045f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00462	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00466	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _vOffset$[ebp+4]
  0046b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0046f	f3 0f 11 45 e4	 movss	 DWORD PTR $T505808[ebp], xmm0
  00474	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vPos$[ebp+4]
  00479	0f 5a c0	 cvtps2pd xmm0, xmm0
  0047c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0047f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00483	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00487	f3 0f 11 45 e8	 movss	 DWORD PTR $T505808[ebp+4], xmm0
  0048c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vPos$[ebp+8]
  00491	0f 5a c0	 cvtps2pd xmm0, xmm0
  00494	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@0000000000000000
  0049c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  004a0	f3 0f 11 45 ec	 movss	 DWORD PTR $T505808[ebp+8], xmm0
  004a5	8d 7b 48	 lea	 edi, DWORD PTR [ebx+72]
  004a8	8d 75 e4	 lea	 esi, DWORD PTR $T505808[ebp]
  004ab	a5		 movsd
  004ac	a5		 movsd
  004ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b0	a5		 movsd

; 146  : 	pBuf[3].fRHW = FLOAT1;

  004b1	b8 01 00 00 00	 mov	 eax, 1
  004b6	89 45 dc	 mov	 DWORD PTR tv806[ebp], eax
  004b9	db 45 dc	 fild	 DWORD PTR tv806[ebp]
  004bc	85 c0		 test	 eax, eax
  004be	79 06		 jns	 SHORT $LN80@Update
  004c0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN80@Update:
  004c6	d9 5b 54	 fstp	 DWORD PTR [ebx+84]

; 147  : 	pBuf[3].u = FLOAT1;

  004c9	b8 01 00 00 00	 mov	 eax, 1
  004ce	89 45 dc	 mov	 DWORD PTR tv802[ebp], eax
  004d1	db 45 dc	 fild	 DWORD PTR tv802[ebp]
  004d4	85 c0		 test	 eax, eax
  004d6	79 06		 jns	 SHORT $LN81@Update
  004d8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN81@Update:
  004de	d9 5b 58	 fstp	 DWORD PTR [ebx+88]

; 148  : 	pBuf[3].v = FLOAT1;

  004e1	b8 01 00 00 00	 mov	 eax, 1
  004e6	89 45 dc	 mov	 DWORD PTR tv779[ebp], eax
  004e9	db 45 dc	 fild	 DWORD PTR tv779[ebp]
  004ec	85 c0		 test	 eax, eax
  004ee	79 06		 jns	 SHORT $LN82@Update
  004f0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN82@Update:

; 149  : 
; 150  : 	pInstance->UnLock();

  004f6	8b 4d 98	 mov	 ecx, DWORD PTR _pInstance$[ebp]
  004f9	d9 5b 5c	 fstp	 DWORD PTR [ebx+92]
  004fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?UnLock@ioVertexBufferInstance@@QAE_NXZ

; 151  : 
; 152  : 	m_iRenderX = iXPos;

  00502	8b 4d 08	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  00505	8b 45 9c	 mov	 eax, DWORD PTR _this$GSCopy$[ebp]
  00508	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 153  : 	m_iRenderY = iYPos;

  0050b	8b 4d 0c	 mov	 ecx, DWORD PTR _iYPos$[ebp]
  0050e	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
$LN73@Update:
  00511	5f		 pop	 edi
  00512	5b		 pop	 ebx
$LN5@Update:

; 154  : }

  00513	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00516	33 cd		 xor	 ecx, ebp
  00518	5e		 pop	 esi
  00519	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051e	c9		 leave
  0051f	c2 10 00	 ret	 16			; 00000010H
?Update@io2DRotateQuad@@QAEXHHMH@Z ENDP			; io2DRotateQuad::Update
_TEXT	ENDS
PUBLIC	?IsNeedRender@io2DRotateQuad@@QBE_NXZ		; io2DRotateQuad::IsNeedRender
; Function compile flags: /Ogsp
;	COMDAT ?IsNeedRender@io2DRotateQuad@@QBE_NXZ
_TEXT	SEGMENT
?IsNeedRender@io2DRotateQuad@@QBE_NXZ PROC		; io2DRotateQuad::IsNeedRender, COMDAT
; _this$ = ecx

; 158  : 	if( !m_pMeshData )

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	75 03		 jne	 SHORT $LN4@IsNeedRend
$LN13@IsNeedRend:

; 159  : 		return false;

  00006	32 c0		 xor	 al, al

; 168  : 		return false;
; 169  : 
; 170  : 	return true;
; 171  : }

  00008	c3		 ret	 0
$LN4@IsNeedRend:

; 160  : 
; 161  : 	if( m_vTexList.empty() )

  00009	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000f	3b d0		 cmp	 edx, eax

; 162  : 		return false;

  00011	74 f3		 je	 SHORT $LN13@IsNeedRend

; 163  : 
; 164  : 	if( (int)m_vTexList.size() <= m_iCurArray )

  00013	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00016	2b c2		 sub	 eax, edx
  00018	c1 f8 02	 sar	 eax, 2
  0001b	3b c1		 cmp	 eax, ecx

; 165  : 		return false;

  0001d	7e e7		 jle	 SHORT $LN13@IsNeedRend

; 166  : 
; 167  : 	if( !m_vTexList[m_iCurArray] )

  0001f	83 3c 8a 00	 cmp	 DWORD PTR [edx+ecx*4], 0
  00023	0f 95 c0	 setne	 al

; 168  : 		return false;
; 169  : 
; 170  : 	return true;
; 171  : }

  00026	c3		 ret	 0
?IsNeedRender@io2DRotateQuad@@QBE_NXZ ENDP		; io2DRotateQuad::IsNeedRender
_TEXT	ENDS
PUBLIC	?Render@io2DRotateQuad@@QAEXPAVioRenderSystem@@@Z ; io2DRotateQuad::Render
EXTRN	__imp_?RenderPrimitive@ioRenderSystem@@QAEXW4_D3DPRIMITIVETYPE@@II@Z:PROC
EXTRN	__imp_?SetFillMode@ioRenderSystem@@QAEXW4FillMode@@@Z:PROC
EXTRN	__imp_?DisableTextureUnitsFrom@ioRenderSystem@@QAEXH@Z:PROC
EXTRN	__imp_?SetTextureStageAlphaBlend@ioRenderSystem@@QAEXHW4_D3DTEXTUREOP@@KK@Z:PROC
EXTRN	__imp_?SetTextureStageColorBlend@ioRenderSystem@@QAEXHW4_D3DTEXTUREOP@@KK@Z:PROC
EXTRN	__imp_?SetTexture@ioRenderSystem@@QAEXHPAUIDirect3DTexture9@@@Z:PROC
EXTRN	__imp_?GetTexture@ioTexture@@QBEPAUIDirect3DTexture9@@XZ:PROC
EXTRN	__imp_?SetTextureTransformFlag@ioRenderSystem@@QAEXHK@Z:PROC
EXTRN	__imp_?SetTextureFiltering@ioRenderSystem@@QAEXHW4TextureFilterOption@@@Z:PROC
EXTRN	__imp_?SetTextureAddressMode@ioRenderSystem@@QAEXHW4TextureAddressMode@@@Z:PROC
EXTRN	__imp_?SetAlphaTest@ioRenderSystem@@QAEXW4_D3DCMPFUNC@@H@Z:PROC
EXTRN	__imp_?SetCullingMode@ioRenderSystem@@QAEXW4CullingMode@@@Z:PROC
EXTRN	__imp_?SetSceneBlend@ioRenderSystem@@QAEXW4_D3DBLENDOP@@W4_D3DBLEND@@1@Z:PROC
EXTRN	__imp_?SetDepthFunction@ioRenderSystem@@QAEXW4_D3DCMPFUNC@@_N1@Z:PROC
EXTRN	__imp_?DisableShader@ioRenderSystem@@QAEXXZ:PROC
EXTRN	__imp_?SetIndexBufferInstance@ioRenderSystem@@QAE_NPAVioIndexBufferInstance@@@Z:PROC
EXTRN	__imp_?SetVertexBufferBinder@ioRenderSystem@@QAEXPAVioVertexBufferBinder@@@Z:PROC
EXTRN	__imp_?SetVertexDeclaration@ioRenderSystem@@QAEXPAVioVertexDeclaration@@@Z:PROC
EXTRN	__imp_?SetModelMatrixIdentity@ioRenderSystem@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Render@io2DRotateQuad@@QAEXPAVioRenderSystem@@@Z
_TEXT	SEGMENT
_pSystem$ = 8						; size = 4
?Render@io2DRotateQuad@@QAEXPAVioRenderSystem@@@Z PROC	; io2DRotateQuad::Render, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 175  : 	if( !IsNeedRender() )

  00006	e8 00 00 00 00	 call	 ?IsNeedRender@io2DRotateQuad@@QBE_NXZ ; io2DRotateQuad::IsNeedRender
  0000b	84 c0		 test	 al, al
  0000d	0f 84 e3 00 00
	00		 je	 $LN2@Render

; 176  : 		return;
; 177  : 
; 178  : 	pSystem->SetModelMatrixIdentity();

  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _pSystem$[ebp]
  00017	57		 push	 edi
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetModelMatrixIdentity@ioRenderSystem@@QAEXXZ

; 179  : 	pSystem->SetVertexDeclaration( m_pMeshData->m_pVertexDeclaration );

  00020	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00023	ff 30		 push	 DWORD PTR [eax]
  00025	8b ce		 mov	 ecx, esi
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetVertexDeclaration@ioRenderSystem@@QAEXPAVioVertexDeclaration@@@Z

; 180  : 	pSystem->SetVertexBufferBinder( m_pMeshData->m_pVertexBufferBinder );

  0002d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00030	ff 70 04	 push	 DWORD PTR [eax+4]
  00033	8b ce		 mov	 ecx, esi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetVertexBufferBinder@ioRenderSystem@@QAEXPAVioVertexBufferBinder@@@Z

; 181  : 	pSystem->SetIndexBufferInstance( NULL );

  0003b	33 ff		 xor	 edi, edi
  0003d	57		 push	 edi
  0003e	8b ce		 mov	 ecx, esi
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetIndexBufferInstance@ioRenderSystem@@QAE_NPAVioIndexBufferInstance@@@Z

; 182  : 	pSystem->DisableShader();

  00046	8b ce		 mov	 ecx, esi
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DisableShader@ioRenderSystem@@QAEXXZ

; 183  : 
; 184  : 	pSystem->SetDepthFunction( D3DCMP_LESSEQUAL, false, true );

  0004e	6a 01		 push	 1
  00050	57		 push	 edi
  00051	6a 04		 push	 4
  00053	8b ce		 mov	 ecx, esi
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetDepthFunction@ioRenderSystem@@QAEXW4_D3DCMPFUNC@@_N1@Z

; 185  : 	pSystem->SetSceneBlend( D3DBLENDOP_ADD, D3DBLEND_SRCALPHA, D3DBLEND_INVSRCALPHA );

  0005b	6a 06		 push	 6
  0005d	6a 05		 push	 5
  0005f	6a 01		 push	 1
  00061	8b ce		 mov	 ecx, esi
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetSceneBlend@ioRenderSystem@@QAEXW4_D3DBLENDOP@@W4_D3DBLEND@@1@Z

; 186  : 	pSystem->SetCullingMode( CM_CCW );

  00069	6a 03		 push	 3
  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetCullingMode@ioRenderSystem@@QAEXW4CullingMode@@@Z

; 187  : 	pSystem->SetAlphaTest( D3DCMP_GREATER, 0 );

  00073	57		 push	 edi
  00074	6a 05		 push	 5
  00076	8b ce		 mov	 ecx, esi
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlphaTest@ioRenderSystem@@QAEXW4_D3DCMPFUNC@@H@Z

; 188  : 
; 189  : 	pSystem->SetTextureAddressMode( 0, TAM_CLAMP );

  0007e	6a 03		 push	 3
  00080	57		 push	 edi
  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextureAddressMode@ioRenderSystem@@QAEXHW4TextureAddressMode@@@Z

; 190  : 	pSystem->SetTextureFiltering( 0, TFO_BILINEAR );

  00089	6a 01		 push	 1
  0008b	57		 push	 edi
  0008c	8b ce		 mov	 ecx, esi
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextureFiltering@ioRenderSystem@@QAEXHW4TextureFilterOption@@@Z

; 191  : 	pSystem->SetTextureTransformFlag( 0, D3DTTFF_DISABLE );

  00094	57		 push	 edi
  00095	57		 push	 edi
  00096	8b ce		 mov	 ecx, esi
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextureTransformFlag@ioRenderSystem@@QAEXHK@Z

; 192  : 
; 193  : 	pSystem->SetTexture( 0, m_vTexList[m_iCurArray]->GetTexture() );

  0009e	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000a1	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000a4	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetTexture@ioTexture@@QBEPAUIDirect3DTexture9@@XZ
  000af	50		 push	 eax
  000b0	57		 push	 edi
  000b1	8b ce		 mov	 ecx, esi
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTexture@ioRenderSystem@@QAEXHPAUIDirect3DTexture9@@@Z

; 194  : 	pSystem->SetTextureStageColorBlend( 0, D3DTOP_SELECTARG1, D3DTA_TEXTURE, D3DTA_DIFFUSE );

  000b9	57		 push	 edi
  000ba	6a 02		 push	 2
  000bc	5b		 pop	 ebx
  000bd	53		 push	 ebx
  000be	53		 push	 ebx
  000bf	57		 push	 edi
  000c0	8b ce		 mov	 ecx, esi
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextureStageColorBlend@ioRenderSystem@@QAEXHW4_D3DTEXTUREOP@@KK@Z

; 195  : 	pSystem->SetTextureStageAlphaBlend( 0, D3DTOP_SELECTARG1, D3DTA_TEXTURE, D3DTA_DIFFUSE );

  000c8	57		 push	 edi
  000c9	53		 push	 ebx
  000ca	53		 push	 ebx
  000cb	57		 push	 edi
  000cc	8b ce		 mov	 ecx, esi
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextureStageAlphaBlend@ioRenderSystem@@QAEXHW4_D3DTEXTUREOP@@KK@Z

; 196  : 	pSystem->DisableTextureUnitsFrom( 1 );

  000d4	6a 01		 push	 1
  000d6	8b ce		 mov	 ecx, esi
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DisableTextureUnitsFrom@ioRenderSystem@@QAEXH@Z

; 197  : 
; 198  : 	pSystem->SetFillMode( FM_SOLID );

  000de	6a 03		 push	 3
  000e0	8b ce		 mov	 ecx, esi
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetFillMode@ioRenderSystem@@QAEXW4FillMode@@@Z

; 199  : 	pSystem->RenderPrimitive( D3DPT_TRIANGLEFAN, 0, 2 );

  000e8	53		 push	 ebx
  000e9	57		 push	 edi
  000ea	6a 06		 push	 6
  000ec	8b ce		 mov	 ecx, esi
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderPrimitive@ioRenderSystem@@QAEXW4_D3DPRIMITIVETYPE@@II@Z
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
$LN2@Render:
  000f6	5b		 pop	 ebx

; 200  : }

  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
?Render@io2DRotateQuad@@QAEXPAVioRenderSystem@@@Z ENDP	; io2DRotateQuad::Render
_TEXT	ENDS
PUBLIC	?GetWidth@io2DRotateQuad@@QAEHXZ		; io2DRotateQuad::GetWidth
; Function compile flags: /Ogsp
;	COMDAT ?GetWidth@io2DRotateQuad@@QAEHXZ
_TEXT	SEGMENT
?GetWidth@io2DRotateQuad@@QAEHXZ PROC			; io2DRotateQuad::GetWidth, COMDAT
; _this$ = ecx

; 204  : 	if( m_vTexList.empty() )

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	3b d0		 cmp	 edx, eax

; 205  : 		return 0;

  00008	74 1c		 je	 SHORT $LN1@GetWidth

; 206  : 
; 207  : 	if( (int)m_vTexList.size() <= m_iCurArray )

  0000a	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2
  00012	3b c1		 cmp	 eax, ecx

; 208  : 		return 0;

  00014	7e 10		 jle	 SHORT $LN1@GetWidth

; 209  : 
; 210  : 	if( m_vTexList[m_iCurArray] )

  00016	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	74 08		 je	 SHORT $LN1@GetWidth

; 211  : 		return m_vTexList[m_iCurArray]->GetWidth();

  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?GetWidth@ioTexture@@QBEHXZ
$LN1@GetWidth:

; 212  : 
; 213  : 	return 0;

  00026	33 c0		 xor	 eax, eax

; 214  : }

  00028	c3		 ret	 0
?GetWidth@io2DRotateQuad@@QAEHXZ ENDP			; io2DRotateQuad::GetWidth
_TEXT	ENDS
PUBLIC	?GetHeight@io2DRotateQuad@@QAEHXZ		; io2DRotateQuad::GetHeight
; Function compile flags: /Ogsp
;	COMDAT ?GetHeight@io2DRotateQuad@@QAEHXZ
_TEXT	SEGMENT
?GetHeight@io2DRotateQuad@@QAEHXZ PROC			; io2DRotateQuad::GetHeight, COMDAT
; _this$ = ecx

; 218  : 	if( m_vTexList.empty() )

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	3b d0		 cmp	 edx, eax

; 219  : 		return 0;

  00008	74 1c		 je	 SHORT $LN1@GetHeight

; 220  : 
; 221  : 	if( (int)m_vTexList.size() <= m_iCurArray )

  0000a	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2
  00012	3b c1		 cmp	 eax, ecx

; 222  : 		return 0;

  00014	7e 10		 jle	 SHORT $LN1@GetHeight

; 223  : 
; 224  : 	if( m_vTexList[m_iCurArray] )

  00016	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00019	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001c	74 08		 je	 SHORT $LN1@GetHeight

; 225  : 		return m_vTexList[m_iCurArray]->GetHeight();

  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?GetHeight@ioTexture@@QBEHXZ
$LN1@GetHeight:

; 226  : 
; 227  : 	return 0;

  00026	33 c0		 xor	 eax, eax

; 228  : }

  00028	c3		 ret	 0
?GetHeight@io2DRotateQuad@@QAEHXZ ENDP			; io2DRotateQuad::GetHeight
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEAAPAVioTexture@@XZ ; std::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEAAPAVioTexture@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEAAPAVioTexture@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBEAAPAVioTexture@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@V?$allocator@PAVioTexture@@@1@@Z ; std::_Vector_val<ioTexture *,std::allocator<ioTexture *> >::_Vector_val<ioTexture *,std::allocator<ioTexture *> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@V?$allocator@PAVioTexture@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@V?$allocator@PAVioTexture@@@1@@Z PROC ; std::_Vector_val<ioTexture *,std::allocator<ioTexture *> >::_Vector_val<ioTexture *,std::allocator<ioTexture *> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@V?$allocator@PAVioTexture@@@1@@Z ENDP ; std::_Vector_val<ioTexture *,std::allocator<ioTexture *> >::_Vector_val<ioTexture *,std::allocator<ioTexture *> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBEIXZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEII@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEII@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  0000d	c1 f8 02	 sar	 eax, 2
  00010	8b c8		 mov	 ecx, eax
  00012	d1 e9		 shr	 ecx, 1
  00014	2b d1		 sub	 edx, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	73 04		 jae	 SHORT $LN4@Grow_to
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  0001e	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00020	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00023	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEII@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVioTexture@@@std@@QAEPAPAVioTexture@@I@Z ; std::allocator<ioTexture *>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVioTexture@@@std@@QAEPAPAVioTexture@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVioTexture@@@std@@QAEPAPAVioTexture@@I@Z PROC ; std::allocator<ioTexture *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@PAVioTexture@@@std@@YAPAPAVioTexture@@IPAPAV1@@Z ; std::_Allocate<ioTexture *>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@PAVioTexture@@@std@@QAEPAPAVioTexture@@I@Z ENDP ; std::allocator<ioTexture *>::allocate
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@AAPAV2@@Z ; std::_Cons_val<std::allocator<ioTexture *>,ioTexture *,ioTexture * &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@AAPAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@AAPAV2@@Z PROC ; std::_Cons_val<std::allocator<ioTexture *>,ioTexture *,ioTexture * &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@AAPAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@AAPAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioTexture *>,ioTexture *,ioTexture * &>
_TEXT	ENDS
PUBLIC	??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00@Z ; std::_Move<ioTexture * *,ioTexture * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00@Z
_TEXT	SEGMENT
__Cat$507145 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00@Z PROC ; std::_Move<ioTexture * *,ioTexture * *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$507145[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTexture * *,ioTexture * *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00@Z ENDP ; std::_Move<ioTexture * *,ioTexture * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@@Z ; std::_Destroy_range<std::allocator<ioTexture *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioTexture *> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVioTexture@@@std@@@std@@YAXPAPAVioTexture@@0AAV?$allocator@PAVioTexture@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioTexture *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@ABQAV3@@Z ; std::allocator<ioTexture *>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@ABQAV3@@Z PROC ; std::allocator<ioTexture *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 		_Construct(_Ptr, _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN5@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@construct@2:

; 198  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?construct@?$allocator@PAVioTexture@@@std@@QAEXPAPAVioTexture@@ABQAV3@@Z ENDP ; std::allocator<ioTexture *>::construct
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVioTexture@@PAPAV1@V?$allocator@PAVioTexture@@@std@@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@@Z ; std::_Uninitialized_move<ioTexture * *,ioTexture * *,std::allocator<ioTexture *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVioTexture@@PAPAV1@V?$allocator@PAVioTexture@@@std@@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVioTexture@@PAPAV1@V?$allocator@PAVioTexture@@@std@@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@@Z PROC ; std::_Uninitialized_move<ioTexture * *,ioTexture * *,std::allocator<ioTexture *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	c1 fe 02	 sar	 esi, 2
  0000d	c1 e6 02	 shl	 esi, 2
  00010	56		 push	 esi
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	03 c6		 add	 eax, esi
  00022	5e		 pop	 esi

; 472  : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVioTexture@@PAPAV1@V?$allocator@PAVioTexture@@@std@@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@@Z ENDP ; std::_Uninitialized_move<ioTexture * *,ioTexture * *,std::allocator<ioTexture *> >
_TEXT	ENDS
PUBLIC	??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ; std::_Destroy<ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z PROC ; std::_Destroy<ioHashString>, COMDAT

; 62   : 	{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	_Ptr->~_Ty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 64   : 	}

  00006	5d		 pop	 ebp

; 63   : 	_Ptr->~_Ty();

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Destroy@VioHashString@@@std@@YAXPAVioHashString@@@Z ENDP ; std::_Destroy<ioHashString>
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.cpp
_TEXT	ENDS
;	COMDAT ?RenderDirect@ioRotateQuad@@UAEXPAVioRenderSystem@@@Z
_TEXT	SEGMENT
_pRenderSystem$ = 8					; size = 4
?RenderDirect@ioRotateQuad@@UAEXPAVioRenderSystem@@@Z PROC ; ioRotateQuad::RenderDirect, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   : 	if( m_pQuad )

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN1@RenderDire

; 23   : }

  0000a	5d		 pop	 ebp

; 22   : 		m_pQuad->Render( pRenderSystem );

  0000b	e9 00 00 00 00	 jmp	 ?Render@io2DRotateQuad@@QAEXPAVioRenderSystem@@@Z ; io2DRotateQuad::Render
$LN1@RenderDire:

; 23   : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?RenderDirect@ioRotateQuad@@UAEXPAVioRenderSystem@@@Z ENDP ; ioRotateQuad::RenderDirect
_TEXT	ENDS
PUBLIC	??0?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::vector<ioTexture *,std::allocator<ioTexture *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::vector<ioTexture *,std::allocator<ioTexture *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::vector<ioTexture *,std::allocator<ioTexture *> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::operator!=
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXPAPAVioTexture@@0@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXPAPAVioTexture@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXPAPAVioTexture@@0@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXPAPAVioTexture@@0@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXXZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@std@@QAE@PAPAVioTexture@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >::_Vector_iterator<std::_Vector_val<ioTexture *,std::allocator<ioTexture *> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@ABQAV2@@Z ; std::_Cons_val<std::allocator<ioTexture *>,ioTexture *,ioTexture * const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@ABQAV2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@ABQAV2@@Z PROC ; std::_Cons_val<std::allocator<ioTexture *>,ioTexture *,ioTexture * const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN9@Cons_val@2
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Cons_val@2:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@PAVioTexture@@@std@@PAVioTexture@@ABQAV3@@std@@YAXAAV?$allocator@PAVioTexture@@@0@PAPAVioTexture@@ABQAV2@@Z ENDP ; std::_Cons_val<std::allocator<ioTexture *>,ioTexture *,ioTexture * const &>
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVioTexture@@@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEPAPAVioTexture@@PAPAV2@00@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Umove<ioTexture * *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVioTexture@@@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEPAPAVioTexture@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVioTexture@@@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEPAPAVioTexture@@PAPAV2@00@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Umove<ioTexture * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioTexture@@PAPAV1@V?$allocator@PAVioTexture@@@std@@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@@Z ; std::_Uninitialized_move<ioTexture * *,ioTexture * *,std::allocator<ioTexture *> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVioTexture@@@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEPAPAVioTexture@@PAPAV2@00@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Umove<ioTexture * *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ; std::allocator<ioHashString>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z PROC ; std::allocator<ioHashString>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Destroy(_Ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 214  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?destroy@?$allocator@VioHashString@@@std@@QAEXPAVioHashString@@@Z ENDP ; std::allocator<ioHashString>::destroy
_TEXT	ENDS
PUBLIC	??1?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::~vector<ioTexture *,std::allocator<ioTexture *> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::~vector<ioTexture *,std::allocator<ioTexture *> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Tidy
??1?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::~vector<ioTexture *,std::allocator<ioTexture *> >
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@XZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@0@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$507489 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@0@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$507489[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTexture * *,ioTexture * *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@0@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXI@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::reserve
; Function compile flags: /Ogsp
;	COMDAT ?reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXI@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 		if (max_size() < _Count)

  00003	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	76 0b		 jbe	 SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN43@reserve:
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001d	2b 06		 sub	 eax, DWORD PTR [esi]
  0001f	c1 f8 02	 sar	 eax, 2
  00022	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00025	73 52		 jae	 SHORT $LN3@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	6a 00		 push	 0
  0002b	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate@PAVioTexture@@@std@@YAPAPAVioTexture@@IPAPAV1@@Z ; std::_Allocate<ioTexture *>

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00033	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00035	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00038	52		 push	 edx
  00039	8b d8		 mov	 ebx, eax
  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003e	53		 push	 ebx
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVioTexture@@PAPAV1@V?$allocator@PAVioTexture@@@std@@@std@@YAPAPAVioTexture@@PAPAV1@00AAV?$allocator@PAVioTexture@@@0@@Z ; std::_Uninitialized_move<ioTexture * *,ioTexture * *,std::allocator<ioTexture *> >

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);
; 757  : 			_RERAISE;
; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004b	2b f8		 sub	 edi, eax
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	c1 ff 02	 sar	 edi, 2

; 761  : 			if (this->_Myfirst != 0)

  00053	85 c0		 test	 eax, eax
  00055	74 07		 je	 SHORT $LN39@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);
; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	59		 pop	 ecx
$LN39@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  0005e	8b ce		 mov	 ecx, esi
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00069	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0006c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 770  : 			this->_Mylast = _Ptr + _Size;

  0006f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00072	5f		 pop	 edi

; 771  : 			this->_Myfirst = _Ptr;

  00073	89 1e		 mov	 DWORD PTR [esi], ebx
  00075	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00078	5b		 pop	 ebx
$LN3@reserve:
  00079	5e		 pop	 esi

; 772  : 			}
; 773  : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN42@reserve:
?reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXI@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::reserve
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z PROC ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>, COMDAT

; 286  : 	{	// destroy using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	_Alval.destroy(_Pdest);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pdest$[ebp]

; 288  : 	}

  00006	5d		 pop	 ebp

; 287  : 	_Alval.destroy(_Pdest);

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
??$_Dest_val@V?$allocator@VioHashString@@@std@@VioHashString@@@std@@YAXAAV?$allocator@VioHashString@@@0@PAVioHashString@@@Z ENDP ; std::_Dest_val<std::allocator<ioHashString>,ioHashString>
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Cat$507638 = 12					; size = 1
__Where$ = 12						; size = 4
?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase, COMDAT
; _this$ = ecx

; 1179 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1180 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1181 : 			_VIPTR(_Where));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	ff 75 0c	 push	 DWORD PTR __Cat$507638[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	50		 push	 eax
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	83 c0 04	 add	 eax, 4
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Move@PAPAVioTexture@@PAPAV1@@std@@YAPAPAVioTexture@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<ioTexture * *,ioTexture * *>

; 1182 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1183 : 		--this->_Mylast;
; 1184 : 		return (_Make_iter(_Where));

  00019	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
  00022	83 46 04 fc	 add	 DWORD PTR [esi+4], -4	; fffffffcH
  00026	89 08		 mov	 DWORD PTR [eax], ecx
  00028	5e		 pop	 esi

; 1185 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T507699 = -4						; size = 4
?clear@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXXZ PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::clear, COMDAT
; _this$ = ecx

; 1217 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1218 : 		erase(begin(), end());

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	8b 11		 mov	 edx, DWORD PTR [ecx]
  00009	50		 push	 eax
  0000a	52		 push	 edx
  0000b	8d 45 fc	 lea	 eax, DWORD PTR $T507699[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@0@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase

; 1219 : 		}

  00014	c9		 leave
  00015	c3		 ret	 0
?clear@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXXZ ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::clear
_TEXT	ENDS
PUBLIC	?_Reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXI@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Reserve
; Function compile flags: /Ogsp
;	COMDAT ?_Reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXI@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx

; 1292 : 		if (max_size() - _Count < _Size)

  0000d	ba ff ff ff 3f	 mov	 edx, 1073741823		; 3fffffffH
  00012	2b 55 08	 sub	 edx, DWORD PTR __Count$[ebp]
  00015	c1 f8 02	 sar	 eax, 2
  00018	3b d0		 cmp	 edx, eax
  0001a	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  00027	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0002a	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0002d	2b d1		 sub	 edx, ecx
  0002f	c1 fa 02	 sar	 edx, 2
  00032	3b c2		 cmp	 eax, edx
  00034	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IBEII@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Grow_to
  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXI@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::reserve
$LN1@Reserve:
  00046	5e		 pop	 esi

; 1298 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Reserve
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 96   : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN17@Destroy_ra
$LL3@Destroy_ra:

; 97   : 		_Dest_val(_Al, _First);

  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN17@Destroy_ra:

; 96   : 	for (; _First != _Last; ++_First)

  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL3@Destroy_ra
  00019	5e		 pop	 esi

; 98   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	??_7io2DRotateQuad@@6B@				; io2DRotateQuad::`vftable'
PUBLIC	??0io2DRotateQuad@@QAE@XZ			; io2DRotateQuad::io2DRotateQuad
PUBLIC	??_R4io2DRotateQuad@@6B@			; io2DRotateQuad::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVio2DRotateQuad@@@8			; io2DRotateQuad `RTTI Type Descriptor'
PUBLIC	??_R3io2DRotateQuad@@8				; io2DRotateQuad::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2io2DRotateQuad@@8				; io2DRotateQuad::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@io2DRotateQuad@@8			; io2DRotateQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Eio2DRotateQuad@@UAEPAXI@Z:PROC		; io2DRotateQuad::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@io2DRotateQuad@@8
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
rdata$r	SEGMENT
??_R1A@?0A@EA@io2DRotateQuad@@8 DD FLAT:??_R0?AVio2DRotateQuad@@@8 ; io2DRotateQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3io2DRotateQuad@@8
rdata$r	ENDS
;	COMDAT ??_R2io2DRotateQuad@@8
rdata$r	SEGMENT
??_R2io2DRotateQuad@@8 DD FLAT:??_R1A@?0A@EA@io2DRotateQuad@@8 ; io2DRotateQuad::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3io2DRotateQuad@@8
rdata$r	SEGMENT
??_R3io2DRotateQuad@@8 DD 00H				; io2DRotateQuad::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2io2DRotateQuad@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVio2DRotateQuad@@@8
_DATA	SEGMENT
??_R0?AVio2DRotateQuad@@@8 DD FLAT:??_7type_info@@6B@	; io2DRotateQuad `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVio2DRotateQuad@@', 00H
_DATA	ENDS
;	COMDAT ??_R4io2DRotateQuad@@6B@
rdata$r	SEGMENT
??_R4io2DRotateQuad@@6B@ DD 00H				; io2DRotateQuad::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVio2DRotateQuad@@@8
	DD	FLAT:??_R3io2DRotateQuad@@8
rdata$r	ENDS
;	COMDAT ??_7io2DRotateQuad@@6B@
CONST	SEGMENT
??_7io2DRotateQuad@@6B@ DD FLAT:??_R4io2DRotateQuad@@6B@ ; io2DRotateQuad::`vftable'
	DD	FLAT:??_Eio2DRotateQuad@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.cpp
CONST	ENDS
;	COMDAT ??0io2DRotateQuad@@QAE@XZ
_TEXT	SEGMENT
$T507906 = -4						; size = 4
??0io2DRotateQuad@@QAE@XZ PROC				; io2DRotateQuad::io2DRotateQuad, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx
  00008	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7io2DRotateQuad@@6B@
  00011	33 ff		 xor	 edi, edi
  00013	89 39		 mov	 DWORD PTR [ecx], edi
  00015	89 79 04	 mov	 DWORD PTR [ecx+4], edi
  00018	89 79 08	 mov	 DWORD PTR [ecx+8], edi

; 28   : 	m_pMeshData = NULL;

  0001b	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 29   : 	m_vTexList.clear();

  0001e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	50		 push	 eax
  00024	52		 push	 edx
  00025	8d 45 fc	 lea	 eax, DWORD PTR $T507906[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@0@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase

; 30   : 
; 31   : 	m_iCurArray = 0;
; 32   : 	m_iRenderX = -1;

  0002e	83 4e 18 ff	 or	 DWORD PTR [esi+24], -1

; 33   : 	m_iRenderY = -1;

  00032	83 4e 1c ff	 or	 DWORD PTR [esi+28], -1

; 34   : 
; 35   : 	D3DXQuaternionIdentity( &m_qtOriginal );

  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  0003c	f3 0f 11 46 2c	 movss	 DWORD PTR [esi+44], xmm0
  00041	f3 0f 11 46 28	 movss	 DWORD PTR [esi+40], xmm0
  00046	f3 0f 11 46 24	 movss	 DWORD PTR [esi+36], xmm0
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00053	5f		 pop	 edi
  00054	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 36   : }

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	c9		 leave
  0005d	c3		 ret	 0
??0io2DRotateQuad@@QAE@XZ ENDP				; io2DRotateQuad::io2DRotateQuad
_TEXT	ENDS
PUBLIC	??1io2DRotateQuad@@UAE@XZ			; io2DRotateQuad::~io2DRotateQuad
EXTRN	__imp_?GetSingleton@ioTextureManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?DeleteAllBindingBuffers@ioMeshData@@QAEXXZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1io2DRotateQuad@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1io2DRotateQuad@@UAE@XZ$0
__ehfuncinfo$??1io2DRotateQuad@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1io2DRotateQuad@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.cpp
xdata$x	ENDS
;	COMDAT ??1io2DRotateQuad@@UAE@XZ
_TEXT	SEGMENT
$T508077 = -24						; size = 4
$T507936 = -24						; size = 4
_this$ = -20						; size = 4
_pTex$505725 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1io2DRotateQuad@@UAE@XZ PROC				; io2DRotateQuad::~io2DRotateQuad, COMDAT
; _this$ = ecx

; 39   : {

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1io2DRotateQuad@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7io2DRotateQuad@@6B@

; 40   : 	if( m_pMeshData )

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	85 c9		 test	 ecx, ecx
  00020	74 20		 je	 SHORT $LN5@io2DRotate

; 41   : 	{
; 42   : 		m_pMeshData->DeleteAllBindingBuffers();

  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DeleteAllBindingBuffers@ioMeshData@@QAEXXZ

; 43   : 
; 44   : 		delete m_pMeshData;

  00028	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0002b	85 ff		 test	 edi, edi
  0002d	74 0f		 je	 SHORT $LN11@io2DRotate
  0002f	8b cf		 mov	 ecx, edi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioMeshData@@QAE@XZ
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	59		 pop	 ecx
$LN11@io2DRotate:

; 45   : 		m_pMeshData = NULL;

  0003e	83 66 04 00	 and	 DWORD PTR [esi+4], 0
$LN5@io2DRotate:

; 46   : 	}
; 47   : 
; 48   : 	std::vector<ioTexture*>::iterator iter = m_vTexList.begin();

  00042	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00045	eb 28		 jmp	 SHORT $LN64@io2DRotate
$LL4@io2DRotate:

; 50   : 	{
; 51   : 		ioTexture *pTex = *iter;

  00047	8b 07		 mov	 eax, DWORD PTR [edi]
  00049	89 45 f0	 mov	 DWORD PTR _pTex$505725[ebp], eax

; 52   : 		if( pTex )

  0004c	85 c0		 test	 eax, eax
  0004e	74 1f		 je	 SHORT $LN64@io2DRotate

; 53   : 		{
; 54   : 			DESTROY_TEXTURE( pTex );

  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioTextureManager@@SAAAV1@XZ
  00056	ff 75 f0	 push	 DWORD PTR _pTex$505725[ebp]
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 52 14	 call	 DWORD PTR [edx+20]

; 55   : 			iter = m_vTexList.erase( iter );

  00060	57		 push	 edi
  00061	8d 45 e8	 lea	 eax, DWORD PTR $T507936[ebp]
  00064	50		 push	 eax
  00065	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00068	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase
  0006d	8b 38		 mov	 edi, DWORD PTR [eax]
$LN64@io2DRotate:

; 49   : 	while( iter != m_vTexList.end() )

  0006f	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  00072	75 d3		 jne	 SHORT $LL4@io2DRotate

; 56   : 		}
; 57   : 	}
; 58   : 	m_vTexList.clear();

  00074	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00077	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0007a	50		 push	 eax
  0007b	51		 push	 ecx
  0007c	8d 45 e8	 lea	 eax, DWORD PTR $T508077[ebp]
  0007f	50		 push	 eax
  00080	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00083	e8 00 00 00 00	 call	 ?erase@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@@2@0@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::erase

; 59   : }

  00088	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0008f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXXZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Tidy
  00094	e8 00 00 00 00	 call	 __EH_epilog3
  00099	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1io2DRotateQuad@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAE@XZ ; std::vector<ioTexture *,std::allocator<ioTexture *> >::~vector<ioTexture *,std::allocator<ioTexture *> >
__ehhandler$??1io2DRotateQuad@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1io2DRotateQuad@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1io2DRotateQuad@@UAE@XZ ENDP				; io2DRotateQuad::~io2DRotateQuad
PUBLIC	?push_back@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXABQAVioTexture@@@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXABQAVioTexture@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXABQAVioTexture@@@Z PROC ; std::vector<ioTexture *,std::allocator<ioTexture *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 27		 jae	 SHORT $LN4@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 21		 ja	 SHORT $LN4@push_back

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 980  : 			if (this->_Mylast == this->_Myend)

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN3@push_back

; 981  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXI@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Reserve
$LN3@push_back:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

  0002a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002d	85 c0		 test	 eax, eax
  0002f	74 20		 je	 SHORT $LN39@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]

; 986  : 			++this->_Mylast;
; 987  : 			}
; 988  : 		else

  00036	eb 17		 jmp	 SHORT $LN46@push_back
$LN4@push_back:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

  00038	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0003b	75 09		 jne	 SHORT $LN1@push_back

; 991  : 				_Reserve(1);

  0003d	6a 01		 push	 1
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@IAEXI@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::_Reserve
$LN1@push_back:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

  00046	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00049	85 c0		 test	 eax, eax
  0004b	74 04		 je	 SHORT $LN39@push_back
  0004d	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN46@push_back:
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
$LN39@push_back:

; 996  : 			++this->_Mylast;

  00051	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 997  : 			}
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?push_back@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXABQAVioTexture@@@Z ENDP ; std::vector<ioTexture *,std::allocator<ioTexture *> >::push_back
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ioHashString> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN21@Destroy_ra@2
$LL7@Destroy_ra@2:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN21@Destroy_ra@2:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL7@Destroy_ra@2
  00019	5e		 pop	 esi

; 89   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Destroy_range@V?$allocator@VioHashString@@@std@@@std@@YAXPAVioHashString@@0AAV?$allocator@VioHashString@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ioHashString> >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gio2DRotateQuad@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gio2DRotateQuad@@UAEPAXI@Z PROC			; io2DRotateQuad::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1io2DRotateQuad@@UAE@XZ ; io2DRotateQuad::~io2DRotateQuad
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@5
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@5:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_Gio2DRotateQuad@@UAEPAXI@Z ENDP			; io2DRotateQuad::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 0b		 jmp	 SHORT $LN23@Destroy
$LL9@Destroy:
  00009	8b ce		 mov	 ecx, esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00011	83 c6 10	 add	 esi, 16			; 00000010H
$LN23@Destroy:
  00014	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00017	75 f0		 jne	 SHORT $LL9@Destroy
  00019	5e		 pop	 esi

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?_Destroy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXPAVioHashString@@0@Z ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 28		 je	 SHORT $LN24@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	53		 push	 ebx
  00009	57		 push	 edi
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

  00010	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	eb 0b		 jmp	 SHORT $LN28@Tidy@2
$LL12@Tidy@2:
  00017	8b cf		 mov	 ecx, edi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0001f	83 c7 10	 add	 edi, 16			; 00000010H
$LN28@Tidy@2:
  00022	3b fb		 cmp	 edi, ebx
  00024	75 f1		 jne	 SHORT $LL12@Tidy@2

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  00026	ff 36		 push	 DWORD PTR [esi]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	5f		 pop	 edi
  0002f	5b		 pop	 ebx
$LN24@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00030	33 c0		 xor	 eax, eax
  00032	89 06		 mov	 DWORD PTR [esi], eax

; 1310 : 		this->_Mylast = 0;

  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1311 : 		this->_Myend = 0;

  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi

; 1312 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ PROC ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ENDP ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
_TEXT	ENDS
PUBLIC	?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z ; io2DRotateQuad::InitResource
EXTRN	__imp_?SetBinding@ioMeshData@@QAEXIPAVioVertexBufferInstance@@@Z:PROC
EXTRN	__imp_?CreateExclusiveInstance@ioVertexBufferManager@@QAEPAVioVertexBufferInstance@@W4BufferType@@KHW4BufferUsage@@@Z:PROC
EXTRN	__imp_?GetSingleton@ioVertexBufferManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?InsertStreamSource@ioMeshData@@QAEXHK@Z:PROC
EXTRN	__imp_??0ioMeshData@@QAE@XZ:PROC
EXTRN	__imp_?CreateTexture@ioTextureManager@@QAEPAVioTexture@@ABVioHashString@@KHW4TextureQuality@@_N22@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z$1
__ehfuncinfo$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\io2drotatequad.cpp
xdata$x	ENDS
;	COMDAT ?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z
_TEXT	SEGMENT
$T508487 = -20						; size = 4
_pTexture$505743 = -20					; size = 4
tv178 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_vTexNameList$ = 8					; size = 16
?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z PROC ; io2DRotateQuad::InitResource, COMDAT
; _this$ = ecx

; 62   : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 63   : 	int iSize = vTexNameList.size();

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _vTexNameList$[ebp+4]
  00011	2b 45 08	 sub	 eax, DWORD PTR _vTexNameList$[ebp]
  00014	33 db		 xor	 ebx, ebx
  00016	c1 f8 04	 sar	 eax, 4
  00019	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 64   : 	for( int i=0; i<iSize; ++i )

  0001c	3b c3		 cmp	 eax, ebx
  0001e	7e 3d		 jle	 SHORT $LN4@InitResour

; 62   : {

  00020	33 ff		 xor	 edi, edi
  00022	89 45 f0	 mov	 DWORD PTR tv178[ebp], eax
$LN6@InitResour:

; 64   : 	for( int i=0; i<iSize; ++i )

  00025	8b 45 08	 mov	 eax, DWORD PTR _vTexNameList$[ebp]

; 65   : 	{
; 66   : 		ioTexture *pTexture = g_TextureMgr.CreateTexture( vTexNameList[i], 0, 1, TQ_HIGH );

  00028	53		 push	 ebx
  00029	6a 01		 push	 1
  0002b	53		 push	 ebx
  0002c	6a 03		 push	 3
  0002e	6a 01		 push	 1
  00030	03 c7		 add	 eax, edi
  00032	53		 push	 ebx
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioTextureManager@@SAAAV1@XZ
  0003a	8b c8		 mov	 ecx, eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateTexture@ioTextureManager@@QAEPAVioTexture@@ABVioHashString@@KHW4TextureQuality@@_N22@Z
  00042	89 45 ec	 mov	 DWORD PTR _pTexture$505743[ebp], eax

; 67   : 		if( pTexture )

  00045	3b c3		 cmp	 eax, ebx
  00047	74 0c		 je	 SHORT $LN5@InitResour

; 68   : 			m_vTexList.push_back( pTexture );

  00049	8d 45 ec	 lea	 eax, DWORD PTR _pTexture$505743[ebp]
  0004c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVioTexture@@V?$allocator@PAVioTexture@@@std@@@std@@QAEXABQAVioTexture@@@Z ; std::vector<ioTexture *,std::allocator<ioTexture *> >::push_back
$LN5@InitResour:

; 64   : 	for( int i=0; i<iSize; ++i )

  00055	83 c7 10	 add	 edi, 16			; 00000010H
  00058	ff 4d f0	 dec	 DWORD PTR tv178[ebp]
  0005b	75 c8		 jne	 SHORT $LN6@InitResour
$LN4@InitResour:

; 69   : 	}
; 70   : 
; 71   : 	if( m_vTexList.empty() )

  0005d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00060	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]

; 72   : 		return;

  00063	74 76		 je	 SHORT $LN36@InitResour

; 73   : 
; 74   : 	SAFEDELETE( m_pMeshData );

  00065	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00068	3b fb		 cmp	 edi, ebx
  0006a	74 12		 je	 SHORT $LN1@InitResour
  0006c	8b cf		 mov	 ecx, edi
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioMeshData@@QAE@XZ
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007a	59		 pop	 ecx
  0007b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
$LN1@InitResour:

; 75   : 
; 76   : 	m_pMeshData = new ioMeshData;

  0007e	6a 14		 push	 20			; 00000014H
  00080	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00085	59		 pop	 ecx
  00086	8b c8		 mov	 ecx, eax
  00088	89 4d ec	 mov	 DWORD PTR $T508487[ebp], ecx
  0008b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008f	3b cb		 cmp	 ecx, ebx
  00091	74 08		 je	 SHORT $LN11@InitResour
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioMeshData@@QAE@XZ
  00099	eb 02		 jmp	 SHORT $LN12@InitResour
$LN11@InitResour:
  0009b	33 c0		 xor	 eax, eax
$LN12@InitResour:

; 77   : 	m_pMeshData->InsertStreamSource( 0, IOFVF_POSITIONW | IOFVF_UV0 );

  0009d	bf 04 01 00 00	 mov	 edi, 260		; 00000104H
  000a2	57		 push	 edi
  000a3	53		 push	 ebx
  000a4	8b c8		 mov	 ecx, eax
  000a6	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000a9	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?InsertStreamSource@ioMeshData@@QAEXHK@Z

; 78   : 
; 79   : 	ioVertexBufferInstance *pVtxInstance = NULL;
; 80   : 	pVtxInstance = g_VtxBufMgr.CreateExclusiveInstance( BT_MANAGED,
; 81   : 														IOFVF_POSITIONW | IOFVF_UV0,
; 82   : 														4 );

  000b2	53		 push	 ebx
  000b3	6a 04		 push	 4
  000b5	57		 push	 edi
  000b6	6a 01		 push	 1
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioVertexBufferManager@@SAAAV1@XZ
  000be	8b c8		 mov	 ecx, eax
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?CreateExclusiveInstance@ioVertexBufferManager@@QAEPAVioVertexBufferInstance@@W4BufferType@@KHW4BufferUsage@@@Z

; 83   : 
; 84   : 	m_pMeshData->SetBinding( 0, pVtxInstance );

  000c6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000c9	50		 push	 eax
  000ca	53		 push	 ebx
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBinding@ioMeshData@@QAEXIPAVioVertexBufferInstance@@@Z

; 85   : 	m_pMeshData->m_iVertexCount = 4;

  000d1	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000d4	c7 46 0c 04 00
	00 00		 mov	 DWORD PTR [esi+12], 4
$LN36@InitResour:

; 86   : }

  000db	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000df	8d 4d 08	 lea	 ecx, DWORD PTR _vTexNameList$[ebp]
  000e2	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@IAEXXZ ; std::vector<ioHashString,std::allocator<ioHashString> >::_Tidy
  000e7	e8 00 00 00 00	 call	 __EH_epilog3
  000ec	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _vTexNameList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@QAE@XZ ; std::vector<ioHashString,std::allocator<ioHashString> >::~vector<ioHashString,std::allocator<ioHashString> >
__unwindfunclet$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z$1:
  00008	ff 75 ec	 push	 DWORD PTR $T508487[ebp]
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	59		 pop	 ecx
  00011	c3		 ret	 0
__ehhandler$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitResource@io2DRotateQuad@@QAEXV?$vector@VioHashString@@V?$allocator@VioHashString@@@std@@@std@@@Z ENDP ; io2DRotateQuad::InitResource
END
