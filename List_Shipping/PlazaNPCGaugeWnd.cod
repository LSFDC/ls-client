; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\PlazaNPCGaugeWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?m_bPosToDefualt@PlazaNPCGaugeWnd@@1_NA		; PlazaNPCGaugeWnd::m_bPosToDefualt
_BSS	SEGMENT
?m_bPosToDefualt@PlazaNPCGaugeWnd@@1_NA DB 01H DUP (?)	; PlazaNPCGaugeWnd::m_bPosToDefualt
_BSS	ENDS
PUBLIC	??_7PlazaNPCGaugeWnd@@6B@			; PlazaNPCGaugeWnd::`vftable'
PUBLIC	??0PlazaNPCGaugeWnd@@QAE@XZ			; PlazaNPCGaugeWnd::PlazaNPCGaugeWnd
PUBLIC	??_R4PlazaNPCGaugeWnd@@6B@			; PlazaNPCGaugeWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPlazaNPCGaugeWnd@@@8			; PlazaNPCGaugeWnd `RTTI Type Descriptor'
PUBLIC	??_R3PlazaNPCGaugeWnd@@8			; PlazaNPCGaugeWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PlazaNPCGaugeWnd@@8			; PlazaNPCGaugeWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PlazaNPCGaugeWnd@@8		; PlazaNPCGaugeWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioMovingWnd@@8			; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioMovingWnd@@@8				; ioMovingWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioMovingWnd@@8				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioMovingWnd@@8				; ioMovingWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderImage@PlazaNPCGaugeWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; PlazaNPCGaugeWnd::AddRenderImage
PUBLIC	?SetPositionToDefault@PlazaNPCGaugeWnd@@UAEXHH_N0@Z ; PlazaNPCGaugeWnd::SetPositionToDefault
PUBLIC	?OnRender@PlazaNPCGaugeWnd@@MAEXXZ		; PlazaNPCGaugeWnd::OnRender
PUBLIC	?OnProcess@PlazaNPCGaugeWnd@@MAEXM@Z		; PlazaNPCGaugeWnd::OnProcess
PUBLIC	?iwm_create@PlazaNPCGaugeWnd@@UAEXXZ		; PlazaNPCGaugeWnd::iwm_create
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1IORandom@@UAE@XZ:PROC			; IORandom::~IORandom
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??1ioMovingWnd@@UAE@XZ:PROC
EXTRN	??0ioAnimationState@@QAE@XZ:PROC		; ioAnimationState::ioAnimationState
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0IORandom@@QAE@XZ:PROC			; IORandom::IORandom
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
EXTRN	__imp_??0ioMovingWnd@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::ParseExtraInfo
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z:PROC ; ioMovingWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z:PROC ; ioMovingWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_command@ioWnd@@UAEXPAV1@HK@Z:PROC		; ioWnd::iwm_command
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_show@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_show
EXTRN	?iwm_hide@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_hide
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EPlazaNPCGaugeWnd@@UAEPAXI@Z:PROC		; PlazaNPCGaugeWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\plazanpcgaugewnd.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioMovingWnd@@8
rdata$r	SEGMENT
??_R2ioMovingWnd@@8 DD FLAT:??_R1A@?0A@EA@ioMovingWnd@@8 ; ioMovingWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioMovingWnd@@8
rdata$r	SEGMENT
??_R3ioMovingWnd@@8 DD 00H				; ioMovingWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioMovingWnd@@@8
_DATA	SEGMENT
??_R0?AVioMovingWnd@@@8 DD FLAT:??_7type_info@@6B@	; ioMovingWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioMovingWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioMovingWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioMovingWnd@@8 DD FLAT:??_R0?AVioMovingWnd@@@8 ; ioMovingWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioMovingWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PlazaNPCGaugeWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PlazaNPCGaugeWnd@@8 DD FLAT:??_R0?AVPlazaNPCGaugeWnd@@@8 ; PlazaNPCGaugeWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PlazaNPCGaugeWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2PlazaNPCGaugeWnd@@8
rdata$r	SEGMENT
??_R2PlazaNPCGaugeWnd@@8 DD FLAT:??_R1A@?0A@EA@PlazaNPCGaugeWnd@@8 ; PlazaNPCGaugeWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioMovingWnd@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3PlazaNPCGaugeWnd@@8
rdata$r	SEGMENT
??_R3PlazaNPCGaugeWnd@@8 DD 00H				; PlazaNPCGaugeWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2PlazaNPCGaugeWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPlazaNPCGaugeWnd@@@8
_DATA	SEGMENT
??_R0?AVPlazaNPCGaugeWnd@@@8 DD FLAT:??_7type_info@@6B@	; PlazaNPCGaugeWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPlazaNPCGaugeWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PlazaNPCGaugeWnd@@6B@
rdata$r	SEGMENT
??_R4PlazaNPCGaugeWnd@@6B@ DD 00H			; PlazaNPCGaugeWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPlazaNPCGaugeWnd@@@8
	DD	FLAT:??_R3PlazaNPCGaugeWnd@@8
rdata$r	ENDS
;	COMDAT ??_7PlazaNPCGaugeWnd@@6B@
CONST	SEGMENT
??_7PlazaNPCGaugeWnd@@6B@ DD FLAT:??_R4PlazaNPCGaugeWnd@@6B@ ; PlazaNPCGaugeWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@PlazaNPCGaugeWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@PlazaNPCGaugeWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@PlazaNPCGaugeWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@PlazaNPCGaugeWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioMovingWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@PlazaNPCGaugeWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioMovingWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EPlazaNPCGaugeWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0PlazaNPCGaugeWnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$3
__ehfuncinfo$??0PlazaNPCGaugeWnd@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0PlazaNPCGaugeWnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0PlazaNPCGaugeWnd@@QAE@XZ
_TEXT	SEGMENT
$T506731 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0PlazaNPCGaugeWnd@@QAE@XZ PROC			; PlazaNPCGaugeWnd::PlazaNPCGaugeWnd, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0PlazaNPCGaugeWnd@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioMovingWnd@@QAE@XZ
  00017	33 db		 xor	 ebx, ebx
  00019	8d 8e e8 01 00
	00		 lea	 ecx, DWORD PTR [esi+488]
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PlazaNPCGaugeWnd@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@XZ
  0002e	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  00034	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00038	e8 00 00 00 00	 call	 ??0IORandom@@QAE@XZ	; IORandom::IORandom

; 9    : 	m_pIconBack[GAUGE_NORMAL_NPC]		= NULL;
; 10   : 	m_pIconBack[GAUGE_AWAKENING_NPC]    = NULL;
; 11   : 	m_pGauge[GAUGE_NORMAL_NPC]			= NULL;
; 12   : 	m_pGauge[GAUGE_AWAKENING_NPC]       = NULL;
; 13   : 
; 14   : 	m_pGaugeBack		= NULL;
; 15   : 	m_pGaugeWhite		= NULL;	
; 16   : 	m_pWhiteLine		= NULL;
; 17   : 	m_pMonsterIcon		= NULL;
; 18   : 	m_pNpcImgName		= NULL;
; 19   : 	m_pAttackEffect1	= NULL;
; 20   : 	m_pAttackEffect2	= NULL;
; 21   : 
; 22   : 	m_pRaidGauge		= NULL;
; 23   : 	m_pRaidGaugeBack	= NULL;
; 24   : 	m_pRaidGaugeWhite	= NULL;
; 25   : 
; 26   : 	m_iBlindOffSetY   = 0;
; 27   : 	m_iPreBlindOffSetY= 0;
; 28   : 	m_iDefaultX       = 0;
; 29   : 	m_iDefaultY       = 0;
; 30   : 	m_nVibY				= 0;
; 31   : 
; 32   : 	m_eGaugeType = GAUGE_NORMAL_NPC;
; 33   : 	m_fMaxHP = m_fCurHP = m_fAniHP = 0.0f;

  0003d	0f 57 c0	 xorps	 xmm0, xmm0

; 34   : 	m_fCurAniTime = 0.0f;
; 35   : 
; 36   : 	m_bScreen = false;
; 37   : 	m_fScreenTime = 0.0f;
; 38   : 	m_fBlinkTime = 0.f;
; 39   : 
; 40   : 	m_dwTimer = 0;
; 41   : 
; 42   : 	m_pAniState = new ioAnimationState;

  00040	6a 2c		 push	 44			; 0000002cH
  00042	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00046	89 9e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ebx
  0004c	89 9e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ebx
  00052	89 9e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ebx
  00058	89 9e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ebx
  0005e	89 9e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ebx
  00064	89 9e a4 01 00
	00		 mov	 DWORD PTR [esi+420], ebx
  0006a	89 9e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ebx
  00070	89 9e b4 01 00
	00		 mov	 DWORD PTR [esi+436], ebx
  00076	89 9e b8 01 00
	00		 mov	 DWORD PTR [esi+440], ebx
  0007c	89 9e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ebx
  00082	89 9e ac 01 00
	00		 mov	 DWORD PTR [esi+428], ebx
  00088	89 9e bc 01 00
	00		 mov	 DWORD PTR [esi+444], ebx
  0008e	89 9e c0 01 00
	00		 mov	 DWORD PTR [esi+448], ebx
  00094	89 9e c4 01 00
	00		 mov	 DWORD PTR [esi+452], ebx
  0009a	89 9e c8 01 00
	00		 mov	 DWORD PTR [esi+456], ebx
  000a0	89 9e cc 01 00
	00		 mov	 DWORD PTR [esi+460], ebx
  000a6	89 9e d0 01 00
	00		 mov	 DWORD PTR [esi+464], ebx
  000ac	89 9e d4 01 00
	00		 mov	 DWORD PTR [esi+468], ebx
  000b2	89 9e d8 01 00
	00		 mov	 DWORD PTR [esi+472], ebx
  000b8	89 9e e4 01 00
	00		 mov	 DWORD PTR [esi+484], ebx
  000be	f3 0f 11 86 04
	02 00 00	 movss	 DWORD PTR [esi+516], xmm0
  000c6	f3 0f 11 86 00
	02 00 00	 movss	 DWORD PTR [esi+512], xmm0
  000ce	f3 0f 11 86 fc
	01 00 00	 movss	 DWORD PTR [esi+508], xmm0
  000d6	f3 0f 11 86 08
	02 00 00	 movss	 DWORD PTR [esi+520], xmm0
  000de	88 9e 0c 02 00
	00		 mov	 BYTE PTR [esi+524], bl
  000e4	f3 0f 11 86 10
	02 00 00	 movss	 DWORD PTR [esi+528], xmm0
  000ec	f3 0f 11 86 14
	02 00 00	 movss	 DWORD PTR [esi+532], xmm0
  000f4	89 9e f8 01 00
	00		 mov	 DWORD PTR [esi+504], ebx
  000fa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ff	59		 pop	 ecx
  00100	8b c8		 mov	 ecx, eax
  00102	89 4d ec	 mov	 DWORD PTR $T506731[ebp], ecx
  00105	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00109	3b cb		 cmp	 ecx, ebx
  0010b	74 07		 je	 SHORT $LN3@PlazaNPCGa
  0010d	e8 00 00 00 00	 call	 ??0ioAnimationState@@QAE@XZ ; ioAnimationState::ioAnimationState
  00112	eb 02		 jmp	 SHORT $LN4@PlazaNPCGa
$LN3@PlazaNPCGa:
  00114	33 c0		 xor	 eax, eax
$LN4@PlazaNPCGa:
  00116	89 86 e4 0b 00
	00		 mov	 DWORD PTR [esi+3044], eax

; 43   : 
; 44   : 	m_bIsRaidMode = false;

  0011c	88 9e e8 0b 00
	00		 mov	 BYTE PTR [esi+3048], bl

; 45   : 	m_nCurRank = 0;

  00122	89 9e ec 0b 00
	00		 mov	 DWORD PTR [esi+3052], ebx

; 46   : 	m_nTotalPlayer = 0;

  00128	89 9e f0 0b 00
	00		 mov	 DWORD PTR [esi+3056], ebx

; 47   : }

  0012e	8b c6		 mov	 eax, esi
  00130	e8 00 00 00 00	 call	 __EH_epilog3
  00135	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  00021	e9 00 00 00 00	 jmp	 ??1IORandom@@UAE@XZ	; IORandom::~IORandom
__unwindfunclet$??0PlazaNPCGaugeWnd@@QAE@XZ$3:
  00026	ff 75 ec	 push	 DWORD PTR $T506731[ebp]
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	c3		 ret	 0
__ehhandler$??0PlazaNPCGaugeWnd@@QAE@XZ:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PlazaNPCGaugeWnd@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PlazaNPCGaugeWnd@@QAE@XZ ENDP			; PlazaNPCGaugeWnd::PlazaNPCGaugeWnd
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return9@@YAIXZ					; return9
; Function compile flags: /Ogsp
;	COMDAT ?return9@@YAIXZ
_TEXT	SEGMENT
?return9@@YAIXZ PROC					; return9, COMDAT

; 20   : 	__forceinline unsigned int return9() { __asm mov eax, 9 };

  00000	b8 09 00 00 00	 mov	 eax, 9
  00005	c3		 ret	 0
?return9@@YAIXZ ENDP					; return9
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	??_C@_04IAEKAMNC@YPos?$AA@			; `string'
PUBLIC	??_C@_04LNCKCFGC@XPos?$AA@			; `string'
PUBLIC	??_C@_0BB@GPDONEMJ@PlazaNPCGaugeWnd?$AA@	; `string'
PUBLIC	??1PlazaNPCGaugeWnd@@UAE@XZ			; PlazaNPCGaugeWnd::~PlazaNPCGaugeWnd
EXTRN	?GUIPosSaveInt@ioSP2GUIManager@@QAEHPBD0HH@Z:PROC ; ioSP2GUIManager::GUIPosSaveInt
EXTRN	?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ:PROC	; ioSP2GUIManager::GetSingleton
EXTRN	?Height@Setting@@SAHXZ:PROC			; Setting::Height
EXTRN	?Width@Setting@@SAHXZ:PROC			; Setting::Width
;	COMDAT ??_C@_04IAEKAMNC@YPos?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\plazanpcgaugewnd.cpp
CONST	SEGMENT
??_C@_04IAEKAMNC@YPos?$AA@ DB 'YPos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNCKCFGC@XPos?$AA@
CONST	SEGMENT
??_C@_04LNCKCFGC@XPos?$AA@ DB 'XPos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GPDONEMJ@PlazaNPCGaugeWnd?$AA@
CONST	SEGMENT
??_C@_0BB@GPDONEMJ@PlazaNPCGaugeWnd?$AA@ DB 'PlazaNPCGaugeWnd', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1PlazaNPCGaugeWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1PlazaNPCGaugeWnd@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1PlazaNPCGaugeWnd@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1PlazaNPCGaugeWnd@@UAE@XZ$2
__ehfuncinfo$??1PlazaNPCGaugeWnd@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1PlazaNPCGaugeWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1PlazaNPCGaugeWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1PlazaNPCGaugeWnd@@UAE@XZ PROC			; PlazaNPCGaugeWnd::~PlazaNPCGaugeWnd, COMDAT
; _this$ = ecx

; 50   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1PlazaNPCGaugeWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PlazaNPCGaugeWnd@@6B@

; 51   : 	SAFEDELETE( m_pIconBack[GAUGE_NORMAL_NPC] );

  00017	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0001d	33 db		 xor	 ebx, ebx
  0001f	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00026	3b cb		 cmp	 ecx, ebx
  00028	74 0d		 je	 SHORT $LN18@PlazaNPCGa@2
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	6a 01		 push	 1
  0002e	ff 50 40	 call	 DWORD PTR [eax+64]
  00031	89 9e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ebx
$LN18@PlazaNPCGa@2:

; 52   : 	SAFEDELETE( m_pIconBack[GAUGE_AWAKENING_NPC] );

  00037	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  0003d	3b cb		 cmp	 ecx, ebx
  0003f	74 0d		 je	 SHORT $LN17@PlazaNPCGa@2
  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	6a 01		 push	 1
  00045	ff 50 40	 call	 DWORD PTR [eax+64]
  00048	89 9e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ebx
$LN17@PlazaNPCGa@2:

; 53   : 	SAFEDELETE( m_pGaugeBack );

  0004e	8b 8e a0 01 00
	00		 mov	 ecx, DWORD PTR [esi+416]
  00054	3b cb		 cmp	 ecx, ebx
  00056	74 0d		 je	 SHORT $LN16@PlazaNPCGa@2
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	6a 01		 push	 1
  0005c	ff 50 40	 call	 DWORD PTR [eax+64]
  0005f	89 9e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ebx
$LN16@PlazaNPCGa@2:

; 54   : 	SAFEDELETE( m_pGaugeWhite );

  00065	8b 8e a4 01 00
	00		 mov	 ecx, DWORD PTR [esi+420]
  0006b	3b cb		 cmp	 ecx, ebx
  0006d	74 0d		 je	 SHORT $LN15@PlazaNPCGa@2
  0006f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00071	6a 01		 push	 1
  00073	ff 50 40	 call	 DWORD PTR [eax+64]
  00076	89 9e a4 01 00
	00		 mov	 DWORD PTR [esi+420], ebx
$LN15@PlazaNPCGa@2:

; 55   : 	SAFEDELETE( m_pGauge[GAUGE_NORMAL_NPC] );

  0007c	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  00082	3b cb		 cmp	 ecx, ebx
  00084	74 0d		 je	 SHORT $LN14@PlazaNPCGa@2
  00086	8b 01		 mov	 eax, DWORD PTR [ecx]
  00088	6a 01		 push	 1
  0008a	ff 50 40	 call	 DWORD PTR [eax+64]
  0008d	89 9e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ebx
$LN14@PlazaNPCGa@2:

; 56   : 	SAFEDELETE( m_pGauge[GAUGE_AWAKENING_NPC] );

  00093	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]
  00099	3b cb		 cmp	 ecx, ebx
  0009b	74 0d		 je	 SHORT $LN13@PlazaNPCGa@2
  0009d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009f	6a 01		 push	 1
  000a1	ff 50 40	 call	 DWORD PTR [eax+64]
  000a4	89 9e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ebx
$LN13@PlazaNPCGa@2:

; 57   : 	SAFEDELETE( m_pWhiteLine );

  000aa	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  000b0	3b cb		 cmp	 ecx, ebx
  000b2	74 0d		 je	 SHORT $LN12@PlazaNPCGa@2
  000b4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b6	6a 01		 push	 1
  000b8	ff 50 40	 call	 DWORD PTR [eax+64]
  000bb	89 9e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ebx
$LN12@PlazaNPCGa@2:

; 58   : 	SAFEDELETE( m_pMonsterIcon );

  000c1	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  000c7	3b cb		 cmp	 ecx, ebx
  000c9	74 0d		 je	 SHORT $LN11@PlazaNPCGa@2
  000cb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cd	6a 01		 push	 1
  000cf	ff 50 40	 call	 DWORD PTR [eax+64]
  000d2	89 9e b4 01 00
	00		 mov	 DWORD PTR [esi+436], ebx
$LN11@PlazaNPCGa@2:

; 59   : 	SAFEDELETE( m_pNpcImgName );

  000d8	8b 8e b8 01 00
	00		 mov	 ecx, DWORD PTR [esi+440]
  000de	3b cb		 cmp	 ecx, ebx
  000e0	74 0d		 je	 SHORT $LN10@PlazaNPCGa@2
  000e2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e4	6a 01		 push	 1
  000e6	ff 50 40	 call	 DWORD PTR [eax+64]
  000e9	89 9e b8 01 00
	00		 mov	 DWORD PTR [esi+440], ebx
$LN10@PlazaNPCGa@2:

; 60   : 	SAFEDELETE( m_pAttackEffect1 );

  000ef	8b 8e a8 01 00
	00		 mov	 ecx, DWORD PTR [esi+424]
  000f5	3b cb		 cmp	 ecx, ebx
  000f7	74 0d		 je	 SHORT $LN9@PlazaNPCGa@2
  000f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fb	6a 01		 push	 1
  000fd	ff 50 40	 call	 DWORD PTR [eax+64]
  00100	89 9e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ebx
$LN9@PlazaNPCGa@2:

; 61   : 	SAFEDELETE( m_pAttackEffect2 );

  00106	8b 8e ac 01 00
	00		 mov	 ecx, DWORD PTR [esi+428]
  0010c	3b cb		 cmp	 ecx, ebx
  0010e	74 0d		 je	 SHORT $LN8@PlazaNPCGa@2
  00110	8b 01		 mov	 eax, DWORD PTR [ecx]
  00112	6a 01		 push	 1
  00114	ff 50 40	 call	 DWORD PTR [eax+64]
  00117	89 9e ac 01 00
	00		 mov	 DWORD PTR [esi+428], ebx
$LN8@PlazaNPCGa@2:

; 62   : 	SAFEDELETE( m_pAniState );

  0011d	8b 8e e4 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3044]
  00123	3b cb		 cmp	 ecx, ebx
  00125	74 0c		 je	 SHORT $LN7@PlazaNPCGa@2
  00127	8b 01		 mov	 eax, DWORD PTR [ecx]
  00129	6a 01		 push	 1
  0012b	ff 10		 call	 DWORD PTR [eax]
  0012d	89 9e e4 0b 00
	00		 mov	 DWORD PTR [esi+3044], ebx
$LN7@PlazaNPCGa@2:

; 63   : 
; 64   : 	SAFEDELETE( m_pRaidGauge );

  00133	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  00139	3b cb		 cmp	 ecx, ebx
  0013b	74 0d		 je	 SHORT $LN6@PlazaNPCGa@2
  0013d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013f	6a 01		 push	 1
  00141	ff 50 40	 call	 DWORD PTR [eax+64]
  00144	89 9e bc 01 00
	00		 mov	 DWORD PTR [esi+444], ebx
$LN6@PlazaNPCGa@2:

; 65   : 	SAFEDELETE( m_pRaidGaugeBack );

  0014a	8b 8e c0 01 00
	00		 mov	 ecx, DWORD PTR [esi+448]
  00150	3b cb		 cmp	 ecx, ebx
  00152	74 0d		 je	 SHORT $LN5@PlazaNPCGa@2
  00154	8b 01		 mov	 eax, DWORD PTR [ecx]
  00156	6a 01		 push	 1
  00158	ff 50 40	 call	 DWORD PTR [eax+64]
  0015b	89 9e c0 01 00
	00		 mov	 DWORD PTR [esi+448], ebx
$LN5@PlazaNPCGa@2:

; 66   : 	SAFEDELETE( m_pRaidGaugeWhite );

  00161	8b 8e c4 01 00
	00		 mov	 ecx, DWORD PTR [esi+452]
  00167	3b cb		 cmp	 ecx, ebx
  00169	74 0d		 je	 SHORT $LN4@PlazaNPCGa@2
  0016b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016d	6a 01		 push	 1
  0016f	ff 50 40	 call	 DWORD PTR [eax+64]
  00172	89 9e c4 01 00
	00		 mov	 DWORD PTR [esi+452], ebx
$LN4@PlazaNPCGa@2:

; 67   : 
; 68   : 	if( !COMPARE( m_iDefaultX, 0, Setting::Width() ) || 
; 69   : 		!COMPARE( m_iDefaultY, 0, Setting::Height() ) )

  00178	39 9e d0 01 00
	00		 cmp	 DWORD PTR [esi+464], ebx
  0017e	7c 5b		 jl	 SHORT $LN1@PlazaNPCGa@2
  00180	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00185	39 86 d0 01 00
	00		 cmp	 DWORD PTR [esi+464], eax
  0018b	7d 4e		 jge	 SHORT $LN1@PlazaNPCGa@2
  0018d	39 9e d4 01 00
	00		 cmp	 DWORD PTR [esi+468], ebx
  00193	7c 46		 jl	 SHORT $LN1@PlazaNPCGa@2
  00195	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  0019a	39 86 d4 01 00
	00		 cmp	 DWORD PTR [esi+468], eax
  001a0	7d 39		 jge	 SHORT $LN1@PlazaNPCGa@2

; 70   : 		return;
; 71   : 
; 72   : 	g_GUIMgr.GUIPosSaveInt( "PlazaNPCGaugeWnd", "XPos", m_iDefaultX ,POS_SAVE_VERSION );

  001a2	6a 04		 push	 4
  001a4	ff b6 d0 01 00
	00		 push	 DWORD PTR [esi+464]
  001aa	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BB@GPDONEMJ@PlazaNPCGaugeWnd?$AA@
  001af	68 00 00 00 00	 push	 OFFSET ??_C@_04LNCKCFGC@XPos?$AA@
  001b4	57		 push	 edi
  001b5	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  001ba	8b c8		 mov	 ecx, eax
  001bc	e8 00 00 00 00	 call	 ?GUIPosSaveInt@ioSP2GUIManager@@QAEHPBD0HH@Z ; ioSP2GUIManager::GUIPosSaveInt

; 73   : 	g_GUIMgr.GUIPosSaveInt( "PlazaNPCGaugeWnd", "YPos", m_iDefaultY ,POS_SAVE_VERSION );

  001c1	6a 04		 push	 4
  001c3	ff b6 d4 01 00
	00		 push	 DWORD PTR [esi+468]
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_04IAEKAMNC@YPos?$AA@
  001ce	57		 push	 edi
  001cf	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  001d4	8b c8		 mov	 ecx, eax
  001d6	e8 00 00 00 00	 call	 ?GUIPosSaveInt@ioSP2GUIManager@@QAEHPBD0HH@Z ; ioSP2GUIManager::GUIPosSaveInt
$LN1@PlazaNPCGa@2:

; 74   : }

  001db	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  001e1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001e5	e8 00 00 00 00	 call	 ??1IORandom@@UAE@XZ	; IORandom::~IORandom
  001ea	8d 8e e8 01 00
	00		 lea	 ecx, DWORD PTR [esi+488]
  001f0	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
  001f9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001fd	8b ce		 mov	 ecx, esi
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
  00205	e8 00 00 00 00	 call	 __EH_epilog3
  0020a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1PlazaNPCGaugeWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioMovingWnd@@UAE@XZ
__unwindfunclet$??1PlazaNPCGaugeWnd@@UAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  00012	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1PlazaNPCGaugeWnd@@UAE@XZ$2:
  00018	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  00021	e9 00 00 00 00	 jmp	 ??1IORandom@@UAE@XZ	; IORandom::~IORandom
__ehhandler$??1PlazaNPCGaugeWnd@@UAE@XZ:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1PlazaNPCGaugeWnd@@UAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1PlazaNPCGaugeWnd@@UAE@XZ ENDP			; PlazaNPCGaugeWnd::~PlazaNPCGaugeWnd
PUBLIC	?return100@@YAIXZ				; return100
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return100@@YAIXZ
_TEXT	SEGMENT
?return100@@YAIXZ PROC					; return100, COMDAT

; 25   : 	__forceinline unsigned int return100() { __asm mov eax, 100 };

  00000	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  00005	c3		 ret	 0
?return100@@YAIXZ ENDP					; return100
_TEXT	ENDS
PUBLIC	?return500@@YAIXZ				; return500
; Function compile flags: /Ogsp
;	COMDAT ?return500@@YAIXZ
_TEXT	SEGMENT
?return500@@YAIXZ PROC					; return500, COMDAT

; 28   : 	__forceinline unsigned int return500() { __asm mov eax, 500 };

  00000	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  00005	c3		 ret	 0
?return500@@YAIXZ ENDP					; return500
_TEXT	ENDS
PUBLIC	?return1000@@YAIXZ				; return1000
; Function compile flags: /Ogsp
;	COMDAT ?return1000@@YAIXZ
_TEXT	SEGMENT
?return1000@@YAIXZ PROC					; return1000, COMDAT

; 29   : 	__forceinline unsigned int return1000() { __asm mov eax, 1000 };

  00000	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00005	c3		 ret	 0
?return1000@@YAIXZ ENDP					; return1000
_TEXT	ENDS
PUBLIC	__real@4062c00000000000
PUBLIC	__real@4f800000
PUBLIC	?UpdateGaugeAni@PlazaNPCGaugeWnd@@IAEXXZ	; PlazaNPCGaugeWnd::UpdateGaugeAni
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
;	COMDAT __real@4062c00000000000
CONST	SEGMENT
__real@4062c00000000000 DQ 04062c00000000000r	; 150
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\plazanpcgaugewnd.cpp
CONST	ENDS
;	COMDAT ?UpdateGaugeAni@PlazaNPCGaugeWnd@@IAEXXZ
_TEXT	SEGMENT
tv270 = -8						; size = 4
tv231 = -8						; size = 4
tv274 = -4						; size = 4
_fTick$505401 = -4					; size = 4
_fTime$ = -4						; size = 4
?UpdateGaugeAni@PlazaNPCGaugeWnd@@IAEXXZ PROC		; PlazaNPCGaugeWnd::UpdateGaugeAni, COMDAT
; _this$ = ecx

; 143  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 144  : 	float fTime = (float)FRAMEGETTIME();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0000e	8b c8		 mov	 ecx, eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00016	89 45 fc	 mov	 DWORD PTR tv274[ebp], eax
  00019	db 45 fc	 fild	 DWORD PTR tv274[ebp]
  0001c	85 c0		 test	 eax, eax
  0001e	79 06		 jns	 SHORT $LN21@UpdateGaug
  00020	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN21@UpdateGaug:
  00026	d9 5d fc	 fstp	 DWORD PTR _fTime$[ebp]

; 145  : 	if( fTime - m_fScreenTime > FLOAT100 )

  00029	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0002e	d9 45 fc	 fld	 DWORD PTR _fTime$[ebp]
  00031	89 45 f8	 mov	 DWORD PTR tv270[ebp], eax
  00034	d8 a6 10 02 00
	00		 fsub	 DWORD PTR [esi+528]
  0003a	db 45 f8	 fild	 DWORD PTR tv270[ebp]
  0003d	85 c0		 test	 eax, eax
  0003f	79 06		 jns	 SHORT $LN22@UpdateGaug
  00041	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN22@UpdateGaug:
  00047	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _fTime$[ebp]
  0004c	d9 c9		 fxch	 ST(1)
  0004e	6a 00		 push	 0
  00050	df f1		 fcomip	 ST(1)
  00052	dd d8		 fstp	 ST(0)
  00054	59		 pop	 ecx
  00055	76 17		 jbe	 SHORT $LN12@UpdateGaug

; 146  : 	{
; 147  : 		m_fScreenTime = fTime;
; 148  : 		m_bScreen = !m_bScreen;

  00057	38 8e 0c 02 00
	00		 cmp	 BYTE PTR [esi+524], cl
  0005d	f3 0f 11 9e 10
	02 00 00	 movss	 DWORD PTR [esi+528], xmm3
  00065	0f 94 c2	 sete	 dl
  00068	88 96 0c 02 00
	00		 mov	 BYTE PTR [esi+524], dl
$LN12@UpdateGaug:

; 149  : 	}
; 150  : 
; 151  : 	if( (m_fBlinkTime != 0.f) )

  0006e	f3 0f 10 8e 14
	02 00 00	 movss	 xmm1, DWORD PTR [esi+532]
  00076	0f 57 d2	 xorps	 xmm2, xmm2
  00079	0f 2e ca	 ucomiss xmm1, xmm2
  0007c	9f		 lahf
  0007d	f6 c4 44	 test	 ah, 68			; 00000044H
  00080	7b 70		 jnp	 SHORT $LN7@UpdateGaug

; 152  : 	{
; 153  : 		if(fTime - m_fBlinkTime > 150.f)

  00082	0f 57 c0	 xorps	 xmm0, xmm0
  00085	0f 5a c3	 cvtps2pd xmm0, xmm3
  00088	0f 5a c9	 cvtps2pd xmm1, xmm1
  0008b	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0008f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4062c00000000000
  00097	76 0a		 jbe	 SHORT $LN10@UpdateGaug

; 154  : 		{
; 155  : 			m_fBlinkTime = 0.f;

  00099	f3 0f 11 96 14
	02 00 00	 movss	 DWORD PTR [esi+532], xmm2

; 156  : 		}
; 157  : 		else

  000a1	eb 4f		 jmp	 SHORT $LN7@UpdateGaug
$LN10@UpdateGaug:
  000a3	57		 push	 edi

; 158  : 		{
; 159  : 			int nPos = (int)(fTime - m_fBlinkTime) / 35; 

  000a4	6a 23		 push	 35			; 00000023H

; 160  : 
; 161  : 			switch( nPos )

  000a6	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000aa	99		 cdq
  000ab	5f		 pop	 edi
  000ac	f7 ff		 idiv	 edi
  000ae	5f		 pop	 edi
  000af	2b c1		 sub	 eax, ecx
  000b1	74 35		 je	 SHORT $LN6@UpdateGaug
  000b3	48		 dec	 eax
  000b4	74 26		 je	 SHORT $LN5@UpdateGaug
  000b6	48		 dec	 eax
  000b7	74 17		 je	 SHORT $LN4@UpdateGaug
  000b9	48		 dec	 eax
  000ba	74 08		 je	 SHORT $LN3@UpdateGaug

; 167  : 			default: m_nVibY = 0; break;

  000bc	89 8e d8 01 00
	00		 mov	 DWORD PTR [esi+472], ecx
  000c2	eb 2e		 jmp	 SHORT $LN7@UpdateGaug
$LN3@UpdateGaug:

; 166  : 			case 3: m_nVibY = 2; break;

  000c4	c7 86 d8 01 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+472], 2
  000ce	eb 22		 jmp	 SHORT $LN7@UpdateGaug
$LN4@UpdateGaug:

; 165  : 			case 2: m_nVibY = -2; break;

  000d0	c7 86 d8 01 00
	00 fe ff ff ff	 mov	 DWORD PTR [esi+472], -2	; fffffffeH
  000da	eb 16		 jmp	 SHORT $LN7@UpdateGaug
$LN5@UpdateGaug:

; 164  : 			case 1:	m_nVibY = 3; break;

  000dc	c7 86 d8 01 00
	00 03 00 00 00	 mov	 DWORD PTR [esi+472], 3
  000e6	eb 0a		 jmp	 SHORT $LN7@UpdateGaug
$LN6@UpdateGaug:

; 162  : 			{
; 163  : 			case 0: m_nVibY = - 3; break;

  000e8	c7 86 d8 01 00
	00 fd ff ff ff	 mov	 DWORD PTR [esi+472], -3	; fffffffdH
$LN7@UpdateGaug:

; 168  : 			}
; 169  : 		}
; 170  : 	}
; 171  : 
; 172  : 	if( m_fAniHP > m_fCurHP )

  000f2	f3 0f 10 86 04
	02 00 00	 movss	 xmm0, DWORD PTR [esi+516]
  000fa	f3 0f 10 8e 00
	02 00 00	 movss	 xmm1, DWORD PTR [esi+512]
  00102	0f 5a c0	 cvtps2pd xmm0, xmm0
  00105	0f 5a c9	 cvtps2pd xmm1, xmm1
  00108	66 0f 2f c1	 comisd	 xmm0, xmm1
  0010c	76 72		 jbe	 SHORT $LN1@UpdateGaug

; 173  : 	{
; 174  : 		float fTick = FLOAT500;

  0010e	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  00113	89 45 f8	 mov	 DWORD PTR tv231[ebp], eax
  00116	db 45 f8	 fild	 DWORD PTR tv231[ebp]
  00119	85 c0		 test	 eax, eax
  0011b	79 06		 jns	 SHORT $LN23@UpdateGaug
  0011d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN23@UpdateGaug:

; 175  : 		float fGapTime = fTime - m_fCurAniTime;

  00123	f3 0f 10 8e 08
	02 00 00	 movss	 xmm1, DWORD PTR [esi+520]
  0012b	d9 5d fc	 fstp	 DWORD PTR _fTick$505401[ebp]
  0012e	0f 5a c3	 cvtps2pd xmm0, xmm3

; 176  : 
; 177  : 		m_fAniHP = max( m_fCurHP, m_fAniHP - ( fGapTime / fTick ) );

  00131	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _fTick$505401[ebp]
  00136	0f 57 d2	 xorps	 xmm2, xmm2
  00139	0f 5a c9	 cvtps2pd xmm1, xmm1
  0013c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00140	f3 0f 10 8e 00
	02 00 00	 movss	 xmm1, DWORD PTR [esi+512]
  00148	66 0f 5a d0	 cvtpd2ps xmm2, xmm0
  0014c	f3 0f 10 86 04
	02 00 00	 movss	 xmm0, DWORD PTR [esi+516]
  00154	0f 5a d2	 cvtps2pd xmm2, xmm2
  00157	0f 5a db	 cvtps2pd xmm3, xmm3
  0015a	f2 0f 5e d3	 divsd	 xmm2, xmm3
  0015e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00161	f2 0f 5c c2	 subsd	 xmm0, xmm2
  00165	0f 5a d1	 cvtps2pd xmm2, xmm1
  00168	66 0f 2f d0	 comisd	 xmm2, xmm0
  0016c	76 06		 jbe	 SHORT $LN15@UpdateGaug
  0016e	0f 57 c0	 xorps	 xmm0, xmm0
  00171	0f 5a c1	 cvtps2pd xmm0, xmm1
$LN15@UpdateGaug:
  00174	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00178	f3 0f 11 86 04
	02 00 00	 movss	 DWORD PTR [esi+516], xmm0
$LN1@UpdateGaug:
  00180	5e		 pop	 esi

; 178  : 	}
; 179  : }

  00181	c9		 leave
  00182	c3		 ret	 0
?UpdateGaugeAni@PlazaNPCGaugeWnd@@IAEXXZ ENDP		; PlazaNPCGaugeWnd::UpdateGaugeAni
_TEXT	ENDS
PUBLIC	__real@3f28f5c3
PUBLIC	__real@406fe00000000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@00000000
PUBLIC	__real@3e99999a
PUBLIC	__real@3f333333
PUBLIC	??_C@_0CE@DIFGDPLJ@PlazaNPCGaugeWnd?3?3RenderBossMons@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?RenderBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z	; PlazaNPCGaugeWnd::RenderBossMonster
EXTRN	__imp_?RenderWidthCut@ioUIRenderImage@@QAEXMMHHW4UIRenderType@@W4TextureFilterOption@@0@Z:PROC
EXTRN	__imp_?GetWidth@ioUIRenderElement@@QBEHXZ:PROC
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBDHHH@Z:PROC
EXTRN	__imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ:PROC
EXTRN	__imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z:PROC
EXTRN	__imp_?GetSingleton@ioStringManager@@SAAAV1@XZ:PROC
EXTRN	__imp_?SetTextColor@ioFontManager@@QAEXK@Z:PROC
EXTRN	__imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z:PROC
EXTRN	__imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z:PROC
EXTRN	__imp_?SetBkColor@ioFontManager@@QAEXHHH@Z:PROC
EXTRN	__imp_?GetSingleton@ioFontManager@@SAAAV1@XZ:PROC
EXTRN	__ftol2:PROC
;	COMDAT __real@3f28f5c3
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@3f28f5c3 DD 03f28f5c3r			; 0.66
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT ??_C@_0CE@DIFGDPLJ@PlazaNPCGaugeWnd?3?3RenderBossMons@
CONST	SEGMENT
??_C@_0CE@DIFGDPLJ@PlazaNPCGaugeWnd?3?3RenderBossMons@ DB 'PlazaNPCGaugeW'
	DB	'nd::RenderBossMonster', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\plazanpcgaugewnd.cpp
CONST	ENDS
;	COMDAT ?RenderBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z
_TEXT	SEGMENT
tv570 = -28						; size = 8
tv392 = -28						; size = 8
tv860 = -24						; size = 4
tv854 = -24						; size = 4
tv845 = -24						; size = 4
tv839 = -24						; size = 4
tv1001 = -20						; size = 4
tv991 = -20						; size = 4
tv960 = -20						; size = 4
tv957 = -20						; size = 4
tv880 = -20						; size = 4
tv869 = -20						; size = 4
tv835 = -20						; size = 4
tv832 = -20						; size = 4
tv706 = -20						; size = 4
$T506912 = -20						; size = 4
$T506896 = -20						; size = 4
tv932 = -16						; size = 4
tv849 = -16						; size = 4
tv379 = -16						; size = 4
tv82 = -16						; size = 4
$T506892 = -16						; size = 4
$T506884 = -16						; size = 4
_fHPRate$505425 = -16					; size = 4
tv873 = -12						; size = 4
tv857 = -12						; size = 4
tv842 = -12						; size = 4
tv855 = -8						; size = 4
tv915 = -4						; size = 4
_iXPos$ = 8						; size = 4
tv755 = 12						; size = 4
tv751 = 12						; size = 4
tv714 = 12						; size = 4
tv642 = 12						; size = 4
tv634 = 12						; size = 4
tv590 = 12						; size = 4
tv574 = 12						; size = 4
tv557 = 12						; size = 4
tv431 = 12						; size = 4
_fAlpha$505445 = 12					; size = 4
_iYPos$ = 12						; size = 4
?RenderBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z PROC	; PlazaNPCGaugeWnd::RenderBossMonster, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 183  : 	iYPos = iYPos + m_nVibY;

  00008	8b 75 0c	 mov	 esi, DWORD PTR _iYPos$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	03 b7 d8 01 00
	00		 add	 esi, DWORD PTR [edi+472]
  00014	89 75 0c	 mov	 DWORD PTR _iYPos$[ebp], esi

; 184  : 
; 185  : 	m_fMaxHP = max( FLOAT1, m_fMaxHP );      //

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	d9 87 fc 01 00
	00		 fld	 DWORD PTR [edi+508]
  00022	89 45 ec	 mov	 DWORD PTR tv1001[ebp], eax
  00025	d9 5d f4	 fstp	 DWORD PTR tv842[ebp]
  00028	db 45 ec	 fild	 DWORD PTR tv1001[ebp]
  0002b	85 c0		 test	 eax, eax
  0002d	79 06		 jns	 SHORT $LN54@RenderBoss
  0002f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN54@RenderBoss:
  00035	d9 45 f4	 fld	 DWORD PTR tv842[ebp]
  00038	d9 c9		 fxch	 ST(1)
  0003a	df f1		 fcomip	 ST(1)
  0003c	dd d8		 fstp	 ST(0)
  0003e	76 1f		 jbe	 SHORT $LN17@RenderBoss
  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	89 45 ec	 mov	 DWORD PTR tv991[ebp], eax
  00048	db 45 ec	 fild	 DWORD PTR tv991[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	79 06		 jns	 SHORT $LN55@RenderBoss
  0004f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN55@RenderBoss:
  00055	d9 5d f0	 fstp	 DWORD PTR tv82[ebp]
  00058	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv82[ebp]
  0005d	eb 05		 jmp	 SHORT $LN18@RenderBoss
$LN17@RenderBoss:
  0005f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv842[ebp]
$LN18@RenderBoss:

; 186  : 	if( m_pGaugeBack )

  00064	8b 8f a0 01 00
	00		 mov	 ecx, DWORD PTR [edi+416]
  0006a	33 db		 xor	 ebx, ebx
  0006c	f3 0f 11 87 fc
	01 00 00	 movss	 DWORD PTR [edi+508], xmm0
  00074	3b cb		 cmp	 ecx, ebx
  00076	74 2c		 je	 SHORT $LN46@RenderBoss

; 187  : 		m_pGaugeBack->Render( iXPos + 55, iYPos + 22 );

  00078	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007a	53		 push	 ebx
  0007b	53		 push	 ebx
  0007c	53		 push	 ebx
  0007d	53		 push	 ebx
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	8d 56 16	 lea	 edx, DWORD PTR [esi+22]
  00084	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00088	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  0008b	51		 push	 ecx
  0008c	51		 push	 ecx
  0008d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00093	83 c2 37	 add	 edx, 55			; 00000037H
  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	ff 10		 call	 DWORD PTR [eax]
$LN46@RenderBoss:

; 188  : 
; 189  : 	if( m_pWhiteLine )

  000a4	8b 8f b0 01 00
	00		 mov	 ecx, DWORD PTR [edi+432]
  000aa	3b cb		 cmp	 ecx, ebx
  000ac	0f 84 b5 01 00
	00		 je	 $LN13@RenderBoss

; 190  : 	{
; 191  : 		m_pWhiteLine->Render( iXPos + 107, iYPos + 57 );

  000b2	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  000b5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b7	53		 push	 ebx
  000b8	53		 push	 ebx
  000b9	53		 push	 ebx
  000ba	53		 push	 ebx
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	51		 push	 ecx
  000bf	51		 push	 ecx
  000c0	83 c6 39	 add	 esi, 57			; 00000039H
  000c3	f3 0f 2a c6	 cvtsi2ss xmm0, esi
  000c7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000cd	83 c2 6b	 add	 edx, 107		; 0000006bH
  000d0	0f 57 c0	 xorps	 xmm0, xmm0
  000d3	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	ff 10		 call	 DWORD PTR [eax]

; 192  : 
; 193  : 		g_FontMgr.SetBkColor( 0, 0, 0 );

  000de	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  000e4	53		 push	 ebx
  000e5	53		 push	 ebx
  000e6	53		 push	 ebx
  000e7	ff d6		 call	 esi
  000e9	8b c8		 mov	 ecx, eax
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 194  : 		g_FontMgr.SetTextStyle( TS_OUTLINE_FULL_2X );

  000f1	6a 05		 push	 5
  000f3	ff d6		 call	 esi
  000f5	8b c8		 mov	 ecx, eax
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 195  : 		g_FontMgr.SetAlignType( TAT_LEFT );

  000fd	53		 push	 ebx
  000fe	ff d6		 call	 esi
  00100	8b c8		 mov	 ecx, eax
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 196  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  00108	6a ff		 push	 -1
  0010a	ff d6		 call	 esi
  0010c	8b c8		 mov	 ecx, eax
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 197  : 		g_FontMgr.PrintText( iXPos + 155, iYPos + 63, FONT_SIZE_14, STR(1) );

  00114	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00117	53		 push	 ebx
  00118	6a 01		 push	 1
  0011a	83 c0 3f	 add	 eax, 63			; 0000003fH
  0011d	0f 57 c0	 xorps	 xmm0, xmm0
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00125	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DIFGDPLJ@PlazaNPCGaugeWnd?3?3RenderBossMons@
  0012e	f3 0f 11 45 f4	 movss	 DWORD PTR tv873[ebp], xmm0
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00139	8b c8		 mov	 ecx, eax
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00149	50		 push	 eax
  0014a	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  0014d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00150	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00156	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv873[ebp]
  0015b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00161	05 9b 00 00 00	 add	 eax, 155		; 0000009bH
  00166	0f 57 c0	 xorps	 xmm0, xmm0
  00169	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	ff d6		 call	 esi
  00174	50		 push	 eax
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAAXMMMPBDZZ
  0017b	83 c4 14	 add	 esp, 20			; 00000014H

; 198  : 
; 199  : 		g_FontMgr.SetBkColor( 0, 0, 0 );

  0017e	53		 push	 ebx
  0017f	53		 push	 ebx
  00180	53		 push	 ebx
  00181	ff d6		 call	 esi
  00183	8b c8		 mov	 ecx, eax
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 200  : 		g_FontMgr.SetTextStyle( TS_OUTLINE_FULL_2X );

  0018b	6a 05		 push	 5
  0018d	ff d6		 call	 esi
  0018f	8b c8		 mov	 ecx, eax
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 201  : 		g_FontMgr.SetAlignType( TAT_LEFT );

  00197	53		 push	 ebx
  00198	ff d6		 call	 esi
  0019a	8b c8		 mov	 ecx, eax
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 202  : 		g_FontMgr.SetTextColor( D3DCOLOR_XRGB(255, 60, 0) );

  001a2	68 00 3c ff ff	 push	 -50176			; ffff3c00H
  001a7	ff d6		 call	 esi
  001a9	8b c8		 mov	 ecx, eax
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 203  : 
; 204  : 		DWORD dwTimer, dwHour, dwMin, dwSec;
; 205  : 		dwTimer = (m_dwTimer - FRAMEGETTIME()) / FLOAT1000;

  001b1	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  001b6	89 45 f0	 mov	 DWORD PTR $T506884[ebp], eax
  001b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  001bf	8b c8		 mov	 ecx, eax
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  001c7	8b 8f f8 01 00
	00		 mov	 ecx, DWORD PTR [edi+504]
  001cd	2b c8		 sub	 ecx, eax
  001cf	89 4d ec	 mov	 DWORD PTR tv960[ebp], ecx
  001d2	db 45 ec	 fild	 DWORD PTR tv960[ebp]
  001d5	79 06		 jns	 SHORT $LN56@RenderBoss
  001d7	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN56@RenderBoss:
  001dd	8b 45 f0	 mov	 eax, DWORD PTR $T506884[ebp]
  001e0	db 45 f0	 fild	 DWORD PTR $T506884[ebp]
  001e3	85 c0		 test	 eax, eax
  001e5	79 06		 jns	 SHORT $LN57@RenderBoss
  001e7	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN57@RenderBoss:
  001ed	de f9		 fdivp	 ST(1), ST(0)
  001ef	e8 00 00 00 00	 call	 __ftol2

; 206  : 		dwHour = dwTimer / 3600;
; 207  : 		dwMin = (dwTimer % 3600) / 60;
; 208  : 		dwSec = (dwTimer % 3600) % 60;

  001f4	33 d2		 xor	 edx, edx
  001f6	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  001fb	f7 f1		 div	 ecx
  001fd	6a 3c		 push	 60			; 0000003cH
  001ff	59		 pop	 ecx
  00200	89 45 f0	 mov	 DWORD PTR tv379[ebp], eax
  00203	8b c2		 mov	 eax, edx
  00205	33 d2		 xor	 edx, edx
  00207	f7 f1		 div	 ecx

; 209  : 
; 210  : 		g_FontMgr.PrintText( iXPos + 215, iYPos + 63, FONT_SIZE_14, STR(2), (int)dwHour, (int)dwMin, (int)dwSec );

  00209	52		 push	 edx
  0020a	50		 push	 eax
  0020b	ff 75 f0	 push	 DWORD PTR tv379[ebp]
  0020e	53		 push	 ebx
  0020f	6a 02		 push	 2
  00211	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00216	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DIFGDPLJ@PlazaNPCGaugeWnd?3?3RenderBossMons@
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00221	8b c8		 mov	 ecx, eax
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  00229	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00231	50		 push	 eax
  00232	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00235	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00238	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0023e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv873[ebp]
  00243	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00249	05 d7 00 00 00	 add	 eax, 215		; 000000d7H
  0024e	0f 57 c0	 xorps	 xmm0, xmm0
  00251	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00255	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025a	ff d6		 call	 esi
  0025c	8b c8		 mov	 ecx, eax
  0025e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBDHHH@Z
  00264	8b 75 0c	 mov	 esi, DWORD PTR _iYPos$[ebp]
$LN13@RenderBoss:

; 211  : 	}
; 212  : 
; 213  : 	if( m_pGauge[m_eGaugeType] )

  00267	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  0026d	8d 84 87 98 01
	00 00		 lea	 eax, DWORD PTR [edi+eax*4+408]
  00274	39 18		 cmp	 DWORD PTR [eax], ebx
  00276	0f 84 65 05 00
	00		 je	 $LN1@RenderBoss

; 214  : 	{
; 215  : 		float fHPRate = m_fCurHP / m_fMaxHP;

  0027c	f3 0f 10 87 00
	02 00 00	 movss	 xmm0, DWORD PTR [edi+512]
  00284	f3 0f 10 8f fc
	01 00 00	 movss	 xmm1, DWORD PTR [edi+508]

; 216  : 		float fWidth = m_pGauge[m_eGaugeType]->GetWidth() * fHPRate;

  0028c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00291	0f 5a c9	 cvtps2pd xmm1, xmm1
  00294	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00298	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0029c	f3 0f 11 45 f0	 movss	 DWORD PTR _fHPRate$505425[ebp], xmm0
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  002a7	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _fHPRate$505425[ebp]
  002ac	0f 57 c0	 xorps	 xmm0, xmm0
  002af	f3 0f 2a c0	 cvtsi2ss xmm0, eax

; 217  : 
; 218  : 		m_pGauge[m_eGaugeType]->RenderWidthCut( iXPos + 55, iYPos + 22, 0, fWidth );

  002b3	53		 push	 ebx
  002b4	0f 5a c0	 cvtps2pd xmm0, xmm0
  002b7	0f 5a c9	 cvtps2pd xmm1, xmm1
  002ba	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002be	53		 push	 ebx
  002bf	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  002c3	f3 0f 2c c0	 cvttss2si eax, xmm0
  002c7	53		 push	 ebx
  002c8	8d 4e 16	 lea	 ecx, DWORD PTR [esi+22]
  002cb	50		 push	 eax
  002cc	0f 57 c0	 xorps	 xmm0, xmm0
  002cf	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002d3	8b 4d 08	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  002d6	83 c1 37	 add	 ecx, 55			; 00000037H
  002d9	53		 push	 ebx
  002da	51		 push	 ecx
  002db	51		 push	 ecx
  002dc	89 45 fc	 mov	 DWORD PTR tv915[ebp], eax
  002df	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  002e5	0f 57 c9	 xorps	 xmm1, xmm1
  002e8	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  002ec	8b 8c 87 98 01
	00 00		 mov	 ecx, DWORD PTR [edi+eax*4+408]
  002f3	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002f9	f3 0f 11 45 f8	 movss	 DWORD PTR tv855[ebp], xmm0
  002fe	f3 0f 11 4d f4	 movss	 DWORD PTR tv857[ebp], xmm1
  00303	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00308	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderWidthCut@ioUIRenderImage@@QAEXMMHHW4UIRenderType@@W4TextureFilterOption@@0@Z

; 219  : 		if( fHPRate <= 0.30f && m_bScreen )

  0030e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00316	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _fHPRate$505425[ebp]
  0031a	72 3a		 jb	 SHORT $LN47@RenderBoss
  0031c	38 9f 0c 02 00
	00		 cmp	 BYTE PTR [edi+524], bl
  00322	74 32		 je	 SHORT $LN47@RenderBoss

; 220  : 			m_pGauge[m_eGaugeType]->RenderWidthCut( iXPos + 55, iYPos + 22, 0, fWidth, UI_RENDER_SCREEN );

  00324	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv855[ebp]
  00329	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  0032f	53		 push	 ebx
  00330	53		 push	 ebx
  00331	6a 01		 push	 1
  00333	ff 75 fc	 push	 DWORD PTR tv915[ebp]
  00336	53		 push	 ebx
  00337	51		 push	 ecx
  00338	51		 push	 ecx
  00339	8b 8c 87 98 01
	00 00		 mov	 ecx, DWORD PTR [edi+eax*4+408]
  00340	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00346	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv857[ebp]
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderWidthCut@ioUIRenderImage@@QAEXMMHHW4UIRenderType@@W4TextureFilterOption@@0@Z
$LN47@RenderBoss:

; 221  : 
; 222  : 		if( m_fAniHP > m_fCurHP )

  00356	f3 0f 10 87 04
	02 00 00	 movss	 xmm0, DWORD PTR [edi+516]
  0035e	f3 0f 10 8f 00
	02 00 00	 movss	 xmm1, DWORD PTR [edi+512]
  00366	0f 5a c0	 cvtps2pd xmm0, xmm0
  00369	0f 5a c9	 cvtps2pd xmm1, xmm1
  0036c	66 0f 2f c1	 comisd	 xmm0, xmm1
  00370	0f 86 ac 00 00
	00		 jbe	 $LN10@RenderBoss

; 223  : 		{
; 224  : 			float fAniWidth = m_pGauge[m_eGaugeType]->GetWidth() * ( m_fAniHP / m_fMaxHP );

  00376	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  0037c	8b 8c 87 98 01
	00 00		 mov	 ecx, DWORD PTR [edi+eax*4+408]
  00383	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  00389	f3 0f 10 8f 04
	02 00 00	 movss	 xmm1, DWORD PTR [edi+516]
  00391	f3 0f 10 97 fc
	01 00 00	 movss	 xmm2, DWORD PTR [edi+508]
  00399	0f 57 c0	 xorps	 xmm0, xmm0
  0039c	f3 0f 2a c0	 cvtsi2ss xmm0, eax

; 225  : 			// Screen x 2
; 226  : 			m_pGauge[m_eGaugeType]->RenderWidthCut( iXPos + 55, iYPos + 22, fWidth, fAniWidth, UI_RENDER_SCREEN );

  003a0	53		 push	 ebx
  003a1	53		 push	 ebx
  003a2	0f 5a c0	 cvtps2pd xmm0, xmm0
  003a5	0f 5a c9	 cvtps2pd xmm1, xmm1
  003a8	0f 5a d2	 cvtps2pd xmm2, xmm2
  003ab	6a 01		 push	 1
  003ad	f2 0f 5e ca	 divsd	 xmm1, xmm2
  003b1	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003b5	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  003b9	f3 0f 2c c0	 cvttss2si eax, xmm0
  003bd	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv855[ebp]
  003c2	50		 push	 eax
  003c3	ff 75 fc	 push	 DWORD PTR tv915[ebp]
  003c6	89 45 f0	 mov	 DWORD PTR tv932[ebp], eax
  003c9	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  003cf	51		 push	 ecx
  003d0	51		 push	 ecx
  003d1	8b 8c 87 98 01
	00 00		 mov	 ecx, DWORD PTR [edi+eax*4+408]
  003d8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003de	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv857[ebp]
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderWidthCut@ioUIRenderImage@@QAEXMMHHW4UIRenderType@@W4TextureFilterOption@@0@Z

; 227  : 			m_pGauge[m_eGaugeType]->RenderWidthCut( iXPos + 55, iYPos + 22, fWidth, fAniWidth, UI_RENDER_SCREEN );

  003ee	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv855[ebp]
  003f3	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  003f9	53		 push	 ebx
  003fa	53		 push	 ebx
  003fb	6a 01		 push	 1
  003fd	ff 75 f0	 push	 DWORD PTR tv932[ebp]
  00400	ff 75 fc	 push	 DWORD PTR tv915[ebp]
  00403	51		 push	 ecx
  00404	51		 push	 ecx
  00405	8b 8c 87 98 01
	00 00		 mov	 ecx, DWORD PTR [edi+eax*4+408]
  0040c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00412	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv857[ebp]
  00417	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderWidthCut@ioUIRenderImage@@QAEXMMHHW4UIRenderType@@W4TextureFilterOption@@0@Z
$LN10@RenderBoss:

; 228  : 		}
; 229  : 
; 230  : 		if( m_fBlinkTime != 0.f )

  00422	f3 0f 10 87 14
	02 00 00	 movss	 xmm0, DWORD PTR [edi+532]
  0042a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00431	9f		 lahf
  00432	f6 c4 44	 test	 ah, 68			; 00000044H
  00435	0f 8b 3a 01 00
	00		 jnp	 $LN45@RenderBoss

; 231  : 		{
; 232  : 			float fRate = max( 0.f, FRAMEGETTIME() - m_fBlinkTime );

  0043b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00441	8b c8		 mov	 ecx, eax
  00443	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00449	89 45 ec	 mov	 DWORD PTR tv880[ebp], eax
  0044c	db 45 ec	 fild	 DWORD PTR tv880[ebp]
  0044f	85 c0		 test	 eax, eax
  00451	79 06		 jns	 SHORT $LN58@RenderBoss
  00453	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN58@RenderBoss:
  00459	d8 a7 14 02 00
	00		 fsub	 DWORD PTR [edi+532]
  0045f	d9 ee		 fldz
  00461	df f1		 fcomip	 ST(1)
  00463	dd d8		 fstp	 ST(0)
  00465	76 0d		 jbe	 SHORT $LN19@RenderBoss
  00467	0f 57 c0	 xorps	 xmm0, xmm0
  0046a	f2 0f 11 45 e4	 movsd	 QWORD PTR tv392[ebp], xmm0
  0046f	dd 45 e4	 fld	 QWORD PTR tv392[ebp]
  00472	eb 24		 jmp	 SHORT $LN20@RenderBoss
$LN19@RenderBoss:
  00474	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0047a	8b c8		 mov	 ecx, eax
  0047c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00482	89 45 ec	 mov	 DWORD PTR tv869[ebp], eax
  00485	db 45 ec	 fild	 DWORD PTR tv869[ebp]
  00488	85 c0		 test	 eax, eax
  0048a	79 06		 jns	 SHORT $LN59@RenderBoss
  0048c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN59@RenderBoss:
  00492	d8 a7 14 02 00
	00		 fsub	 DWORD PTR [edi+532]
$LN20@RenderBoss:

; 233  : 			float fAlpha = FLOAT09 - FLOAT09 * (fRate / 150.f);

  00498	b8 09 00 00 00	 mov	 eax, 9
  0049d	8b d0		 mov	 edx, eax
  0049f	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  004a4	89 45 f0	 mov	 DWORD PTR $T506892[ebp], eax
  004a7	b8 09 00 00 00	 mov	 eax, 9
  004ac	89 45 ec	 mov	 DWORD PTR $T506896[ebp], eax
  004af	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH

; 234  : 
; 235  : 			if( m_pGaugeWhite )

  004b4	8b 8f a4 01 00
	00		 mov	 ecx, DWORD PTR [edi+420]
  004ba	3b cb		 cmp	 ecx, ebx
  004bc	0f 84 b1 00 00
	00		 je	 $LN51@RenderBoss

; 236  : 			{
; 237  : 				m_pGaugeWhite->SetAlpha( 255 * fAlpha );

  004c2	8b 31		 mov	 esi, DWORD PTR [ecx]
  004c4	89 55 e8	 mov	 DWORD PTR tv860[ebp], edx
  004c7	db 45 e8	 fild	 DWORD PTR tv860[ebp]
  004ca	85 d2		 test	 edx, edx
  004cc	79 06		 jns	 SHORT $LN60@RenderBoss
  004ce	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN60@RenderBoss:
  004d4	8b 4d f0	 mov	 ecx, DWORD PTR $T506892[ebp]
  004d7	db 45 f0	 fild	 DWORD PTR $T506892[ebp]
  004da	85 c9		 test	 ecx, ecx
  004dc	79 06		 jns	 SHORT $LN61@RenderBoss
  004de	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN61@RenderBoss:

; 233  : 			float fAlpha = FLOAT09 - FLOAT09 * (fRate / 150.f);

  004e4	de f9		 fdivp	 ST(1), ST(0)

; 236  : 			{
; 237  : 				m_pGaugeWhite->SetAlpha( 255 * fAlpha );

  004e6	8b 4d ec	 mov	 ecx, DWORD PTR $T506896[ebp]
  004e9	d9 5d f0	 fstp	 DWORD PTR tv849[ebp]
  004ec	d9 45 f0	 fld	 DWORD PTR tv849[ebp]
  004ef	db 45 ec	 fild	 DWORD PTR $T506896[ebp]
  004f2	85 c9		 test	 ecx, ecx
  004f4	79 06		 jns	 SHORT $LN62@RenderBoss
  004f6	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN62@RenderBoss:
  004fc	89 45 e8	 mov	 DWORD PTR tv839[ebp], eax
  004ff	db 45 e8	 fild	 DWORD PTR tv839[ebp]
  00502	85 c0		 test	 eax, eax
  00504	79 06		 jns	 SHORT $LN63@RenderBoss
  00506	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN63@RenderBoss:

; 233  : 			float fAlpha = FLOAT09 - FLOAT09 * (fRate / 150.f);

  0050c	de f9		 fdivp	 ST(1), ST(0)

; 236  : 			{
; 237  : 				m_pGaugeWhite->SetAlpha( 255 * fAlpha );

  0050e	d9 5d ec	 fstp	 DWORD PTR tv835[ebp]
  00511	d9 45 ec	 fld	 DWORD PTR tv835[ebp]
  00514	d9 ca		 fxch	 ST(2)
  00516	d9 5d ec	 fstp	 DWORD PTR tv832[ebp]
  00519	d9 45 ec	 fld	 DWORD PTR tv832[ebp]
  0051c	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4062c00000000000
  00522	de ca		 fmulp	 ST(2), ST(0)
  00524	de e1		 fsubrp	 ST(1), ST(0)
  00526	d9 5d ec	 fstp	 DWORD PTR tv706[ebp]
  00529	d9 45 ec	 fld	 DWORD PTR tv706[ebp]
  0052c	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@406fe00000000000
  00532	e8 00 00 00 00	 call	 __ftol2
  00537	8b 8f a4 01 00
	00		 mov	 ecx, DWORD PTR [edi+420]
  0053d	0f b6 c0	 movzx	 eax, al
  00540	50		 push	 eax
  00541	ff 56 30	 call	 DWORD PTR [esi+48]

; 238  : 				m_pGaugeWhite->RenderWidthCut( iXPos + 55, iYPos + 22, 0, fWidth, UI_RENDER_NORMAL );

  00544	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv855[ebp]
  00549	53		 push	 ebx
  0054a	53		 push	 ebx
  0054b	53		 push	 ebx
  0054c	ff 75 fc	 push	 DWORD PTR tv915[ebp]
  0054f	53		 push	 ebx
  00550	51		 push	 ecx
  00551	51		 push	 ecx
  00552	8b 8f a4 01 00
	00		 mov	 ecx, DWORD PTR [edi+420]
  00558	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0055e	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv857[ebp]
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RenderWidthCut@ioUIRenderImage@@QAEXMMHHW4UIRenderType@@W4TextureFilterOption@@0@Z
  0056e	8b 75 0c	 mov	 esi, DWORD PTR _iYPos$[ebp]
  00571	eb 02		 jmp	 SHORT $LN45@RenderBoss
$LN51@RenderBoss:
  00573	dd d8		 fstp	 ST(0)
$LN45@RenderBoss:

; 239  : 			}
; 240  : 		}
; 241  : 
; 242  : 		if( m_pNpcImgName )

  00575	8b 8f b8 01 00
	00		 mov	 ecx, DWORD PTR [edi+440]
  0057b	3b cb		 cmp	 ecx, ebx
  0057d	74 30		 je	 SHORT $LN7@RenderBoss

; 243  : 			m_pNpcImgName->Render( iXPos + 210, iYPos + 30, UI_RENDER_ADD );

  0057f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00581	53		 push	 ebx
  00582	53		 push	 ebx
  00583	53		 push	 ebx
  00584	6a 03		 push	 3
  00586	0f 57 c0	 xorps	 xmm0, xmm0
  00589	8d 56 1e	 lea	 edx, DWORD PTR [esi+30]
  0058c	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00590	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  00593	51		 push	 ecx
  00594	51		 push	 ecx
  00595	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0059b	81 c2 d2 00 00
	00		 add	 edx, 210		; 000000d2H
  005a1	0f 57 c0	 xorps	 xmm0, xmm0
  005a4	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  005a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ad	ff 10		 call	 DWORD PTR [eax]
$LN7@RenderBoss:

; 244  : 
; 245  : 		if( m_pIconBack[m_eGaugeType] )

  005af	8b 87 e4 01 00
	00		 mov	 eax, DWORD PTR [edi+484]
  005b5	8d 84 87 90 01
	00 00		 lea	 eax, DWORD PTR [edi+eax*4+400]
  005bc	39 18		 cmp	 DWORD PTR [eax], ebx
  005be	74 2f		 je	 SHORT $LN6@RenderBoss

; 246  : 			m_pIconBack[m_eGaugeType]->Render( iXPos + 42, iYPos + 37, UI_RENDER_SCREEN );

  005c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  005c2	8b 01		 mov	 eax, DWORD PTR [ecx]
  005c4	53		 push	 ebx
  005c5	53		 push	 ebx
  005c6	53		 push	 ebx
  005c7	6a 01		 push	 1
  005c9	0f 57 c0	 xorps	 xmm0, xmm0
  005cc	8d 56 25	 lea	 edx, DWORD PTR [esi+37]
  005cf	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  005d3	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  005d6	51		 push	 ecx
  005d7	51		 push	 ecx
  005d8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  005de	83 c2 2a	 add	 edx, 42			; 0000002aH
  005e1	0f 57 c0	 xorps	 xmm0, xmm0
  005e4	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  005e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ed	ff 10		 call	 DWORD PTR [eax]
$LN6@RenderBoss:

; 247  : 
; 248  : 		if( m_pMonsterIcon )

  005ef	8b 8f b4 01 00
	00		 mov	 ecx, DWORD PTR [edi+436]
  005f5	3b cb		 cmp	 ecx, ebx
  005f7	74 4d		 je	 SHORT $LN5@RenderBoss

; 249  : 		{
; 250  : 			m_pMonsterIcon->SetScale( 0.66f, 0.66f );

  005f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f28f5c3
  00601	8b 01		 mov	 eax, DWORD PTR [ecx]
  00603	51		 push	 ecx
  00604	51		 push	 ecx
  00605	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	ff 50 18	 call	 DWORD PTR [eax+24]

; 251  : 			m_pMonsterIcon->Render( iXPos + 42, iYPos + 37, UI_RENDER_NORMAL, TFO_BILINEAR );

  00613	8b 8f b4 01 00
	00		 mov	 ecx, DWORD PTR [edi+436]
  00619	8b 01		 mov	 eax, DWORD PTR [ecx]
  0061b	53		 push	 ebx
  0061c	53		 push	 ebx
  0061d	6a 01		 push	 1
  0061f	53		 push	 ebx
  00620	0f 57 c0	 xorps	 xmm0, xmm0
  00623	8d 56 25	 lea	 edx, DWORD PTR [esi+37]
  00626	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0062a	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  0062d	51		 push	 ecx
  0062e	51		 push	 ecx
  0062f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00635	83 c2 2a	 add	 edx, 42			; 0000002aH
  00638	0f 57 c0	 xorps	 xmm0, xmm0
  0063b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	ff 10		 call	 DWORD PTR [eax]
$LN5@RenderBoss:

; 252  : 		}
; 253  : 
; 254  : 		if( m_fBlinkTime != 0.f )

  00646	f3 0f 10 87 14
	02 00 00	 movss	 xmm0, DWORD PTR [edi+532]
  0064e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00655	9f		 lahf
  00656	f6 c4 44	 test	 ah, 68			; 00000044H
  00659	0f 8b 82 01 00
	00		 jnp	 $LN1@RenderBoss

; 255  : 		{
; 256  : 			float fRate = max( 0.f, FRAMEGETTIME() - m_fBlinkTime );

  0065f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00665	8b c8		 mov	 ecx, eax
  00667	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  0066d	89 45 0c	 mov	 DWORD PTR tv642[ebp], eax
  00670	db 45 0c	 fild	 DWORD PTR tv642[ebp]
  00673	85 c0		 test	 eax, eax
  00675	79 06		 jns	 SHORT $LN64@RenderBoss
  00677	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN64@RenderBoss:
  0067d	d8 a7 14 02 00
	00		 fsub	 DWORD PTR [edi+532]
  00683	d9 ee		 fldz
  00685	df f1		 fcomip	 ST(1)
  00687	dd d8		 fstp	 ST(0)
  00689	76 0d		 jbe	 SHORT $LN21@RenderBoss
  0068b	0f 57 c0	 xorps	 xmm0, xmm0
  0068e	f2 0f 11 45 e4	 movsd	 QWORD PTR tv570[ebp], xmm0
  00693	dd 45 e4	 fld	 QWORD PTR tv570[ebp]
  00696	eb 24		 jmp	 SHORT $LN22@RenderBoss
$LN21@RenderBoss:
  00698	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0069e	8b c8		 mov	 ecx, eax
  006a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  006a6	89 45 0c	 mov	 DWORD PTR tv714[ebp], eax
  006a9	db 45 0c	 fild	 DWORD PTR tv714[ebp]
  006ac	85 c0		 test	 eax, eax
  006ae	79 06		 jns	 SHORT $LN65@RenderBoss
  006b0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN65@RenderBoss:
  006b6	d8 a7 14 02 00
	00		 fsub	 DWORD PTR [edi+532]
$LN22@RenderBoss:

; 257  : 			float fAlpha = FLOAT09 - FLOAT09 * (fRate / 150.f);

  006bc	b8 09 00 00 00	 mov	 eax, 9
  006c1	8b c8		 mov	 ecx, eax
  006c3	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  006c8	8b d0		 mov	 edx, eax
  006ca	b8 09 00 00 00	 mov	 eax, 9
  006cf	89 45 ec	 mov	 DWORD PTR $T506912[ebp], eax
  006d2	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  006d7	89 4d 0c	 mov	 DWORD PTR tv634[ebp], ecx
  006da	db 45 0c	 fild	 DWORD PTR tv634[ebp]
  006dd	85 c9		 test	 ecx, ecx
  006df	79 06		 jns	 SHORT $LN66@RenderBoss
  006e1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN66@RenderBoss:
  006e7	89 55 0c	 mov	 DWORD PTR tv590[ebp], edx
  006ea	db 45 0c	 fild	 DWORD PTR tv590[ebp]
  006ed	85 d2		 test	 edx, edx
  006ef	79 06		 jns	 SHORT $LN67@RenderBoss
  006f1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN67@RenderBoss:
  006f7	de f9		 fdivp	 ST(1), ST(0)
  006f9	8b 4d ec	 mov	 ecx, DWORD PTR $T506912[ebp]
  006fc	d9 5d 0c	 fstp	 DWORD PTR tv574[ebp]
  006ff	d9 45 0c	 fld	 DWORD PTR tv574[ebp]
  00702	db 45 ec	 fild	 DWORD PTR $T506912[ebp]
  00705	85 c9		 test	 ecx, ecx
  00707	79 06		 jns	 SHORT $LN68@RenderBoss
  00709	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN68@RenderBoss:
  0070f	89 45 0c	 mov	 DWORD PTR tv751[ebp], eax
  00712	db 45 0c	 fild	 DWORD PTR tv751[ebp]
  00715	85 c0		 test	 eax, eax
  00717	79 06		 jns	 SHORT $LN69@RenderBoss
  00719	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN69@RenderBoss:
  0071f	de f9		 fdivp	 ST(1), ST(0)

; 258  : 
; 259  : 			if( m_pAttackEffect1 && m_pAttackEffect2 )

  00721	8b 87 a8 01 00
	00		 mov	 eax, DWORD PTR [edi+424]
  00727	d9 5d 0c	 fstp	 DWORD PTR tv755[ebp]
  0072a	d9 45 0c	 fld	 DWORD PTR tv755[ebp]
  0072d	d9 ca		 fxch	 ST(2)
  0072f	d9 5d 0c	 fstp	 DWORD PTR tv431[ebp]
  00732	d9 45 0c	 fld	 DWORD PTR tv431[ebp]
  00735	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@4062c00000000000
  0073b	de ca		 fmulp	 ST(2), ST(0)
  0073d	de e1		 fsubrp	 ST(1), ST(0)
  0073f	d9 5d 0c	 fstp	 DWORD PTR _fAlpha$505445[ebp]
  00742	3b c3		 cmp	 eax, ebx
  00744	0f 84 97 00 00
	00		 je	 $LN1@RenderBoss
  0074a	8b 8f ac 01 00
	00		 mov	 ecx, DWORD PTR [edi+428]
  00750	3b cb		 cmp	 ecx, ebx
  00752	0f 84 89 00 00
	00		 je	 $LN1@RenderBoss

; 260  : 			{
; 261  : 				if( m_stEffectPos.x % 2 == 0)

  00758	8b 97 dc 01 00
	00		 mov	 edx, DWORD PTR [edi+476]
  0075e	81 e2 01 00 00
	80		 and	 edx, -2147483647	; 80000001H
  00764	79 05		 jns	 SHORT $LN70@RenderBoss
  00766	4a		 dec	 edx
  00767	83 ca fe	 or	 edx, -2			; fffffffeH
  0076a	42		 inc	 edx
$LN70@RenderBoss:

; 262  : 				{
; 263  : 					m_pAttackEffect1->SetAlpha( 255 * fAlpha );

  0076b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fAlpha$505445[ebp]
  00770	0f 5a c0	 cvtps2pd xmm0, xmm0
  00773	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  0077b	75 17		 jne	 SHORT $LN2@RenderBoss
  0077d	8b 10		 mov	 edx, DWORD PTR [eax]
  0077f	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00783	0f b6 c9	 movzx	 ecx, cl
  00786	51		 push	 ecx
  00787	8b c8		 mov	 ecx, eax
  00789	ff 52 30	 call	 DWORD PTR [edx+48]

; 264  : 					m_pAttackEffect1->Render( iXPos + 37 + m_stEffectPos.x, iYPos + 37 + m_stEffectPos.y);

  0078c	8b 8f a8 01 00
	00		 mov	 ecx, DWORD PTR [edi+424]

; 265  : 				}
; 266  : 				else

  00792	eb 13		 jmp	 SHORT $LN71@RenderBoss
$LN2@RenderBoss:

; 267  : 				{
; 268  : 					m_pAttackEffect2->SetAlpha( 255 * fAlpha );

  00794	8b 01		 mov	 eax, DWORD PTR [ecx]
  00796	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0079a	0f b6 d2	 movzx	 edx, dl
  0079d	52		 push	 edx
  0079e	ff 50 30	 call	 DWORD PTR [eax+48]

; 269  : 					m_pAttackEffect2->Render( iXPos + 37 + m_stEffectPos.x, iYPos + 37 + m_stEffectPos.y);

  007a1	8b 8f ac 01 00
	00		 mov	 ecx, DWORD PTR [edi+428]
$LN71@RenderBoss:
  007a7	8b 97 e0 01 00
	00		 mov	 edx, DWORD PTR [edi+480]
  007ad	8b 01		 mov	 eax, DWORD PTR [ecx]
  007af	53		 push	 ebx
  007b0	53		 push	 ebx
  007b1	53		 push	 ebx
  007b2	8d 54 32 25	 lea	 edx, DWORD PTR [edx+esi+37]
  007b6	8b 75 08	 mov	 esi, DWORD PTR _iXPos$[ebp]
  007b9	53		 push	 ebx
  007ba	0f 57 c0	 xorps	 xmm0, xmm0
  007bd	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  007c1	8b 97 dc 01 00
	00		 mov	 edx, DWORD PTR [edi+476]
  007c7	51		 push	 ecx
  007c8	51		 push	 ecx
  007c9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  007cf	8d 54 16 25	 lea	 edx, DWORD PTR [esi+edx+37]
  007d3	0f 57 c0	 xorps	 xmm0, xmm0
  007d6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  007da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007df	ff 10		 call	 DWORD PTR [eax]
$LN1@RenderBoss:
  007e1	5f		 pop	 edi
  007e2	5e		 pop	 esi
  007e3	5b		 pop	 ebx

; 270  : 				}
; 271  : 			}
; 272  : 		}
; 273  : 	}
; 274  : }

  007e4	c9		 leave
  007e5	c2 08 00	 ret	 8
?RenderBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z ENDP	; PlazaNPCGaugeWnd::RenderBossMonster
_TEXT	ENDS
PUBLIC	__real@3fecccccc0000000
PUBLIC	??_C@_0CI@BOBDHONF@PlazaNPCGaugeWnd?3?3RenderRaidBoss@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	?RenderRaidBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z ; PlazaNPCGaugeWnd::RenderRaidBossMonster
EXTRN	__imp_?PrintText@ioFontManager@@QAEXMMMPBDHH@Z:PROC
;	COMDAT __real@3fecccccc0000000
CONST	SEGMENT
__real@3fecccccc0000000 DQ 03fecccccc0000000r	; 0.9
CONST	ENDS
;	COMDAT ??_C@_0CI@BOBDHONF@PlazaNPCGaugeWnd?3?3RenderRaidBoss@
CONST	SEGMENT
??_C@_0CI@BOBDHONF@PlazaNPCGaugeWnd?3?3RenderRaidBoss@ DB 'PlazaNPCGaugeW'
	DB	'nd::RenderRaidBossMonster', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?RenderRaidBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z
_TEXT	SEGMENT
tv468 = -20						; size = 8
tv316 = -20						; size = 8
tv729 = -16						; size = 4
tv719 = -16						; size = 4
tv716 = -16						; size = 4
_fHPRate$505465 = -16					; size = 4
tv658 = -12						; size = 4
tv656 = -8						; size = 4
tv699 = -4						; size = 4
tv687 = 8						; size = 4
tv675 = 8						; size = 4
_iXPos$ = 8						; size = 4
_iYPos$ = 12						; size = 4
?RenderRaidBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z PROC	; PlazaNPCGaugeWnd::RenderRaidBossMonster, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 278  : 	iYPos = iYPos + m_nVibY;
; 279  : 
; 280  : 	m_fMaxHP = max( 1.0f, m_fMaxHP );      //

  00003	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _iYPos$[ebp]
  00014	8b f1		 mov	 esi, ecx
  00016	03 be d8 01 00
	00		 add	 edi, DWORD PTR [esi+472]
  0001c	f3 0f 10 86 fc
	01 00 00	 movss	 xmm0, DWORD PTR [esi+508]
  00024	0f 57 c9	 xorps	 xmm1, xmm1
  00027	0f 5a c8	 cvtps2pd xmm1, xmm0
  0002a	66 0f 2f d1	 comisd	 xmm2, xmm1
  0002e	89 7d 0c	 mov	 DWORD PTR _iYPos$[ebp], edi
  00031	76 08		 jbe	 SHORT $LN17@RenderRaid
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
$LN17@RenderRaid:

; 281  : 	if( m_pRaidGaugeBack )

  0003b	8b 8e c0 01 00
	00		 mov	 ecx, DWORD PTR [esi+448]
  00041	33 db		 xor	 ebx, ebx
  00043	f3 0f 11 86 fc
	01 00 00	 movss	 DWORD PTR [esi+508], xmm0
  0004b	3b cb		 cmp	 ecx, ebx
  0004d	74 2c		 je	 SHORT $LN24@RenderRaid

; 282  : 		m_pRaidGaugeBack->Render( iXPos + 15, iYPos + 6 );

  0004f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00051	53		 push	 ebx
  00052	53		 push	 ebx
  00053	53		 push	 ebx
  00054	53		 push	 ebx
  00055	0f 57 c0	 xorps	 xmm0, xmm0
  00058	8d 57 06	 lea	 edx, DWORD PTR [edi+6]
  0005b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0005f	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  00062	51		 push	 ecx
  00063	51		 push	 ecx
  00064	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0006a	83 c2 0f	 add	 edx, 15			; 0000000fH
  0006d	0f 57 c0	 xorps	 xmm0, xmm0
  00070	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	ff 10		 call	 DWORD PTR [eax]
$LN24@RenderRaid:

; 283  : 
; 284  : 	if( m_nCurRank > 0 && m_pWhiteLine )

  0007b	39 9e ec 0b 00
	00		 cmp	 DWORD PTR [esi+3052], ebx
  00081	0f 8e de 00 00
	00		 jle	 $LN13@RenderRaid
  00087	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  0008d	3b cb		 cmp	 ecx, ebx
  0008f	0f 84 d0 00 00
	00		 je	 $LN13@RenderRaid

; 285  : 	{
; 286  : 		m_pWhiteLine->Render( iXPos + 35, iYPos + 41 );

  00095	8b 55 08	 mov	 edx, DWORD PTR _iXPos$[ebp]
  00098	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009a	53		 push	 ebx
  0009b	53		 push	 ebx
  0009c	53		 push	 ebx
  0009d	53		 push	 ebx
  0009e	0f 57 c0	 xorps	 xmm0, xmm0
  000a1	51		 push	 ecx
  000a2	51		 push	 ecx
  000a3	83 c7 29	 add	 edi, 41			; 00000029H
  000a6	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  000aa	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b0	83 c2 23	 add	 edx, 35			; 00000023H
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	ff 10		 call	 DWORD PTR [eax]

; 287  : 
; 288  : 		g_FontMgr.SetBkColor( 0, 0, 0 );

  000c1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFontManager@@SAAAV1@XZ
  000c7	53		 push	 ebx
  000c8	53		 push	 ebx
  000c9	53		 push	 ebx
  000ca	ff d7		 call	 edi
  000cc	8b c8		 mov	 ecx, eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetBkColor@ioFontManager@@QAEXHHH@Z

; 289  : 		g_FontMgr.SetTextStyle( TS_OUTLINE_FULL_2X );

  000d4	6a 05		 push	 5
  000d6	ff d7		 call	 edi
  000d8	8b c8		 mov	 ecx, eax
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextStyle@ioFontManager@@QAEXW4TextStyle@@@Z

; 290  : 		g_FontMgr.SetAlignType( TAT_CENTER );

  000e0	6a 01		 push	 1
  000e2	ff d7		 call	 edi
  000e4	8b c8		 mov	 ecx, eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAlignType@ioFontManager@@QAEXW4TextAlignType@@@Z

; 291  : 		g_FontMgr.SetTextColor( TCT_DEFAULT_WHITE );

  000ec	6a ff		 push	 -1
  000ee	ff d7		 call	 edi
  000f0	8b c8		 mov	 ecx, eax
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetTextColor@ioFontManager@@QAEXK@Z

; 292  : 		g_FontMgr.PrintText( iXPos + 141, iYPos + 47, FONT_SIZE_14, STR(1), m_nCurRank, m_nTotalPlayer );

  000f8	ff b6 f0 0b 00
	00		 push	 DWORD PTR [esi+3056]
  000fe	ff b6 ec 0b 00
	00		 push	 DWORD PTR [esi+3052]
  00104	53		 push	 ebx
  00105	6a 01		 push	 1
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BOBDHONF@PlazaNPCGaugeWnd?3?3RenderRaidBoss@
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioStringManager@@SAAAV1@XZ
  00117	8b c8		 mov	 ecx, eax
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetString@ioStringManager@@QAEPADPBD0HW4FileNamePrefix@1@@Z
  0011f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00127	50		 push	 eax
  00128	8b 45 0c	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0012b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0012e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00134	83 c0 2f	 add	 eax, 47			; 0000002fH
  00137	0f 57 c0	 xorps	 xmm0, xmm0
  0013a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0013e	8b 45 08	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00141	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00147	05 8d 00 00 00	 add	 eax, 141		; 0000008dH
  0014c	0f 57 c0	 xorps	 xmm0, xmm0
  0014f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	ff d7		 call	 edi
  0015a	8b c8		 mov	 ecx, eax
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintText@ioFontManager@@QAEXMMMPBDHH@Z
  00162	8b 7d 0c	 mov	 edi, DWORD PTR _iYPos$[ebp]
$LN13@RenderRaid:

; 293  : 	}
; 294  : 
; 295  : 	if( m_pRaidGauge )

  00165	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  0016b	3b cb		 cmp	 ecx, ebx
  0016d	0f 84 67 04 00
	00		 je	 $LN1@RenderRaid

; 296  : 	{
; 297  : 		float fHPRate = m_fCurHP / m_fMaxHP;

  00173	f3 0f 10 86 00
	02 00 00	 movss	 xmm0, DWORD PTR [esi+512]
  0017b	f3 0f 10 8e fc
	01 00 00	 movss	 xmm1, DWORD PTR [esi+508]
  00183	0f 5a c0	 cvtps2pd xmm0, xmm0
  00186	0f 5a c9	 cvtps2pd xmm1, xmm1
  00189	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0018d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00191	f3 0f 11 45 f0	 movss	 DWORD PTR _fHPRate$505465[ebp], xmm0

; 298  : 		float fWidth = m_pRaidGauge->GetWidth() * fHPRate;

  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  0019c	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _fHPRate$505465[ebp]

; 299  : 
; 300  : 		m_pRaidGauge->RenderWidthCut( iXPos + 15, iYPos + 6, 0, fWidth );

  001a1	8b 4d 08	 mov	 ecx, DWORD PTR _iXPos$[ebp]
  001a4	0f 57 c0	 xorps	 xmm0, xmm0
  001a7	53		 push	 ebx
  001a8	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001ac	53		 push	 ebx
  001ad	0f 5a c0	 cvtps2pd xmm0, xmm0
  001b0	0f 5a c9	 cvtps2pd xmm1, xmm1
  001b3	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001b7	53		 push	 ebx
  001b8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001bc	f3 0f 2c c0	 cvttss2si eax, xmm0
  001c0	50		 push	 eax
  001c1	83 c1 0f	 add	 ecx, 15			; 0000000fH
  001c4	53		 push	 ebx
  001c5	51		 push	 ecx
  001c6	51		 push	 ecx
  001c7	83 c7 06	 add	 edi, 6
  001ca	0f 57 c0	 xorps	 xmm0, xmm0
  001cd	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  001d1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?RenderWidthCut@ioUIRenderImage@@QAEXMMHHW4UIRenderType@@W4TextureFilterOption@@0@Z
  001d7	0f 57 c9	 xorps	 xmm1, xmm1
  001da	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  001de	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  001e4	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001ea	89 45 fc	 mov	 DWORD PTR tv699[ebp], eax
  001ed	f3 0f 11 45 f8	 movss	 DWORD PTR tv656[ebp], xmm0
  001f2	f3 0f 11 4d f4	 movss	 DWORD PTR tv658[ebp], xmm1
  001f7	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  001fc	ff d7		 call	 edi

; 301  : 		if( fHPRate <= 0.30f && m_bScreen )

  001fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00206	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR _fHPRate$505465[ebp]
  0020a	72 2f		 jb	 SHORT $LN25@RenderRaid
  0020c	38 9e 0c 02 00
	00		 cmp	 BYTE PTR [esi+524], bl
  00212	74 27		 je	 SHORT $LN25@RenderRaid

; 302  : 			m_pRaidGauge->RenderWidthCut( iXPos + 15, iYPos + 6, 0, fWidth, UI_RENDER_SCREEN );

  00214	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv656[ebp]
  00219	53		 push	 ebx
  0021a	53		 push	 ebx
  0021b	6a 01		 push	 1
  0021d	ff 75 fc	 push	 DWORD PTR tv699[ebp]
  00220	53		 push	 ebx
  00221	51		 push	 ecx
  00222	51		 push	 ecx
  00223	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  00229	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0022f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv658[ebp]
  00234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00239	ff d7		 call	 edi
$LN25@RenderRaid:

; 303  : 
; 304  : 		if( m_fAniHP > m_fCurHP )

  0023b	f3 0f 10 86 04
	02 00 00	 movss	 xmm0, DWORD PTR [esi+516]
  00243	f3 0f 10 8e 00
	02 00 00	 movss	 xmm1, DWORD PTR [esi+512]
  0024b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0024e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00251	66 0f 2f c1	 comisd	 xmm0, xmm1
  00255	0f 86 8f 00 00
	00		 jbe	 $LN10@RenderRaid

; 305  : 		{
; 306  : 			float fAniWidth = m_pRaidGauge->GetWidth() * ( m_fAniHP / m_fMaxHP );

  0025b	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  00267	f3 0f 10 8e 04
	02 00 00	 movss	 xmm1, DWORD PTR [esi+516]
  0026f	f3 0f 10 96 fc
	01 00 00	 movss	 xmm2, DWORD PTR [esi+508]
  00277	0f 57 c0	 xorps	 xmm0, xmm0

; 307  : 			// Screen x 2
; 308  : 			m_pRaidGauge->RenderWidthCut( iXPos + 15, iYPos + 6, fWidth, fAniWidth, UI_RENDER_SCREEN );

  0027a	53		 push	 ebx
  0027b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0027f	53		 push	 ebx
  00280	0f 5a c0	 cvtps2pd xmm0, xmm0
  00283	0f 5a c9	 cvtps2pd xmm1, xmm1
  00286	0f 5a d2	 cvtps2pd xmm2, xmm2
  00289	6a 01		 push	 1
  0028b	f2 0f 5e ca	 divsd	 xmm1, xmm2
  0028f	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00293	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00297	f3 0f 2c c0	 cvttss2si eax, xmm0
  0029b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv656[ebp]
  002a0	50		 push	 eax
  002a1	ff 75 fc	 push	 DWORD PTR tv699[ebp]
  002a4	89 45 f0	 mov	 DWORD PTR tv716[ebp], eax
  002a7	51		 push	 ecx
  002a8	51		 push	 ecx
  002a9	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  002af	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002b5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv658[ebp]
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	ff d7		 call	 edi

; 309  : 			m_pRaidGauge->RenderWidthCut( iXPos + 15, iYPos + 6, fWidth, fAniWidth, UI_RENDER_SCREEN );

  002c1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv656[ebp]
  002c6	53		 push	 ebx
  002c7	53		 push	 ebx
  002c8	6a 01		 push	 1
  002ca	ff 75 f0	 push	 DWORD PTR tv716[ebp]
  002cd	ff 75 fc	 push	 DWORD PTR tv699[ebp]
  002d0	51		 push	 ecx
  002d1	51		 push	 ecx
  002d2	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  002d8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002de	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv658[ebp]
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	ff d7		 call	 edi
$LN10@RenderRaid:

; 310  : 		}
; 311  : 
; 312  : 		if( m_fBlinkTime != 0.f )

  002ea	f3 0f 10 86 14
	02 00 00	 movss	 xmm0, DWORD PTR [esi+532]
  002f2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  002f9	9f		 lahf
  002fa	f6 c4 44	 test	 ah, 68			; 00000044H
  002fd	0f 8b c9 00 00
	00		 jnp	 $LN23@RenderRaid

; 313  : 		{
; 314  : 			float fRate = max( 0.f, FRAMEGETTIME() - m_fBlinkTime );

  00303	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00309	8b c8		 mov	 ecx, eax
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00311	89 45 f0	 mov	 DWORD PTR tv729[ebp], eax
  00314	db 45 f0	 fild	 DWORD PTR tv729[ebp]
  00317	85 c0		 test	 eax, eax
  00319	79 06		 jns	 SHORT $LN28@RenderRaid
  0031b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@RenderRaid:
  00321	d8 a6 14 02 00
	00		 fsub	 DWORD PTR [esi+532]
  00327	d9 ee		 fldz
  00329	df f1		 fcomip	 ST(1)
  0032b	dd d8		 fstp	 ST(0)
  0032d	76 05		 jbe	 SHORT $LN19@RenderRaid
  0032f	0f 57 c0	 xorps	 xmm0, xmm0
  00332	eb 2c		 jmp	 SHORT $LN20@RenderRaid
$LN19@RenderRaid:
  00334	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0033a	8b c8		 mov	 ecx, eax
  0033c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00342	89 45 f0	 mov	 DWORD PTR tv719[ebp], eax
  00345	db 45 f0	 fild	 DWORD PTR tv719[ebp]
  00348	85 c0		 test	 eax, eax
  0034a	79 06		 jns	 SHORT $LN29@RenderRaid
  0034c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@RenderRaid:
  00352	d8 a6 14 02 00
	00		 fsub	 DWORD PTR [esi+532]
  00358	dd 5d ec	 fstp	 QWORD PTR tv316[ebp]
  0035b	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR tv316[ebp]
$LN20@RenderRaid:

; 315  : 			float fAlpha = 0.9f - 0.9f * (fRate / 150.f);
; 316  : 
; 317  : 			if( m_pRaidGaugeWhite )

  00360	8b 8e c4 01 00
	00		 mov	 ecx, DWORD PTR [esi+452]
  00366	3b cb		 cmp	 ecx, ebx
  00368	74 62		 je	 SHORT $LN23@RenderRaid

; 318  : 			{
; 319  : 				m_pRaidGaugeWhite->SetAlpha( 255 * fAlpha );

  0036a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0036c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00370	0f 5a c8	 cvtps2pd xmm1, xmm0
  00373	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fecccccc0000000
  0037b	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4062c00000000000
  00383	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00387	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0038b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0038f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00393	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  0039b	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0039f	0f b6 d2	 movzx	 edx, dl
  003a2	52		 push	 edx
  003a3	ff 50 30	 call	 DWORD PTR [eax+48]

; 320  : 				m_pRaidGaugeWhite->RenderWidthCut( iXPos + 15, iYPos + 6, 0, fWidth, UI_RENDER_NORMAL );

  003a6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv656[ebp]
  003ab	53		 push	 ebx
  003ac	53		 push	 ebx
  003ad	53		 push	 ebx
  003ae	ff 75 fc	 push	 DWORD PTR tv699[ebp]
  003b1	53		 push	 ebx
  003b2	51		 push	 ecx
  003b3	51		 push	 ecx
  003b4	8b 8e c4 01 00
	00		 mov	 ecx, DWORD PTR [esi+452]
  003ba	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003c0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv658[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	ff d7		 call	 edi
$LN23@RenderRaid:

; 321  : 			}
; 322  : 		}
; 323  : 
; 324  : 		if( m_pNpcImgName )

  003cc	8b 8e b8 01 00
	00		 mov	 ecx, DWORD PTR [esi+440]

; 325  : 			m_pNpcImgName->Render( iXPos + 141, iYPos + 13, UI_RENDER_ADD );

  003d2	8b 7d 08	 mov	 edi, DWORD PTR _iXPos$[ebp]
  003d5	3b cb		 cmp	 ecx, ebx
  003d7	74 30		 je	 SHORT $LN7@RenderRaid
  003d9	8b 55 0c	 mov	 edx, DWORD PTR _iYPos$[ebp]
  003dc	8b 01		 mov	 eax, DWORD PTR [ecx]
  003de	53		 push	 ebx
  003df	53		 push	 ebx
  003e0	53		 push	 ebx
  003e1	6a 03		 push	 3
  003e3	83 c2 0d	 add	 edx, 13			; 0000000dH
  003e6	0f 57 c0	 xorps	 xmm0, xmm0
  003e9	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  003ed	51		 push	 ecx
  003ee	51		 push	 ecx
  003ef	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003f5	8d 97 8d 00 00
	00		 lea	 edx, DWORD PTR [edi+141]
  003fb	0f 57 c0	 xorps	 xmm0, xmm0
  003fe	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	ff 10		 call	 DWORD PTR [eax]
$LN7@RenderRaid:

; 326  : 
; 327  : 		if( m_pIconBack[m_eGaugeType] )

  00409	8b 86 e4 01 00
	00		 mov	 eax, DWORD PTR [esi+484]
  0040f	8d 84 86 90 01
	00 00		 lea	 eax, DWORD PTR [esi+eax*4+400]
  00416	39 18		 cmp	 DWORD PTR [eax], ebx
  00418	74 2f		 je	 SHORT $LN27@RenderRaid

; 328  : 			m_pIconBack[m_eGaugeType]->Render( iXPos + 1, iYPos + 21, UI_RENDER_SCREEN );

  0041a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041c	8b 55 0c	 mov	 edx, DWORD PTR _iYPos$[ebp]
  0041f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00421	53		 push	 ebx
  00422	53		 push	 ebx
  00423	53		 push	 ebx
  00424	6a 01		 push	 1
  00426	83 c2 15	 add	 edx, 21			; 00000015H
  00429	0f 57 c0	 xorps	 xmm0, xmm0
  0042c	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00430	51		 push	 ecx
  00431	51		 push	 ecx
  00432	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00438	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0043b	0f 57 c0	 xorps	 xmm0, xmm0
  0043e	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00442	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00447	ff 10		 call	 DWORD PTR [eax]
$LN27@RenderRaid:

; 329  : 
; 330  : 		if( m_pMonsterIcon )

  00449	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  0044f	3b cb		 cmp	 ecx, ebx
  00451	74 4d		 je	 SHORT $LN5@RenderRaid

; 331  : 		{
; 332  : 			m_pMonsterIcon->SetScale( 0.66f, 0.66f );

  00453	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f28f5c3
  0045b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0045d	51		 push	 ecx
  0045e	51		 push	 ecx
  0045f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	ff 50 18	 call	 DWORD PTR [eax+24]

; 333  : 			m_pMonsterIcon->Render( iXPos + 1, iYPos + 21, UI_RENDER_NORMAL, TFO_BILINEAR );

  0046d	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  00473	8b 55 0c	 mov	 edx, DWORD PTR _iYPos$[ebp]
  00476	8b 01		 mov	 eax, DWORD PTR [ecx]
  00478	53		 push	 ebx
  00479	53		 push	 ebx
  0047a	6a 01		 push	 1
  0047c	53		 push	 ebx
  0047d	83 c2 15	 add	 edx, 21			; 00000015H
  00480	0f 57 c0	 xorps	 xmm0, xmm0
  00483	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00487	51		 push	 ecx
  00488	51		 push	 ecx
  00489	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0048f	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  00492	0f 57 c0	 xorps	 xmm0, xmm0
  00495	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00499	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049e	ff 10		 call	 DWORD PTR [eax]
$LN5@RenderRaid:

; 334  : 		}
; 335  : 
; 336  : 		if( m_fBlinkTime != 0.f )

  004a0	f3 0f 10 86 14
	02 00 00	 movss	 xmm0, DWORD PTR [esi+532]
  004a8	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  004af	9f		 lahf
  004b0	f6 c4 44	 test	 ah, 68			; 00000044H
  004b3	0f 8b 21 01 00
	00		 jnp	 $LN1@RenderRaid

; 337  : 		{
; 338  : 			float fRate = max( 0.f, FRAMEGETTIME() - m_fBlinkTime );

  004b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  004bf	8b c8		 mov	 ecx, eax
  004c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  004c7	89 45 08	 mov	 DWORD PTR tv687[ebp], eax
  004ca	db 45 08	 fild	 DWORD PTR tv687[ebp]
  004cd	85 c0		 test	 eax, eax
  004cf	79 06		 jns	 SHORT $LN30@RenderRaid
  004d1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN30@RenderRaid:
  004d7	d8 a6 14 02 00
	00		 fsub	 DWORD PTR [esi+532]
  004dd	d9 ee		 fldz
  004df	df f1		 fcomip	 ST(1)
  004e1	dd d8		 fstp	 ST(0)
  004e3	76 05		 jbe	 SHORT $LN21@RenderRaid
  004e5	0f 57 c0	 xorps	 xmm0, xmm0
  004e8	eb 2c		 jmp	 SHORT $LN22@RenderRaid
$LN21@RenderRaid:
  004ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  004f0	8b c8		 mov	 ecx, eax
  004f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  004f8	89 45 08	 mov	 DWORD PTR tv675[ebp], eax
  004fb	db 45 08	 fild	 DWORD PTR tv675[ebp]
  004fe	85 c0		 test	 eax, eax
  00500	79 06		 jns	 SHORT $LN31@RenderRaid
  00502	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN31@RenderRaid:
  00508	d8 a6 14 02 00
	00		 fsub	 DWORD PTR [esi+532]
  0050e	dd 5d ec	 fstp	 QWORD PTR tv468[ebp]
  00511	f2 0f 10 45 ec	 movsd	 xmm0, QWORD PTR tv468[ebp]
$LN22@RenderRaid:

; 339  : 			float fAlpha = 0.9f - 0.9f * (fRate / 150.f);
; 340  : 
; 341  : 			if( m_pAttackEffect1 && m_pAttackEffect2 )

  00516	8b 8e a8 01 00
	00		 mov	 ecx, DWORD PTR [esi+424]
  0051c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00520	0f 5a c8	 cvtps2pd xmm1, xmm0
  00523	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fecccccc0000000
  0052b	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4062c00000000000
  00533	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00537	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0053b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0053f	3b cb		 cmp	 ecx, ebx
  00541	0f 84 93 00 00
	00		 je	 $LN1@RenderRaid
  00547	8b 86 ac 01 00
	00		 mov	 eax, DWORD PTR [esi+428]
  0054d	3b c3		 cmp	 eax, ebx
  0054f	0f 84 85 00 00
	00		 je	 $LN1@RenderRaid

; 342  : 			{
; 343  : 				if( m_stEffectPos.x % 2 == 0)

  00555	8b 96 dc 01 00
	00		 mov	 edx, DWORD PTR [esi+476]
  0055b	81 e2 01 00 00
	80		 and	 edx, -2147483647	; 80000001H
  00561	79 05		 jns	 SHORT $LN32@RenderRaid
  00563	4a		 dec	 edx
  00564	83 ca fe	 or	 edx, -2			; fffffffeH
  00567	42		 inc	 edx
$LN32@RenderRaid:

; 344  : 				{
; 345  : 					m_pAttackEffect1->SetAlpha( 255 * fAlpha );

  00568	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0056c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@406fe00000000000
  00574	75 15		 jne	 SHORT $LN2@RenderRaid
  00576	8b 01		 mov	 eax, DWORD PTR [ecx]
  00578	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0057c	0f b6 d2	 movzx	 edx, dl
  0057f	52		 push	 edx
  00580	ff 50 30	 call	 DWORD PTR [eax+48]

; 346  : 					m_pAttackEffect1->Render( iXPos + 37 + m_stEffectPos.x, iYPos + 37 + m_stEffectPos.y);

  00583	8b 8e a8 01 00
	00		 mov	 ecx, DWORD PTR [esi+424]

; 347  : 				}
; 348  : 				else

  00589	eb 15		 jmp	 SHORT $LN33@RenderRaid
$LN2@RenderRaid:

; 349  : 				{
; 350  : 					m_pAttackEffect2->SetAlpha( 255 * fAlpha );

  0058b	8b 10		 mov	 edx, DWORD PTR [eax]
  0058d	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00591	0f b6 c9	 movzx	 ecx, cl
  00594	51		 push	 ecx
  00595	8b c8		 mov	 ecx, eax
  00597	ff 52 30	 call	 DWORD PTR [edx+48]

; 351  : 					m_pAttackEffect2->Render( iXPos + 37 + m_stEffectPos.x, iYPos + 37 + m_stEffectPos.y);

  0059a	8b 8e ac 01 00
	00		 mov	 ecx, DWORD PTR [esi+428]
$LN33@RenderRaid:
  005a0	8b 96 e0 01 00
	00		 mov	 edx, DWORD PTR [esi+480]
  005a6	8b 01		 mov	 eax, DWORD PTR [ecx]
  005a8	53		 push	 ebx
  005a9	53		 push	 ebx
  005aa	53		 push	 ebx
  005ab	53		 push	 ebx
  005ac	8b 5d 0c	 mov	 ebx, DWORD PTR _iYPos$[ebp]
  005af	8d 54 1a 25	 lea	 edx, DWORD PTR [edx+ebx+37]
  005b3	0f 57 c0	 xorps	 xmm0, xmm0
  005b6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  005ba	8b 96 dc 01 00
	00		 mov	 edx, DWORD PTR [esi+476]
  005c0	51		 push	 ecx
  005c1	51		 push	 ecx
  005c2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  005c8	8d 54 3a 25	 lea	 edx, DWORD PTR [edx+edi+37]
  005cc	0f 57 c0	 xorps	 xmm0, xmm0
  005cf	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  005d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d8	ff 10		 call	 DWORD PTR [eax]
$LN1@RenderRaid:
  005da	5f		 pop	 edi
  005db	5e		 pop	 esi
  005dc	5b		 pop	 ebx

; 352  : 				}
; 353  : 			}
; 354  : 		}
; 355  : 	}
; 356  : }

  005dd	c9		 leave
  005de	c2 08 00	 ret	 8
?RenderRaidBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z ENDP	; PlazaNPCGaugeWnd::RenderRaidBossMonster
_TEXT	ENDS
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?SetWndPos@ioWnd@@QAEXHH@Z:PROC
EXTRN	__imp_?GetYPos@ioWnd@@QBEHXZ:PROC
EXTRN	?GUIPosLoadInt@ioSP2GUIManager@@QAEHPBD0HH@Z:PROC ; ioSP2GUIManager::GUIPosLoadInt
EXTRN	__imp_?GetXPos@ioWnd@@QBEHXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_create@PlazaNPCGaugeWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_create@PlazaNPCGaugeWnd@@UAEXXZ PROC		; PlazaNPCGaugeWnd::iwm_create, COMDAT
; _this$ = ecx

; 384  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 385  : 	int iXPos = g_GUIMgr.GUIPosLoadInt( "PlazaNPCGaugeWnd", "XPos", GetXPos() ,POS_SAVE_VERSION );

  00003	6a 04		 push	 4
  00005	8b f9		 mov	 edi, ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  0000d	50		 push	 eax
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_04LNCKCFGC@XPos?$AA@
  00013	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BB@GPDONEMJ@PlazaNPCGaugeWnd?$AA@
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 ?GUIPosLoadInt@ioSP2GUIManager@@QAEHPBD0HH@Z ; ioSP2GUIManager::GUIPosLoadInt

; 386  : 	int iYPos = g_GUIMgr.GUIPosLoadInt( "PlazaNPCGaugeWnd", "YPos", GetYPos() ,POS_SAVE_VERSION );

  00025	6a 04		 push	 4
  00027	8b cf		 mov	 ecx, edi
  00029	8b d8		 mov	 ebx, eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetYPos@ioWnd@@QBEHXZ
  00031	50		 push	 eax
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_04IAEKAMNC@YPos?$AA@
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0003d	8b c8		 mov	 ecx, eax
  0003f	e8 00 00 00 00	 call	 ?GUIPosLoadInt@ioSP2GUIManager@@QAEHPBD0HH@Z ; ioSP2GUIManager::GUIPosLoadInt
  00044	8b f0		 mov	 esi, eax

; 387  : 
; 388  : 	if( COMPARE( iXPos, 0, Setting::Width() ) && 
; 389  : 		COMPARE( iYPos, 0, Setting::Height() ) )

  00046	85 db		 test	 ebx, ebx
  00048	78 20		 js	 SHORT $LN2@iwm_create
  0004a	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  0004f	3b d8		 cmp	 ebx, eax
  00051	7d 17		 jge	 SHORT $LN2@iwm_create
  00053	85 f6		 test	 esi, esi
  00055	78 13		 js	 SHORT $LN2@iwm_create
  00057	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  0005c	3b f0		 cmp	 esi, eax
  0005e	7d 0a		 jge	 SHORT $LN2@iwm_create

; 390  : 	{
; 391  : 		SetWndPos( iXPos, iYPos );

  00060	56		 push	 esi
  00061	53		 push	 ebx
  00062	8b cf		 mov	 ecx, edi
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z
$LN2@iwm_create:

; 392  : 	}
; 393  : 
; 394  : 	m_iDefaultX = GetDerivedPosX();

  0006a	8b cf		 mov	 ecx, edi
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 395  : 	m_iDefaultY = GetDerivedPosY();

  00072	8b cf		 mov	 ecx, edi
  00074	89 87 d0 01 00
	00		 mov	 DWORD PTR [edi+464], eax
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  00080	89 87 d4 01 00
	00		 mov	 DWORD PTR [edi+468], eax

; 396  : 
; 397  : 	if( m_bPosToDefualt )

  00086	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?m_bPosToDefualt@PlazaNPCGaugeWnd@@1_NA, 0 ; PlazaNPCGaugeWnd::m_bPosToDefualt
  0008d	74 1e		 je	 SHORT $LN1@iwm_create

; 398  : 	{
; 399  : 		m_bPosToDefualt = false;
; 400  : 		SetPositionToDefault( Setting::Width(), Setting::Height(), true );

  0008f	6a 00		 push	 0
  00091	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?m_bPosToDefualt@PlazaNPCGaugeWnd@@1_NA, 0 ; PlazaNPCGaugeWnd::m_bPosToDefualt
  00098	8b 37		 mov	 esi, DWORD PTR [edi]
  0009a	6a 01		 push	 1
  0009c	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  000a7	50		 push	 eax
  000a8	8b cf		 mov	 ecx, edi
  000aa	ff 56 30	 call	 DWORD PTR [esi+48]
$LN1@iwm_create:

; 401  : 	}
; 402  : }

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	c3		 ret	 0
?iwm_create@PlazaNPCGaugeWnd@@UAEXXZ ENDP		; PlazaNPCGaugeWnd::iwm_create
_TEXT	ENDS
PUBLIC	?SetBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00K@Z ; PlazaNPCGaugeWnd::SetBossMonster
EXTRN	__imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z:PROC
EXTRN	__imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ:PROC
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?SetBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00K@Z
_TEXT	SEGMENT
_iGaugeType$ = 8					; size = 4
_rkMonsterName$ = 12					; size = 4
_rkMonsterIcon$ = 16					; size = 4
_rkMonsterImgName$ = 20					; size = 4
_dwAliveTime$ = 24					; size = 4
?SetBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00K@Z PROC ; PlazaNPCGaugeWnd::SetBossMonster, COMDAT
; _this$ = ecx

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 406  : 	m_eGaugeType = (GaugeType)iGaugeType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iGaugeType$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 407  : 	m_szMonsterName = rkMonsterName;

  00009	ff 75 0c	 push	 DWORD PTR _rkMonsterName$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	8d 8e e8 01 00
	00		 lea	 ecx, DWORD PTR [esi+488]
  00014	89 86 e4 01 00
	00		 mov	 DWORD PTR [esi+484], eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 408  : 
; 409  : 	SAFEDELETE( m_pMonsterIcon );

  00020	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  00026	85 c9		 test	 ecx, ecx
  00028	74 0e		 je	 SHORT $LN2@SetBossMon
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	6a 01		 push	 1
  0002e	ff 50 40	 call	 DWORD PTR [eax+64]
  00031	83 a6 b4 01 00
	00 00		 and	 DWORD PTR [esi+436], 0
$LN2@SetBossMon:

; 410  : 	m_pMonsterIcon = g_UIImageSetMgr.CreateImageByFullName( rkMonsterIcon );

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0003e	6a 00		 push	 0
  00040	ff 75 10	 push	 DWORD PTR _rkMonsterIcon$[ebp]
  00043	ff d7		 call	 edi
  00045	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z
  0004b	8b c8		 mov	 ecx, eax
  0004d	ff d3		 call	 ebx

; 411  : 
; 412  : 	SAFEDELETE( m_pNpcImgName );

  0004f	8b 8e b8 01 00
	00		 mov	 ecx, DWORD PTR [esi+440]
  00055	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
  0005b	85 c9		 test	 ecx, ecx
  0005d	74 0e		 je	 SHORT $LN1@SetBossMon
  0005f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00061	6a 01		 push	 1
  00063	ff 50 40	 call	 DWORD PTR [eax+64]
  00066	83 a6 b8 01 00
	00 00		 and	 DWORD PTR [esi+440], 0
$LN1@SetBossMon:

; 413  : 	m_pNpcImgName = g_UIImageSetMgr.CreateImageByFullName( rkMonsterImgName );

  0006d	6a 00		 push	 0
  0006f	ff 75 14	 push	 DWORD PTR _rkMonsterImgName$[ebp]
  00072	ff d7		 call	 edi
  00074	8b c8		 mov	 ecx, eax
  00076	ff d3		 call	 ebx

; 414  : 
; 415  : 	m_fBlinkTime = 0.f;

  00078	0f 57 c0	 xorps	 xmm0, xmm0

; 416  : 	m_fAniHP = 0.0f;
; 417  : 	m_nVibY = 0;

  0007b	83 a6 d8 01 00
	00 00		 and	 DWORD PTR [esi+472], 0
  00082	89 86 b8 01 00
	00		 mov	 DWORD PTR [esi+440], eax
  00088	f3 0f 11 86 14
	02 00 00	 movss	 DWORD PTR [esi+532], xmm0
  00090	f3 0f 11 86 04
	02 00 00	 movss	 DWORD PTR [esi+516], xmm0

; 418  : 
; 419  : 	m_dwTimer = dwAliveTime + FRAMEGETTIME();

  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  0009e	8b c8		 mov	 ecx, eax
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000a6	03 45 18	 add	 eax, DWORD PTR _dwAliveTime$[ebp]
  000a9	5f		 pop	 edi
  000aa	89 86 f8 01 00
	00		 mov	 DWORD PTR [esi+504], eax

; 420  : 	m_bIsRaidMode = false;

  000b0	c6 86 e8 0b 00
	00 00		 mov	 BYTE PTR [esi+3048], 0
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx

; 421  : }

  000b9	5d		 pop	 ebp
  000ba	c2 14 00	 ret	 20			; 00000014H
?SetBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00K@Z ENDP ; PlazaNPCGaugeWnd::SetBossMonster
_TEXT	ENDS
PUBLIC	?UpdateBossMonster@PlazaNPCGaugeWnd@@QAEXMM@Z	; PlazaNPCGaugeWnd::UpdateBossMonster
EXTRN	?Random@IORandom@@QAEIII@Z:PROC			; IORandom::Random
EXTRN	?Randomize@IORandom@@QAEXXZ:PROC		; IORandom::Randomize
; Function compile flags: /Ogsp
;	COMDAT ?UpdateBossMonster@PlazaNPCGaugeWnd@@QAEXMM@Z
_TEXT	SEGMENT
tv189 = 8						; size = 4
tv186 = 8						; size = 4
_fCurHP$ = 8						; size = 4
_fMaxHP$ = 12						; size = 4
?UpdateBossMonster@PlazaNPCGaugeWnd@@QAEXMM@Z PROC	; PlazaNPCGaugeWnd::UpdateBossMonster, COMDAT
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 425  : 	float fPrevHP = m_fCurHP;
; 426  : 	m_fCurHP = fCurHP;
; 427  : 	m_fMaxHP = fMaxHP;
; 428  : 
; 429  : 	if( m_fAniHP == 0.0f && m_fCurHP > 0.0f )

  00003	0f 57 c9	 xorps	 xmm1, xmm1
  00006	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fCurHP$[ebp]
  0000b	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _fMaxHP$[ebp]
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	f3 0f 10 86 04
	02 00 00	 movss	 xmm0, DWORD PTR [esi+516]
  0001b	f3 0f 10 9e 00
	02 00 00	 movss	 xmm3, DWORD PTR [esi+512]
  00023	0f 2e c1	 ucomiss xmm0, xmm1
  00026	9f		 lahf
  00027	f3 0f 11 96 00
	02 00 00	 movss	 DWORD PTR [esi+512], xmm2
  0002f	f3 0f 11 a6 fc
	01 00 00	 movss	 DWORD PTR [esi+508], xmm4
  00037	f6 c4 44	 test	 ah, 68			; 00000044H
  0003a	7a 12		 jp	 SHORT $LN4@UpdateBoss
  0003c	0f 2f d1	 comiss	 xmm2, xmm1
  0003f	76 0d		 jbe	 SHORT $LN4@UpdateBoss

; 430  : 	{	
; 431  : 		m_fAniHP = fMaxHP;

  00041	f3 0f 11 a6 04
	02 00 00	 movss	 DWORD PTR [esi+516], xmm4
  00049	e9 ab 00 00 00	 jmp	 $LN2@UpdateBoss
$LN4@UpdateBoss:

; 432  : 	}
; 433  : 	else if( fPrevHP != m_fCurHP )

  0004e	0f 5a cb	 cvtps2pd xmm1, xmm3
  00051	0f 5a d2	 cvtps2pd xmm2, xmm2
  00054	66 0f 2e ca	 ucomisd xmm1, xmm2
  00058	9f		 lahf
  00059	f6 c4 44	 test	 ah, 68			; 00000044H
  0005c	0f 8b 97 00 00
	00		 jnp	 $LN2@UpdateBoss

; 434  : 	{
; 435  : 		if( m_fAniHP == fPrevHP )

  00062	0f 5a c0	 cvtps2pd xmm0, xmm0
  00065	0f 5a cb	 cvtps2pd xmm1, xmm3
  00068	66 0f 2e c1	 ucomisd xmm0, xmm1
  0006c	9f		 lahf
  0006d	53		 push	 ebx
  0006e	57		 push	 edi
  0006f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00075	f6 c4 44	 test	 ah, 68			; 00000044H
  00078	7a 20		 jp	 SHORT $LN1@UpdateBoss

; 436  : 			m_fCurAniTime = FRAMEGETTIME();

  0007a	ff d7		 call	 edi
  0007c	8b c8		 mov	 ecx, eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00084	89 45 08	 mov	 DWORD PTR tv189[ebp], eax
  00087	db 45 08	 fild	 DWORD PTR tv189[ebp]
  0008a	85 c0		 test	 eax, eax
  0008c	79 06		 jns	 SHORT $LN7@UpdateBoss
  0008e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN7@UpdateBoss:
  00094	d9 9e 08 02 00
	00		 fstp	 DWORD PTR [esi+520]
$LN1@UpdateBoss:

; 437  : 
; 438  : 		m_fBlinkTime = FRAMEGETTIME();

  0009a	ff d7		 call	 edi
  0009c	8b c8		 mov	 ecx, eax
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000a4	89 45 08	 mov	 DWORD PTR tv186[ebp], eax
  000a7	db 45 08	 fild	 DWORD PTR tv186[ebp]
  000aa	85 c0		 test	 eax, eax
  000ac	79 06		 jns	 SHORT $LN8@UpdateBoss
  000ae	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@UpdateBoss:

; 439  : 
; 440  : 		m_IORandom.Randomize();

  000b4	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  000ba	d9 9e 14 02 00
	00		 fstp	 DWORD PTR [esi+532]
  000c0	e8 00 00 00 00	 call	 ?Randomize@IORandom@@QAEXXZ ; IORandom::Randomize

; 441  : 		int nRandomX = m_IORandom.Random(0, 20);

  000c5	6a 14		 push	 20			; 00000014H
  000c7	6a 00		 push	 0
  000c9	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  000cf	e8 00 00 00 00	 call	 ?Random@IORandom@@QAEIII@Z ; IORandom::Random

; 442  : 		int nRandomY = m_IORandom.Random(0, 20);

  000d4	6a 14		 push	 20			; 00000014H
  000d6	6a 00		 push	 0
  000d8	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  000de	8b d8		 mov	 ebx, eax
  000e0	e8 00 00 00 00	 call	 ?Random@IORandom@@QAEIII@Z ; IORandom::Random

; 443  : 
; 444  : 		m_stEffectPos.x = nRandomX - 10;

  000e5	83 c3 f6	 add	 ebx, -10		; fffffff6H

; 445  : 		m_stEffectPos.y = nRandomY - 10;

  000e8	83 c0 f6	 add	 eax, -10		; fffffff6H
  000eb	5f		 pop	 edi
  000ec	89 9e dc 01 00
	00		 mov	 DWORD PTR [esi+476], ebx
  000f2	89 86 e0 01 00
	00		 mov	 DWORD PTR [esi+480], eax
  000f8	5b		 pop	 ebx
$LN2@UpdateBoss:
  000f9	5e		 pop	 esi

; 446  : 	}
; 447  : }

  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
?UpdateBossMonster@PlazaNPCGaugeWnd@@QAEXMM@Z ENDP	; PlazaNPCGaugeWnd::UpdateBossMonster
_TEXT	ENDS
PUBLIC	?SetRaidBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00@Z ; PlazaNPCGaugeWnd::SetRaidBossMonster
; Function compile flags: /Ogsp
;	COMDAT ?SetRaidBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00@Z
_TEXT	SEGMENT
_iGaugeType$ = 8					; size = 4
_rkMonsterName$ = 12					; size = 4
_rkMonsterIcon$ = 16					; size = 4
_rkMonsterImgName$ = 20					; size = 4
?SetRaidBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00@Z PROC ; PlazaNPCGaugeWnd::SetRaidBossMonster, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 451  : 	m_eGaugeType = (GaugeType)iGaugeType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iGaugeType$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 452  : 	m_szMonsterName = rkMonsterName;

  00009	ff 75 0c	 push	 DWORD PTR _rkMonsterName$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	8d 8e e8 01 00
	00		 lea	 ecx, DWORD PTR [esi+488]
  00014	89 86 e4 01 00
	00		 mov	 DWORD PTR [esi+484], eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 453  : 
; 454  : 	SAFEDELETE( m_pMonsterIcon );

  00020	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  00026	85 c9		 test	 ecx, ecx
  00028	74 0e		 je	 SHORT $LN2@SetRaidBos
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	6a 01		 push	 1
  0002e	ff 50 40	 call	 DWORD PTR [eax+64]
  00031	83 a6 b4 01 00
	00 00		 and	 DWORD PTR [esi+436], 0
$LN2@SetRaidBos:

; 455  : 	m_pMonsterIcon = g_UIImageSetMgr.CreateImageByFullName( rkMonsterIcon );

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioUIImageSetManager@@SAAAV1@XZ
  0003e	6a 00		 push	 0
  00040	ff 75 10	 push	 DWORD PTR _rkMonsterIcon$[ebp]
  00043	ff d7		 call	 edi
  00045	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?CreateImageByFullName@ioUIImageSetManager@@QAEPAVioUIRenderImage@@ABVioHashString@@_N@Z
  0004b	8b c8		 mov	 ecx, eax
  0004d	ff d3		 call	 ebx

; 456  : 
; 457  : 	SAFEDELETE( m_pNpcImgName );

  0004f	8b 8e b8 01 00
	00		 mov	 ecx, DWORD PTR [esi+440]
  00055	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
  0005b	85 c9		 test	 ecx, ecx
  0005d	74 0e		 je	 SHORT $LN1@SetRaidBos
  0005f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00061	6a 01		 push	 1
  00063	ff 50 40	 call	 DWORD PTR [eax+64]
  00066	83 a6 b8 01 00
	00 00		 and	 DWORD PTR [esi+440], 0
$LN1@SetRaidBos:

; 458  : 	m_pNpcImgName = g_UIImageSetMgr.CreateImageByFullName( rkMonsterImgName );

  0006d	6a 00		 push	 0
  0006f	ff 75 14	 push	 DWORD PTR _rkMonsterImgName$[ebp]
  00072	ff d7		 call	 edi
  00074	8b c8		 mov	 ecx, eax
  00076	ff d3		 call	 ebx

; 459  : 
; 460  : 	m_fBlinkTime = 0.f;

  00078	0f 57 c0	 xorps	 xmm0, xmm0
  0007b	89 86 b8 01 00
	00		 mov	 DWORD PTR [esi+440], eax

; 461  : 	m_fAniHP = 0.0f;
; 462  : 	m_nVibY = 0;

  00081	33 c0		 xor	 eax, eax
  00083	5f		 pop	 edi
  00084	f3 0f 11 86 14
	02 00 00	 movss	 DWORD PTR [esi+532], xmm0
  0008c	f3 0f 11 86 04
	02 00 00	 movss	 DWORD PTR [esi+516], xmm0
  00094	89 86 d8 01 00
	00		 mov	 DWORD PTR [esi+472], eax

; 463  : 	m_bIsRaidMode = true;

  0009a	c6 86 e8 0b 00
	00 01		 mov	 BYTE PTR [esi+3048], 1

; 464  : 	m_nCurRank = 0;

  000a1	89 86 ec 0b 00
	00		 mov	 DWORD PTR [esi+3052], eax

; 465  : 	m_nTotalPlayer = 0;

  000a7	89 86 f0 0b 00
	00		 mov	 DWORD PTR [esi+3056], eax
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx

; 466  : }

  000af	5d		 pop	 ebp
  000b0	c2 10 00	 ret	 16			; 00000010H
?SetRaidBossMonster@PlazaNPCGaugeWnd@@QAEXHABVioHashString@@00@Z ENDP ; PlazaNPCGaugeWnd::SetRaidBossMonster
_TEXT	ENDS
PUBLIC	?UpdateRaidBossMonster@PlazaNPCGaugeWnd@@QAEXMMHH@Z ; PlazaNPCGaugeWnd::UpdateRaidBossMonster
; Function compile flags: /Ogsp
;	COMDAT ?UpdateRaidBossMonster@PlazaNPCGaugeWnd@@QAEXMMHH@Z
_TEXT	SEGMENT
_fCurHP$ = 8						; size = 4
_fMaxHP$ = 12						; size = 4
tv195 = 16						; size = 4
tv192 = 16						; size = 4
_nCurRank$ = 16						; size = 4
_nTotalPlayer$ = 20					; size = 4
?UpdateRaidBossMonster@PlazaNPCGaugeWnd@@QAEXMMHH@Z PROC ; PlazaNPCGaugeWnd::UpdateRaidBossMonster, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	m_nCurRank = nCurRank;

  00003	8b 45 10	 mov	 eax, DWORD PTR _nCurRank$[ebp]

; 471  : 	m_nTotalPlayer = nTotalPlayer;
; 472  : 
; 473  : 	float fPrevHP = m_fCurHP;
; 474  : 	m_fCurHP = fCurHP;
; 475  : 	m_fMaxHP = fMaxHP;
; 476  : 
; 477  : 	if( m_fAniHP == 0.0f && m_fCurHP > 0.0f )

  00006	0f 57 c9	 xorps	 xmm1, xmm1
  00009	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fCurHP$[ebp]
  0000e	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _fMaxHP$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	f3 0f 10 86 04
	02 00 00	 movss	 xmm0, DWORD PTR [esi+516]
  0001e	f3 0f 10 9e 00
	02 00 00	 movss	 xmm3, DWORD PTR [esi+512]
  00026	89 86 ec 0b 00
	00		 mov	 DWORD PTR [esi+3052], eax
  0002c	8b 45 14	 mov	 eax, DWORD PTR _nTotalPlayer$[ebp]
  0002f	0f 2e c1	 ucomiss xmm0, xmm1
  00032	89 86 f0 0b 00
	00		 mov	 DWORD PTR [esi+3056], eax
  00038	9f		 lahf
  00039	f3 0f 11 96 00
	02 00 00	 movss	 DWORD PTR [esi+512], xmm2
  00041	f3 0f 11 a6 fc
	01 00 00	 movss	 DWORD PTR [esi+508], xmm4
  00049	f6 c4 44	 test	 ah, 68			; 00000044H
  0004c	7a 12		 jp	 SHORT $LN4@UpdateRaid
  0004e	0f 2f d1	 comiss	 xmm2, xmm1
  00051	76 0d		 jbe	 SHORT $LN4@UpdateRaid

; 478  : 	{	
; 479  : 		m_fAniHP = fMaxHP;

  00053	f3 0f 11 a6 04
	02 00 00	 movss	 DWORD PTR [esi+516], xmm4
  0005b	e9 ab 00 00 00	 jmp	 $LN2@UpdateRaid
$LN4@UpdateRaid:

; 480  : 	}
; 481  : 	else if( fPrevHP != m_fCurHP )

  00060	0f 5a cb	 cvtps2pd xmm1, xmm3
  00063	0f 5a d2	 cvtps2pd xmm2, xmm2
  00066	66 0f 2e ca	 ucomisd xmm1, xmm2
  0006a	9f		 lahf
  0006b	f6 c4 44	 test	 ah, 68			; 00000044H
  0006e	0f 8b 97 00 00
	00		 jnp	 $LN2@UpdateRaid

; 482  : 	{
; 483  : 		if( m_fAniHP == fPrevHP )

  00074	0f 5a c0	 cvtps2pd xmm0, xmm0
  00077	0f 5a cb	 cvtps2pd xmm1, xmm3
  0007a	66 0f 2e c1	 ucomisd xmm0, xmm1
  0007e	9f		 lahf
  0007f	53		 push	 ebx
  00080	57		 push	 edi
  00081	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00087	f6 c4 44	 test	 ah, 68			; 00000044H
  0008a	7a 20		 jp	 SHORT $LN1@UpdateRaid

; 484  : 			m_fCurAniTime = FRAMEGETTIME();

  0008c	ff d7		 call	 edi
  0008e	8b c8		 mov	 ecx, eax
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  00096	89 45 10	 mov	 DWORD PTR tv195[ebp], eax
  00099	db 45 10	 fild	 DWORD PTR tv195[ebp]
  0009c	85 c0		 test	 eax, eax
  0009e	79 06		 jns	 SHORT $LN7@UpdateRaid
  000a0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN7@UpdateRaid:
  000a6	d9 9e 08 02 00
	00		 fstp	 DWORD PTR [esi+520]
$LN1@UpdateRaid:

; 485  : 
; 486  : 		m_fBlinkTime = FRAMEGETTIME();

  000ac	ff d7		 call	 edi
  000ae	8b c8		 mov	 ecx, eax
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ
  000b6	89 45 10	 mov	 DWORD PTR tv192[ebp], eax
  000b9	db 45 10	 fild	 DWORD PTR tv192[ebp]
  000bc	85 c0		 test	 eax, eax
  000be	79 06		 jns	 SHORT $LN8@UpdateRaid
  000c0	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@UpdateRaid:

; 487  : 
; 488  : 		m_IORandom.Randomize();

  000c6	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  000cc	d9 9e 14 02 00
	00		 fstp	 DWORD PTR [esi+532]
  000d2	e8 00 00 00 00	 call	 ?Randomize@IORandom@@QAEXXZ ; IORandom::Randomize

; 489  : 		int nRandomX = m_IORandom.Random(0, 20);

  000d7	6a 14		 push	 20			; 00000014H
  000d9	6a 00		 push	 0
  000db	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  000e1	e8 00 00 00 00	 call	 ?Random@IORandom@@QAEIII@Z ; IORandom::Random

; 490  : 		int nRandomY = m_IORandom.Random(0, 20);

  000e6	6a 14		 push	 20			; 00000014H
  000e8	6a 00		 push	 0
  000ea	8d 8e 18 02 00
	00		 lea	 ecx, DWORD PTR [esi+536]
  000f0	8b d8		 mov	 ebx, eax
  000f2	e8 00 00 00 00	 call	 ?Random@IORandom@@QAEIII@Z ; IORandom::Random

; 491  : 
; 492  : 		m_stEffectPos.x = nRandomX - 10;

  000f7	83 c3 f6	 add	 ebx, -10		; fffffff6H

; 493  : 		m_stEffectPos.y = nRandomY - 10;

  000fa	83 c0 f6	 add	 eax, -10		; fffffff6H
  000fd	5f		 pop	 edi
  000fe	89 9e dc 01 00
	00		 mov	 DWORD PTR [esi+476], ebx
  00104	89 86 e0 01 00
	00		 mov	 DWORD PTR [esi+480], eax
  0010a	5b		 pop	 ebx
$LN2@UpdateRaid:
  0010b	5e		 pop	 esi

; 494  : 	}
; 495  : }

  0010c	5d		 pop	 ebp
  0010d	c2 10 00	 ret	 16			; 00000010H
?UpdateRaidBossMonster@PlazaNPCGaugeWnd@@QAEXMMHH@Z ENDP ; PlazaNPCGaugeWnd::UpdateRaidBossMonster
_TEXT	ENDS
PUBLIC	?SetBlindOffSet@PlazaNPCGaugeWnd@@QAEXH@Z	; PlazaNPCGaugeWnd::SetBlindOffSet
; Function compile flags: /Ogsp
;	COMDAT ?SetBlindOffSet@PlazaNPCGaugeWnd@@QAEXH@Z
_TEXT	SEGMENT
_iYOffSet$ = 8						; size = 4
?SetBlindOffSet@PlazaNPCGaugeWnd@@QAEXH@Z PROC		; PlazaNPCGaugeWnd::SetBlindOffSet, COMDAT
; _this$ = ecx

; 498  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 499  : 	m_iBlindOffSetY = iYOffSet;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iYOffSet$[ebp]
  00006	89 81 c8 01 00
	00		 mov	 DWORD PTR [ecx+456], eax

; 500  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetBlindOffSet@PlazaNPCGaugeWnd@@QAEXH@Z ENDP		; PlazaNPCGaugeWnd::SetBlindOffSet
_TEXT	ENDS
PUBLIC	?InitAniState@PlazaNPCGaugeWnd@@QAEXXZ		; PlazaNPCGaugeWnd::InitAniState
EXTRN	?InitAniState@ioAnimationState@@QAEXXZ:PROC	; ioAnimationState::InitAniState
; Function compile flags: /Ogsp
;	COMDAT ?InitAniState@PlazaNPCGaugeWnd@@QAEXXZ
_TEXT	SEGMENT
?InitAniState@PlazaNPCGaugeWnd@@QAEXXZ PROC		; PlazaNPCGaugeWnd::InitAniState, COMDAT
; _this$ = ecx

; 504  : 	m_pAniState->InitAniState();

  00000	8b 89 e4 0b 00
	00		 mov	 ecx, DWORD PTR [ecx+3044]
  00006	e9 00 00 00 00	 jmp	 ?InitAniState@ioAnimationState@@QAEXXZ ; ioAnimationState::InitAniState
?InitAniState@PlazaNPCGaugeWnd@@QAEXXZ ENDP		; PlazaNPCGaugeWnd::InitAniState
_TEXT	ENDS
PUBLIC	?ChangeShowAniState@PlazaNPCGaugeWnd@@QAEXW4ShowAniType@ioAnimationState@@@Z ; PlazaNPCGaugeWnd::ChangeShowAniState
EXTRN	?ChangeShowAniState@ioAnimationState@@QAEXW4ShowAniType@1@@Z:PROC ; ioAnimationState::ChangeShowAniState
; Function compile flags: /Ogsp
;	COMDAT ?ChangeShowAniState@PlazaNPCGaugeWnd@@QAEXW4ShowAniType@ioAnimationState@@@Z
_TEXT	SEGMENT
_eShowAniType$ = 8					; size = 4
?ChangeShowAniState@PlazaNPCGaugeWnd@@QAEXW4ShowAniType@ioAnimationState@@@Z PROC ; PlazaNPCGaugeWnd::ChangeShowAniState, COMDAT
; _this$ = ecx

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 	m_pAniState->ChangeShowAniState( eShowAniType );

  00003	8b 89 e4 0b 00
	00		 mov	 ecx, DWORD PTR [ecx+3044]

; 528  : }

  00009	5d		 pop	 ebp

; 527  : 	m_pAniState->ChangeShowAniState( eShowAniType );

  0000a	e9 00 00 00 00	 jmp	 ?ChangeShowAniState@ioAnimationState@@QAEXW4ShowAniType@1@@Z ; ioAnimationState::ChangeShowAniState
?ChangeShowAniState@PlazaNPCGaugeWnd@@QAEXW4ShowAniType@ioAnimationState@@@Z ENDP ; PlazaNPCGaugeWnd::ChangeShowAniState
_TEXT	ENDS
PUBLIC	?UpdateShowAni@PlazaNPCGaugeWnd@@IAE_NXZ	; PlazaNPCGaugeWnd::UpdateShowAni
EXTRN	?UpdateShowAni@ioAnimationState@@QAE_NHHAAH@Z:PROC ; ioAnimationState::UpdateShowAni
; Function compile flags: /Ogsp
;	COMDAT ?UpdateShowAni@PlazaNPCGaugeWnd@@IAE_NXZ
_TEXT	SEGMENT
_iCurYpos$ = -4						; size = 4
?UpdateShowAni@PlazaNPCGaugeWnd@@IAE_NXZ PROC		; PlazaNPCGaugeWnd::UpdateShowAni, COMDAT
; _this$ = ecx

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 532  : 	int iCurYpos = m_iDefaultY;

  00007	8b 86 d4 01 00
	00		 mov	 eax, DWORD PTR [esi+468]
  0000d	57		 push	 edi

; 533  : 
; 534  : 	if(m_pAniState->UpdateShowAni(m_iDefaultX, m_iDefaultY, iCurYpos))

  0000e	8d 4d fc	 lea	 ecx, DWORD PTR _iCurYpos$[ebp]
  00011	51		 push	 ecx
  00012	8b 8e e4 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3044]
  00018	50		 push	 eax
  00019	ff b6 d0 01 00
	00		 push	 DWORD PTR [esi+464]
  0001f	89 45 fc	 mov	 DWORD PTR _iCurYpos$[ebp], eax
  00022	e8 00 00 00 00	 call	 ?UpdateShowAni@ioAnimationState@@QAE_NHHAAH@Z ; ioAnimationState::UpdateShowAni
  00027	84 c0		 test	 al, al
  00029	74 15		 je	 SHORT $LN1@UpdateShow

; 535  : 	{
; 536  : 		SetWndPos( m_iDefaultX, iCurYpos );

  0002b	ff 75 fc	 push	 DWORD PTR _iCurYpos$[ebp]
  0002e	8b ce		 mov	 ecx, esi
  00030	ff b6 d0 01 00
	00		 push	 DWORD PTR [esi+464]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z

; 537  : 		return true;

  0003c	b0 01		 mov	 al, 1
  0003e	eb 02		 jmp	 SHORT $LN2@UpdateShow
$LN1@UpdateShow:

; 538  : 	}
; 539  : 
; 540  : 	return false;

  00040	32 c0		 xor	 al, al
$LN2@UpdateShow:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 541  : }

  00044	c9		 leave
  00045	c3		 ret	 0
?UpdateShowAni@PlazaNPCGaugeWnd@@IAE_NXZ ENDP		; PlazaNPCGaugeWnd::UpdateShowAni
_TEXT	ENDS
PUBLIC	?GetCurShowAniState@PlazaNPCGaugeWnd@@QAEHXZ	; PlazaNPCGaugeWnd::GetCurShowAniState
EXTRN	?GetCurShowAniState@ioAnimationState@@QAEHXZ:PROC ; ioAnimationState::GetCurShowAniState
; Function compile flags: /Ogsp
;	COMDAT ?GetCurShowAniState@PlazaNPCGaugeWnd@@QAEHXZ
_TEXT	SEGMENT
?GetCurShowAniState@PlazaNPCGaugeWnd@@QAEHXZ PROC	; PlazaNPCGaugeWnd::GetCurShowAniState, COMDAT
; _this$ = ecx

; 545  : 	return m_pAniState->GetCurShowAniState();

  00000	8b 89 e4 0b 00
	00		 mov	 ecx, DWORD PTR [ecx+3044]
  00006	e9 00 00 00 00	 jmp	 ?GetCurShowAniState@ioAnimationState@@QAEHXZ ; ioAnimationState::GetCurShowAniState
?GetCurShowAniState@PlazaNPCGaugeWnd@@QAEHXZ ENDP	; PlazaNPCGaugeWnd::GetCurShowAniState
_TEXT	ENDS
PUBLIC	?UpdateDefaultPos@PlazaNPCGaugeWnd@@IAEXXZ	; PlazaNPCGaugeWnd::UpdateDefaultPos
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?IsMoving@ioMovingWnd@@QAE_NXZ:PROC
EXTRN	?IsDragMove@ioSP2GUIManager@@QBE_NK@Z:PROC	; ioSP2GUIManager::IsDragMove
; Function compile flags: /Ogsp
;	COMDAT ?UpdateDefaultPos@PlazaNPCGaugeWnd@@IAEXXZ
_TEXT	SEGMENT
?UpdateDefaultPos@PlazaNPCGaugeWnd@@IAEXXZ PROC		; PlazaNPCGaugeWnd::UpdateDefaultPos, COMDAT
; _this$ = ecx

; 549  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 550  : 	if( g_GUIMgr.IsDragMove( m_dwID ) || IsMoving() )

  00003	ff 76 14	 push	 DWORD PTR [esi+20]
  00006	e8 00 00 00 00	 call	 ?GetSingleton@ioSP2GUIManager@@SAAAV1@XZ ; ioSP2GUIManager::GetSingleton
  0000b	8b c8		 mov	 ecx, eax
  0000d	e8 00 00 00 00	 call	 ?IsDragMove@ioSP2GUIManager@@QBE_NK@Z ; ioSP2GUIManager::IsDragMove
  00012	84 c0		 test	 al, al
  00014	75 10		 jne	 SHORT $LN5@UpdateDefa
  00016	8b ce		 mov	 ecx, esi
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsMoving@ioMovingWnd@@QAE_NXZ
  0001e	84 c0		 test	 al, al
  00020	0f 84 8d 00 00
	00		 je	 $LN1@UpdateDefa
$LN5@UpdateDefa:
  00026	53		 push	 ebx
  00027	57		 push	 edi

; 551  : 	{
; 552  : 		if( m_iDefaultX != GetXPos() )

  00028	8b ce		 mov	 ecx, esi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  00030	33 db		 xor	 ebx, ebx
  00032	43		 inc	 ebx
  00033	39 86 d0 01 00
	00		 cmp	 DWORD PTR [esi+464], eax
  00039	74 39		 je	 SHORT $LN3@UpdateDefa

; 553  : 		{
; 554  : 			if( COMPARE( GetXPos(), 0, (Setting::Width() - GetWidth() ) + 1 ))

  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  00043	85 c0		 test	 eax, eax
  00045	78 2d		 js	 SHORT $LN3@UpdateDefa
  00047	8b ce		 mov	 ecx, esi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0004f	8b fb		 mov	 edi, ebx
  00051	2b f8		 sub	 edi, eax
  00053	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00058	8b ce		 mov	 ecx, esi
  0005a	03 f8		 add	 edi, eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  00062	3b c7		 cmp	 eax, edi
  00064	7d 0e		 jge	 SHORT $LN3@UpdateDefa

; 555  : 				m_iDefaultX = GetXPos();

  00066	8b ce		 mov	 ecx, esi
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ
  0006e	89 86 d0 01 00
	00		 mov	 DWORD PTR [esi+464], eax
$LN3@UpdateDefa:

; 556  : 		}
; 557  : 
; 558  : 		if( m_iDefaultY != GetYPos() )

  00074	8b ce		 mov	 ecx, esi
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetYPos@ioWnd@@QBEHXZ
  0007c	39 86 d4 01 00
	00		 cmp	 DWORD PTR [esi+468], eax
  00082	74 2d		 je	 SHORT $LN9@UpdateDefa

; 559  : 		{
; 560  : 			int iYPos = GetYPos() - m_iBlindOffSetY;

  00084	8b ce		 mov	 ecx, esi
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetYPos@ioWnd@@QBEHXZ
  0008c	8b f8		 mov	 edi, eax
  0008e	2b be c8 01 00
	00		 sub	 edi, DWORD PTR [esi+456]

; 561  : 			if( COMPARE( iYPos, 0, (Setting::Height() - GetHeight() ) + 1 ))

  00094	78 1b		 js	 SHORT $LN9@UpdateDefa
  00096	8b ce		 mov	 ecx, esi
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  0009e	2b d8		 sub	 ebx, eax
  000a0	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  000a5	03 c3		 add	 eax, ebx
  000a7	3b f8		 cmp	 edi, eax
  000a9	7d 06		 jge	 SHORT $LN9@UpdateDefa

; 562  : 				m_iDefaultY = iYPos;

  000ab	89 be d4 01 00
	00		 mov	 DWORD PTR [esi+468], edi
$LN9@UpdateDefa:
  000b1	5f		 pop	 edi
  000b2	5b		 pop	 ebx
$LN1@UpdateDefa:
  000b3	5e		 pop	 esi

; 563  : 		}
; 564  : 	}
; 565  : }

  000b4	c3		 ret	 0
?UpdateDefaultPos@PlazaNPCGaugeWnd@@IAEXXZ ENDP		; PlazaNPCGaugeWnd::UpdateDefaultPos
_TEXT	ENDS
PUBLIC	__real@4082c00000000000
EXTRN	__imp_?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z:PROC
;	COMDAT __real@4082c00000000000
CONST	SEGMENT
__real@4082c00000000000 DQ 04082c00000000000r	; 600
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?SetPositionToDefault@PlazaNPCGaugeWnd@@UAEXHH_N0@Z
_TEXT	SEGMENT
_iTempDefYPos$ = -8					; size = 4
_fDefCenterYRate$ = -4					; size = 4
_iParentWidth$ = 8					; size = 4
_iParentHeight$ = 12					; size = 4
_bChildMove$ = 16					; size = 1
_bCreate$ = 20						; size = 1
?SetPositionToDefault@PlazaNPCGaugeWnd@@UAEXHH_N0@Z PROC ; PlazaNPCGaugeWnd::SetPositionToDefault, COMDAT
; _this$ = ecx

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 569  : 	int iTempDefXPos = m_iDefXPos;
; 570  : 	int iTempDefYPos = m_iDefYPos;

  00009	8b 86 c4 00 00
	00		 mov	 eax, DWORD PTR [esi+196]
  0000f	8b 9e c0 00 00
	00		 mov	 ebx, DWORD PTR [esi+192]
  00015	57		 push	 edi
  00016	89 45 f8	 mov	 DWORD PTR _iTempDefYPos$[ebp], eax

; 571  : 
; 572  : 	float fDefCenterY = (float)( m_iDefYPos + GetHeight() / 2 );

  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  0001f	99		 cdq
  00020	2b c2		 sub	 eax, edx
  00022	d1 f8		 sar	 eax, 1
  00024	03 86 c4 00 00
	00		 add	 eax, DWORD PTR [esi+196]

; 573  : 	float fDefCenterYRate = fDefCenterY / 600.0f;

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00031	0f 5a c0	 cvtps2pd xmm0, xmm0
  00034	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4082c00000000000
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 45 fc	 movss	 DWORD PTR _fDefCenterYRate$[ebp], xmm0

; 574  : 
; 575  : 	m_iDefYPos = (int)( Setting::Height() * fDefCenterYRate ) - GetHeight() / 2;

  00045	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  0004a	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _fDefCenterYRate$[ebp]
  0004f	0f 57 c0	 xorps	 xmm0, xmm0
  00052	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00056	0f 5a c0	 cvtps2pd xmm0, xmm0
  00059	0f 5a c9	 cvtps2pd xmm1, xmm1
  0005c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00060	8b ce		 mov	 ecx, esi
  00062	f2 0f 2c f8	 cvttsd2si edi, xmm0
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ

; 576  : 
; 577  : 	ioMovingWnd::SetPositionToDefault( iParentWidth, iParentHeight, bChildMove, bCreate );

  0006c	ff 75 14	 push	 DWORD PTR _bCreate$[ebp]
  0006f	99		 cdq
  00070	ff 75 10	 push	 DWORD PTR _bChildMove$[ebp]
  00073	2b c2		 sub	 eax, edx
  00075	ff 75 0c	 push	 DWORD PTR _iParentHeight$[ebp]
  00078	d1 f8		 sar	 eax, 1
  0007a	ff 75 08	 push	 DWORD PTR _iParentWidth$[ebp]
  0007d	2b f8		 sub	 edi, eax
  0007f	8b ce		 mov	 ecx, esi
  00081	89 be c4 00 00
	00		 mov	 DWORD PTR [esi+196], edi
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetPositionToDefault@ioMovingWnd@@UAEXHH_N0@Z

; 578  : 
; 579  : 	m_iDefXPos = iTempDefXPos;
; 580  : 	m_iDefYPos = iTempDefYPos;
; 581  : 
; 582  : 	if( !bCreate )

  0008d	80 7d 14 00	 cmp	 BYTE PTR _bCreate$[ebp], 0
  00091	8b 45 f8	 mov	 eax, DWORD PTR _iTempDefYPos$[ebp]
  00094	89 9e c0 00 00
	00		 mov	 DWORD PTR [esi+192], ebx
  0009a	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax
  000a0	75 33		 jne	 SHORT $LN1@SetPositio

; 583  : 	{
; 584  : 		m_iDefaultX = GetXPos();

  000a2	8b ce		 mov	 ecx, esi
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetXPos@ioWnd@@QBEHXZ

; 585  : 		m_iDefaultY = GetYPos();

  000aa	8b ce		 mov	 ecx, esi
  000ac	89 86 d0 01 00
	00		 mov	 DWORD PTR [esi+464], eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetYPos@ioWnd@@QBEHXZ

; 586  : 		SetWndPos( m_iDefaultX, m_iDefaultY + m_iBlindOffSetY );

  000b8	8b 8e c8 01 00
	00		 mov	 ecx, DWORD PTR [esi+456]
  000be	03 c8		 add	 ecx, eax
  000c0	51		 push	 ecx
  000c1	ff b6 d0 01 00
	00		 push	 DWORD PTR [esi+464]
  000c7	8b ce		 mov	 ecx, esi
  000c9	89 86 d4 01 00
	00		 mov	 DWORD PTR [esi+468], eax
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z
$LN1@SetPositio:
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 587  : 	}
; 588  : }

  000d8	c9		 leave
  000d9	c2 10 00	 ret	 16			; 00000010H
?SetPositionToDefault@PlazaNPCGaugeWnd@@UAEXHH_N0@Z ENDP ; PlazaNPCGaugeWnd::SetPositionToDefault
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?HalfWidth@Setting@@SAHXZ			; Setting::HalfWidth
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\setting.h
;	COMDAT ?HalfWidth@Setting@@SAHXZ
_TEXT	SEGMENT
?HalfWidth@Setting@@SAHXZ PROC				; Setting::HalfWidth, COMDAT

; 222  : 	static int HalfWidth() { return Width() / 2; }	

  00000	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  00005	99		 cdq
  00006	2b c2		 sub	 eax, edx
  00008	d1 f8		 sar	 eax, 1
  0000a	c3		 ret	 0
?HalfWidth@Setting@@SAHXZ ENDP				; Setting::HalfWidth
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GPlazaNPCGaugeWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPlazaNPCGaugeWnd@@UAEPAXI@Z PROC			; PlazaNPCGaugeWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1PlazaNPCGaugeWnd@@UAE@XZ ; PlazaNPCGaugeWnd::~PlazaNPCGaugeWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GPlazaNPCGaugeWnd@@UAEPAXI@Z ENDP			; PlazaNPCGaugeWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3fc0a3d700000000
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
EXTRN	?IsRender@ioAnimationState@@QAE_NXZ:PROC	; ioAnimationState::IsRender
;	COMDAT __real@3fc0a3d700000000
CONST	SEGMENT
__real@3fc0a3d700000000 DQ 03fc0a3d700000000r	; 0.13
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\plazanpcgaugewnd.cpp
CONST	ENDS
;	COMDAT ?OnRender@PlazaNPCGaugeWnd@@MAEXXZ
_TEXT	SEGMENT
?OnRender@PlazaNPCGaugeWnd@@MAEXXZ PROC			; PlazaNPCGaugeWnd::OnRender, COMDAT
; _this$ = ecx

; 359  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 360  : 	if( !m_pAniState->IsRender() )

  00003	8b 8e e4 0b 00
	00		 mov	 ecx, DWORD PTR [esi+3044]
  00009	e8 00 00 00 00	 call	 ?IsRender@ioAnimationState@@QAE_NXZ ; ioAnimationState::IsRender
  0000e	84 c0		 test	 al, al
  00010	74 66		 je	 SHORT $LN1@OnRender

; 361  : 		return;
; 362  : 
; 363  : 	ioWnd::OnRender();

  00012	57		 push	 edi
  00013	8b ce		 mov	 ecx, esi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 364  : 
; 365  : 	int iXPos = GetDerivedPosX();

  0001b	8b ce		 mov	 ecx, esi
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 366  : 	int iYPos = GetDerivedPosY();	

  00023	8b ce		 mov	 ecx, esi
  00025	8b f8		 mov	 edi, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 367  : 
; 368  : 	if ( m_bIsRaidMode )

  0002d	80 be e8 0b 00
	00 00		 cmp	 BYTE PTR [esi+3048], 0
  00034	74 38		 je	 SHORT $LN2@OnRender

; 369  : 		RenderRaidBossMonster( Setting::HalfWidth() - 141, Setting::Height() * 0.13f );

  00036	e8 00 00 00 00	 call	 ?Width@Setting@@SAHXZ	; Setting::Width
  0003b	99		 cdq
  0003c	2b c2		 sub	 eax, edx
  0003e	8b f8		 mov	 edi, eax
  00040	d1 ff		 sar	 edi, 1
  00042	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  00047	0f 57 c0	 xorps	 xmm0, xmm0
  0004a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0004e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00051	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0a3d700000000
  00059	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0005d	50		 push	 eax
  0005e	81 c7 73 ff ff
	ff		 add	 edi, -141		; ffffff73H
  00064	57		 push	 edi
  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?RenderRaidBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z ; PlazaNPCGaugeWnd::RenderRaidBossMonster

; 370  : 	else

  0006c	eb 09		 jmp	 SHORT $LN8@OnRender
$LN2@OnRender:

; 371  : 		RenderBossMonster( iXPos, iYPos );

  0006e	50		 push	 eax
  0006f	57		 push	 edi
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?RenderBossMonster@PlazaNPCGaugeWnd@@IAEXHH@Z ; PlazaNPCGaugeWnd::RenderBossMonster
$LN8@OnRender:
  00077	5f		 pop	 edi
$LN1@OnRender:
  00078	5e		 pop	 esi

; 372  : }

  00079	c3		 ret	 0
?OnRender@PlazaNPCGaugeWnd@@MAEXXZ ENDP			; PlazaNPCGaugeWnd::OnRender
_TEXT	ENDS
PUBLIC	?UpdateAniState@PlazaNPCGaugeWnd@@IAEXXZ	; PlazaNPCGaugeWnd::UpdateAniState
; Function compile flags: /Ogsp
;	COMDAT ?UpdateAniState@PlazaNPCGaugeWnd@@IAEXXZ
_TEXT	SEGMENT
?UpdateAniState@PlazaNPCGaugeWnd@@IAEXXZ PROC		; PlazaNPCGaugeWnd::UpdateAniState, COMDAT
; _this$ = ecx

; 508  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 509  : 	if( UpdateShowAni() )

  00003	e8 00 00 00 00	 call	 ?UpdateShowAni@PlazaNPCGaugeWnd@@IAE_NXZ ; PlazaNPCGaugeWnd::UpdateShowAni
  00008	84 c0		 test	 al, al
  0000a	75 56		 jne	 SHORT $LN1@UpdateAniS

; 510  : 		return;
; 511  : 
; 512  : 	UpdateDefaultPos();

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?UpdateDefaultPos@PlazaNPCGaugeWnd@@IAEXXZ ; PlazaNPCGaugeWnd::UpdateDefaultPos

; 513  : 
; 514  : 	// blind ani
; 515  : 	if( m_iBlindOffSetY != m_iPreBlindOffSetY )

  00013	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00019	3b 86 cc 01 00
	00		 cmp	 eax, DWORD PTR [esi+460]
  0001f	74 41		 je	 SHORT $LN1@UpdateAniS

; 516  : 	{
; 517  : 		int iCurYPos = m_iDefaultY + m_iBlindOffSetY;

  00021	57		 push	 edi
  00022	8b be d4 01 00
	00		 mov	 edi, DWORD PTR [esi+468]
  00028	03 f8		 add	 edi, eax

; 518  : 		if( !COMPARE( iCurYPos, 0, ( Setting::Height() - GetHeight() ) + 1) )

  0002a	78 35		 js	 SHORT $LN7@UpdateAniS
  0002c	53		 push	 ebx
  0002d	8b ce		 mov	 ecx, esi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00035	33 db		 xor	 ebx, ebx
  00037	43		 inc	 ebx
  00038	2b d8		 sub	 ebx, eax
  0003a	e8 00 00 00 00	 call	 ?Height@Setting@@SAHXZ	; Setting::Height
  0003f	03 c3		 add	 eax, ebx
  00041	5b		 pop	 ebx
  00042	3b f8		 cmp	 edi, eax
  00044	7d 1b		 jge	 SHORT $LN7@UpdateAniS

; 519  : 			return;
; 520  : 		SetWndPos( m_iDefaultX, iCurYPos );

  00046	57		 push	 edi
  00047	ff b6 d0 01 00
	00		 push	 DWORD PTR [esi+464]
  0004d	8b ce		 mov	 ecx, esi
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWndPos@ioWnd@@QAEXHH@Z

; 521  : 		m_iPreBlindOffSetY = m_iBlindOffSetY;	

  00055	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  0005b	89 86 cc 01 00
	00		 mov	 DWORD PTR [esi+460], eax
$LN7@UpdateAniS:
  00061	5f		 pop	 edi
$LN1@UpdateAniS:
  00062	5e		 pop	 esi

; 522  : 	}
; 523  : }

  00063	c3		 ret	 0
?UpdateAniState@PlazaNPCGaugeWnd@@IAEXXZ ENDP		; PlazaNPCGaugeWnd::UpdateAniState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0P@@@YA_NABVioHashString@@AAY0P@$$CBD@Z	; operator==<15>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$0P@@@YA_NABVioHashString@@AAY0P@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 15
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0P@@@YA_NABVioHashString@@AAY0P@$$CBD@Z PROC	; operator==<15>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 75 01 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 5e 01 00
	00		 je	 $LN95@operator
  00033	b1 ec		 mov	 cl, -20			; ffffffecH
  00035	32 d1		 xor	 dl, cl
  00037	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  0003a	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003d	84 d2		 test	 dl, dl
  0003f	0f 84 46 01 00
	00		 je	 $LN94@operator
  00045	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00048	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 2f 01 00
	00		 je	 $LN93@operator
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 18 01 00
	00		 je	 $LN92@operator
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 02 01 00
	00		 je	 $LN91@operator
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 ec 00 00
	00		 je	 $LN90@operator
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 d5 00 00
	00		 je	 $LN89@operator
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	0f 84 be 00 00
	00		 je	 $LN88@operator
  000aa	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ad	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000b0	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b3	84 d2		 test	 dl, dl
  000b5	0f 84 a8 00 00
	00		 je	 $LN87@operator
  000bb	32 d1		 xor	 dl, cl
  000bd	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000c0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c3	84 d2		 test	 dl, dl
  000c5	0f 84 92 00 00
	00		 je	 $LN86@operator
  000cb	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ce	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000d1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d4	84 d2		 test	 dl, dl
  000d6	74 7f		 je	 SHORT $LN85@operator
  000d8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000db	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000de	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e1	84 d2		 test	 dl, dl
  000e3	74 6c		 je	 SHORT $LN84@operator
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000eb	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000ee	84 d2		 test	 dl, dl
  000f0	74 5a		 je	 SHORT $LN83@operator
  000f2	32 d1		 xor	 dl, cl
  000f4	80 78 0e 00	 cmp	 BYTE PTR [eax+14], 0
  000f8	88 55 f5	 mov	 BYTE PTR __t$[ebp+13], dl
  000fb	0f 84 9a 00 00
	00		 je	 $LN1@operator
  00101	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00104	84 d2		 test	 dl, dl
  00106	74 3e		 je	 SHORT $LN81@operator
  00108	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0010b	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010e	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00111	84 d2		 test	 dl, dl
  00113	74 2b		 je	 SHORT $LN80@operator
  00115	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00118	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  0011b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0011e	84 d2		 test	 dl, dl
  00120	74 19		 je	 SHORT $LN79@operator
  00122	8a 40 12	 mov	 al, BYTE PTR [eax+18]
  00125	32 d1		 xor	 dl, cl
  00127	88 55 f9	 mov	 BYTE PTR __t$[ebp+17], dl
  0012a	84 c0		 test	 al, al
  0012c	74 07		 je	 SHORT $LN78@operator
  0012e	34 eb		 xor	 al, -21			; ffffffebH
  00130	88 45 fa	 mov	 BYTE PTR __t$[ebp+18], al
  00133	eb 66		 jmp	 SHORT $LN1@operator
$LN78@operator:
  00135	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+18], -21 ; ffffffebH
  00139	eb 60		 jmp	 SHORT $LN1@operator
$LN79@operator:
  0013b	88 4d f9	 mov	 BYTE PTR __t$[ebp+17], cl
  0013e	eb 5b		 jmp	 SHORT $LN1@operator
$LN80@operator:
  00140	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00144	eb 55		 jmp	 SHORT $LN1@operator
$LN81@operator:
  00146	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  0014a	eb 4f		 jmp	 SHORT $LN1@operator
$LN83@operator:
  0014c	88 4d f5	 mov	 BYTE PTR __t$[ebp+13], cl
  0014f	eb 4a		 jmp	 SHORT $LN1@operator
$LN84@operator:
  00151	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00155	eb 44		 jmp	 SHORT $LN1@operator
$LN85@operator:
  00157	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0015b	eb 3e		 jmp	 SHORT $LN1@operator
$LN86@operator:
  0015d	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  00161	eb 38		 jmp	 SHORT $LN1@operator
$LN87@operator:
  00163	88 4d f1	 mov	 BYTE PTR __t$[ebp+9], cl
  00166	eb 33		 jmp	 SHORT $LN1@operator
$LN88@operator:
  00168	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0016c	eb 2d		 jmp	 SHORT $LN1@operator
$LN89@operator:
  0016e	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00172	eb 27		 jmp	 SHORT $LN1@operator
$LN90@operator:
  00174	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00178	eb 21		 jmp	 SHORT $LN1@operator
$LN91@operator:
  0017a	88 4d ed	 mov	 BYTE PTR __t$[ebp+5], cl
  0017d	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  0017f	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00183	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  00185	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00189	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  0018b	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0018f	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00191	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00195	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  00197	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  0019b	6a 03		 push	 3
  0019d	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  001a0	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+14], 0
  001a4	5a		 pop	 edx
$LL104@operator:
  001a5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001ab	83 c0 04	 add	 eax, 4
  001ae	4a		 dec	 edx
  001af	75 f4		 jne	 SHORT $LL104@operator
  001b1	6a 0c		 push	 12			; 0000000cH
  001b3	58		 pop	 eax
$LL101@operator:
  001b4	8b c8		 mov	 ecx, eax
  001b6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001bc	79 05		 jns	 SHORT $LN115@operator
  001be	49		 dec	 ecx
  001bf	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001c2	41		 inc	 ecx
$LN115@operator:
  001c3	b2 ed		 mov	 dl, -19			; ffffffedH
  001c5	2a d1		 sub	 dl, cl
  001c7	30 54 05 e8	 xor	 BYTE PTR __t$[ebp+eax], dl
  001cb	40		 inc	 eax
  001cc	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  001cf	7c e3		 jl	 SHORT $LL101@operator
  001d1	8b cf		 mov	 ecx, edi
  001d3	8d 75 e8	 lea	 esi, DWORD PTR __t$[ebp]
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  001dc	8a 08		 mov	 cl, BYTE PTR [eax]
  001de	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001e0	75 1a		 jne	 SHORT $LN112@operator
  001e2	84 c9		 test	 cl, cl
  001e4	74 12		 je	 SHORT $LN113@operator
  001e6	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001e9	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001ec	75 0e		 jne	 SHORT $LN112@operator
  001ee	83 c0 02	 add	 eax, 2
  001f1	83 c6 02	 add	 esi, 2
  001f4	84 c9		 test	 cl, cl
  001f6	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  001f8	33 c0		 xor	 eax, eax
  001fa	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  001fc	1b c0		 sbb	 eax, eax
  001fe	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00201	33 c9		 xor	 ecx, ecx
  00203	85 c0		 test	 eax, eax
  00205	0f 94 c0	 sete	 al

; 148  : }

  00208	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020b	5f		 pop	 edi
  0020c	33 cd		 xor	 ecx, ebp
  0020e	5e		 pop	 esi
  0020f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00214	c9		 leave
  00215	c3		 ret	 0
??$?8$0P@@@YA_NABVioHashString@@AAY0P@$$CBD@Z ENDP	; operator==<15>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z	; operator==<12>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z PROC	; operator==<12>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 32 01 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 1b 01 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 04 01 00
	00		 je	 $LN94@operator@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 ec 00 00
	00		 je	 $LN93@operator@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 d5 00 00
	00		 je	 $LN92@operator@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 be 00 00
	00		 je	 $LN91@operator@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 a8 00 00
	00		 je	 $LN90@operator@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 92 00 00
	00		 je	 $LN89@operator@2
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 7f		 je	 SHORT $LN88@operator@2
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 6c		 je	 SHORT $LN87@operator@2
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000b9	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000bc	84 d2		 test	 dl, dl
  000be	74 5a		 je	 SHORT $LN86@operator@2
  000c0	32 d1		 xor	 dl, cl
  000c2	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c6	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000c9	0f 84 89 00 00
	00		 je	 $LN1@operator@2
  000cf	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d2	84 d2		 test	 dl, dl
  000d4	74 3e		 je	 SHORT $LN84@operator@2
  000d6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d9	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dc	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000df	84 d2		 test	 dl, dl
  000e1	74 2b		 je	 SHORT $LN83@operator@2
  000e3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e6	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000e9	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ec	84 d2		 test	 dl, dl
  000ee	74 19		 je	 SHORT $LN82@operator@2
  000f0	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f3	32 d1		 xor	 dl, cl
  000f5	88 55 fa	 mov	 BYTE PTR __t$[ebp+14], dl
  000f8	84 c0		 test	 al, al
  000fa	74 07		 je	 SHORT $LN81@operator@2
  000fc	34 ea		 xor	 al, -22			; ffffffeaH
  000fe	88 45 fb	 mov	 BYTE PTR __t$[ebp+15], al
  00101	eb 55		 jmp	 SHORT $LN1@operator@2
$LN81@operator@2:
  00103	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00107	eb 4f		 jmp	 SHORT $LN1@operator@2
$LN82@operator@2:
  00109	88 4d fa	 mov	 BYTE PTR __t$[ebp+14], cl
  0010c	eb 4a		 jmp	 SHORT $LN1@operator@2
$LN83@operator@2:
  0010e	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00112	eb 44		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  00114	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00118	eb 3e		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  0011a	88 4d f6	 mov	 BYTE PTR __t$[ebp+10], cl
  0011d	eb 39		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  0011f	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00123	eb 33		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  00125	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00129	eb 2d		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  0012b	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  0012f	eb 27		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00131	88 4d f2	 mov	 BYTE PTR __t$[ebp+6], cl
  00134	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  00136	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0013a	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  0013c	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00140	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  00142	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00146	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  00148	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0014c	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  0014e	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00152	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  00154	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  00158	6a 02		 push	 2
  0015a	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0015d	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+11], 0
  00161	5a		 pop	 edx
$LL104@operator@2:
  00162	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00168	83 c0 04	 add	 eax, 4
  0016b	4a		 dec	 edx
  0016c	75 f4		 jne	 SHORT $LL104@operator@2
  0016e	6a 08		 push	 8
  00170	58		 pop	 eax
$LL101@operator@2:
  00171	8b c8		 mov	 ecx, eax
  00173	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00179	79 05		 jns	 SHORT $LN115@operator@2
  0017b	49		 dec	 ecx
  0017c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017f	41		 inc	 ecx
$LN115@operator@2:
  00180	b2 ed		 mov	 dl, -19			; ffffffedH
  00182	2a d1		 sub	 dl, cl
  00184	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  00188	40		 inc	 eax
  00189	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018c	7c e3		 jl	 SHORT $LL101@operator@2
  0018e	8b cf		 mov	 ecx, edi
  00190	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00199	8a 08		 mov	 cl, BYTE PTR [eax]
  0019b	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0019d	75 1a		 jne	 SHORT $LN112@operator@2
  0019f	84 c9		 test	 cl, cl
  001a1	74 12		 je	 SHORT $LN113@operator@2
  001a3	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001a6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001a9	75 0e		 jne	 SHORT $LN112@operator@2
  001ab	83 c0 02	 add	 eax, 2
  001ae	83 c6 02	 add	 esi, 2
  001b1	84 c9		 test	 cl, cl
  001b3	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  001b5	33 c0		 xor	 eax, eax
  001b7	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  001b9	1b c0		 sbb	 eax, eax
  001bb	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  001be	33 c9		 xor	 ecx, ecx
  001c0	85 c0		 test	 eax, eax
  001c2	0f 94 c0	 sete	 al

; 148  : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	c9		 leave
  001d2	c3		 ret	 0
??$?8$0M@@@YA_NABVioHashString@@AAY0M@$$CBD@Z ENDP	; operator==<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z	; operator==<10>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z PROC	; operator==<10>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 0d 01 00
	00		 je	 $LN96@operator@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 f6 00 00
	00		 je	 $LN95@operator@3
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 df 00 00
	00		 je	 $LN94@operator@3
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 c8 00 00
	00		 je	 $LN93@operator@3
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 b1 00 00
	00		 je	 $LN92@operator@3
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	0f 84 9a 00 00
	00		 je	 $LN91@operator@3
  00075	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00078	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 83 00 00
	00		 je	 $LN90@operator@3
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	74 70		 je	 SHORT $LN89@operator@3
  00093	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00096	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00099	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0009c	84 d2		 test	 dl, dl
  0009e	74 5d		 je	 SHORT $LN88@operator@3
  000a0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a3	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a7	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000aa	0f 84 81 00 00
	00		 je	 $LN1@operator@3
  000b0	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b3	84 d2		 test	 dl, dl
  000b5	74 40		 je	 SHORT $LN86@operator@3
  000b7	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ba	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000bd	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c0	84 d2		 test	 dl, dl
  000c2	74 2d		 je	 SHORT $LN85@operator@3
  000c4	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c7	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000ca	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000cd	84 d2		 test	 dl, dl
  000cf	74 1a		 je	 SHORT $LN84@operator@3
  000d1	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000da	84 c0		 test	 al, al
  000dc	74 07		 je	 SHORT $LN83@operator@3
  000de	34 ec		 xor	 al, -20			; ffffffecH
  000e0	88 45 f9	 mov	 BYTE PTR __t$[ebp+13], al
  000e3	eb 4c		 jmp	 SHORT $LN1@operator@3
$LN83@operator@3:
  000e5	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  000e9	eb 46		 jmp	 SHORT $LN1@operator@3
$LN84@operator@3:
  000eb	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000ef	eb 40		 jmp	 SHORT $LN1@operator@3
$LN85@operator@3:
  000f1	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000f5	eb 3a		 jmp	 SHORT $LN1@operator@3
$LN86@operator@3:
  000f7	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000fb	eb 34		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  000fd	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  00101	eb 2e		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  00103	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00107	eb 28		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  00109	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  0010d	eb 22		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  0010f	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  00113	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  00115	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00119	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  0011b	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  0011f	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  00121	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00125	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  00127	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0012b	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  0012d	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  00131	6a 02		 push	 2
  00133	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00136	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+9], 0
  0013a	5a		 pop	 edx
$LL104@operator@3:
  0013b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00141	83 c0 04	 add	 eax, 4
  00144	4a		 dec	 edx
  00145	75 f4		 jne	 SHORT $LL104@operator@3
  00147	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0014b	56		 push	 esi
  0014c	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  00155	8a 08		 mov	 cl, BYTE PTR [eax]
  00157	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00159	75 1a		 jne	 SHORT $LN112@operator@3
  0015b	84 c9		 test	 cl, cl
  0015d	74 12		 je	 SHORT $LN113@operator@3
  0015f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00162	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00165	75 0e		 jne	 SHORT $LN112@operator@3
  00167	83 c0 02	 add	 eax, 2
  0016a	83 c6 02	 add	 esi, 2
  0016d	84 c9		 test	 cl, cl
  0016f	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  00171	33 c0		 xor	 eax, eax
  00173	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  00175	1b c0		 sbb	 eax, eax
  00177	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  0017a	33 c9		 xor	 ecx, ecx
  0017c	85 c0		 test	 eax, eax
  0017e	0f 94 c0	 sete	 al

; 148  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	c9		 leave
  0018d	c3		 ret	 0
??$?8$09@@YA_NABVioHashString@@AAY09$$CBD@Z ENDP	; operator==<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator@4
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator@4
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator@4
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator@4
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator@4
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator@4
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator@4
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator@4
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator@4
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator@4
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator@4
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator@4
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator@4
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator@4
$LN84@operator@4:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator@4
$LN85@operator@4:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator@4
$LN86@operator@4:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator@4
$LN87@operator@4:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator@4
$LN89@operator@4:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator@4
$LN90@operator@4:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator@4
$LN91@operator@4:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator@4
$LN92@operator@4:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator@4
$LN93@operator@4:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator@4
$LN94@operator@4:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator@4
$LN95@operator@4:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator@4
$LN96@operator@4:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@4:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator@4:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator@4
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@4:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator@4
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator@4
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator@4
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator@4
$LN113@operator@4:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator@4
$LN112@operator@4:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator@4:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z	; operator==<11>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z PROC	; operator==<11>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 24 01 00
	00		 je	 $LN96@operator@5
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 0d 01 00
	00		 je	 $LN95@operator@5
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 f6 00 00
	00		 je	 $LN94@operator@5
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 df 00 00
	00		 je	 $LN93@operator@5
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	0f 84 c8 00 00
	00		 je	 $LN92@operator@5
  00066	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00069	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006c	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006f	84 d2		 test	 dl, dl
  00071	0f 84 b1 00 00
	00		 je	 $LN91@operator@5
  00077	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007a	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 9a 00 00
	00		 je	 $LN90@operator@5
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 83 00 00
	00		 je	 $LN89@operator@5
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 70		 je	 SHORT $LN88@operator@5
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5d		 je	 SHORT $LN87@operator@5
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000ba	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000bd	0f 84 87 00 00
	00		 je	 $LN1@operator@5
  000c3	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c6	84 d2		 test	 dl, dl
  000c8	74 40		 je	 SHORT $LN85@operator@5
  000ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cd	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000d0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d3	84 d2		 test	 dl, dl
  000d5	74 2d		 je	 SHORT $LN84@operator@5
  000d7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000da	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dd	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e0	84 d2		 test	 dl, dl
  000e2	74 1a		 je	 SHORT $LN83@operator@5
  000e4	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ea	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000ed	84 c0		 test	 al, al
  000ef	74 07		 je	 SHORT $LN82@operator@5
  000f1	34 eb		 xor	 al, -21			; ffffffebH
  000f3	88 45 fa	 mov	 BYTE PTR __t$[ebp+14], al
  000f6	eb 52		 jmp	 SHORT $LN1@operator@5
$LN82@operator@5:
  000f8	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  000fc	eb 4c		 jmp	 SHORT $LN1@operator@5
$LN83@operator@5:
  000fe	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00102	eb 46		 jmp	 SHORT $LN1@operator@5
$LN84@operator@5:
  00104	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00108	eb 40		 jmp	 SHORT $LN1@operator@5
$LN85@operator@5:
  0010a	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0010e	eb 3a		 jmp	 SHORT $LN1@operator@5
$LN87@operator@5:
  00110	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00114	eb 34		 jmp	 SHORT $LN1@operator@5
$LN88@operator@5:
  00116	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0011a	eb 2e		 jmp	 SHORT $LN1@operator@5
$LN89@operator@5:
  0011c	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00120	eb 28		 jmp	 SHORT $LN1@operator@5
$LN90@operator@5:
  00122	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00126	eb 22		 jmp	 SHORT $LN1@operator@5
$LN91@operator@5:
  00128	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0012c	eb 1c		 jmp	 SHORT $LN1@operator@5
$LN92@operator@5:
  0012e	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00132	eb 16		 jmp	 SHORT $LN1@operator@5
$LN93@operator@5:
  00134	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00138	eb 10		 jmp	 SHORT $LN1@operator@5
$LN94@operator@5:
  0013a	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0013e	eb 0a		 jmp	 SHORT $LN1@operator@5
$LN95@operator@5:
  00140	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00144	eb 04		 jmp	 SHORT $LN1@operator@5
$LN96@operator@5:
  00146	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@5:
  0014a	6a 02		 push	 2
  0014c	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0014f	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+10], 0
  00153	5a		 pop	 edx
$LL104@operator@5:
  00154	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0015a	83 c0 04	 add	 eax, 4
  0015d	4a		 dec	 edx
  0015e	75 f4		 jne	 SHORT $LL104@operator@5
  00160	6a 08		 push	 8
  00162	58		 pop	 eax
$LL101@operator@5:
  00163	8b c8		 mov	 ecx, eax
  00165	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0016b	79 05		 jns	 SHORT $LN115@operator@5
  0016d	49		 dec	 ecx
  0016e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00171	41		 inc	 ecx
$LN115@operator@5:
  00172	b2 ed		 mov	 dl, -19			; ffffffedH
  00174	2a d1		 sub	 dl, cl
  00176	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  0017a	40		 inc	 eax
  0017b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017e	7c e3		 jl	 SHORT $LL101@operator@5
  00180	8b cf		 mov	 ecx, edi
  00182	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@5:
  0018b	8a 08		 mov	 cl, BYTE PTR [eax]
  0018d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0018f	75 1a		 jne	 SHORT $LN112@operator@5
  00191	84 c9		 test	 cl, cl
  00193	74 12		 je	 SHORT $LN113@operator@5
  00195	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00198	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0019b	75 0e		 jne	 SHORT $LN112@operator@5
  0019d	83 c0 02	 add	 eax, 2
  001a0	83 c6 02	 add	 esi, 2
  001a3	84 c9		 test	 cl, cl
  001a5	75 e4		 jne	 SHORT $LL111@operator@5
$LN113@operator@5:
  001a7	33 c0		 xor	 eax, eax
  001a9	eb 05		 jmp	 SHORT $LN114@operator@5
$LN112@operator@5:
  001ab	1b c0		 sbb	 eax, eax
  001ad	83 d8 ff	 sbb	 eax, -1
$LN114@operator@5:
  001b0	33 c9		 xor	 ecx, ecx
  001b2	85 c0		 test	 eax, eax
  001b4	0f 94 c0	 sete	 al

; 148  : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	5f		 pop	 edi
  001bb	33 cd		 xor	 ecx, ebp
  001bd	5e		 pop	 esi
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	c9		 leave
  001c4	c3		 ret	 0
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z ENDP	; operator==<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z	; operator==<14>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z PROC	; operator==<14>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 64 01 00
	00		 je	 $LN96@operator@6
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 4d 01 00
	00		 je	 $LN95@operator@6
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 36 01 00
	00		 je	 $LN94@operator@6
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 1e 01 00
	00		 je	 $LN93@operator@6
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 07 01 00
	00		 je	 $LN92@operator@6
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 f0 00 00
	00		 je	 $LN91@operator@6
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 da 00 00
	00		 je	 $LN90@operator@6
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 c4 00 00
	00		 je	 $LN89@operator@6
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	0f 84 ad 00 00
	00		 je	 $LN88@operator@6
  000aa	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ad	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000b0	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b3	84 d2		 test	 dl, dl
  000b5	0f 84 96 00 00
	00		 je	 $LN87@operator@6
  000bb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000be	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000c1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c4	84 d2		 test	 dl, dl
  000c6	0f 84 80 00 00
	00		 je	 $LN86@operator@6
  000cc	32 d1		 xor	 dl, cl
  000ce	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000d1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d4	84 d2		 test	 dl, dl
  000d6	74 6e		 je	 SHORT $LN85@operator@6
  000d8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000db	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000de	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e1	84 d2		 test	 dl, dl
  000e3	74 5b		 je	 SHORT $LN84@operator@6
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ec	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000ef	0f 84 95 00 00
	00		 je	 $LN1@operator@6
  000f5	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f8	84 d2		 test	 dl, dl
  000fa	74 3f		 je	 SHORT $LN82@operator@6
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  00101	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00104	84 d2		 test	 dl, dl
  00106	74 2d		 je	 SHORT $LN81@operator@6
  00108	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0010b	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010e	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00111	84 d2		 test	 dl, dl
  00113	74 1a		 je	 SHORT $LN80@operator@6
  00115	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00118	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011b	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  0011e	84 c0		 test	 al, al
  00120	74 07		 je	 SHORT $LN79@operator@6
  00122	34 ec		 xor	 al, -20			; ffffffecH
  00124	88 45 f9	 mov	 BYTE PTR __t$[ebp+17], al
  00127	eb 61		 jmp	 SHORT $LN1@operator@6
$LN79@operator@6:
  00129	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+17], -20 ; ffffffecH
  0012d	eb 5b		 jmp	 SHORT $LN1@operator@6
$LN80@operator@6:
  0012f	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00133	eb 55		 jmp	 SHORT $LN1@operator@6
$LN81@operator@6:
  00135	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00139	eb 4f		 jmp	 SHORT $LN1@operator@6
$LN82@operator@6:
  0013b	88 4d f6	 mov	 BYTE PTR __t$[ebp+14], cl
  0013e	eb 4a		 jmp	 SHORT $LN1@operator@6
$LN84@operator@6:
  00140	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00144	eb 44		 jmp	 SHORT $LN1@operator@6
$LN85@operator@6:
  00146	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0014a	eb 3e		 jmp	 SHORT $LN1@operator@6
$LN86@operator@6:
  0014c	88 4d f2	 mov	 BYTE PTR __t$[ebp+10], cl
  0014f	eb 39		 jmp	 SHORT $LN1@operator@6
$LN87@operator@6:
  00151	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00155	eb 33		 jmp	 SHORT $LN1@operator@6
$LN88@operator@6:
  00157	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0015b	eb 2d		 jmp	 SHORT $LN1@operator@6
$LN89@operator@6:
  0015d	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00161	eb 27		 jmp	 SHORT $LN1@operator@6
$LN90@operator@6:
  00163	88 4d ee	 mov	 BYTE PTR __t$[ebp+6], cl
  00166	eb 22		 jmp	 SHORT $LN1@operator@6
$LN91@operator@6:
  00168	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0016c	eb 1c		 jmp	 SHORT $LN1@operator@6
$LN92@operator@6:
  0016e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00172	eb 16		 jmp	 SHORT $LN1@operator@6
$LN93@operator@6:
  00174	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00178	eb 10		 jmp	 SHORT $LN1@operator@6
$LN94@operator@6:
  0017a	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0017e	eb 0a		 jmp	 SHORT $LN1@operator@6
$LN95@operator@6:
  00180	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00184	eb 04		 jmp	 SHORT $LN1@operator@6
$LN96@operator@6:
  00186	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@6:
  0018a	6a 03		 push	 3
  0018c	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  0018f	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+13], 0
  00193	5a		 pop	 edx
$LL104@operator@6:
  00194	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0019a	83 c0 04	 add	 eax, 4
  0019d	4a		 dec	 edx
  0019e	75 f4		 jne	 SHORT $LL104@operator@6
  001a0	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  001a4	8b cf		 mov	 ecx, edi
  001a6	8d 75 e8	 lea	 esi, DWORD PTR __t$[ebp]
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@6:
  001af	8a 08		 mov	 cl, BYTE PTR [eax]
  001b1	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001b3	75 1a		 jne	 SHORT $LN112@operator@6
  001b5	84 c9		 test	 cl, cl
  001b7	74 12		 je	 SHORT $LN113@operator@6
  001b9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001bc	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001bf	75 0e		 jne	 SHORT $LN112@operator@6
  001c1	83 c0 02	 add	 eax, 2
  001c4	83 c6 02	 add	 esi, 2
  001c7	84 c9		 test	 cl, cl
  001c9	75 e4		 jne	 SHORT $LL111@operator@6
$LN113@operator@6:
  001cb	33 c0		 xor	 eax, eax
  001cd	eb 05		 jmp	 SHORT $LN114@operator@6
$LN112@operator@6:
  001cf	1b c0		 sbb	 eax, eax
  001d1	83 d8 ff	 sbb	 eax, -1
$LN114@operator@6:
  001d4	33 c9		 xor	 ecx, ecx
  001d6	85 c0		 test	 eax, eax
  001d8	0f 94 c0	 sete	 al

; 148  : }

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	5f		 pop	 edi
  001df	33 cd		 xor	 ecx, ebp
  001e1	5e		 pop	 esi
  001e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e7	c9		 leave
  001e8	c3		 ret	 0
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z ENDP	; operator==<14>
_TEXT	ENDS
PUBLIC	_szType$GSCopy$
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\plazanpcgaugewnd.cpp
;	COMDAT ?AddRenderImage@PlazaNPCGaugeWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_szType$GSCopy$ = -36					; size = 4
_pImage$GSCopy$ = -32					; size = 4
_this$GSCopy$ = -28					; size = 4
__t$508658 = -24					; size = 14
__t$508546 = -24					; size = 15
__t$508296 = -24					; size = 14
__t$508171 = -24					; size = 14
__t$507697 = -24					; size = 12
__t$507447 = -24					; size = 12
__t$507296 = -24					; size = 15
__t$508408 = -20					; size = 10
__t$508033 = -20					; size = 10
__t$507911 = -20					; size = 11
__t$507783 = -20					; size = 9
__t$507533 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@PlazaNPCGaugeWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; PlazaNPCGaugeWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 77   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _szType$[ebp]

; 78   : 	if( szType == "IconBackOrange" )

  00019	33 db		 xor	 ebx, ebx
  0001b	6a 03		 push	 3
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx

; 132  : 	}
; 133  : 	else if( szType == "RaidGaugeBack" )

  00020	89 45 e0	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00023	89 7d dc	 mov	 DWORD PTR _szType$GSCopy$[ebp], edi
  00026	c7 45 e8 a4 8f
	84 84		 mov	 DWORD PTR __t$507296[ebp], -2071687260 ; 84848fa4H
  0002d	c7 45 ec af 8d
	88 81		 mov	 DWORD PTR __t$507296[ebp+4], -2121757265 ; 81888dafH
  00034	c7 45 f0 a2 9e
	8a 84		 mov	 DWORD PTR __t$507296[ebp+8], -2071290206 ; 848a9ea2H
  0003b	66 c7 45 f4 8a
	89		 mov	 WORD PTR __t$507296[ebp+12], 35210 ; 0000898aH
  00041	8d 45 e8	 lea	 eax, DWORD PTR __t$507296[ebp]
  00044	88 5d f6	 mov	 BYTE PTR __t$507296[ebp+14], bl
  00047	59		 pop	 ecx
$LL166@AddRenderI:

; 78   : 	if( szType == "IconBackOrange" )

  00048	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0004e	83 c0 04	 add	 eax, 4
  00051	49		 dec	 ecx
  00052	75 f4		 jne	 SHORT $LL166@AddRenderI
  00054	6a 0c		 push	 12			; 0000000cH
  00056	58		 pop	 eax
$LL163@AddRenderI:
  00057	8b c8		 mov	 ecx, eax
  00059	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0005f	79 05		 jns	 SHORT $LN1442@AddRenderI
  00061	49		 dec	 ecx
  00062	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00065	41		 inc	 ecx
$LN1442@AddRenderI:
  00066	b2 ed		 mov	 dl, -19			; ffffffedH
  00068	2a d1		 sub	 dl, cl
  0006a	30 54 05 e8	 xor	 BYTE PTR __t$507296[ebp+eax], dl
  0006e	40		 inc	 eax
  0006f	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00072	7c e3		 jl	 SHORT $LL163@AddRenderI
  00074	8b cf		 mov	 ecx, edi
  00076	8d 75 e8	 lea	 esi, DWORD PTR __t$507296[ebp]
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
  0007f	6a 02		 push	 2
  00081	5f		 pop	 edi
$LL1394@AddRenderI:
  00082	8a 08		 mov	 cl, BYTE PTR [eax]
  00084	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00086	75 18		 jne	 SHORT $LN1395@AddRenderI
  00088	3a cb		 cmp	 cl, bl
  0008a	74 10		 je	 SHORT $LN1396@AddRenderI
  0008c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0008f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00092	75 0c		 jne	 SHORT $LN1395@AddRenderI
  00094	03 c7		 add	 eax, edi
  00096	03 f7		 add	 esi, edi
  00098	3a cb		 cmp	 cl, bl
  0009a	75 e6		 jne	 SHORT $LL1394@AddRenderI
$LN1396@AddRenderI:
  0009c	33 c0		 xor	 eax, eax
  0009e	eb 05		 jmp	 SHORT $LN1397@AddRenderI
$LN1395@AddRenderI:
  000a0	1b c0		 sbb	 eax, eax
  000a2	83 d8 ff	 sbb	 eax, -1
$LN1397@AddRenderI:
  000a5	3b c3		 cmp	 eax, ebx
  000a7	75 28		 jne	 SHORT $LN1383@AddRenderI

; 79   : 	{
; 80   : 		SAFEDELETE( m_pIconBack[GAUGE_NORMAL_NPC] );

  000a9	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000ac	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  000b2	3b cb		 cmp	 ecx, ebx
  000b4	74 0d		 je	 SHORT $LN35@AddRenderI
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	6a 01		 push	 1
  000ba	ff 50 40	 call	 DWORD PTR [eax+64]
  000bd	89 9e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ebx
$LN35@AddRenderI:

; 81   : 		m_pIconBack[GAUGE_NORMAL_NPC] = pImage;

  000c3	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  000c6	89 86 90 01 00
	00		 mov	 DWORD PTR [esi+400], eax
  000cc	e9 49 06 00 00	 jmp	 $LN1@AddRenderI
$LN1383@AddRenderI:

; 82   : 	}
; 83   : 	else if( szType == "IconBackRed" )

  000d1	c7 45 e8 a4 8f
	84 84		 mov	 DWORD PTR __t$507447[ebp], -2071687260 ; 84848fa4H
  000d8	c7 45 ec af 8d
	88 81		 mov	 DWORD PTR __t$507447[ebp+4], -2121757265 ; 81888dafH
  000df	8d 45 e8	 lea	 eax, DWORD PTR __t$507447[ebp]
  000e2	c7 45 f0 bf 89
	8f 00		 mov	 DWORD PTR __t$507447[ebp+8], 9406911 ; 008f89bfH
  000e9	8b cf		 mov	 ecx, edi
$LL272@AddRenderI:
  000eb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000f1	83 c0 04	 add	 eax, 4
  000f4	49		 dec	 ecx
  000f5	75 f4		 jne	 SHORT $LL272@AddRenderI
  000f7	6a 08		 push	 8
  000f9	58		 pop	 eax
$LL269@AddRenderI:
  000fa	8b c8		 mov	 ecx, eax
  000fc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00102	79 05		 jns	 SHORT $LN1443@AddRenderI
  00104	49		 dec	 ecx
  00105	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00108	41		 inc	 ecx
$LN1443@AddRenderI:
  00109	b2 ed		 mov	 dl, -19			; ffffffedH
  0010b	2a d1		 sub	 dl, cl
  0010d	30 54 05 e8	 xor	 BYTE PTR __t$507447[ebp+eax], dl
  00111	40		 inc	 eax
  00112	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00115	7c e3		 jl	 SHORT $LL269@AddRenderI
  00117	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0011a	8d 75 e8	 lea	 esi, DWORD PTR __t$507447[ebp]
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1398@AddRenderI:
  00123	8a 08		 mov	 cl, BYTE PTR [eax]
  00125	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00127	75 18		 jne	 SHORT $LN1399@AddRenderI
  00129	3a cb		 cmp	 cl, bl
  0012b	74 10		 je	 SHORT $LN1400@AddRenderI
  0012d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00130	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00133	75 0c		 jne	 SHORT $LN1399@AddRenderI
  00135	03 c7		 add	 eax, edi
  00137	03 f7		 add	 esi, edi
  00139	3a cb		 cmp	 cl, bl
  0013b	75 e6		 jne	 SHORT $LL1398@AddRenderI
$LN1400@AddRenderI:
  0013d	33 c0		 xor	 eax, eax
  0013f	eb 05		 jmp	 SHORT $LN1401@AddRenderI
$LN1399@AddRenderI:
  00141	1b c0		 sbb	 eax, eax
  00143	83 d8 ff	 sbb	 eax, -1
$LN1401@AddRenderI:
  00146	3b c3		 cmp	 eax, ebx
  00148	75 28		 jne	 SHORT $LN1384@AddRenderI

; 84   : 	{
; 85   : 		SAFEDELETE( m_pIconBack[GAUGE_AWAKENING_NPC] );

  0014a	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0014d	8b 8e 94 01 00
	00		 mov	 ecx, DWORD PTR [esi+404]
  00153	3b cb		 cmp	 ecx, ebx
  00155	74 0d		 je	 SHORT $LN32@AddRenderI
  00157	8b 01		 mov	 eax, DWORD PTR [ecx]
  00159	6a 01		 push	 1
  0015b	ff 50 40	 call	 DWORD PTR [eax+64]
  0015e	89 9e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ebx
$LN32@AddRenderI:

; 86   : 		m_pIconBack[GAUGE_AWAKENING_NPC] = pImage;

  00164	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00167	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax
  0016d	e9 a8 05 00 00	 jmp	 $LN1@AddRenderI
$LN1384@AddRenderI:

; 87   : 	}
; 88   : 	else if( szType == "GaugeBack" )

  00172	c7 45 ec aa 8d
	9e 8d		 mov	 DWORD PTR __t$507533[ebp], -1918988886 ; 8d9e8daaH
  00179	c7 45 f0 88 ae
	8a 89		 mov	 DWORD PTR __t$507533[ebp+4], -1987400056 ; 898aae88H
  00180	8d 45 ec	 lea	 eax, DWORD PTR __t$507533[ebp]
  00183	66 c7 45 f4 86
	00		 mov	 WORD PTR __t$507533[ebp+8], 134 ; 00000086H
  00189	8b cf		 mov	 ecx, edi
$LL378@AddRenderI:
  0018b	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00191	83 c0 04	 add	 eax, 4
  00194	49		 dec	 ecx
  00195	75 f4		 jne	 SHORT $LL378@AddRenderI
  00197	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0019a	80 75 f4 ed	 xor	 BYTE PTR __t$507533[ebp+8], -19 ; ffffffedH
  0019e	8d 75 ec	 lea	 esi, DWORD PTR __t$507533[ebp]
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1402@AddRenderI:
  001a7	8a 08		 mov	 cl, BYTE PTR [eax]
  001a9	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001ab	75 18		 jne	 SHORT $LN1403@AddRenderI
  001ad	3a cb		 cmp	 cl, bl
  001af	74 10		 je	 SHORT $LN1404@AddRenderI
  001b1	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001b4	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001b7	75 0c		 jne	 SHORT $LN1403@AddRenderI
  001b9	03 c7		 add	 eax, edi
  001bb	03 f7		 add	 esi, edi
  001bd	3a cb		 cmp	 cl, bl
  001bf	75 e6		 jne	 SHORT $LL1402@AddRenderI
$LN1404@AddRenderI:
  001c1	33 c0		 xor	 eax, eax
  001c3	eb 05		 jmp	 SHORT $LN1405@AddRenderI
$LN1403@AddRenderI:
  001c5	1b c0		 sbb	 eax, eax
  001c7	83 d8 ff	 sbb	 eax, -1
$LN1405@AddRenderI:
  001ca	3b c3		 cmp	 eax, ebx
  001cc	75 28		 jne	 SHORT $LN1385@AddRenderI

; 89   : 	{
; 90   : 		SAFEDELETE( m_pGaugeBack );

  001ce	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  001d1	8b 8e a0 01 00
	00		 mov	 ecx, DWORD PTR [esi+416]
  001d7	3b cb		 cmp	 ecx, ebx
  001d9	74 0d		 je	 SHORT $LN29@AddRenderI
  001db	8b 01		 mov	 eax, DWORD PTR [ecx]
  001dd	6a 01		 push	 1
  001df	ff 50 40	 call	 DWORD PTR [eax+64]
  001e2	89 9e a0 01 00
	00		 mov	 DWORD PTR [esi+416], ebx
$LN29@AddRenderI:

; 91   : 		m_pGaugeBack = pImage;

  001e8	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  001eb	89 86 a0 01 00
	00		 mov	 DWORD PTR [esi+416], eax
  001f1	e9 24 05 00 00	 jmp	 $LN1@AddRenderI
$LN1385@AddRenderI:

; 92   : 	}
; 93   : 	else if( szType == "GaugeOrange" )

  001f6	c7 45 e8 aa 8d
	9e 8d		 mov	 DWORD PTR __t$507697[ebp], -1918988886 ; 8d9e8daaH
  001fd	c7 45 ec 88 a3
	99 8b		 mov	 DWORD PTR __t$507697[ebp+4], -1952865400 ; 8b99a388H
  00204	8d 45 e8	 lea	 eax, DWORD PTR __t$507697[ebp]
  00207	c7 45 f0 83 8b
	8e 00		 mov	 DWORD PTR __t$507697[ebp+8], 9341827 ; 008e8b83H
  0020e	8b cf		 mov	 ecx, edi
$LL484@AddRenderI:
  00210	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00216	83 c0 04	 add	 eax, 4
  00219	49		 dec	 ecx
  0021a	75 f4		 jne	 SHORT $LL484@AddRenderI
  0021c	6a 08		 push	 8
  0021e	58		 pop	 eax
$LL481@AddRenderI:
  0021f	8b c8		 mov	 ecx, eax
  00221	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00227	79 05		 jns	 SHORT $LN1444@AddRenderI
  00229	49		 dec	 ecx
  0022a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0022d	41		 inc	 ecx
$LN1444@AddRenderI:
  0022e	b2 ed		 mov	 dl, -19			; ffffffedH
  00230	2a d1		 sub	 dl, cl
  00232	30 54 05 e8	 xor	 BYTE PTR __t$507697[ebp+eax], dl
  00236	40		 inc	 eax
  00237	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0023a	7c e3		 jl	 SHORT $LL481@AddRenderI
  0023c	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0023f	8d 75 e8	 lea	 esi, DWORD PTR __t$507697[ebp]
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1406@AddRenderI:
  00248	8a 08		 mov	 cl, BYTE PTR [eax]
  0024a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0024c	75 18		 jne	 SHORT $LN1407@AddRenderI
  0024e	3a cb		 cmp	 cl, bl
  00250	74 10		 je	 SHORT $LN1408@AddRenderI
  00252	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00255	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00258	75 0c		 jne	 SHORT $LN1407@AddRenderI
  0025a	03 c7		 add	 eax, edi
  0025c	03 f7		 add	 esi, edi
  0025e	3a cb		 cmp	 cl, bl
  00260	75 e6		 jne	 SHORT $LL1406@AddRenderI
$LN1408@AddRenderI:
  00262	33 c0		 xor	 eax, eax
  00264	eb 05		 jmp	 SHORT $LN1409@AddRenderI
$LN1407@AddRenderI:
  00266	1b c0		 sbb	 eax, eax
  00268	83 d8 ff	 sbb	 eax, -1
$LN1409@AddRenderI:
  0026b	3b c3		 cmp	 eax, ebx
  0026d	75 28		 jne	 SHORT $LN1386@AddRenderI

; 94   : 	{
; 95   : 		SAFEDELETE( m_pGauge[GAUGE_NORMAL_NPC] );

  0026f	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00272	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  00278	3b cb		 cmp	 ecx, ebx
  0027a	74 0d		 je	 SHORT $LN26@AddRenderI
  0027c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0027e	6a 01		 push	 1
  00280	ff 50 40	 call	 DWORD PTR [eax+64]
  00283	89 9e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ebx
$LN26@AddRenderI:

; 96   : 		m_pGauge[GAUGE_NORMAL_NPC] = pImage;

  00289	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0028c	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax
  00292	e9 83 04 00 00	 jmp	 $LN1@AddRenderI
$LN1386@AddRenderI:

; 97   : 	}
; 98   : 	else if( szType == "GaugeRed" )

  00297	c7 45 ec aa 8d
	9e 8d		 mov	 DWORD PTR __t$507783[ebp], -1918988886 ; 8d9e8daaH
  0029e	c7 45 f0 88 be
	8e 8e		 mov	 DWORD PTR __t$507783[ebp+4], -1903247736 ; 8e8ebe88H
  002a5	8d 45 ec	 lea	 eax, DWORD PTR __t$507783[ebp]
  002a8	88 5d f4	 mov	 BYTE PTR __t$507783[ebp+8], bl
  002ab	8b cf		 mov	 ecx, edi
$LL590@AddRenderI:
  002ad	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002b3	83 c0 04	 add	 eax, 4
  002b6	49		 dec	 ecx
  002b7	75 f4		 jne	 SHORT $LL590@AddRenderI
  002b9	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  002bc	8d 75 ec	 lea	 esi, DWORD PTR __t$507783[ebp]
  002bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1410@AddRenderI:
  002c5	8a 08		 mov	 cl, BYTE PTR [eax]
  002c7	3a 0e		 cmp	 cl, BYTE PTR [esi]
  002c9	75 18		 jne	 SHORT $LN1411@AddRenderI
  002cb	3a cb		 cmp	 cl, bl
  002cd	74 10		 je	 SHORT $LN1412@AddRenderI
  002cf	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  002d2	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  002d5	75 0c		 jne	 SHORT $LN1411@AddRenderI
  002d7	03 c7		 add	 eax, edi
  002d9	03 f7		 add	 esi, edi
  002db	3a cb		 cmp	 cl, bl
  002dd	75 e6		 jne	 SHORT $LL1410@AddRenderI
$LN1412@AddRenderI:
  002df	33 c0		 xor	 eax, eax
  002e1	eb 05		 jmp	 SHORT $LN1413@AddRenderI
$LN1411@AddRenderI:
  002e3	1b c0		 sbb	 eax, eax
  002e5	83 d8 ff	 sbb	 eax, -1
$LN1413@AddRenderI:
  002e8	3b c3		 cmp	 eax, ebx
  002ea	75 28		 jne	 SHORT $LN1387@AddRenderI

; 99   : 	{
; 100  : 		SAFEDELETE( m_pGauge[GAUGE_AWAKENING_NPC] );

  002ec	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  002ef	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]
  002f5	3b cb		 cmp	 ecx, ebx
  002f7	74 0d		 je	 SHORT $LN23@AddRenderI
  002f9	8b 01		 mov	 eax, DWORD PTR [ecx]
  002fb	6a 01		 push	 1
  002fd	ff 50 40	 call	 DWORD PTR [eax+64]
  00300	89 9e 9c 01 00
	00		 mov	 DWORD PTR [esi+412], ebx
$LN23@AddRenderI:

; 101  : 		m_pGauge[GAUGE_AWAKENING_NPC] = pImage;

  00306	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00309	89 86 9c 01 00
	00		 mov	 DWORD PTR [esi+412], eax
  0030f	e9 06 04 00 00	 jmp	 $LN1@AddRenderI
$LN1387@AddRenderI:

; 102  : 	}
; 103  : 	else if( szType == "GaugeWhite" )

  00314	c7 45 ec aa 8d
	9e 8d		 mov	 DWORD PTR __t$507911[ebp], -1918988886 ; 8d9e8daaH
  0031b	c7 45 f0 88 bb
	83 83		 mov	 DWORD PTR __t$507911[ebp+4], -2088518776 ; 8383bb88H
  00322	66 c7 45 f4 99
	89		 mov	 WORD PTR __t$507911[ebp+8], 35225 ; 00008999H
  00328	8d 45 ec	 lea	 eax, DWORD PTR __t$507911[ebp]
  0032b	88 5d f6	 mov	 BYTE PTR __t$507911[ebp+10], bl
  0032e	8b cf		 mov	 ecx, edi
$LL696@AddRenderI:
  00330	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00336	83 c0 04	 add	 eax, 4
  00339	49		 dec	 ecx
  0033a	75 f4		 jne	 SHORT $LL696@AddRenderI
  0033c	6a 08		 push	 8
  0033e	58		 pop	 eax
$LL693@AddRenderI:
  0033f	8b c8		 mov	 ecx, eax
  00341	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00347	79 05		 jns	 SHORT $LN1445@AddRenderI
  00349	49		 dec	 ecx
  0034a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0034d	41		 inc	 ecx
$LN1445@AddRenderI:
  0034e	b2 ed		 mov	 dl, -19			; ffffffedH
  00350	2a d1		 sub	 dl, cl
  00352	30 54 05 ec	 xor	 BYTE PTR __t$507911[ebp+eax], dl
  00356	40		 inc	 eax
  00357	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0035a	7c e3		 jl	 SHORT $LL693@AddRenderI
  0035c	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0035f	8d 75 ec	 lea	 esi, DWORD PTR __t$507911[ebp]
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1414@AddRenderI:
  00368	8a 08		 mov	 cl, BYTE PTR [eax]
  0036a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0036c	75 18		 jne	 SHORT $LN1415@AddRenderI
  0036e	3a cb		 cmp	 cl, bl
  00370	74 10		 je	 SHORT $LN1416@AddRenderI
  00372	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00375	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00378	75 0c		 jne	 SHORT $LN1415@AddRenderI
  0037a	03 c7		 add	 eax, edi
  0037c	03 f7		 add	 esi, edi
  0037e	3a cb		 cmp	 cl, bl
  00380	75 e6		 jne	 SHORT $LL1414@AddRenderI
$LN1416@AddRenderI:
  00382	33 c0		 xor	 eax, eax
  00384	eb 05		 jmp	 SHORT $LN1417@AddRenderI
$LN1415@AddRenderI:
  00386	1b c0		 sbb	 eax, eax
  00388	83 d8 ff	 sbb	 eax, -1
$LN1417@AddRenderI:
  0038b	3b c3		 cmp	 eax, ebx
  0038d	75 28		 jne	 SHORT $LN1388@AddRenderI

; 104  : 	{
; 105  : 		SAFEDELETE( m_pGaugeWhite );

  0038f	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00392	8b 8e a4 01 00
	00		 mov	 ecx, DWORD PTR [esi+420]
  00398	3b cb		 cmp	 ecx, ebx
  0039a	74 0d		 je	 SHORT $LN20@AddRenderI
  0039c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0039e	6a 01		 push	 1
  003a0	ff 50 40	 call	 DWORD PTR [eax+64]
  003a3	89 9e a4 01 00
	00		 mov	 DWORD PTR [esi+420], ebx
$LN20@AddRenderI:

; 106  : 		m_pGaugeWhite = pImage;

  003a9	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  003ac	89 86 a4 01 00
	00		 mov	 DWORD PTR [esi+420], eax
  003b2	e9 63 03 00 00	 jmp	 $LN1@AddRenderI
$LN1388@AddRenderI:

; 107  : 	}
; 108  : 	else if( szType == "WhiteLine" )

  003b7	c7 45 ec ba 84
	82 9e		 mov	 DWORD PTR __t$508033[ebp], -1635613510 ; 9e8284baH
  003be	c7 45 f0 88 a0
	82 84		 mov	 DWORD PTR __t$508033[ebp+4], -2071814008 ; 8482a088H
  003c5	8d 45 ec	 lea	 eax, DWORD PTR __t$508033[ebp]
  003c8	66 c7 45 f4 88
	00		 mov	 WORD PTR __t$508033[ebp+8], 136 ; 00000088H
  003ce	8b cf		 mov	 ecx, edi
$LL802@AddRenderI:
  003d0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003d6	83 c0 04	 add	 eax, 4
  003d9	49		 dec	 ecx
  003da	75 f4		 jne	 SHORT $LL802@AddRenderI
  003dc	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  003df	80 75 f4 ed	 xor	 BYTE PTR __t$508033[ebp+8], -19 ; ffffffedH
  003e3	8d 75 ec	 lea	 esi, DWORD PTR __t$508033[ebp]
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1418@AddRenderI:
  003ec	8a 08		 mov	 cl, BYTE PTR [eax]
  003ee	3a 0e		 cmp	 cl, BYTE PTR [esi]
  003f0	75 18		 jne	 SHORT $LN1419@AddRenderI
  003f2	3a cb		 cmp	 cl, bl
  003f4	74 10		 je	 SHORT $LN1420@AddRenderI
  003f6	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  003f9	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  003fc	75 0c		 jne	 SHORT $LN1419@AddRenderI
  003fe	03 c7		 add	 eax, edi
  00400	03 f7		 add	 esi, edi
  00402	3a cb		 cmp	 cl, bl
  00404	75 e6		 jne	 SHORT $LL1418@AddRenderI
$LN1420@AddRenderI:
  00406	33 c0		 xor	 eax, eax
  00408	eb 05		 jmp	 SHORT $LN1421@AddRenderI
$LN1419@AddRenderI:
  0040a	1b c0		 sbb	 eax, eax
  0040c	83 d8 ff	 sbb	 eax, -1
$LN1421@AddRenderI:
  0040f	3b c3		 cmp	 eax, ebx
  00411	75 28		 jne	 SHORT $LN1389@AddRenderI

; 109  : 	{
; 110  : 		SAFEDELETE( m_pWhiteLine );

  00413	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00416	8b 8e b0 01 00
	00		 mov	 ecx, DWORD PTR [esi+432]
  0041c	3b cb		 cmp	 ecx, ebx
  0041e	74 0d		 je	 SHORT $LN17@AddRenderI
  00420	8b 01		 mov	 eax, DWORD PTR [ecx]
  00422	6a 01		 push	 1
  00424	ff 50 40	 call	 DWORD PTR [eax+64]
  00427	89 9e b0 01 00
	00		 mov	 DWORD PTR [esi+432], ebx
$LN17@AddRenderI:

; 111  : 		m_pWhiteLine = pImage;

  0042d	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00430	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
  00436	e9 df 02 00 00	 jmp	 $LN1@AddRenderI
$LN1389@AddRenderI:

; 112  : 	}
; 113  : 	else if( szType == "AttackEffect1" )

  0043b	6a 03		 push	 3
  0043d	c7 45 e8 ac 98
	9f 8b		 mov	 DWORD PTR __t$508171[ebp], -1952474964 ; 8b9f98acH
  00444	c7 45 ec 8e 87
	ae 8c		 mov	 DWORD PTR __t$508171[ebp+4], -1934719090 ; 8cae878eH
  0044b	c7 45 f0 8b 89
	88 9e		 mov	 DWORD PTR __t$508171[ebp+8], -1635219061 ; 9e88898bH
  00452	8d 45 e8	 lea	 eax, DWORD PTR __t$508171[ebp]
  00455	66 c7 45 f4 dc
	00		 mov	 WORD PTR __t$508171[ebp+12], 220 ; 000000dcH
  0045b	59		 pop	 ecx
$LL908@AddRenderI:
  0045c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00462	83 c0 04	 add	 eax, 4
  00465	49		 dec	 ecx
  00466	75 f4		 jne	 SHORT $LL908@AddRenderI
  00468	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0046b	80 75 f4 ed	 xor	 BYTE PTR __t$508171[ebp+12], -19 ; ffffffedH
  0046f	8d 75 e8	 lea	 esi, DWORD PTR __t$508171[ebp]
  00472	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1422@AddRenderI:
  00478	8a 08		 mov	 cl, BYTE PTR [eax]
  0047a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0047c	75 18		 jne	 SHORT $LN1423@AddRenderI
  0047e	3a cb		 cmp	 cl, bl
  00480	74 10		 je	 SHORT $LN1424@AddRenderI
  00482	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00485	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00488	75 0c		 jne	 SHORT $LN1423@AddRenderI
  0048a	03 c7		 add	 eax, edi
  0048c	03 f7		 add	 esi, edi
  0048e	3a cb		 cmp	 cl, bl
  00490	75 e6		 jne	 SHORT $LL1422@AddRenderI
$LN1424@AddRenderI:
  00492	33 c0		 xor	 eax, eax
  00494	eb 05		 jmp	 SHORT $LN1425@AddRenderI
$LN1423@AddRenderI:
  00496	1b c0		 sbb	 eax, eax
  00498	83 d8 ff	 sbb	 eax, -1
$LN1425@AddRenderI:
  0049b	3b c3		 cmp	 eax, ebx
  0049d	75 28		 jne	 SHORT $LN1390@AddRenderI

; 114  : 	{
; 115  : 		SAFEDELETE( m_pAttackEffect1 );

  0049f	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  004a2	8b 8e a8 01 00
	00		 mov	 ecx, DWORD PTR [esi+424]
  004a8	3b cb		 cmp	 ecx, ebx
  004aa	74 0d		 je	 SHORT $LN14@AddRenderI
  004ac	8b 01		 mov	 eax, DWORD PTR [ecx]
  004ae	6a 01		 push	 1
  004b0	ff 50 40	 call	 DWORD PTR [eax+64]
  004b3	89 9e a8 01 00
	00		 mov	 DWORD PTR [esi+424], ebx
$LN14@AddRenderI:

; 116  : 		m_pAttackEffect1 = pImage;

  004b9	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  004bc	89 86 a8 01 00
	00		 mov	 DWORD PTR [esi+424], eax
  004c2	e9 53 02 00 00	 jmp	 $LN1@AddRenderI
$LN1390@AddRenderI:

; 117  : 	}
; 118  : 	else if( szType == "AttackEffect2" )

  004c7	6a 03		 push	 3
  004c9	c7 45 e8 ac 98
	9f 8b		 mov	 DWORD PTR __t$508296[ebp], -1952474964 ; 8b9f98acH
  004d0	c7 45 ec 8e 87
	ae 8c		 mov	 DWORD PTR __t$508296[ebp+4], -1934719090 ; 8cae878eH
  004d7	c7 45 f0 8b 89
	88 9e		 mov	 DWORD PTR __t$508296[ebp+8], -1635219061 ; 9e88898bH
  004de	8d 45 e8	 lea	 eax, DWORD PTR __t$508296[ebp]
  004e1	66 c7 45 f4 df
	00		 mov	 WORD PTR __t$508296[ebp+12], 223 ; 000000dfH
  004e7	59		 pop	 ecx
$LL1014@AddRenderI:
  004e8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  004ee	83 c0 04	 add	 eax, 4
  004f1	49		 dec	 ecx
  004f2	75 f4		 jne	 SHORT $LL1014@AddRenderI
  004f4	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  004f7	80 75 f4 ed	 xor	 BYTE PTR __t$508296[ebp+12], -19 ; ffffffedH
  004fb	8d 75 e8	 lea	 esi, DWORD PTR __t$508296[ebp]
  004fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1426@AddRenderI:
  00504	8a 08		 mov	 cl, BYTE PTR [eax]
  00506	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00508	75 18		 jne	 SHORT $LN1427@AddRenderI
  0050a	3a cb		 cmp	 cl, bl
  0050c	74 10		 je	 SHORT $LN1428@AddRenderI
  0050e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00511	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00514	75 0c		 jne	 SHORT $LN1427@AddRenderI
  00516	03 c7		 add	 eax, edi
  00518	03 f7		 add	 esi, edi
  0051a	3a cb		 cmp	 cl, bl
  0051c	75 e6		 jne	 SHORT $LL1426@AddRenderI
$LN1428@AddRenderI:
  0051e	33 c0		 xor	 eax, eax
  00520	eb 05		 jmp	 SHORT $LN1429@AddRenderI
$LN1427@AddRenderI:
  00522	1b c0		 sbb	 eax, eax
  00524	83 d8 ff	 sbb	 eax, -1
$LN1429@AddRenderI:
  00527	3b c3		 cmp	 eax, ebx
  00529	75 28		 jne	 SHORT $LN1391@AddRenderI

; 119  : 	{
; 120  : 		SAFEDELETE( m_pAttackEffect2 );

  0052b	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0052e	8b 8e ac 01 00
	00		 mov	 ecx, DWORD PTR [esi+428]
  00534	3b cb		 cmp	 ecx, ebx
  00536	74 0d		 je	 SHORT $LN11@AddRenderI
  00538	8b 01		 mov	 eax, DWORD PTR [ecx]
  0053a	6a 01		 push	 1
  0053c	ff 50 40	 call	 DWORD PTR [eax+64]
  0053f	89 9e ac 01 00
	00		 mov	 DWORD PTR [esi+428], ebx
$LN11@AddRenderI:

; 121  : 		m_pAttackEffect2 = pImage;

  00545	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00548	89 86 ac 01 00
	00		 mov	 DWORD PTR [esi+428], eax
  0054e	e9 c7 01 00 00	 jmp	 $LN1@AddRenderI
$LN1391@AddRenderI:

; 122  : 	}
; 123  : 	else if( szType == "RaidGauge" )

  00553	c7 45 ec bf 8d
	82 8e		 mov	 DWORD PTR __t$508408[ebp], -1904046657 ; 8e828dbfH
  0055a	c7 45 f0 aa 8d
	9e 8d		 mov	 DWORD PTR __t$508408[ebp+4], -1918988886 ; 8d9e8daaH
  00561	8d 45 ec	 lea	 eax, DWORD PTR __t$508408[ebp]
  00564	66 c7 45 f4 88
	00		 mov	 WORD PTR __t$508408[ebp+8], 136 ; 00000088H
  0056a	8b cf		 mov	 ecx, edi
$LL1120@AddRenderI:
  0056c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00572	83 c0 04	 add	 eax, 4
  00575	49		 dec	 ecx
  00576	75 f4		 jne	 SHORT $LL1120@AddRenderI
  00578	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0057b	80 75 f4 ed	 xor	 BYTE PTR __t$508408[ebp+8], -19 ; ffffffedH
  0057f	8d 75 ec	 lea	 esi, DWORD PTR __t$508408[ebp]
  00582	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1430@AddRenderI:
  00588	8a 08		 mov	 cl, BYTE PTR [eax]
  0058a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0058c	75 18		 jne	 SHORT $LN1431@AddRenderI
  0058e	3a cb		 cmp	 cl, bl
  00590	74 10		 je	 SHORT $LN1432@AddRenderI
  00592	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00595	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00598	75 0c		 jne	 SHORT $LN1431@AddRenderI
  0059a	03 c7		 add	 eax, edi
  0059c	03 f7		 add	 esi, edi
  0059e	3a cb		 cmp	 cl, bl
  005a0	75 e6		 jne	 SHORT $LL1430@AddRenderI
$LN1432@AddRenderI:
  005a2	33 c0		 xor	 eax, eax
  005a4	eb 05		 jmp	 SHORT $LN1433@AddRenderI
$LN1431@AddRenderI:
  005a6	1b c0		 sbb	 eax, eax
  005a8	83 d8 ff	 sbb	 eax, -1
$LN1433@AddRenderI:
  005ab	3b c3		 cmp	 eax, ebx
  005ad	75 28		 jne	 SHORT $LN1392@AddRenderI

; 124  : 	{
; 125  : 		SAFEDELETE( m_pRaidGauge );

  005af	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  005b2	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  005b8	3b cb		 cmp	 ecx, ebx
  005ba	74 0d		 je	 SHORT $LN8@AddRenderI
  005bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  005be	6a 01		 push	 1
  005c0	ff 50 40	 call	 DWORD PTR [eax+64]
  005c3	89 9e bc 01 00
	00		 mov	 DWORD PTR [esi+444], ebx
$LN8@AddRenderI:

; 126  : 		m_pRaidGauge = pImage;

  005c9	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  005cc	89 86 bc 01 00
	00		 mov	 DWORD PTR [esi+444], eax
  005d2	e9 43 01 00 00	 jmp	 $LN1@AddRenderI
$LN1392@AddRenderI:

; 127  : 	}
; 128  : 	else if( szType == "RaidGaugeWhite" )

  005d7	6a 03		 push	 3
  005d9	c7 45 e8 bf 8d
	82 8e		 mov	 DWORD PTR __t$508546[ebp], -1904046657 ; 8e828dbfH
  005e0	c7 45 ec aa 8d
	9e 8d		 mov	 DWORD PTR __t$508546[ebp+4], -1918988886 ; 8d9e8daaH
  005e7	c7 45 f0 88 bb
	83 83		 mov	 DWORD PTR __t$508546[ebp+8], -2088518776 ; 8383bb88H
  005ee	66 c7 45 f4 99
	89		 mov	 WORD PTR __t$508546[ebp+12], 35225 ; 00008999H
  005f4	8d 45 e8	 lea	 eax, DWORD PTR __t$508546[ebp]
  005f7	88 5d f6	 mov	 BYTE PTR __t$508546[ebp+14], bl
  005fa	59		 pop	 ecx
$LL1226@AddRenderI:
  005fb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00601	83 c0 04	 add	 eax, 4
  00604	49		 dec	 ecx
  00605	75 f4		 jne	 SHORT $LL1226@AddRenderI
  00607	6a 0c		 push	 12			; 0000000cH
  00609	58		 pop	 eax
$LL1223@AddRenderI:
  0060a	8b c8		 mov	 ecx, eax
  0060c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00612	79 05		 jns	 SHORT $LN1446@AddRenderI
  00614	49		 dec	 ecx
  00615	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00618	41		 inc	 ecx
$LN1446@AddRenderI:
  00619	b2 ed		 mov	 dl, -19			; ffffffedH
  0061b	2a d1		 sub	 dl, cl
  0061d	30 54 05 e8	 xor	 BYTE PTR __t$508546[ebp+eax], dl
  00621	40		 inc	 eax
  00622	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00625	7c e3		 jl	 SHORT $LL1223@AddRenderI
  00627	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0062a	8d 75 e8	 lea	 esi, DWORD PTR __t$508546[ebp]
  0062d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1434@AddRenderI:
  00633	8a 08		 mov	 cl, BYTE PTR [eax]
  00635	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00637	75 18		 jne	 SHORT $LN1435@AddRenderI
  00639	3a cb		 cmp	 cl, bl
  0063b	74 10		 je	 SHORT $LN1436@AddRenderI
  0063d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00640	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00643	75 0c		 jne	 SHORT $LN1435@AddRenderI
  00645	03 c7		 add	 eax, edi
  00647	03 f7		 add	 esi, edi
  00649	3a cb		 cmp	 cl, bl
  0064b	75 e6		 jne	 SHORT $LL1434@AddRenderI
$LN1436@AddRenderI:
  0064d	33 c0		 xor	 eax, eax
  0064f	eb 05		 jmp	 SHORT $LN1437@AddRenderI
$LN1435@AddRenderI:
  00651	1b c0		 sbb	 eax, eax
  00653	83 d8 ff	 sbb	 eax, -1
$LN1437@AddRenderI:
  00656	3b c3		 cmp	 eax, ebx
  00658	75 28		 jne	 SHORT $LN1393@AddRenderI

; 129  : 	{
; 130  : 		SAFEDELETE( m_pRaidGaugeWhite );

  0065a	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  0065d	8b 8e c4 01 00
	00		 mov	 ecx, DWORD PTR [esi+452]
  00663	3b cb		 cmp	 ecx, ebx
  00665	74 0d		 je	 SHORT $LN5@AddRenderI
  00667	8b 01		 mov	 eax, DWORD PTR [ecx]
  00669	6a 01		 push	 1
  0066b	ff 50 40	 call	 DWORD PTR [eax+64]
  0066e	89 9e c4 01 00
	00		 mov	 DWORD PTR [esi+452], ebx
$LN5@AddRenderI:

; 131  : 		m_pRaidGaugeWhite = pImage;

  00674	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00677	89 86 c4 01 00
	00		 mov	 DWORD PTR [esi+452], eax
  0067d	e9 98 00 00 00	 jmp	 $LN1@AddRenderI
$LN1393@AddRenderI:

; 132  : 	}
; 133  : 	else if( szType == "RaidGaugeBack" )

  00682	6a 03		 push	 3
  00684	c7 45 e8 bf 8d
	82 8e		 mov	 DWORD PTR __t$508658[ebp], -1904046657 ; 8e828dbfH
  0068b	c7 45 ec aa 8d
	9e 8d		 mov	 DWORD PTR __t$508658[ebp+4], -1918988886 ; 8d9e8daaH
  00692	c7 45 f0 88 ae
	8a 89		 mov	 DWORD PTR __t$508658[ebp+8], -1987400056 ; 898aae88H
  00699	8d 45 e8	 lea	 eax, DWORD PTR __t$508658[ebp]
  0069c	66 c7 45 f4 86
	00		 mov	 WORD PTR __t$508658[ebp+12], 134 ; 00000086H
  006a2	59		 pop	 ecx
$LL1332@AddRenderI:
  006a3	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  006a9	83 c0 04	 add	 eax, 4
  006ac	49		 dec	 ecx
  006ad	75 f4		 jne	 SHORT $LL1332@AddRenderI
  006af	8b 4d dc	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  006b2	80 75 f4 ed	 xor	 BYTE PTR __t$508658[ebp+12], -19 ; ffffffedH
  006b6	8d 75 e8	 lea	 esi, DWORD PTR __t$508658[ebp]
  006b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL1438@AddRenderI:
  006bf	8a 08		 mov	 cl, BYTE PTR [eax]
  006c1	3a 0e		 cmp	 cl, BYTE PTR [esi]
  006c3	75 18		 jne	 SHORT $LN1439@AddRenderI
  006c5	3a cb		 cmp	 cl, bl
  006c7	74 10		 je	 SHORT $LN1440@AddRenderI
  006c9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  006cc	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  006cf	75 0c		 jne	 SHORT $LN1439@AddRenderI
  006d1	03 c7		 add	 eax, edi
  006d3	03 f7		 add	 esi, edi
  006d5	3a cb		 cmp	 cl, bl
  006d7	75 e6		 jne	 SHORT $LL1438@AddRenderI
$LN1440@AddRenderI:
  006d9	33 c0		 xor	 eax, eax
  006db	eb 05		 jmp	 SHORT $LN1441@AddRenderI
$LN1439@AddRenderI:
  006dd	1b c0		 sbb	 eax, eax
  006df	83 d8 ff	 sbb	 eax, -1
$LN1441@AddRenderI:
  006e2	3b c3		 cmp	 eax, ebx
  006e4	75 25		 jne	 SHORT $LN3@AddRenderI

; 134  : 	{
; 135  : 		SAFEDELETE( m_pRaidGaugeBack );

  006e6	8b 75 e4	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  006e9	8b 8e c0 01 00
	00		 mov	 ecx, DWORD PTR [esi+448]
  006ef	3b cb		 cmp	 ecx, ebx
  006f1	74 0d		 je	 SHORT $LN2@AddRenderI
  006f3	8b 01		 mov	 eax, DWORD PTR [ecx]
  006f5	6a 01		 push	 1
  006f7	ff 50 40	 call	 DWORD PTR [eax+64]
  006fa	89 9e c0 01 00
	00		 mov	 DWORD PTR [esi+448], ebx
$LN2@AddRenderI:

; 136  : 		m_pRaidGaugeBack = pImage;

  00700	8b 45 e0	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  00703	89 86 c0 01 00
	00		 mov	 DWORD PTR [esi+448], eax

; 137  : 	}
; 138  : 	else

  00709	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 139  : 		ioWnd::AddRenderImage( szType, pImage );

  0070b	ff 75 e0	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  0070e	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00711	ff 75 dc	 push	 DWORD PTR _szType$GSCopy$[ebp]
  00714	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 140  : }

  0071a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0071d	5f		 pop	 edi
  0071e	5e		 pop	 esi
  0071f	33 cd		 xor	 ecx, ebp
  00721	5b		 pop	 ebx
  00722	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00727	c9		 leave
  00728	c2 08 00	 ret	 8
?AddRenderImage@PlazaNPCGaugeWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; PlazaNPCGaugeWnd::AddRenderImage
_TEXT	ENDS
EXTRN	__imp_?OnProcess@ioWnd@@MAEXM@Z:PROC
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnProcess@PlazaNPCGaugeWnd@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?OnProcess@PlazaNPCGaugeWnd@@MAEXM@Z PROC		; PlazaNPCGaugeWnd::OnProcess, COMDAT
; _this$ = ecx

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 376  : 	if( !IsShow() ) return ;

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  0000c	84 c0		 test	 al, al
  0000e	74 21		 je	 SHORT $LN2@OnProcess

; 377  : 
; 378  : 	UpdateAniState();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?UpdateAniState@PlazaNPCGaugeWnd@@IAEXXZ ; PlazaNPCGaugeWnd::UpdateAniState

; 379  : 	UpdateGaugeAni();

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?UpdateGaugeAni@PlazaNPCGaugeWnd@@IAEXXZ ; PlazaNPCGaugeWnd::UpdateGaugeAni

; 380  : 	ioMovingWnd::OnProcess( fTimePerSec );

  0001e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00023	51		 push	 ecx
  00024	8b ce		 mov	 ecx, esi
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnProcess@ioWnd@@MAEXM@Z
$LN2@OnProcess:
  00031	5e		 pop	 esi

; 381  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?OnProcess@PlazaNPCGaugeWnd@@MAEXM@Z ENDP		; PlazaNPCGaugeWnd::OnProcess
_TEXT	ENDS
END
