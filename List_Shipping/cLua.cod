; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\LuaState\cLua.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7cLua@@6B@					; cLua::`vftable'
PUBLIC	??1cLua@@UAE@XZ					; cLua::~cLua
PUBLIC	??_R4cLua@@6B@					; cLua::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcLua@@@8				; cLua `RTTI Type Descriptor'
PUBLIC	??_R3cLua@@8					; cLua::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2cLua@@8					; cLua::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@cLua@@8				; cLua::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	_lua_close:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_EcLua@@UAEPAXI@Z:PROC			; cLua::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@cLua@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\clua.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@cLua@@8 DD FLAT:??_R0?AVcLua@@@8		; cLua::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3cLua@@8
rdata$r	ENDS
;	COMDAT ??_R2cLua@@8
rdata$r	SEGMENT
??_R2cLua@@8 DD	FLAT:??_R1A@?0A@EA@cLua@@8		; cLua::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3cLua@@8
rdata$r	SEGMENT
??_R3cLua@@8 DD	00H					; cLua::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2cLua@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcLua@@@8
_DATA	SEGMENT
??_R0?AVcLua@@@8 DD FLAT:??_7type_info@@6B@		; cLua `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcLua@@', 00H
_DATA	ENDS
;	COMDAT ??_R4cLua@@6B@
rdata$r	SEGMENT
??_R4cLua@@6B@ DD 00H					; cLua::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcLua@@@8
	DD	FLAT:??_R3cLua@@8
rdata$r	ENDS
;	COMDAT ??_7cLua@@6B@
CONST	SEGMENT
??_7cLua@@6B@ DD FLAT:??_R4cLua@@6B@			; cLua::`vftable'
	DD	FLAT:??_EcLua@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??1cLua@@UAE@XZ
_TEXT	SEGMENT
??1cLua@@UAE@XZ PROC					; cLua::~cLua, COMDAT
; _this$ = ecx

; 41   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7cLua@@6B@

; 42   : 	if(m_pScriptContext)

  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 07		 je	 SHORT $LN1@cLua

; 43   : 		lua_close(m_pScriptContext);

  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 _lua_close
  00013	59		 pop	 ecx
$LN1@cLua:

; 44   : }

  00014	c3		 ret	 0
??1cLua@@UAE@XZ ENDP					; cLua::~cLua
_TEXT	ENDS
PUBLIC	??_C@_0DD@JGLPMILG@Lua?5Error?5?9?5String?5Run?6String?3?$CFs@ ; `string'
PUBLIC	??_C@_0DE@NIDKJNIO@Lua?5Error?5?9?5String?5Load?6String?3?$CF@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?RunString@cLua@@QAE_NPBD@Z			; cLua::RunString
EXTRN	_lua_pcall:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	_luaL_checklstring:PROC
EXTRN	_luaL_loadbuffer:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0DD@JGLPMILG@Lua?5Error?5?9?5String?5Run?6String?3?$CFs@
CONST	SEGMENT
??_C@_0DD@JGLPMILG@Lua?5Error?5?9?5String?5Run?6String?3?$CFs@ DB 'Lua Er'
	DB	'ror - String Run', 0aH, 'String:%s', 0aH, 'Error Message:%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NIDKJNIO@Lua?5Error?5?9?5String?5Load?6String?3?$CF@
CONST	SEGMENT
??_C@_0DE@NIDKJNIO@Lua?5Error?5?9?5String?5Load?6String?3?$CF@ DB 'Lua Er'
	DB	'ror - String Load', 0aH, 'String:%s', 0aH, 'Error Message:%s', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?RunString@cLua@@QAE_NPBD@Z
_TEXT	SEGMENT
_buf$505150 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_pCommand$ = 8						; size = 4
?RunString@cLua@@QAE_NPBD@Z PROC			; cLua::RunString, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _pCommand$[ebp]

; 132  : 	if (0 != luaL_loadbuffer(m_pScriptContext, pCommand, strlen(pCommand), NULL))

  00019	8b c7		 mov	 eax, edi
  0001b	8b f1		 mov	 esi, ecx
  0001d	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00020	33 db		 xor	 ebx, ebx
$LL7@RunString:
  00022	8a 10		 mov	 dl, BYTE PTR [eax]
  00024	40		 inc	 eax
  00025	3a d3		 cmp	 dl, bl
  00027	75 f9		 jne	 SHORT $LL7@RunString
  00029	53		 push	 ebx
  0002a	2b c1		 sub	 eax, ecx
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	ff 76 04	 push	 DWORD PTR [esi+4]
  00031	e8 00 00 00 00	 call	 _luaL_loadbuffer
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	85 c0		 test	 eax, eax
  0003b	74 35		 je	 SHORT $LN4@RunString

; 133  : 	{
; 134  : 		if(m_pErrorHandler)

  0003d	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  00040	74 2c		 je	 SHORT $LN3@RunString

; 135  : 		{
; 136  : 			char buf[256];
; 137  : 			sprintf(buf, "Lua Error - String Load\nString:%s\nError Message:%s\n", pCommand, luaL_checkstring(m_pScriptContext, -1));

  00042	53		 push	 ebx
  00043	6a ff		 push	 -1
  00045	ff 76 04	 push	 DWORD PTR [esi+4]
  00048	e8 00 00 00 00	 call	 _luaL_checklstring
  0004d	50		 push	 eax
  0004e	57		 push	 edi
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@NIDKJNIO@Lua?5Error?5?9?5String?5Load?6String?3?$CF@
$LN8@RunString:
  00054	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$505150[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 138  : 			m_pErrorHandler(buf);

  00061	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$505150[ebp]
  00067	50		 push	 eax
  00068	ff 56 08	 call	 DWORD PTR [esi+8]
  0006b	83 c4 20	 add	 esp, 32			; 00000020H
$LN3@RunString:

; 139  : 		}
; 140  : 
; 141  : 		return false;

  0006e	32 c0		 xor	 al, al
  00070	eb 2e		 jmp	 SHORT $LN5@RunString
$LN4@RunString:

; 142  : 	}
; 143  : 	if (0 != lua_pcall(m_pScriptContext, 0, LUA_MULTRET, 0))

  00072	53		 push	 ebx
  00073	6a ff		 push	 -1
  00075	53		 push	 ebx
  00076	ff 76 04	 push	 DWORD PTR [esi+4]
  00079	e8 00 00 00 00	 call	 _lua_pcall
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	85 c0		 test	 eax, eax
  00083	74 19		 je	 SHORT $LN2@RunString

; 144  : 	{
; 145  : 		if(m_pErrorHandler)

  00085	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  00088	74 e4		 je	 SHORT $LN3@RunString

; 146  : 		{
; 147  : 			char buf[256];
; 148  : 			sprintf(buf, "Lua Error - String Run\nString:%s\nError Message:%s\n", pCommand, luaL_checkstring(m_pScriptContext, -1));

  0008a	53		 push	 ebx
  0008b	6a ff		 push	 -1
  0008d	ff 76 04	 push	 DWORD PTR [esi+4]
  00090	e8 00 00 00 00	 call	 _luaL_checklstring
  00095	50		 push	 eax
  00096	57		 push	 edi
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@JGLPMILG@Lua?5Error?5?9?5String?5Run?6String?3?$CFs@

; 149  : 			m_pErrorHandler(buf);
; 150  : 		}
; 151  : 
; 152  : 		return false;

  0009c	eb b6		 jmp	 SHORT $LN8@RunString
$LN2@RunString:

; 153  : 	}
; 154  : 	return true;

  0009e	b0 01		 mov	 al, 1
$LN5@RunString:

; 155  : }

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	33 cd		 xor	 ecx, ebp
  000a7	5b		 pop	 ebx
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	c9		 leave
  000ae	c2 04 00	 ret	 4
?RunString@cLua@@QAE_NPBD@Z ENDP			; cLua::RunString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?RunMemory@cLua@@QAE_NPBDH@Z			; cLua::RunMemory
; Function compile flags: /Ogsp
;	COMDAT ?RunMemory@cLua@@QAE_NPBDH@Z
_TEXT	SEGMENT
_buf$505163 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_pBuffer$ = 8						; size = 4
_iBufferSize$ = 12					; size = 4
?RunMemory@cLua@@QAE_NPBDH@Z PROC			; cLua::RunMemory, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pBuffer$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi

; 159  : 	if (0 != luaL_loadbuffer(m_pScriptContext, pBuffer, iBufferSize, NULL))

  00019	33 ff		 xor	 edi, edi
  0001b	57		 push	 edi
  0001c	ff 75 0c	 push	 DWORD PTR _iBufferSize$[ebp]
  0001f	8b f1		 mov	 esi, ecx
  00021	53		 push	 ebx
  00022	ff 76 04	 push	 DWORD PTR [esi+4]
  00025	e8 00 00 00 00	 call	 _luaL_loadbuffer
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
  0002d	85 c0		 test	 eax, eax
  0002f	74 35		 je	 SHORT $LN4@RunMemory

; 160  : 	{
; 161  : 		if(m_pErrorHandler)

  00031	39 7e 08	 cmp	 DWORD PTR [esi+8], edi
  00034	74 2c		 je	 SHORT $LN3@RunMemory

; 162  : 		{
; 163  : 			char buf[256];
; 164  : 			sprintf(buf, "Lua Error - String Load\nString:%s\nError Message:%s\n", pBuffer, luaL_checkstring(m_pScriptContext, -1));

  00036	57		 push	 edi
  00037	6a ff		 push	 -1
  00039	ff 76 04	 push	 DWORD PTR [esi+4]
  0003c	e8 00 00 00 00	 call	 _luaL_checklstring
  00041	50		 push	 eax
  00042	53		 push	 ebx
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@NIDKJNIO@Lua?5Error?5?9?5String?5Load?6String?3?$CF@
$LN7@RunMemory:
  00048	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$505163[ebp]
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf

; 165  : 			m_pErrorHandler(buf);

  00055	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buf$505163[ebp]
  0005b	50		 push	 eax
  0005c	ff 56 08	 call	 DWORD PTR [esi+8]
  0005f	83 c4 20	 add	 esp, 32			; 00000020H
$LN3@RunMemory:

; 166  : 		}
; 167  : 		
; 168  : 		return false;

  00062	32 c0		 xor	 al, al
  00064	eb 2e		 jmp	 SHORT $LN5@RunMemory
$LN4@RunMemory:

; 169  : 	}
; 170  : 	if (0 != lua_pcall(m_pScriptContext, 0, LUA_MULTRET, 0))

  00066	57		 push	 edi
  00067	6a ff		 push	 -1
  00069	57		 push	 edi
  0006a	ff 76 04	 push	 DWORD PTR [esi+4]
  0006d	e8 00 00 00 00	 call	 _lua_pcall
  00072	83 c4 10	 add	 esp, 16			; 00000010H
  00075	85 c0		 test	 eax, eax
  00077	74 19		 je	 SHORT $LN2@RunMemory

; 171  : 	{
; 172  : 		if(m_pErrorHandler)

  00079	39 7e 08	 cmp	 DWORD PTR [esi+8], edi
  0007c	74 e4		 je	 SHORT $LN3@RunMemory

; 173  : 		{
; 174  : 			char buf[256];
; 175  : 			sprintf(buf, "Lua Error - String Run\nString:%s\nError Message:%s\n", pBuffer, luaL_checkstring(m_pScriptContext, -1));

  0007e	57		 push	 edi
  0007f	6a ff		 push	 -1
  00081	ff 76 04	 push	 DWORD PTR [esi+4]
  00084	e8 00 00 00 00	 call	 _luaL_checklstring
  00089	50		 push	 eax
  0008a	53		 push	 ebx
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@JGLPMILG@Lua?5Error?5?9?5String?5Run?6String?3?$CFs@

; 176  : 			m_pErrorHandler(buf);
; 177  : 		}
; 178  : 		
; 179  : 		return false;

  00090	eb b6		 jmp	 SHORT $LN7@RunMemory
$LN2@RunMemory:

; 180  : 	}
; 181  : 	return true;

  00092	b0 01		 mov	 al, 1
$LN5@RunMemory:

; 182  : }

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	33 cd		 xor	 ecx, ebp
  0009b	5b		 pop	 ebx
  0009c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a1	c9		 leave
  000a2	c2 08 00	 ret	 8
?RunMemory@cLua@@QAE_NPBDH@Z ENDP			; cLua::RunMemory
_TEXT	ENDS
PUBLIC	?GetErrorString@cLua@@QAEPBDXZ			; cLua::GetErrorString
; Function compile flags: /Ogsp
;	COMDAT ?GetErrorString@cLua@@QAEPBDXZ
_TEXT	SEGMENT
?GetErrorString@cLua@@QAEPBDXZ PROC			; cLua::GetErrorString, COMDAT
; _this$ = ecx

; 186  : 	return luaL_checkstring(m_pScriptContext, -1);

  00000	6a 00		 push	 0
  00002	6a ff		 push	 -1
  00004	ff 71 04	 push	 DWORD PTR [ecx+4]
  00007	e8 00 00 00 00	 call	 _luaL_checklstring
  0000c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : }

  0000f	c3		 ret	 0
?GetErrorString@cLua@@QAEPBDXZ ENDP			; cLua::GetErrorString
_TEXT	ENDS
PUBLIC	?AddFunction@cLua@@QAE_NPBDP6AHPAUlua_State@@@Z@Z ; cLua::AddFunction
EXTRN	_lua_setfield:PROC
EXTRN	_lua_pushcclosure:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddFunction@cLua@@QAE_NPBDP6AHPAUlua_State@@@Z@Z
_TEXT	SEGMENT
_pFunctionName$ = 8					; size = 4
_pFunction$ = 12					; size = 4
?AddFunction@cLua@@QAE_NPBDP6AHPAUlua_State@@@Z@Z PROC	; cLua::AddFunction, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 192  : 	lua_register(m_pScriptContext, pFunctionName, pFunction);

  00004	6a 00		 push	 0
  00006	ff 75 0c	 push	 DWORD PTR _pFunction$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	e8 00 00 00 00	 call	 _lua_pushcclosure
  00013	ff 75 08	 push	 DWORD PTR _pFunctionName$[ebp]
  00016	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  0001b	ff 76 04	 push	 DWORD PTR [esi+4]
  0001e	e8 00 00 00 00	 call	 _lua_setfield
  00023	83 c4 18	 add	 esp, 24			; 00000018H

; 193  : 	return true;

  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi

; 194  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?AddFunction@cLua@@QAE_NPBDP6AHPAUlua_State@@@Z@Z ENDP	; cLua::AddFunction
_TEXT	ENDS
PUBLIC	?GetStringArgument@cLua@@QAEPBDHPBD@Z		; cLua::GetStringArgument
EXTRN	_luaL_optlstring:PROC
; Function compile flags: /Ogsp
;	COMDAT ?GetStringArgument@cLua@@QAEPBDHPBD@Z
_TEXT	SEGMENT
_num$ = 8						; size = 4
_pDefault$ = 12						; size = 4
?GetStringArgument@cLua@@QAEPBDHPBD@Z PROC		; cLua::GetStringArgument, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 	return luaL_optstring(m_pScriptContext, num, pDefault);

  00003	6a 00		 push	 0
  00005	ff 75 0c	 push	 DWORD PTR _pDefault$[ebp]
  00008	ff 75 08	 push	 DWORD PTR _num$[ebp]
  0000b	ff 71 04	 push	 DWORD PTR [ecx+4]
  0000e	e8 00 00 00 00	 call	 _luaL_optlstring
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 199  : 
; 200  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?GetStringArgument@cLua@@QAEPBDHPBD@Z ENDP		; cLua::GetStringArgument
_TEXT	ENDS
PUBLIC	?GetNumberArgument@cLua@@QAENHN@Z		; cLua::GetNumberArgument
EXTRN	_luaL_optnumber:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?GetNumberArgument@cLua@@QAENHN@Z
_TEXT	SEGMENT
_num$ = 8						; size = 4
_dDefault$ = 12						; size = 8
?GetNumberArgument@cLua@@QAENHN@Z PROC			; cLua::GetNumberArgument, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 	return luaL_optnumber(m_pScriptContext, num, dDefault);

  00003	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _dDefault$[ebp]
  00008	51		 push	 ecx
  00009	51		 push	 ecx
  0000a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0000f	ff 75 08	 push	 DWORD PTR _num$[ebp]
  00012	ff 71 04	 push	 DWORD PTR [ecx+4]
  00015	e8 00 00 00 00	 call	 _luaL_optnumber
  0001a	83 c4 10	 add	 esp, 16			; 00000010H

; 205  : }

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?GetNumberArgument@cLua@@QAENHN@Z ENDP			; cLua::GetNumberArgument
_TEXT	ENDS
PUBLIC	?PushString@cLua@@QAEXPBD@Z			; cLua::PushString
EXTRN	_lua_pushstring:PROC
; Function compile flags: /Ogsp
;	COMDAT ?PushString@cLua@@QAEXPBD@Z
_TEXT	SEGMENT
_pString$ = 8						; size = 4
?PushString@cLua@@QAEXPBD@Z PROC			; cLua::PushString, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 209  : 	lua_pushstring(m_pScriptContext, pString);

  00003	ff 75 08	 push	 DWORD PTR _pString$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	e8 00 00 00 00	 call	 _lua_pushstring
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 210  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?PushString@cLua@@QAEXPBD@Z ENDP			; cLua::PushString
_TEXT	ENDS
PUBLIC	?PushNumber@cLua@@QAEXN@Z			; cLua::PushNumber
EXTRN	_lua_pushnumber:PROC
; Function compile flags: /Ogsp
;	COMDAT ?PushNumber@cLua@@QAEXN@Z
_TEXT	SEGMENT
_value$ = 8						; size = 8
?PushNumber@cLua@@QAEXN@Z PROC				; cLua::PushNumber, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  : 	lua_pushnumber(m_pScriptContext, value);

  00003	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _value$[ebp]
  00008	51		 push	 ecx
  00009	51		 push	 ecx
  0000a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0000f	ff 71 04	 push	 DWORD PTR [ecx+4]
  00012	e8 00 00 00 00	 call	 _lua_pushnumber
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?PushNumber@cLua@@QAEXN@Z ENDP				; cLua::PushNumber
_TEXT	ENDS
PUBLIC	??_C@_0CK@ICEAGHFH@?$FLLUA_EXCEPTION?$FN?5script?5error?5mes@ ; `string'
PUBLIC	?LuaExceptionProcess@cLua@@SAHPAUlua_State@@@Z	; cLua::LuaExceptionProcess
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_C@_0CK@ICEAGHFH@?$FLLUA_EXCEPTION?$FN?5script?5error?5mes@
CONST	SEGMENT
??_C@_0CK@ICEAGHFH@?$FLLUA_EXCEPTION?$FN?5script?5error?5mes@ DB '[LUA_EX'
	DB	'CEPTION] script error message - %s', 00H	; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?LuaExceptionProcess@cLua@@SAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pLua$ = 8						; size = 4
?LuaExceptionProcess@cLua@@SAHPAUlua_State@@@Z PROC	; cLua::LuaExceptionProcess, COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  : 	const char * pStr = luaL_checkstring(pLua, -1);

  00003	6a 00		 push	 0
  00005	6a ff		 push	 -1
  00007	ff 75 08	 push	 DWORD PTR _pLua$[ebp]
  0000a	e8 00 00 00 00	 call	 _luaL_checklstring

; 220  : 	LOG.PrintTimeAndLog(0,"[LUA_EXCEPTION] script error message - %s", pStr);

  0000f	50		 push	 eax
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@ICEAGHFH@?$FLLUA_EXCEPTION?$FN?5script?5error?5mes@
  00015	6a 00		 push	 0
  00017	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00023	83 c4 1c	 add	 esp, 28			; 0000001cH

; 221  : 	throw;

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@LuaExcepti:
$LN3@LuaExcepti:
  0002f	cc		 int	 3
?LuaExceptionProcess@cLua@@SAHPAUlua_State@@@Z ENDP	; cLua::LuaExceptionProcess
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1906 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1907 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1908 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside
$LN2@Inside:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T505449 = -12						; size = 12
$T505453 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T505453[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T505453[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T505449[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T505449[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T505449[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??_C@_0BA@FBAGNPPF@LuaContext?5NULL?$AA@	; `string'
PUBLIC	??0cLua@@QAE@XZ					; cLua::cLua
EXTRN	_lua_atpanic:PROC
EXTRN	_luaopen_table:PROC
EXTRN	_luaopen_debug:PROC
EXTRN	_luaopen_math:PROC
EXTRN	_luaopen_string:PROC
EXTRN	_luaopen_base:PROC
EXTRN	_luaL_newstate:PROC
;	COMDAT ??_C@_0BA@FBAGNPPF@LuaContext?5NULL?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\clua.cpp
CONST	SEGMENT
??_C@_0BA@FBAGNPPF@LuaContext?5NULL?$AA@ DB 'LuaContext NULL', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0cLua@@QAE@XZ
_TEXT	SEGMENT
??0cLua@@QAE@XZ PROC					; cLua::cLua, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 19   : 	m_pErrorHandler = NULL;

  00003	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7cLua@@6B@

; 20   : 
; 21   : 	m_pScriptContext = lua_open();

  0000d	e8 00 00 00 00	 call	 _luaL_newstate
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 22   : 	if( m_pScriptContext == NULL )

  00015	85 c0		 test	 eax, eax
  00017	75 17		 jne	 SHORT $LN1@cLua@2

; 23   : 	{
; 24   : 		LOG.PrintTimeAndLog( 0, "LuaContext NULL" );

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FBAGNPPF@LuaContext?5NULL?$AA@
  0001e	50		 push	 eax
  0001f	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 25   : 		return;

  0002e	eb 36		 jmp	 SHORT $LN2@cLua@2
$LN1@cLua@2:

; 26   : 	}
; 27   : 
; 28   : 	luaopen_base(m_pScriptContext);

  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _luaopen_base

; 29   : 	luaopen_string(m_pScriptContext);

  00036	ff 76 04	 push	 DWORD PTR [esi+4]
  00039	e8 00 00 00 00	 call	 _luaopen_string

; 30   : 	
; 31   : //	iResult = luaopen_io(m_pScriptContext);
; 32   : 
; 33   : 	luaopen_math(m_pScriptContext);

  0003e	ff 76 04	 push	 DWORD PTR [esi+4]
  00041	e8 00 00 00 00	 call	 _luaopen_math

; 34   : 	luaopen_debug(m_pScriptContext);

  00046	ff 76 04	 push	 DWORD PTR [esi+4]
  00049	e8 00 00 00 00	 call	 _luaopen_debug

; 35   : 	luaopen_table(m_pScriptContext);

  0004e	ff 76 04	 push	 DWORD PTR [esi+4]
  00051	e8 00 00 00 00	 call	 _luaopen_table

; 36   : 
; 37   : 	lua_atpanic(m_pScriptContext, LuaExceptionProcess);

  00056	68 00 00 00 00	 push	 OFFSET ?LuaExceptionProcess@cLua@@SAHPAUlua_State@@@Z ; cLua::LuaExceptionProcess
  0005b	ff 76 04	 push	 DWORD PTR [esi+4]
  0005e	e8 00 00 00 00	 call	 _lua_atpanic
  00063	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@cLua@2:

; 38   : }

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi
  00069	c3		 ret	 0
??0cLua@@QAE@XZ ENDP					; cLua::cLua
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GcLua@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GcLua@@UAEPAXI@Z PROC				; cLua::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1cLua@@UAE@XZ		; cLua::~cLua
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GcLua@@UAEPAXI@Z ENDP				; cLua::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 799  : 		{	// append _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 800  : 		if (_Right.size() < _Roff)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  00010	73 0b		 jae	 SHORT $LN4@append

; 801  : 			_Xran();	// _Roff off end

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN36@append:
$LN4@append:

; 802  : 		size_type _Num = _Right.size() - _Roff;

  0001d	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]

; 803  : 		if (_Num < _Count)

  00020	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp]
  00023	3b c3		 cmp	 eax, ebx

; 804  : 			_Count = _Num;	// trim _Count to size

  00025	0f 42 d8	 cmovb	 ebx, eax

; 805  : 		if (npos - this->_Mysize <= _Count)

  00028	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002b	83 c9 ff	 or	 ecx, -1
  0002e	2b c8		 sub	 ecx, eax
  00030	3b cb		 cmp	 ecx, ebx
  00032	77 0b		 ja	 SHORT $LN2@append

; 806  : 			_Xlen();	// result too long

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN37@append:
$LN2@append:

; 807  : 
; 808  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0003f	85 db		 test	 ebx, ebx
  00041	74 50		 je	 SHORT $LN32@append
  00043	57		 push	 edi
  00044	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00047	6a 00		 push	 0
  00049	57		 push	 edi
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00051	84 c0		 test	 al, al
  00053	74 3d		 je	 SHORT $LN34@append

; 809  : 			{	// make room and append new stuff
; 810  : 			_Traits::copy(_Myptr() + this->_Mysize,
; 811  : 				_Right._Myptr() + _Roff, _Count);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00058	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0005c	72 02		 jb	 SHORT $LN18@append
  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@append:
  00060	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00064	72 04		 jb	 SHORT $LN22@append
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN23@append
$LN22@append:
  0006a	8b ce		 mov	 ecx, esi
$LN23@append:
  0006c	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  0006f	53		 push	 ebx
  00070	50		 push	 eax
  00071	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00074	03 c1		 add	 eax, ecx
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 812  : 			_Eos(_Num);

  0007f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00083	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00086	72 04		 jb	 SHORT $LN30@append
  00088	8b 06		 mov	 eax, DWORD PTR [esi]
  0008a	eb 02		 jmp	 SHORT $LN31@append
$LN30@append:
  0008c	8b c6		 mov	 eax, esi
$LN31@append:
  0008e	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN34@append:
  00092	5f		 pop	 edi
$LN32@append:

; 813  : 			}
; 814  : 		return (*this);

  00093	8b c6		 mov	 eax, esi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 815  : 		}

  00097	5d		 pop	 ebp
  00098	c2 0c 00	 ret	 12			; 0000000cH
$LN35@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 818  : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 819  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 820  : 		if (_Count != 0)
; 821  : 			_DEBUG_POINTER(_Ptr);
; 822  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 823  : 
; 824  : 		if (_Inside(_Ptr))

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN3@append@2

; 825  : 			return (append(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN8@append@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN9@append@2
$LN8@append@2:
  0001e	8b c6		 mov	 eax, esi
$LN9@append@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b f8		 sub	 edi, eax
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0002e	eb 64		 jmp	 SHORT $LN4@append@2
$LN3@append@2:

; 826  : 		if (npos - this->_Mysize <= _Count)

  00030	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00033	83 c9 ff	 or	 ecx, -1
  00036	53		 push	 ebx
  00037	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0003a	2b c8		 sub	 ecx, eax
  0003c	3b cb		 cmp	 ecx, ebx
  0003e	77 0b		 ja	 SHORT $LN2@append@2

; 827  : 			_Xlen();	// result too long

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN28@append@2:
$LN2@append@2:

; 828  : 
; 829  : 		size_type _Num;
; 830  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  0004b	85 db		 test	 ebx, ebx
  0004d	74 42		 je	 SHORT $LN25@append@2
  0004f	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00052	6a 00		 push	 0
  00054	57		 push	 edi
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0005c	84 c0		 test	 al, al
  0005e	74 31		 je	 SHORT $LN25@append@2

; 831  : 			{	// make room and append new stuff
; 832  : 			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);

  00060	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00064	72 04		 jb	 SHORT $LN15@append@2
  00066	8b 06		 mov	 eax, DWORD PTR [esi]
  00068	eb 02		 jmp	 SHORT $LN16@append@2
$LN15@append@2:
  0006a	8b c6		 mov	 eax, esi
$LN16@append@2:
  0006c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0006f	53		 push	 ebx
  00070	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00073	03 c8		 add	 ecx, eax
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _memcpy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 833  : 			_Eos(_Num);

  0007e	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00082	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00085	72 04		 jb	 SHORT $LN23@append@2
  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	eb 02		 jmp	 SHORT $LN24@append@2
$LN23@append@2:
  0008b	8b c6		 mov	 eax, esi
$LN24@append@2:
  0008d	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN25@append@2:

; 834  : 			}
; 835  : 		return (*this);

  00091	8b c6		 mov	 eax, esi
  00093	5b		 pop	 ebx
$LN4@append@2:
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 836  : 		}

  00096	5d		 pop	 ebp
  00097	c2 08 00	 ret	 8
$LN27@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 839  : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 840  : 		_DEBUG_POINTER(_Ptr);
; 841  : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@append@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@append@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0001c	5b		 pop	 ebx

; 842  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 887  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 888  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 889  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@3:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@3
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 763  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 764  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 765  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 3c		 je	 SHORT $LN3@assign@4

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 12		 jae	 SHORT $LN2@assign@4

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002d	eb 07		 jmp	 SHORT $LN1@assign@4
$LN2@assign@4:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00033	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@4:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Mysize = 0;

  00042	83 66 10 00	 and	 DWORD PTR [esi+16], 0

; 734  : 			_Right._Myres = 0;

  00046	83 66 14 00	 and	 DWORD PTR [esi+20], 0
$LN3@assign@4:

; 735  : 			}
; 736  : 		return (*this);

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 737  : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 708  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 710  : 		}

  00003	5d		 pop	 ebp

; 709  : 		return (assign(_STD forward<_Myt>(_Right)));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z
_TEXT	SEGMENT
$T506192 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 146  : 	{	// return string + NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 147  : 	return (_STD move(_Left.append(_Right)));

  00004	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000a	83 65 fc 00	 and	 DWORD PTR $T506192[ebp], 0
  0000e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 148  : 	}

  0001f	c9		 leave
  00020	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_C@_04BFPLOMBN@?4LUA?$AA@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_04DONGLPNO@?4LUB?$AA@			; `string'
PUBLIC	??_C@_08FHHLNHP@Scripts?2?$AA@			; `string'
PUBLIC	___$ReturnUdt$GSCopy$
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp___splitpath:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_04BFPLOMBN@?4LUA?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_04BFPLOMBN@?4LUA?$AA@ DB '.LUA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DONGLPNO@?4LUB?$AA@
CONST	SEGMENT
??_C@_04DONGLPNO@?4LUB?$AA@ DB '.LUB', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHHLNHP@Scripts?2?$AA@
CONST	SEGMENT
??_C@_08FHHLNHP@Scripts?2?$AA@ DB 'Scripts\', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$17
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\clua.cpp
xdata$x	ENDS
;	COMDAT ?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -1048				; size = 4
$T506206 = -1044					; size = 4
_drive$ = -1040						; size = 3
$T505107 = -1036					; size = 28
$T505095 = -1008					; size = 28
$T505096 = -980						; size = 28
$T505094 = -952						; size = 28
$T505119 = -924						; size = 28
$T505113 = -924						; size = 28
$T505105 = -924						; size = 28
$T505120 = -896						; size = 28
$T505114 = -896						; size = 28
$T505104 = -896						; size = 28
$T505093 = -868						; size = 28
$T505118 = -840						; size = 28
$T505112 = -840						; size = 28
$T505106 = -840						; size = 28
$T505117 = -812						; size = 28
$T505111 = -812						; size = 28
$T505103 = -812						; size = 28
_ext$ = -784						; size = 256
_dir$ = -528						; size = 256
_fname$ = -272						; size = 256
__$EHRec$ = -12						; size = 12
_pFname$ = 8						; size = 4
?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; findScript, COMDAT
; ___$ReturnUdt$ = edi

; 47   : {

  00000	68 0c 04 00 00	 push	 1036			; 0000040cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pFname$[ebp]

; 48   : 	FILE *fTest;
; 49   : 
; 50   : 	char drive[_MAX_DRIVE];
; 51   : 	char dir[_MAX_DIR];
; 52   : 	char fname[_MAX_FNAME];
; 53   : 	char ext[_MAX_EXT];
; 54   : 
; 55   : 	_splitpath( pFname, drive, dir, fname, ext );

  00012	8d 8d f0 fc ff
	ff		 lea	 ecx, DWORD PTR _ext$[ebp]
  00018	51		 push	 ecx
  00019	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _fname$[ebp]
  0001f	51		 push	 ecx
  00020	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _dir$[ebp]
  00026	51		 push	 ecx
  00027	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _drive$[ebp]
  0002d	51		 push	 ecx
  0002e	33 db		 xor	 ebx, ebx
  00030	50		 push	 eax
  00031	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00034	89 bd e8 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  0003a	89 9d ec fb ff
	ff		 mov	 DWORD PTR $T506206[ebp], ebx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___splitpath

; 56   : 
; 57   : 	std::string strTestFile = (std::string) drive + dir + "Scripts\\" + fname + ".LUB";

  00046	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  0004c	83 c4 14	 add	 esp, 20			; 00000014H
  0004f	c7 85 b0 fc ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T505093[ebp+20], 15 ; 0000000fH
  00059	89 9d ac fc ff
	ff		 mov	 DWORD PTR $T505093[ebp+16], ebx
  0005f	88 9d 9c fc ff
	ff		 mov	 BYTE PTR $T505093[ebp], bl
  00065	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL251@findScript:
  00068	8a 08		 mov	 cl, BYTE PTR [eax]
  0006a	40		 inc	 eax
  0006b	3a cb		 cmp	 cl, bl
  0006d	75 f9		 jne	 SHORT $LL251@findScript
  0006f	2b c6		 sub	 eax, esi
  00071	50		 push	 eax
  00072	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  00078	50		 push	 eax
  00079	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T505093[ebp]
  0007f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00084	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dir$[ebp]
  0008a	50		 push	 eax
  0008b	8d 85 9c fc ff
	ff		 lea	 eax, DWORD PTR $T505093[ebp]
  00091	50		 push	 eax
  00092	33 f6		 xor	 esi, esi
  00094	8d 85 48 fc ff
	ff		 lea	 eax, DWORD PTR $T505094[ebp]
  0009a	46		 inc	 esi
  0009b	50		 push	 eax
  0009c	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0009f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_08FHHLNHP@Scripts?2?$AA@
  000a9	50		 push	 eax
  000aa	8d 85 10 fc ff
	ff		 lea	 eax, DWORD PTR $T505095[ebp]
  000b0	50		 push	 eax
  000b1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b5	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000ba	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _fname$[ebp]
  000c0	51		 push	 ecx
  000c1	50		 push	 eax
  000c2	8d 85 2c fc ff
	ff		 lea	 eax, DWORD PTR $T505096[ebp]
  000c8	50		 push	 eax
  000c9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000cd	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_04DONGLPNO@?4LUB?$AA@
  000d7	50		 push	 eax
  000d8	57		 push	 edi
  000d9	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000dd	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000e2	83 c4 30	 add	 esp, 48			; 00000030H

; 84   : 	}
; 85   : 
; 86   : 	return strTestFile;

  000e5	53		 push	 ebx
  000e6	56		 push	 esi
  000e7	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T505096[ebp]
  000ed	89 b5 ec fb ff
	ff		 mov	 DWORD PTR $T506206[ebp], esi
  000f3	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  000f8	53		 push	 ebx
  000f9	56		 push	 esi
  000fa	8d 8d 10 fc ff
	ff		 lea	 ecx, DWORD PTR $T505095[ebp]
  00100	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00105	53		 push	 ebx
  00106	56		 push	 esi
  00107	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR $T505094[ebp]
  0010d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00112	53		 push	 ebx
  00113	56		 push	 esi
  00114	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T505093[ebp]
  0011a	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0011d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00122	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00126	72 04		 jb	 SHORT $LN76@findScript

; 58   : 	fTest = fopen(strTestFile.c_str(), "r");

  00128	8b 07		 mov	 eax, DWORD PTR [edi]
  0012a	eb 02		 jmp	 SHORT $LN77@findScript
$LN76@findScript:
  0012c	8b c7		 mov	 eax, edi
$LN77@findScript:
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00133	50		 push	 eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0013a	59		 pop	 ecx
  0013b	59		 pop	 ecx

; 59   : 	if(fTest == NULL)

  0013c	3b c3		 cmp	 eax, ebx
  0013e	0f 85 f2 02 00
	00		 jne	 $LN250@findScript

; 60   : 	{
; 61   : 		//not that one...
; 62   : 		strTestFile = (std::string) drive + dir + "Scripts\\" + fname + ".LUA";

  00144	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  0014a	c7 85 e8 fc ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T505103[ebp+20], 15 ; 0000000fH
  00154	89 9d e4 fc ff
	ff		 mov	 DWORD PTR $T505103[ebp+16], ebx
  0015a	88 9d d4 fc ff
	ff		 mov	 BYTE PTR $T505103[ebp], bl
  00160	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL252@findScript:
  00163	8a 10		 mov	 dl, BYTE PTR [eax]
  00165	40		 inc	 eax
  00166	3a d3		 cmp	 dl, bl
  00168	75 f9		 jne	 SHORT $LL252@findScript
  0016a	2b c1		 sub	 eax, ecx
  0016c	50		 push	 eax
  0016d	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  00173	50		 push	 eax
  00174	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505103[ebp]
  0017a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0017f	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dir$[ebp]
  00185	50		 push	 eax
  00186	8d 85 d4 fc ff
	ff		 lea	 eax, DWORD PTR $T505103[ebp]
  0018c	50		 push	 eax
  0018d	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR $T505104[ebp]
  00193	50		 push	 eax
  00194	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0019b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_08FHHLNHP@Scripts?2?$AA@
  001a5	50		 push	 eax
  001a6	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR $T505105[ebp]
  001ac	50		 push	 eax
  001ad	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001b1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001b6	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _fname$[ebp]
  001bc	51		 push	 ecx
  001bd	50		 push	 eax
  001be	8d 85 b8 fc ff
	ff		 lea	 eax, DWORD PTR $T505106[ebp]
  001c4	50		 push	 eax
  001c5	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  001c9	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_04BFPLOMBN@?4LUA?$AA@
  001d3	50		 push	 eax
  001d4	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR $T505107[ebp]
  001da	50		 push	 eax
  001db	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  001df	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001e4	83 c4 30	 add	 esp, 48			; 00000030H
  001e7	50		 push	 eax
  001e8	8b cf		 mov	 ecx, edi
  001ea	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  001ee	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  001f3	53		 push	 ebx
  001f4	56		 push	 esi
  001f5	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR $T505107[ebp]
  001fb	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00200	53		 push	 ebx
  00201	56		 push	 esi
  00202	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T505106[ebp]
  00208	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0020d	53		 push	 ebx
  0020e	56		 push	 esi
  0020f	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T505105[ebp]
  00215	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0021a	53		 push	 ebx
  0021b	56		 push	 esi
  0021c	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T505104[ebp]
  00222	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00227	53		 push	 ebx
  00228	56		 push	 esi
  00229	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505103[ebp]
  0022f	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00232	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 63   : 		fTest = fopen(strTestFile.c_str(), "r");

  00237	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0023b	72 04		 jb	 SHORT $LN136@findScript
  0023d	8b 07		 mov	 eax, DWORD PTR [edi]
  0023f	eb 02		 jmp	 SHORT $LN137@findScript
$LN136@findScript:
  00241	8b c7		 mov	 eax, edi
$LN137@findScript:
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00248	50		 push	 eax
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0024f	59		 pop	 ecx
  00250	59		 pop	 ecx

; 64   : 	}
; 65   : 
; 66   : 	if(fTest == NULL)

  00251	3b c3		 cmp	 eax, ebx
  00253	0f 85 dd 01 00
	00		 jne	 $LN250@findScript

; 67   : 	{
; 68   : 		//not that one...
; 69   : 		strTestFile = (std::string) drive + dir + fname + ".LUB";

  00259	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  0025f	c7 85 e8 fc ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T505111[ebp+20], 15 ; 0000000fH
  00269	89 9d e4 fc ff
	ff		 mov	 DWORD PTR $T505111[ebp+16], ebx
  0026f	88 9d d4 fc ff
	ff		 mov	 BYTE PTR $T505111[ebp], bl
  00275	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL253@findScript:
  00278	8a 10		 mov	 dl, BYTE PTR [eax]
  0027a	40		 inc	 eax
  0027b	3a d3		 cmp	 dl, bl
  0027d	75 f9		 jne	 SHORT $LL253@findScript
  0027f	2b c1		 sub	 eax, ecx
  00281	50		 push	 eax
  00282	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  00288	50		 push	 eax
  00289	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505111[ebp]
  0028f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00294	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dir$[ebp]
  0029a	50		 push	 eax
  0029b	8d 85 d4 fc ff
	ff		 lea	 eax, DWORD PTR $T505111[ebp]
  002a1	50		 push	 eax
  002a2	8d 85 b8 fc ff
	ff		 lea	 eax, DWORD PTR $T505112[ebp]
  002a8	50		 push	 eax
  002a9	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  002b0	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002b5	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _fname$[ebp]
  002bb	51		 push	 ecx
  002bc	50		 push	 eax
  002bd	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR $T505113[ebp]
  002c3	50		 push	 eax
  002c4	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  002c8	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002cd	68 00 00 00 00	 push	 OFFSET ??_C@_04DONGLPNO@?4LUB?$AA@
  002d2	50		 push	 eax
  002d3	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR $T505114[ebp]
  002d9	50		 push	 eax
  002da	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  002de	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002e3	83 c4 24	 add	 esp, 36			; 00000024H
  002e6	50		 push	 eax
  002e7	8b cf		 mov	 ecx, edi
  002e9	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  002ed	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  002f2	53		 push	 ebx
  002f3	56		 push	 esi
  002f4	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T505114[ebp]
  002fa	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  002ff	53		 push	 ebx
  00300	56		 push	 esi
  00301	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T505113[ebp]
  00307	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0030c	53		 push	 ebx
  0030d	56		 push	 esi
  0030e	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T505112[ebp]
  00314	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00319	53		 push	 ebx
  0031a	56		 push	 esi
  0031b	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505111[ebp]
  00321	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  00324	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 70   : 		fTest = fopen(strTestFile.c_str(), "r");

  00329	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0032d	72 04		 jb	 SHORT $LN192@findScript
  0032f	8b 07		 mov	 eax, DWORD PTR [edi]
  00331	eb 02		 jmp	 SHORT $LN193@findScript
$LN192@findScript:
  00333	8b c7		 mov	 eax, edi
$LN193@findScript:
  00335	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0033a	50		 push	 eax
  0033b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00341	59		 pop	 ecx
  00342	59		 pop	 ecx

; 71   : 	}
; 72   : 
; 73   : 	if(fTest == NULL)

  00343	3b c3		 cmp	 eax, ebx
  00345	0f 85 eb 00 00
	00		 jne	 $LN250@findScript

; 74   : 	{
; 75   : 		//not that one...
; 76   : 		//not that one...
; 77   : 		strTestFile = (std::string) drive + dir + fname + ".LUA";

  0034b	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  00351	c7 85 e8 fc ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T505117[ebp+20], 15 ; 0000000fH
  0035b	89 9d e4 fc ff
	ff		 mov	 DWORD PTR $T505117[ebp+16], ebx
  00361	88 9d d4 fc ff
	ff		 mov	 BYTE PTR $T505117[ebp], bl
  00367	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$LL254@findScript:
  0036a	8a 10		 mov	 dl, BYTE PTR [eax]
  0036c	40		 inc	 eax
  0036d	3a d3		 cmp	 dl, bl
  0036f	75 f9		 jne	 SHORT $LL254@findScript
  00371	2b c1		 sub	 eax, ecx
  00373	50		 push	 eax
  00374	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _drive$[ebp]
  0037a	50		 push	 eax
  0037b	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505117[ebp]
  00381	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00386	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _dir$[ebp]
  0038c	50		 push	 eax
  0038d	8d 85 d4 fc ff
	ff		 lea	 eax, DWORD PTR $T505117[ebp]
  00393	50		 push	 eax
  00394	8d 85 b8 fc ff
	ff		 lea	 eax, DWORD PTR $T505118[ebp]
  0039a	50		 push	 eax
  0039b	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  003a2	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003a7	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _fname$[ebp]
  003ad	51		 push	 ecx
  003ae	50		 push	 eax
  003af	8d 85 64 fc ff
	ff		 lea	 eax, DWORD PTR $T505119[ebp]
  003b5	50		 push	 eax
  003b6	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  003ba	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003bf	68 00 00 00 00	 push	 OFFSET ??_C@_04BFPLOMBN@?4LUA?$AA@
  003c4	50		 push	 eax
  003c5	8d 85 80 fc ff
	ff		 lea	 eax, DWORD PTR $T505120[ebp]
  003cb	50		 push	 eax
  003cc	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  003d0	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@PBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003d5	83 c4 24	 add	 esp, 36			; 00000024H
  003d8	50		 push	 eax
  003d9	8b cf		 mov	 ecx, edi
  003db	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  003df	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  003e4	53		 push	 ebx
  003e5	56		 push	 esi
  003e6	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T505120[ebp]
  003ec	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  003f1	53		 push	 ebx
  003f2	56		 push	 esi
  003f3	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T505119[ebp]
  003f9	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  003fe	53		 push	 ebx
  003ff	56		 push	 esi
  00400	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T505118[ebp]
  00406	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0040b	53		 push	 ebx
  0040c	56		 push	 esi
  0040d	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505117[ebp]
  00413	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 78   : 		fTest = fopen(strTestFile.c_str(), "r");

  00418	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0041c	72 04		 jb	 SHORT $LN248@findScript
  0041e	8b 07		 mov	 eax, DWORD PTR [edi]
  00420	eb 02		 jmp	 SHORT $LN249@findScript
$LN248@findScript:
  00422	8b c7		 mov	 eax, edi
$LN249@findScript:
  00424	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00429	50		 push	 eax
  0042a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00430	59		 pop	 ecx
  00431	59		 pop	 ecx

; 79   : 	}
; 80   : 
; 81   : 	if(fTest != NULL)

  00432	3b c3		 cmp	 eax, ebx
  00434	74 08		 je	 SHORT $LN1@findScript
$LN250@findScript:

; 82   : 	{
; 83   : 		fclose(fTest);

  00436	50		 push	 eax
  00437	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0043d	59		 pop	 ecx
$LN1@findScript:

; 84   : 	}
; 85   : 
; 86   : 	return strTestFile;

  0043e	8b c7		 mov	 eax, edi

; 87   : }

  00440	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00445	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T505093[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  0000b	8d 8d 48 fc ff
	ff		 lea	 ecx, DWORD PTR $T505094[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$2:
  00016	8d 8d 10 fc ff
	ff		 lea	 ecx, DWORD PTR $T505095[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$3:
  00021	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T505096[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$4:
  0002c	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR $T506206[ebp]
  00032	83 e0 01	 and	 eax, 1
  00035	0f 84 12 00 00
	00		 je	 $LN12@findScript
  0003b	83 a5 ec fb ff
	ff fe		 and	 DWORD PTR $T506206[ebp], -2 ; fffffffeH
  00042	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@findScript:
  0004d	c3		 ret	 0
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$5:
  0004e	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505103[ebp]
  00054	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$6:
  00059	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T505104[ebp]
  0005f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$7:
  00064	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T505105[ebp]
  0006a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$8:
  0006f	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T505106[ebp]
  00075	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$9:
  0007a	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR $T505107[ebp]
  00080	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$10:
  00085	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505111[ebp]
  0008b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$11:
  00090	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T505112[ebp]
  00096	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$12:
  0009b	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T505113[ebp]
  000a1	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$13:
  000a6	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T505114[ebp]
  000ac	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$14:
  000b1	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T505117[ebp]
  000b7	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$15:
  000bc	8d 8d b8 fc ff
	ff		 lea	 ecx, DWORD PTR $T505118[ebp]
  000c2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$16:
  000c7	8d 8d 64 fc ff
	ff		 lea	 ecx, DWORD PTR $T505119[ebp]
  000cd	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$17:
  000d2	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T505120[ebp]
  000d8	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  000dd	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000e1	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000e4	8b 8a e4 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1052]
  000ea	33 c8		 xor	 ecx, eax
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000f4	33 c8		 xor	 ecx, eax
  000f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fb	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  00100	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; findScript
PUBLIC	??_C@_0BG@FGLPDLMK@cLua?3?3Call?5Error?5?9?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0DI@OAPLOOJE@Lua?5Error?5?9?5Script?5Run?6Script?5Na@ ; `string'
PUBLIC	??_C@_0BK@ICPBCHEI@cLua?3?3LoadFile?5Error?5?9?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0DJ@DGFGOOGD@Lua?5Error?5?9?5Script?5Load?6Script?5N@ ; `string'
PUBLIC	?RunScript@cLua@@QAE_NPBD@Z			; cLua::RunScript
EXTRN	_luaL_loadfile:PROC
;	COMDAT ??_C@_0BG@FGLPDLMK@cLua?3?3Call?5Error?5?9?5?$CFs?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0BG@FGLPDLMK@cLua?3?3Call?5Error?5?9?5?$CFs?$AA@ DB 'cLua::Call Err'
	DB	'or - %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OAPLOOJE@Lua?5Error?5?9?5Script?5Run?6Script?5Na@
CONST	SEGMENT
??_C@_0DI@OAPLOOJE@Lua?5Error?5?9?5Script?5Run?6Script?5Na@ DB 'Lua Error'
	DB	' - Script Run', 0aH, 'Script Name:%s', 0aH, 'Error Message:%s'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ICPBCHEI@cLua?3?3LoadFile?5Error?5?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@ICPBCHEI@cLua?3?3LoadFile?5Error?5?9?5?$CFs?$AA@ DB 'cLua::Load'
	DB	'File Error - %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DGFGOOGD@Lua?5Error?5?9?5Script?5Load?6Script?5N@
CONST	SEGMENT
??_C@_0DJ@DGFGOOGD@Lua?5Error?5?9?5Script?5Load?6Script?5N@ DB 'Lua Error'
	DB	' - Script Load', 0aH, 'Script Name:%s', 0aH, 'Error Message:%'
	DB	's', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunScript@cLua@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunScript@cLua@@QAE_NPBD@Z$0
__ehfuncinfo$?RunScript@cLua@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunScript@cLua@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\luastate\clua.cpp
xdata$x	ENDS
;	COMDAT ?RunScript@cLua@@QAE_NPBD@Z
_TEXT	SEGMENT
_pFilename$ = -564					; size = 4
tv240 = -557						; size = 1
_strFilename$ = -556					; size = 28
_buf$505140 = -528					; size = 256
_buf$505131 = -528					; size = 256
_buf$505138 = -272					; size = 256
_buf$505133 = -272					; size = 256
__$EHRec$ = -12						; size = 12
_pFname$ = 8						; size = 4
?RunScript@cLua@@QAE_NPBD@Z PROC			; cLua::RunScript, COMDAT
; _this$ = ecx

; 92   : {

  00000	68 28 02 00 00	 push	 552			; 00000228H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?RunScript@cLua@@QAE_NPBD@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pFname$[ebp]

; 93   : 	std::string strFilename = findScript(pFname);

  00012	50		 push	 eax
  00013	8d bd d4 fd ff
	ff		 lea	 edi, DWORD PTR _strFilename$[ebp]
  00019	8b f1		 mov	 esi, ecx
  0001b	e8 00 00 00 00	 call	 ?findScript@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; findScript
  00020	59		 pop	 ecx

; 94   : 	const char *pFilename = strFilename.c_str();

  00021	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _strFilename$[ebp]
  00027	33 db		 xor	 ebx, ebx
  00029	83 bd e8 fd ff
	ff 10		 cmp	 DWORD PTR _strFilename$[ebp+20], 16 ; 00000010H
  00030	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00033	73 02		 jae	 SHORT $LN29@RunScript
  00035	8b c7		 mov	 eax, edi
$LN29@RunScript:

; 95   : 
; 96   : 	if (0 != luaL_loadfile(m_pScriptContext, pFilename))

  00037	50		 push	 eax
  00038	ff 76 04	 push	 DWORD PTR [esi+4]
  0003b	89 85 cc fd ff
	ff		 mov	 DWORD PTR _pFilename$[ebp], eax
  00041	e8 00 00 00 00	 call	 _luaL_loadfile
  00046	59		 pop	 ecx
  00047	59		 pop	 ecx
  00048	85 c0		 test	 eax, eax
  0004a	0f 84 8c 00 00
	00		 je	 $LN4@RunScript

; 97   : 	{
; 98   : 		if(m_pErrorHandler)

  00050	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__sprintf
  00056	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  00059	74 2d		 je	 SHORT $LN3@RunScript

; 99   : 		{
; 100  : 			char buf[256];
; 101  : 			sprintf(buf, "Lua Error - Script Load\nScript Name:%s\nError Message:%s\n", pFilename, luaL_checkstring(m_pScriptContext, -1));

  0005b	53		 push	 ebx
  0005c	6a ff		 push	 -1
  0005e	ff 76 04	 push	 DWORD PTR [esi+4]
  00061	e8 00 00 00 00	 call	 _luaL_checklstring
  00066	50		 push	 eax
  00067	ff b5 cc fd ff
	ff		 push	 DWORD PTR _pFilename$[ebp]
  0006d	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _buf$505131[ebp]
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@DGFGOOGD@Lua?5Error?5?9?5Script?5Load?6Script?5N@
  00078	50		 push	 eax
  00079	ff d7		 call	 edi

; 102  : 			m_pErrorHandler(buf);

  0007b	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _buf$505131[ebp]
  00081	50		 push	 eax
  00082	ff 56 08	 call	 DWORD PTR [esi+8]
  00085	83 c4 20	 add	 esp, 32			; 00000020H
$LN3@RunScript:

; 103  : 		}
; 104  : 
; 105  : 		char buf[256];
; 106  : 		sprintf(buf, "Lua Error - Script Load\nScript Name:%s\nError Message:%s\n", pFilename, luaL_checkstring(m_pScriptContext, -1));

  00088	53		 push	 ebx
  00089	6a ff		 push	 -1
  0008b	ff 76 04	 push	 DWORD PTR [esi+4]
  0008e	e8 00 00 00 00	 call	 _luaL_checklstring
  00093	50		 push	 eax
  00094	ff b5 cc fd ff
	ff		 push	 DWORD PTR _pFilename$[ebp]
  0009a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _buf$505133[ebp]
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@DGFGOOGD@Lua?5Error?5?9?5Script?5Load?6Script?5N@
  000a5	50		 push	 eax
  000a6	ff d7		 call	 edi

; 107  : 		LOG.PrintTimeAndLog( 0, "cLua::LoadFile Error - %s", buf );

  000a8	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _buf$505133[ebp]
  000ae	50		 push	 eax
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@ICPBCHEI@cLua?3?3LoadFile?5Error?5?9?5?$CFs?$AA@
  000b4	53		 push	 ebx
  000b5	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  000c1	83 c4 2c	 add	 esp, 44			; 0000002cH

; 108  : 
; 109  : 		return false;

  000c4	53		 push	 ebx
  000c5	6a 01		 push	 1
  000c7	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _strFilename$[ebp]
  000cd	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  000d2	32 c0		 xor	 al, al
$LN5@RunScript:

; 125  : 	}
; 126  : 	return true;
; 127  : 
; 128  : }

  000d4	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000d9	c2 04 00	 ret	 4
$LN4@RunScript:

; 110  : 	}
; 111  : 	if (0 != lua_pcall(m_pScriptContext, 0, LUA_MULTRET, 0))

  000dc	53		 push	 ebx
  000dd	6a ff		 push	 -1
  000df	53		 push	 ebx
  000e0	ff 76 04	 push	 DWORD PTR [esi+4]
  000e3	e8 00 00 00 00	 call	 _lua_pcall
  000e8	83 c4 10	 add	 esp, 16			; 00000010H
  000eb	85 c0		 test	 eax, eax
  000ed	0f 84 93 00 00
	00		 je	 $LN2@RunScript

; 112  : 	{
; 113  : 		if(m_pErrorHandler)

  000f3	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__sprintf
  000f9	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  000fc	74 2d		 je	 SHORT $LN1@RunScript

; 114  : 		{
; 115  : 			char buf[256];
; 116  : 			sprintf(buf, "Lua Error - Script Run\nScript Name:%s\nError Message:%s\n", pFilename, luaL_checkstring(m_pScriptContext, -1));

  000fe	53		 push	 ebx
  000ff	6a ff		 push	 -1
  00101	ff 76 04	 push	 DWORD PTR [esi+4]
  00104	e8 00 00 00 00	 call	 _luaL_checklstring
  00109	50		 push	 eax
  0010a	ff b5 cc fd ff
	ff		 push	 DWORD PTR _pFilename$[ebp]
  00110	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _buf$505138[ebp]
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OAPLOOJE@Lua?5Error?5?9?5Script?5Run?6Script?5Na@
  0011b	50		 push	 eax
  0011c	ff d7		 call	 edi

; 117  : 			m_pErrorHandler(buf);

  0011e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _buf$505138[ebp]
  00124	50		 push	 eax
  00125	ff 56 08	 call	 DWORD PTR [esi+8]
  00128	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@RunScript:

; 118  : 		}
; 119  : 
; 120  : 		char buf[256];
; 121  : 		sprintf(buf, "Lua Error - Script Run\nScript Name:%s\nError Message:%s\n", pFilename, luaL_checkstring(m_pScriptContext, -1));

  0012b	53		 push	 ebx
  0012c	6a ff		 push	 -1
  0012e	ff 76 04	 push	 DWORD PTR [esi+4]
  00131	e8 00 00 00 00	 call	 _luaL_checklstring
  00136	50		 push	 eax
  00137	ff b5 cc fd ff
	ff		 push	 DWORD PTR _pFilename$[ebp]
  0013d	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _buf$505140[ebp]
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OAPLOOJE@Lua?5Error?5?9?5Script?5Run?6Script?5Na@
  00148	50		 push	 eax
  00149	ff d7		 call	 edi

; 122  : 		LOG.PrintTimeAndLog( 0, "cLua::Call Error - %s", buf );

  0014b	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR _buf$505140[ebp]
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FGLPDLMK@cLua?3?3Call?5Error?5?9?5?$CFs?$AA@
  00157	53		 push	 ebx
  00158	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00164	83 c4 2c	 add	 esp, 44			; 0000002cH
  00167	88 9d d3 fd ff
	ff		 mov	 BYTE PTR tv240[ebp], bl
$LN26@RunScript:

; 123  : 
; 124  : 		return false;

  0016d	53		 push	 ebx
  0016e	6a 01		 push	 1
  00170	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _strFilename$[ebp]
  00176	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0017b	8a 85 d3 fd ff
	ff		 mov	 al, BYTE PTR tv240[ebp]
  00181	e9 4e ff ff ff	 jmp	 $LN5@RunScript
$LN2@RunScript:
  00186	c6 85 d3 fd ff
	ff 01		 mov	 BYTE PTR tv240[ebp], 1
  0018d	eb de		 jmp	 SHORT $LN26@RunScript
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunScript@cLua@@QAE_NPBD@Z$0:
  00000	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _strFilename$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?RunScript@cLua@@QAE_NPBD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-568]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunScript@cLua@@QAE_NPBD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunScript@cLua@@QAE_NPBD@Z ENDP			; cLua::RunScript
END
