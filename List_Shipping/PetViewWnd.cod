; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\PetViewWnd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7PetViewWnd@@6B@				; PetViewWnd::`vftable'
PUBLIC	??1PetViewWnd@@UAE@XZ				; PetViewWnd::~PetViewWnd
PUBLIC	??_R4PetViewWnd@@6B@				; PetViewWnd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPetViewWnd@@@8				; PetViewWnd `RTTI Type Descriptor'
PUBLIC	??_R3PetViewWnd@@8				; PetViewWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PetViewWnd@@8				; PetViewWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PetViewWnd@@8			; PetViewWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderImage@PetViewWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ; PetViewWnd::AddRenderImage
PUBLIC	?ParseExtraInfo@PetViewWnd@@UAEXAAVioXMLElement@@@Z ; PetViewWnd::ParseExtraInfo
PUBLIC	?OnRender@PetViewWnd@@MAEXXZ			; PetViewWnd::OnRender
PUBLIC	?OnProcess@PetViewWnd@@MAEXM@Z			; PetViewWnd::OnProcess
PUBLIC	?iwm_create@PetViewWnd@@UAEXXZ			; PetViewWnd::iwm_create
PUBLIC	?iwm_command@PetViewWnd@@UAEXPAVioWnd@@HK@Z	; PetViewWnd::iwm_command
PUBLIC	?iwm_show@PetViewWnd@@UAEXXZ			; PetViewWnd::iwm_show
PUBLIC	?iwm_hide@PetViewWnd@@UAEXXZ			; PetViewWnd::iwm_hide
EXTRN	__imp_??1ioWnd@@UAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioWnd::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioWnd@@UAEXH@Z:PROC		; ioWnd::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioWnd@@MAEXHHHH@Z:PROC	; ioWnd::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z:PROC ; ioWnd::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_rbuttonup
EXTRN	?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioWnd@@UBEKXZ:PROC			; ioWnd::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetHeaderFileName
EXTRN	?GetTemplateName@ioWnd@@UAEPBDXZ:PROC		; ioWnd::GetTemplateName
EXTRN	?GetDefClassName@ioWnd@@UBEPBDXZ:PROC		; ioWnd::GetDefClassName
EXTRN	?_Clone@ioWnd@@UAEPAV1@XZ:PROC			; ioWnd::_Clone
EXTRN	?Copy@ioWnd@@UAEXPAV1@@Z:PROC			; ioWnd::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC ; ioWnd::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioWnd@@UBEHXZ:PROC	; ioWnd::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z:PROC	; ioWnd::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioWnd::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_EPetViewWnd@@UAEPAXI@Z:PROC			; PetViewWnd::`vector deleting destructor'
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petviewwnd.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PetViewWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PetViewWnd@@8 DD FLAT:??_R0?AVPetViewWnd@@@8 ; PetViewWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PetViewWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2PetViewWnd@@8
rdata$r	SEGMENT
??_R2PetViewWnd@@8 DD FLAT:??_R1A@?0A@EA@PetViewWnd@@8	; PetViewWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3PetViewWnd@@8
rdata$r	SEGMENT
??_R3PetViewWnd@@8 DD 00H				; PetViewWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PetViewWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPetViewWnd@@@8
_DATA	SEGMENT
??_R0?AVPetViewWnd@@@8 DD FLAT:??_7type_info@@6B@	; PetViewWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPetViewWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R4PetViewWnd@@6B@
rdata$r	SEGMENT
??_R4PetViewWnd@@6B@ DD 00H				; PetViewWnd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPetViewWnd@@@8
	DD	FLAT:??_R3PetViewWnd@@8
rdata$r	ENDS
;	COMDAT ??_7PetViewWnd@@6B@
CONST	SEGMENT
??_7PetViewWnd@@6B@ DD FLAT:??_R4PetViewWnd@@6B@	; PetViewWnd::`vftable'
	DD	FLAT:?AddRenderFrame@ioWnd@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@PetViewWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@PetViewWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioWnd@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@PetViewWnd@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@PetViewWnd@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioWnd@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@PetViewWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@PetViewWnd@@UAEXPAVioWnd@@HK@Z
	DD	FLAT:?iwm_mouseover@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@PetViewWnd@@UAEXXZ
	DD	FLAT:?iwm_hide@PetViewWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioWnd@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioWnd@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioWnd@@UBEPBDXZ
	DD	FLAT:?_Clone@ioWnd@@UAEPAV1@XZ
	DD	FLAT:?Copy@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioWnd@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioWnd@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioWnd@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_EPetViewWnd@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1PetViewWnd@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1PetViewWnd@@UAE@XZ$0
__ehfuncinfo$??1PetViewWnd@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1PetViewWnd@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1PetViewWnd@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1PetViewWnd@@UAE@XZ PROC				; PetViewWnd::~PetViewWnd, COMDAT
; _this$ = ecx

; 34   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1PetViewWnd@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7PetViewWnd@@6B@

; 35   : 	SAFEDELETE( m_pEffectDummy );

  00017	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0001d	33 db		 xor	 ebx, ebx
  0001f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00022	3b cb		 cmp	 ecx, ebx
  00024	74 0d		 je	 SHORT $LN5@PetViewWnd
  00026	8b 01		 mov	 eax, DWORD PTR [ecx]
  00028	6a 01		 push	 1
  0002a	ff 50 04	 call	 DWORD PTR [eax+4]
  0002d	89 9e 68 01 00
	00		 mov	 DWORD PTR [esi+360], ebx
$LN5@PetViewWnd:

; 36   : 	SAFEDELETE( m_pPetView );

  00033	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00039	3b cb		 cmp	 ecx, ebx
  0003b	74 0d		 je	 SHORT $LN4@PetViewWnd
  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	6a 01		 push	 1
  00041	ff 50 04	 call	 DWORD PTR [eax+4]
  00044	89 9e 64 01 00
	00		 mov	 DWORD PTR [esi+356], ebx
$LN4@PetViewWnd:

; 37   : 	SAFEDELETE( m_pUI3DRender );

  0004a	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00050	3b cb		 cmp	 ecx, ebx
  00052	74 0c		 je	 SHORT $LN3@PetViewWnd
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	6a 01		 push	 1
  00058	ff 10		 call	 DWORD PTR [eax]
  0005a	89 9e 60 01 00
	00		 mov	 DWORD PTR [esi+352], ebx
$LN3@PetViewWnd:

; 38   : 	SAFEDELETE( m_p3DBack );

  00060	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00066	3b cb		 cmp	 ecx, ebx
  00068	74 0d		 je	 SHORT $LN2@PetViewWnd
  0006a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006c	6a 01		 push	 1
  0006e	ff 50 40	 call	 DWORD PTR [eax+64]
  00071	89 9e 6c 01 00
	00		 mov	 DWORD PTR [esi+364], ebx
$LN2@PetViewWnd:

; 39   : 	SAFEDELETE( m_pShadow );

  00077	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  0007d	3b cb		 cmp	 ecx, ebx
  0007f	74 0d		 je	 SHORT $LN1@PetViewWnd
  00081	8b 01		 mov	 eax, DWORD PTR [ecx]
  00083	6a 01		 push	 1
  00085	ff 50 40	 call	 DWORD PTR [eax+64]
  00088	89 9e 70 01 00
	00		 mov	 DWORD PTR [esi+368], ebx
$LN1@PetViewWnd:

; 40   : }

  0008e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	8b ce		 mov	 ecx, esi
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
  0009a	e8 00 00 00 00	 call	 __EH_epilog3
  0009f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1PetViewWnd@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioWnd@@UAE@XZ
__ehhandler$??1PetViewWnd@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1PetViewWnd@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1PetViewWnd@@UAE@XZ ENDP				; PetViewWnd::~PetViewWnd
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@ ; `string'
PUBLIC	??_C@_08KPJMCKII@shop_cam?$AA@			; `string'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Initialize@ioUI3DRender@@QAEXPBD0@Z:PROC	; ioUI3DRender::Initialize
EXTRN	??0ioUI3DRender@@QAE@XZ:PROC			; ioUI3DRender::ioUI3DRender
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petviewwnd.cpp
CONST	SEGMENT
??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@ DB 'config/sp2_sta'
	DB	'ge_charselect_map.ini', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPJMCKII@shop_cam?$AA@
CONST	SEGMENT
??_C@_08KPJMCKII@shop_cam?$AA@ DB 'shop_cam', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?iwm_create@PetViewWnd@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?iwm_create@PetViewWnd@@UAEXXZ$0
__ehfuncinfo$?iwm_create@PetViewWnd@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?iwm_create@PetViewWnd@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?iwm_create@PetViewWnd@@UAEXXZ
_TEXT	SEGMENT
$T506246 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?iwm_create@PetViewWnd@@UAEXXZ PROC			; PetViewWnd::iwm_create, COMDAT
; _this$ = ecx

; 43   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?iwm_create@PetViewWnd@@UAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 44   : 	SAFEDELETE( m_pUI3DRender );

  0000e	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00014	85 c9		 test	 ecx, ecx
  00016	74 0d		 je	 SHORT $LN1@iwm_create
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
  0001e	83 a6 60 01 00
	00 00		 and	 DWORD PTR [esi+352], 0
$LN1@iwm_create:

; 45   : 
; 46   : 	m_pUI3DRender = new ioUI3DRender;

  00025	6a 48		 push	 72			; 00000048H
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	59		 pop	 ecx
  0002d	8b c8		 mov	 ecx, eax
  0002f	89 4d f0	 mov	 DWORD PTR $T506246[ebp], ecx
  00032	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	85 c9		 test	 ecx, ecx
  00038	74 07		 je	 SHORT $LN6@iwm_create
  0003a	e8 00 00 00 00	 call	 ??0ioUI3DRender@@QAE@XZ	; ioUI3DRender::ioUI3DRender
  0003f	eb 02		 jmp	 SHORT $LN7@iwm_create
$LN6@iwm_create:
  00041	33 c0		 xor	 eax, eax
$LN7@iwm_create:
  00043	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 47   : 	m_pUI3DRender->Initialize( "config/sp2_stage_charselect_map.ini", "shop_cam" );

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_08KPJMCKII@shop_cam?$AA@
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FCMGKOOH@config?1sp2_stage_charselect_map?4@
  00051	8b c8		 mov	 ecx, eax
  00053	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax
  00059	e8 00 00 00 00	 call	 ?Initialize@ioUI3DRender@@QAEXPBD0@Z ; ioUI3DRender::Initialize

; 48   : }

  0005e	e8 00 00 00 00	 call	 __EH_epilog3
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?iwm_create@PetViewWnd@@UAEXXZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T506246[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?iwm_create@PetViewWnd@@UAEXXZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?iwm_create@PetViewWnd@@UAEXXZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?iwm_create@PetViewWnd@@UAEXXZ ENDP			; PetViewWnd::iwm_create
PUBLIC	?return500@@YAIXZ				; return500
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return500@@YAIXZ
_TEXT	SEGMENT
?return500@@YAIXZ PROC					; return500, COMDAT

; 28   : 	__forceinline unsigned int return500() { __asm mov eax, 500 };

  00000	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  00005	c3		 ret	 0
?return500@@YAIXZ ENDP					; return500
_TEXT	ENDS
EXTRN	__imp_?HideChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petviewwnd.cpp
;	COMDAT ?iwm_show@PetViewWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@PetViewWnd@@UAEXXZ PROC			; PetViewWnd::iwm_show, COMDAT
; _this$ = ecx

; 51   : {

  00000	56		 push	 esi

; 52   : 	HideChildWnd( ID_CHAR_CONTROL_WND );

  00001	6a 00		 push	 0
  00003	6a 01		 push	 1
  00005	8b f1		 mov	 esi, ecx
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 53   : 
; 54   : 	if ( m_pShadow )

  0000d	83 be 70 01 00
	00 00		 cmp	 DWORD PTR [esi+368], 0
  00014	74 1b		 je	 SHORT $LN1@iwm_show

; 55   : 		m_pShadow->SetScale( m_fXMLShadowScale );

  00016	8b 86 70 01 00
	00		 mov	 eax, DWORD PTR [esi+368]
  0001c	f3 0f 10 86 80
	01 00 00	 movss	 xmm0, DWORD PTR [esi+384]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	51		 push	 ecx
  00027	8b c8		 mov	 ecx, eax
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	ff 52 1c	 call	 DWORD PTR [edx+28]
$LN1@iwm_show:
  00031	5e		 pop	 esi

; 56   : }

  00032	c3		 ret	 0
?iwm_show@PetViewWnd@@UAEXXZ ENDP			; PetViewWnd::iwm_show
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?iwm_hide@PetViewWnd@@UAEXXZ
_TEXT	SEGMENT
?iwm_hide@PetViewWnd@@UAEXXZ PROC			; PetViewWnd::iwm_hide, COMDAT
; _this$ = ecx

; 59   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 60   : 	HideChildWnd( ID_CHAR_CONTROL_WND );

  00002	6a 00		 push	 0
  00004	6a 01		 push	 1
  00006	8b f9		 mov	 edi, ecx
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?HideChildWnd@ioWnd@@QAEXK_N@Z

; 61   : 
; 62   : 	SAFEDELETE( m_pPetView );

  0000e	8b 8f 64 01 00
	00		 mov	 ecx, DWORD PTR [edi+356]
  00014	85 c9		 test	 ecx, ecx
  00016	74 0e		 je	 SHORT $LN2@iwm_hide
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 50 04	 call	 DWORD PTR [eax+4]
  0001f	83 a7 64 01 00
	00 00		 and	 DWORD PTR [edi+356], 0
$LN2@iwm_hide:

; 63   : 	SAFEDELETE( m_pEffectDummy );

  00026	8b 8f 68 01 00
	00		 mov	 ecx, DWORD PTR [edi+360]
  0002c	85 c9		 test	 ecx, ecx
  0002e	74 0e		 je	 SHORT $LN1@iwm_hide
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	6a 01		 push	 1
  00034	ff 50 04	 call	 DWORD PTR [eax+4]
  00037	83 a7 68 01 00
	00 00		 and	 DWORD PTR [edi+360], 0
$LN1@iwm_hide:

; 64   : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	c3		 ret	 0
?iwm_hide@PetViewWnd@@UAEXXZ ENDP			; PetViewWnd::iwm_hide
_TEXT	ENDS
PUBLIC	__real@40000000
PUBLIC	__$ArrayPad$
EXTRN	?Render@ioUI3DRender@@QAEXPBUD3DXMATRIX@@_N@Z:PROC ; ioUI3DRender::Render
EXTRN	?MakeUIProjection@ioUI3DRender@@QAE?AUD3DXMATRIX@@HH@Z:PROC ; ioUI3DRender::MakeUIProjection
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetHeight@ioUIRenderElement@@QBEHXZ:PROC
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetWidth@ioUIRenderElement@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?OnRender@ioWnd@@MAEXXZ:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?OnRender@PetViewWnd@@MAEXXZ
_TEXT	SEGMENT
tv180 = -80						; size = 4
_iXPos$ = -76						; size = 4
_iYPos$ = -72						; size = 4
_matUI$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?OnRender@PetViewWnd@@MAEXXZ PROC			; PetViewWnd::OnRender, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b f1		 mov	 esi, ecx

; 171  : 	ioWnd::OnRender();

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnRender@ioWnd@@MAEXXZ

; 172  : 
; 173  : 	int iXPos = GetDerivedPosX();

  0001b	8b ce		 mov	 ecx, esi
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 174  : 	int iYPos = GetDerivedPosY();

  00023	8b ce		 mov	 ecx, esi
  00025	89 45 b4	 mov	 DWORD PTR _iXPos$[ebp], eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 175  : 
; 176  : 	if( m_p3DBack )

  0002e	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00034	89 45 b8	 mov	 DWORD PTR _iYPos$[ebp], eax
  00037	85 c9		 test	 ecx, ecx
  00039	0f 84 8f 00 00
	00		 je	 $LN2@OnRender

; 177  : 	{
; 178  : 		int nNewXPos = iXPos + GetWidth()/2 - (m_p3DBack->GetWidth()/2);

  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  00045	99		 cdq
  00046	2b c2		 sub	 eax, edx
  00048	8b d8		 mov	 ebx, eax
  0004a	8b ce		 mov	 ecx, esi
  0004c	d1 fb		 sar	 ebx, 1
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ

; 179  : 		int nNewYPos = iYPos + GetHeight()/2 - (m_p3DBack->GetHeight()/2);

  00054	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  0005a	99		 cdq
  0005b	2b c2		 sub	 eax, edx
  0005d	8b f8		 mov	 edi, eax
  0005f	d1 ff		 sar	 edi, 1
  00061	2b fb		 sub	 edi, ebx
  00063	03 7d b4	 add	 edi, DWORD PTR _iXPos$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioUIRenderElement@@QBEHXZ
  0006c	99		 cdq
  0006d	2b c2		 sub	 eax, edx
  0006f	89 45 b0	 mov	 DWORD PTR tv180[ebp], eax
  00072	d1 7d b0	 sar	 DWORD PTR tv180[ebp], 1
  00075	8b ce		 mov	 ecx, esi
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ

; 180  : 
; 181  : 		m_p3DBack->SetScale( 2.0f );

  0007d	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008b	99		 cdq
  0008c	2b c2		 sub	 eax, edx
  0008e	8b d8		 mov	 ebx, eax
  00090	8b 01		 mov	 eax, DWORD PTR [ecx]
  00092	d1 fb		 sar	 ebx, 1
  00094	2b 5d b0	 sub	 ebx, DWORD PTR tv180[ebp]
  00097	51		 push	 ecx
  00098	03 5d b8	 add	 ebx, DWORD PTR _iYPos$[ebp]
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	ff 50 1c	 call	 DWORD PTR [eax+28]

; 182  : 		m_p3DBack->Render( nNewXPos, nNewYPos );

  000a3	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  000a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ab	33 c0		 xor	 eax, eax
  000ad	50		 push	 eax
  000ae	50		 push	 eax
  000af	50		 push	 eax
  000b0	50		 push	 eax
  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	51		 push	 ecx
  000b5	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  000b9	51		 push	 ecx
  000ba	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	ff 12		 call	 DWORD PTR [edx]
$LN2@OnRender:

; 183  : 	}
; 184  : 
; 185  : 	if ( m_pShadow )

  000ce	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  000d4	85 c9		 test	 ecx, ecx
  000d6	74 6b		 je	 SHORT $LN5@OnRender

; 186  : 	{
; 187  : 		enum
; 188  : 		{
; 189  : 			Y_OFFSET = 200,
; 190  : 		};
; 191  : 		int nNewXPos = iXPos + GetWidth()/2 - (m_pShadow->GetWidth()/2);

  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioUIRenderElement@@QBEHXZ
  000de	99		 cdq
  000df	2b c2		 sub	 eax, edx
  000e1	8b d8		 mov	 ebx, eax
  000e3	8b ce		 mov	 ecx, esi
  000e5	d1 fb		 sar	 ebx, 1
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ

; 192  : 		int nNewYPos = iYPos - (m_pShadow->GetHeight()/2) + Y_OFFSET;

  000ed	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  000f3	99		 cdq
  000f4	2b c2		 sub	 eax, edx
  000f6	8b f8		 mov	 edi, eax
  000f8	d1 ff		 sar	 edi, 1
  000fa	2b fb		 sub	 edi, ebx
  000fc	03 7d b4	 add	 edi, DWORD PTR _iXPos$[ebp]
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioUIRenderElement@@QBEHXZ
  00105	99		 cdq
  00106	2b c2		 sub	 eax, edx

; 193  : 		m_pShadow->Render( nNewXPos, nNewYPos, UI_RENDER_MULTIPLY, TFO_BILINEAR );

  00108	6a 00		 push	 0
  0010a	8b c8		 mov	 ecx, eax
  0010c	8b 45 b8	 mov	 eax, DWORD PTR _iYPos$[ebp]
  0010f	6a 00		 push	 0
  00111	d1 f9		 sar	 ecx, 1
  00113	6a 01		 push	 1
  00115	2b c1		 sub	 eax, ecx
  00117	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  0011d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011f	6a 08		 push	 8
  00121	0f 57 c0	 xorps	 xmm0, xmm0
  00124	51		 push	 ecx
  00125	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  0012a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0012e	51		 push	 ecx
  0012f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00135	0f 57 c0	 xorps	 xmm0, xmm0
  00138	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	ff 12		 call	 DWORD PTR [edx]
$LN5@OnRender:

; 194  : 	}
; 195  : 
; 196  : 	D3DXMATRIX matUI = m_pUI3DRender->MakeUIProjection( iXPos - 320, iYPos - 60 );

  00143	8b 45 b8	 mov	 eax, DWORD PTR _iYPos$[ebp]
  00146	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0014c	83 c0 c4	 add	 eax, -60		; ffffffc4H
  0014f	50		 push	 eax
  00150	8b 45 b4	 mov	 eax, DWORD PTR _iXPos$[ebp]
  00153	05 c0 fe ff ff	 add	 eax, -320		; fffffec0H
  00158	50		 push	 eax
  00159	8d 45 bc	 lea	 eax, DWORD PTR _matUI$[ebp]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ?MakeUIProjection@ioUI3DRender@@QAE?AUD3DXMATRIX@@HH@Z ; ioUI3DRender::MakeUIProjection

; 197  : 	m_pUI3DRender->Render( &matUI, true );

  00162	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00168	6a 01		 push	 1
  0016a	8d 45 bc	 lea	 eax, DWORD PTR _matUI$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?Render@ioUI3DRender@@QAEXPBUD3DXMATRIX@@_N@Z ; ioUI3DRender::Render

; 198  : }

  00173	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	33 cd		 xor	 ecx, ebp
  0017a	5b		 pop	 ebx
  0017b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00180	c9		 leave
  00181	c3		 ret	 0
?OnRender@PetViewWnd@@MAEXXZ ENDP			; PetViewWnd::OnRender
_TEXT	ENDS
PUBLIC	?RotateY@PetViewWnd@@IAEXM@Z			; PetViewWnd::RotateY
; Function compile flags: /Ogsp
;	COMDAT ?RotateY@PetViewWnd@@IAEXM@Z
_TEXT	SEGMENT
_fYaw$ = 8						; size = 4
?RotateY@PetViewWnd@@IAEXM@Z PROC			; PetViewWnd::RotateY, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 	m_fRotateYaw = fYaw;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fYaw$[ebp]
  00008	f3 0f 11 81 74
	01 00 00	 movss	 DWORD PTR [ecx+372], xmm0

; 205  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?RotateY@PetViewWnd@@IAEXM@Z ENDP			; PetViewWnd::RotateY
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?InitRotate@PetViewWnd@@QAEXXZ			; PetViewWnd::InitRotate
EXTRN	?SetYaw@ioPetView@@QAEXM@Z:PROC			; ioPetView::SetYaw
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petviewwnd.cpp
CONST	ENDS
;	COMDAT ?InitRotate@PetViewWnd@@QAEXXZ
_TEXT	SEGMENT
tv139 = -4						; size = 4
?InitRotate@PetViewWnd@@QAEXXZ PROC			; PetViewWnd::InitRotate, COMDAT
; _this$ = ecx

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 211  : 	RotateY( 0.0f );

  00004	0f 57 c0	 xorps	 xmm0, xmm0

; 212  : 	m_bLeftRotateOn  = false;

  00007	33 c0		 xor	 eax, eax
  00009	f3 0f 11 81 74
	01 00 00	 movss	 DWORD PTR [ecx+372], xmm0
  00011	66 89 81 a8 01
	00 00		 mov	 WORD PTR [ecx+424], ax

; 213  : 	m_bRightRotateOn = false;
; 214  : 	if( m_pPetView )

  00018	81 c1 64 01 00
	00		 add	 ecx, 356		; 00000164H
  0001e	39 01		 cmp	 DWORD PTR [ecx], eax
  00020	74 20		 je	 SHORT $LN1@InitRotate

; 215  : 		m_pPetView->SetYaw( FLOAT10 );

  00022	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00027	89 45 fc	 mov	 DWORD PTR tv139[ebp], eax
  0002a	db 45 fc	 fild	 DWORD PTR tv139[ebp]
  0002d	85 c0		 test	 eax, eax
  0002f	79 06		 jns	 SHORT $LN8@InitRotate
  00031	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN8@InitRotate:
  00037	51		 push	 ecx
  00038	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003d	e8 00 00 00 00	 call	 ?SetYaw@ioPetView@@QAEXM@Z ; ioPetView::SetYaw
$LN1@InitRotate:

; 216  : }

  00042	c9		 leave
  00043	c3		 ret	 0
?InitRotate@PetViewWnd@@QAEXXZ ENDP			; PetViewWnd::InitRotate
_TEXT	ENDS
PUBLIC	?CreatePet@PetViewWnd@@QAEXHH@Z			; PetViewWnd::CreatePet
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	?SetLookAt@ioUI3DRender@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioUI3DRender::SetLookAt
EXTRN	?SetPosition@ioPetView@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioPetView::SetPosition
EXTRN	?GetYaw@ioPetView@@QAEMXZ:PROC			; ioPetView::GetYaw
EXTRN	?CreatePet@ioUI3DRender@@QAEPAVioPetView@@ABVioHashString@@_N@Z:PROC ; ioUI3DRender::CreatePet
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	?GetPetModel@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z:PROC ; ioPetInfoManager::GetPetModel
EXTRN	?GetSingleton@ioPetInfoManager@@SAAAV1@XZ:PROC	; ioPetInfoManager::GetSingleton
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreatePet@PetViewWnd@@QAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatePet@PetViewWnd@@QAEXHH@Z$0
__ehfuncinfo$?CreatePet@PetViewWnd@@QAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreatePet@PetViewWnd@@QAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?CreatePet@PetViewWnd@@QAEXHH@Z
_TEXT	SEGMENT
_szPetModel$ = -28					; size = 16
__$EHRec$ = -12						; size = 12
_nPetCode$ = 8						; size = 4
_nPetRank$ = 12						; size = 4
?CreatePet@PetViewWnd@@QAEXHH@Z PROC			; PetViewWnd::CreatePet, COMDAT
; _this$ = ecx

; 219  : {

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreatePet@PetViewWnd@@QAEXHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 220  : 	if ( nPetCode <= 0 || nPetRank <= 0 )

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nPetCode$[ebp], 0
  00012	0f 8e bd 00 00
	00		 jle	 $LN5@CreatePet
  00018	83 7d 0c 00	 cmp	 DWORD PTR _nPetRank$[ebp], 0
  0001c	0f 8e b3 00 00
	00		 jle	 $LN5@CreatePet

; 221  : 		return;
; 222  : 
; 223  : 	ioHashString szPetModel = g_PetInfoMgr.GetPetModel( nPetCode, (PetRankType)nPetRank );

  00022	ff 75 0c	 push	 DWORD PTR _nPetRank$[ebp]
  00025	8d 45 e4	 lea	 eax, DWORD PTR _szPetModel$[ebp]
  00028	ff 75 08	 push	 DWORD PTR _nPetCode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?GetSingleton@ioPetInfoManager@@SAAAV1@XZ ; ioPetInfoManager::GetSingleton
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ?GetPetModel@ioPetInfoManager@@QAE?AVioHashString@@HW4PetRankType@@@Z ; ioPetInfoManager::GetPetModel
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 224  : 	if ( szPetModel.IsEmpty() )

  0003c	8d 4d e4	 lea	 ecx, DWORD PTR _szPetModel$[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00045	84 c0		 test	 al, al

; 225  : 		return;

  00047	75 7f		 jne	 SHORT $LN13@CreatePet

; 226  : 
; 227  : 	ioPetView *pPet = m_pUI3DRender->CreatePet( szPetModel );

  00049	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0004f	6a 01		 push	 1
  00051	8d 45 e4	 lea	 eax, DWORD PTR _szPetModel$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?CreatePet@ioUI3DRender@@QAEPAVioPetView@@ABVioHashString@@_N@Z ; ioUI3DRender::CreatePet
  0005a	8b f8		 mov	 edi, eax

; 228  : 	if( !pPet )	

  0005c	85 ff		 test	 edi, edi

; 229  : 		return;

  0005e	74 68		 je	 SHORT $LN13@CreatePet

; 230  : 
; 231  : 	if( m_pPetView )

  00060	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00066	85 c9		 test	 ecx, ecx
  00068	74 0b		 je	 SHORT $LN2@CreatePet

; 232  : 		m_fPreYaw = m_pPetView->GetYaw();

  0006a	e8 00 00 00 00	 call	 ?GetYaw@ioPetView@@QAEMXZ ; ioPetView::GetYaw
  0006f	d9 9e 78 01 00
	00		 fstp	 DWORD PTR [esi+376]
$LN2@CreatePet:

; 233  : 
; 234  : 	pPet->SetPosition( m_vCharPos );

  00075	8d 86 84 01 00
	00		 lea	 eax, DWORD PTR [esi+388]
  0007b	50		 push	 eax
  0007c	8b cf		 mov	 ecx, edi
  0007e	e8 00 00 00 00	 call	 ?SetPosition@ioPetView@@QAEXABUD3DXVECTOR3@@@Z ; ioPetView::SetPosition

; 235  : 	pPet->SetYaw( m_fPreYaw );

  00083	f3 0f 10 86 78
	01 00 00	 movss	 xmm0, DWORD PTR [esi+376]
  0008b	51		 push	 ecx
  0008c	8b cf		 mov	 ecx, edi
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	e8 00 00 00 00	 call	 ?SetYaw@ioPetView@@QAEXM@Z ; ioPetView::SetYaw

; 236  : 
; 237  : 	m_pUI3DRender->SetLookAt( m_vCameraPos );

  00098	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  0009e	8d 86 9c 01 00
	00		 lea	 eax, DWORD PTR [esi+412]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?SetLookAt@ioUI3DRender@@QAEXABUD3DXVECTOR3@@@Z ; ioUI3DRender::SetLookAt

; 238  : 
; 239  : 	SAFEDELETE( m_pPetView );

  000aa	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  000b0	85 c9		 test	 ecx, ecx
  000b2	74 0e		 je	 SHORT $LN1@CreatePet
  000b4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b6	6a 01		 push	 1
  000b8	ff 50 04	 call	 DWORD PTR [eax+4]
  000bb	83 a6 64 01 00
	00 00		 and	 DWORD PTR [esi+356], 0
$LN1@CreatePet:

; 240  : 	m_pPetView = pPet;

  000c2	89 be 64 01 00
	00		 mov	 DWORD PTR [esi+356], edi
$LN13@CreatePet:

; 241  : }

  000c8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8d 4d e4	 lea	 ecx, DWORD PTR _szPetModel$[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
$LN5@CreatePet:
  000d5	e8 00 00 00 00	 call	 __EH_epilog3
  000da	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreatePet@PetViewWnd@@QAEXHH@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _szPetModel$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreatePet@PetViewWnd@@QAEXHH@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreatePet@PetViewWnd@@QAEXHH@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreatePet@PetViewWnd@@QAEXHH@Z ENDP			; PetViewWnd::CreatePet
PUBLIC	?DestroyPet@PetViewWnd@@QAEXXZ			; PetViewWnd::DestroyPet
; Function compile flags: /Ogsp
;	COMDAT ?DestroyPet@PetViewWnd@@QAEXXZ
_TEXT	SEGMENT
?DestroyPet@PetViewWnd@@QAEXXZ PROC			; PetViewWnd::DestroyPet, COMDAT
; _this$ = ecx

; 244  : {

  00000	56		 push	 esi

; 245  : 	SAFEDELETE( m_pPetView );

  00001	8d b1 64 01 00
	00		 lea	 esi, DWORD PTR [ecx+356]
  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0a		 je	 SHORT $LN1@DestroyPet
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	6a 01		 push	 1
  00011	ff 50 04	 call	 DWORD PTR [eax+4]
  00014	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@DestroyPet:
  00017	5e		 pop	 esi

; 246  : }

  00018	c3		 ret	 0
?DestroyPet@PetViewWnd@@QAEXXZ ENDP			; PetViewWnd::DestroyPet
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetPetScale@PetViewWnd@@QAEXHH@Z		; PetViewWnd::SetPetScale
EXTRN	?SetScale@ioPetView@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioPetView::SetScale
EXTRN	?GetPetModelScale@ioPetInfoManager@@QAE?AUD3DXVECTOR3@@HW4PetRankType@@@Z:PROC ; ioPetInfoManager::GetPetModelScale
; Function compile flags: /Ogsp
;	COMDAT ?SetPetScale@PetViewWnd@@QAEXHH@Z
_TEXT	SEGMENT
_vScale$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_nPetCode$ = 8						; size = 4
_nPetRank$ = 12						; size = 4
?SetPetScale@PetViewWnd@@QAEXHH@Z PROC			; PetViewWnd::SetPetScale, COMDAT
; _this$ = ecx

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 252  : 	D3DXVECTOR3 vScale = g_PetInfoMgr.GetPetModelScale( nPetCode, (PetRankType)nPetRank );

  00011	ff 75 0c	 push	 DWORD PTR _nPetRank$[ebp]
  00014	8d 45 f0	 lea	 eax, DWORD PTR _vScale$[ebp]
  00017	ff 75 08	 push	 DWORD PTR _nPetCode$[ebp]
  0001a	8b f1		 mov	 esi, ecx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?GetSingleton@ioPetInfoManager@@SAAAV1@XZ ; ioPetInfoManager::GetSingleton
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 ?GetPetModelScale@ioPetInfoManager@@QAE?AUD3DXVECTOR3@@HW4PetRankType@@@Z ; ioPetInfoManager::GetPetModelScale

; 253  : 
; 254  : 	if( m_pPetView )

  00029	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0002f	5e		 pop	 esi
  00030	85 c9		 test	 ecx, ecx
  00032	74 09		 je	 SHORT $LN1@SetPetScal

; 255  : 		m_pPetView->SetScale( vScale );

  00034	8d 45 f0	 lea	 eax, DWORD PTR _vScale$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?SetScale@ioPetView@@QAEXABUD3DXVECTOR3@@@Z ; ioPetView::SetScale
$LN1@SetPetScal:

; 256  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	c9		 leave
  00048	c2 08 00	 ret	 8
?SetPetScale@PetViewWnd@@QAEXHH@Z ENDP			; PetViewWnd::SetPetScale
_TEXT	ENDS
PUBLIC	?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z	; PetViewWnd::SetLoopAni
EXTRN	?SetLoopAni@ioPetView@@QAEXABVioHashString@@M@Z:PROC ; ioPetView::SetLoopAni
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z$0
__ehfuncinfo$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_szPetViewAni$ = 8					; size = 16
?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z PROC	; PetViewWnd::SetLoopAni, COMDAT
; _this$ = ecx

; 259  : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 260  : 	if ( !m_pPetView || szPetViewAni.IsEmpty() )

  00012	83 be 64 01 00
	00 00		 cmp	 DWORD PTR [esi+356], 0
  00019	74 25		 je	 SHORT $LN1@SetLoopAni
  0001b	8d 4d 08	 lea	 ecx, DWORD PTR _szPetViewAni$[ebp]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00024	84 c0		 test	 al, al
  00026	75 18		 jne	 SHORT $LN1@SetLoopAni

; 262  : 	
; 263  : 	m_pPetView->SetLoopAni( szPetViewAni );

  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	51		 push	 ecx
  0002c	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00032	8d 45 08	 lea	 eax, DWORD PTR _szPetViewAni$[ebp]
  00035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?SetLoopAni@ioPetView@@QAEXABVioHashString@@M@Z ; ioPetView::SetLoopAni
$LN1@SetLoopAni:

; 261  : 		return;

  00040	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00044	8d 4d 08	 lea	 ecx, DWORD PTR _szPetViewAni$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 264  : }

  0004d	e8 00 00 00 00	 call	 __EH_epilog3
  00052	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _szPetViewAni$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetLoopAni@PetViewWnd@@QAEXVioHashString@@@Z ENDP	; PetViewWnd::SetLoopAni
PUBLIC	??_C@_0BN@JIMIPNAP@staticmodel?1pet_ui_dummy?4txt?$AA@ ; `string'
PUBLIC	?CreateEffectDummy@PetViewWnd@@QAEXXZ		; PetViewWnd::CreateEffectDummy
EXTRN	?SetScale@ioPetView@@QAEXM@Z:PROC		; ioPetView::SetScale
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_0BN@JIMIPNAP@staticmodel?1pet_ui_dummy?4txt?$AA@
CONST	SEGMENT
??_C@_0BN@JIMIPNAP@staticmodel?1pet_ui_dummy?4txt?$AA@ DB 'staticmodel/pe'
	DB	't_ui_dummy.txt', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateEffectDummy@PetViewWnd@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateEffectDummy@PetViewWnd@@QAEXXZ$0
__ehfuncinfo$?CreateEffectDummy@PetViewWnd@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateEffectDummy@PetViewWnd@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?CreateEffectDummy@PetViewWnd@@QAEXXZ
_TEXT	SEGMENT
$T506334 = -28						; size = 16
__$EHRec$ = -12						; size = 12
?CreateEffectDummy@PetViewWnd@@QAEXXZ PROC		; PetViewWnd::CreateEffectDummy, COMDAT
; _this$ = ecx

; 269  : {	

  00000	6a 10		 push	 16			; 00000010H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?CreateEffectDummy@PetViewWnd@@QAEXXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 270  : 	ioPetView *pEffectDummy = m_pUI3DRender->CreatePet( "staticmodel/pet_ui_dummy.txt" );

  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JIMIPNAP@staticmodel?1pet_ui_dummy?4txt?$AA@
  00013	8d 4d e4	 lea	 ecx, DWORD PTR $T506334[ebp]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0001c	8b 8e 60 01 00
	00		 mov	 ecx, DWORD PTR [esi+352]
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	6a 01		 push	 1
  00028	8d 45 e4	 lea	 eax, DWORD PTR $T506334[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?CreatePet@ioUI3DRender@@QAEPAVioPetView@@ABVioHashString@@_N@Z ; ioUI3DRender::CreatePet
  00031	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00035	8d 4d e4	 lea	 ecx, DWORD PTR $T506334[ebp]
  00038	8b f8		 mov	 edi, eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 271  : 	if( !pEffectDummy )	

  00040	85 ff		 test	 edi, edi
  00042	74 41		 je	 SHORT $LN3@CreateEffe

; 272  : 		return;
; 273  : 	
; 274  : 	pEffectDummy->SetPosition( m_vDummyPos );

  00044	8d 86 90 01 00
	00		 lea	 eax, DWORD PTR [esi+400]
  0004a	50		 push	 eax
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?SetPosition@ioPetView@@QAEXABUD3DXVECTOR3@@@Z ; ioPetView::SetPosition

; 275  : 	pEffectDummy->SetScale( 2.0f );

  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0005a	51		 push	 ecx
  0005b	8b cf		 mov	 ecx, edi
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	e8 00 00 00 00	 call	 ?SetScale@ioPetView@@QAEXM@Z ; ioPetView::SetScale

; 276  : 
; 277  : 	SAFEDELETE( m_pEffectDummy );

  00067	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 0e		 je	 SHORT $LN1@CreateEffe
  00071	8b 01		 mov	 eax, DWORD PTR [ecx]
  00073	6a 01		 push	 1
  00075	ff 50 04	 call	 DWORD PTR [eax+4]
  00078	83 a6 68 01 00
	00 00		 and	 DWORD PTR [esi+360], 0
$LN1@CreateEffe:

; 278  : 	m_pEffectDummy = pEffectDummy;

  0007f	89 be 68 01 00
	00		 mov	 DWORD PTR [esi+360], edi
$LN3@CreateEffe:

; 279  : }

  00085	e8 00 00 00 00	 call	 __EH_epilog3
  0008a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateEffectDummy@PetViewWnd@@QAEXXZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T506334[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?CreateEffectDummy@PetViewWnd@@QAEXXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateEffectDummy@PetViewWnd@@QAEXXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateEffectDummy@PetViewWnd@@QAEXXZ ENDP		; PetViewWnd::CreateEffectDummy
PUBLIC	?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z ; PetViewWnd::DummyAttachEffect
EXTRN	?AttachEffect@ioPetView@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@@Z:PROC ; ioPetView::AttachEffect
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z$0
__ehfuncinfo$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_szPetEffect$ = 8					; size = 16
?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z PROC ; PetViewWnd::DummyAttachEffect, COMDAT
; _this$ = ecx

; 282  : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 283  : 	if ( !m_pEffectDummy || szPetEffect.IsEmpty() )

  00010	8d b1 68 01 00
	00		 lea	 esi, DWORD PTR [ecx+360]
  00016	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00019	74 1a		 je	 SHORT $LN1@DummyAttac
  0001b	8d 4d 08	 lea	 ecx, DWORD PTR _szPetEffect$[ebp]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00024	84 c0		 test	 al, al
  00026	75 0d		 jne	 SHORT $LN1@DummyAttac

; 285  : 
; 286  : 	m_pEffectDummy->AttachEffect( szPetEffect, NULL );

  00028	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002a	6a 00		 push	 0
  0002c	8d 45 08	 lea	 eax, DWORD PTR _szPetEffect$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?AttachEffect@ioPetView@@QAEPAVioEffect@@ABVioHashString@@PAVioEntityEvent@@@Z ; ioPetView::AttachEffect
$LN1@DummyAttac:

; 284  : 		return;

  00035	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00039	8d 4d 08	 lea	 ecx, DWORD PTR _szPetEffect$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 287  : }

  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _szPetEffect$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DummyAttachEffect@PetViewWnd@@QAEXVioHashString@@@Z ENDP ; PetViewWnd::DummyAttachEffect
PUBLIC	?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z ; PetViewWnd::DummyEndEffect
EXTRN	?EndEffect@ioPetView@@QAEXABVioHashString@@_N@Z:PROC ; ioPetView::EndEffect
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z$0
__ehfuncinfo$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_szPetEffect$ = 8					; size = 16
?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z PROC	; PetViewWnd::DummyEndEffect, COMDAT
; _this$ = ecx

; 290  : {

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  : 	if ( !m_pEffectDummy || szPetEffect.IsEmpty() )

  00010	8d b1 68 01 00
	00		 lea	 esi, DWORD PTR [ecx+360]
  00016	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00019	74 1a		 je	 SHORT $LN1@DummyEndEf
  0001b	8d 4d 08	 lea	 ecx, DWORD PTR _szPetEffect$[ebp]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  00024	84 c0		 test	 al, al
  00026	75 0d		 jne	 SHORT $LN1@DummyEndEf

; 293  : 
; 294  : 	m_pEffectDummy->EndEffect( szPetEffect, false );

  00028	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0002a	6a 00		 push	 0
  0002c	8d 45 08	 lea	 eax, DWORD PTR _szPetEffect$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?EndEffect@ioPetView@@QAEXABVioHashString@@_N@Z ; ioPetView::EndEffect
$LN1@DummyEndEf:

; 292  : 		return;

  00035	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00039	8d 4d 08	 lea	 ecx, DWORD PTR _szPetEffect$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 295  : }

  00042	e8 00 00 00 00	 call	 __EH_epilog3
  00047	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _szPetEffect$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DummyEndEffect@PetViewWnd@@QAEXVioHashString@@@Z ENDP	; PetViewWnd::DummyEndEffect
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ	; ioApplication::GetMouse
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioapplication.h
;	COMDAT ?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ
_TEXT	SEGMENT
?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ PROC	; ioApplication::GetMouse, COMDAT
; _this$ = ecx

; 796  : 	inline ioLSMouse* GetMouse(){ return &m_Mouse;	}

  00000	8d 81 90 00 00
	00		 lea	 eax, DWORD PTR [ecx+144]
  00006	c3		 ret	 0
?GetMouse@ioApplication@@QAEPAVioLSMouse@@XZ ENDP	; ioApplication::GetMouse
_TEXT	ENDS
PUBLIC	__real@42340000
PUBLIC	??0PetViewWnd@@QAE@XZ				; PetViewWnd::PetViewWnd
EXTRN	__imp_??0ioWnd@@QAE@XZ:PROC
;	COMDAT __real@42340000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petviewwnd.cpp
CONST	ENDS
;	COMDAT ??0PetViewWnd@@QAE@XZ
_TEXT	SEGMENT
$T505196 = -16						; size = 12
$T505194 = -16						; size = 12
$T505192 = -16						; size = 12
tv247 = -4						; size = 4
tv234 = -4						; size = 4
tv221 = -4						; size = 4
??0PetViewWnd@@QAE@XZ PROC				; PetViewWnd::PetViewWnd, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b d9		 mov	 ebx, ecx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioWnd@@QAE@XZ

; 14   : 	m_pUI3DRender = NULL;
; 15   : 	m_pPetView	  = NULL;
; 16   : 	m_pEffectDummy = NULL;
; 17   : 
; 18   : 	m_p3DBack = NULL;
; 19   : 	m_pShadow = NULL;
; 20   : 
; 21   : 	m_fRotateYaw = 0.0f;

  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	33 c9		 xor	 ecx, ecx
  00016	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7PetViewWnd@@6B@
  0001c	89 8b 60 01 00
	00		 mov	 DWORD PTR [ebx+352], ecx
  00022	89 8b 64 01 00
	00		 mov	 DWORD PTR [ebx+356], ecx
  00028	89 8b 68 01 00
	00		 mov	 DWORD PTR [ebx+360], ecx
  0002e	89 8b 6c 01 00
	00		 mov	 DWORD PTR [ebx+364], ecx
  00034	89 8b 70 01 00
	00		 mov	 DWORD PTR [ebx+368], ecx
  0003a	f3 0f 11 83 74
	01 00 00	 movss	 DWORD PTR [ebx+372], xmm0

; 22   : 	m_fPreYaw = 0.0f;

  00042	f3 0f 11 83 78
	01 00 00	 movss	 DWORD PTR [ebx+376], xmm0

; 23   : 	m_fXMLRotateYaw = 0.0f;

  0004a	f3 0f 11 83 7c
	01 00 00	 movss	 DWORD PTR [ebx+380], xmm0

; 24   : 
; 25   : 	m_vCharPos = D3DXVECTOR3( 0.0f, 45.0f, FLOAT500 );

  00052	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  00057	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42340000
  0005f	89 45 fc	 mov	 DWORD PTR tv247[ebp], eax
  00062	db 45 fc	 fild	 DWORD PTR tv247[ebp]
  00065	f3 0f 11 45 f0	 movss	 DWORD PTR $T505192[ebp], xmm0
  0006a	f3 0f 11 4d f4	 movss	 DWORD PTR $T505192[ebp+4], xmm1
  0006f	85 c0		 test	 eax, eax
  00071	79 06		 jns	 SHORT $LN22@PetViewWnd@2
  00073	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN22@PetViewWnd@2:
  00079	d9 5d f8	 fstp	 DWORD PTR $T505192[ebp+8]
  0007c	8d bb 84 01 00
	00		 lea	 edi, DWORD PTR [ebx+388]
  00082	8d 75 f0	 lea	 esi, DWORD PTR $T505192[ebp]
  00085	a5		 movsd
  00086	a5		 movsd
  00087	a5		 movsd

; 26   : 	m_vDummyPos = D3DXVECTOR3( 0.0f, 45.0f, FLOAT500 );

  00088	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  0008d	89 45 fc	 mov	 DWORD PTR tv234[ebp], eax
  00090	f3 0f 11 45 f0	 movss	 DWORD PTR $T505194[ebp], xmm0
  00095	db 45 fc	 fild	 DWORD PTR tv234[ebp]
  00098	f3 0f 11 4d f4	 movss	 DWORD PTR $T505194[ebp+4], xmm1
  0009d	85 c0		 test	 eax, eax
  0009f	79 06		 jns	 SHORT $LN23@PetViewWnd@2
  000a1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN23@PetViewWnd@2:
  000a7	d9 5d f8	 fstp	 DWORD PTR $T505194[ebp+8]
  000aa	8d bb 90 01 00
	00		 lea	 edi, DWORD PTR [ebx+400]
  000b0	8d 75 f0	 lea	 esi, DWORD PTR $T505194[ebp]
  000b3	a5		 movsd
  000b4	a5		 movsd
  000b5	a5		 movsd

; 27   : 	m_vCameraPos = D3DXVECTOR3( 0.0f, 0.0f, FLOAT500 );

  000b6	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  000bb	89 45 fc	 mov	 DWORD PTR tv221[ebp], eax
  000be	f3 0f 11 45 f0	 movss	 DWORD PTR $T505196[ebp], xmm0
  000c3	db 45 fc	 fild	 DWORD PTR tv221[ebp]
  000c6	f3 0f 11 45 f4	 movss	 DWORD PTR $T505196[ebp+4], xmm0
  000cb	85 c0		 test	 eax, eax
  000cd	79 06		 jns	 SHORT $LN24@PetViewWnd@2
  000cf	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN24@PetViewWnd@2:
  000d5	d9 5d f8	 fstp	 DWORD PTR $T505196[ebp+8]
  000d8	8d bb 9c 01 00
	00		 lea	 edi, DWORD PTR [ebx+412]
  000de	8d 75 f0	 lea	 esi, DWORD PTR $T505196[ebp]
  000e1	a5		 movsd
  000e2	a5		 movsd
  000e3	a5		 movsd
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi

; 28   : 
; 29   : 	m_bLeftRotateOn  = false;

  000e6	66 89 8b a8 01
	00 00		 mov	 WORD PTR [ebx+424], cx

; 30   : 	m_bRightRotateOn = false;
; 31   : }

  000ed	8b c3		 mov	 eax, ebx
  000ef	5b		 pop	 ebx
  000f0	c9		 leave
  000f1	c3		 ret	 0
??0PetViewWnd@@QAE@XZ ENDP				; PetViewWnd::PetViewWnd
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GPetViewWnd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPetViewWnd@@UAEPAXI@Z PROC				; PetViewWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1PetViewWnd@@UAE@XZ	; PetViewWnd::~PetViewWnd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GPetViewWnd@@UAEPAXI@Z ENDP				; PetViewWnd::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
EXTRN	__imp_?GetID@ioWnd@@QBEKXZ:PROC
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?iwm_command@PetViewWnd@@UAEXPAVioWnd@@HK@Z
_TEXT	SEGMENT
_pWnd$ = 8						; size = 4
_cmd$ = 12						; size = 4
tv194 = 16						; size = 4
_param$ = 16						; size = 4
?iwm_command@PetViewWnd@@UAEXPAVioWnd@@HK@Z PROC	; PetViewWnd::iwm_command, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 68   : 	DWORD dwID = pWnd->GetID();

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetID@ioWnd@@QBEKXZ

; 69   : 
; 70   : 	switch( dwID )

  0000f	48		 dec	 eax
  00010	0f 85 a1 00 00
	00		 jne	 $LN27@iwm_comman

; 71   : 	{
; 72   : 	case ID_CHAR_CONTROL_WND:
; 73   : 		if( cmd == IOBN_BTNDOWN)

  00016	83 7d 0c 10	 cmp	 DWORD PTR _cmd$[ebp], 16 ; 00000010H
  0001a	75 2e		 jne	 SHORT $LN13@iwm_comman

; 74   : 		{
; 75   : 			if( param == NewShopHelpControlWnd::ID_LEFT_ROTATE_BTN )

  0001c	83 7d 10 01	 cmp	 DWORD PTR _param$[ebp], 1
  00020	75 11		 jne	 SHORT $LN12@iwm_comman

; 76   : 			{
; 77   : 				RotateY( m_fXMLRotateYaw );

  00022	d9 86 7c 01 00
	00		 fld	 DWORD PTR [esi+380]
  00028	d9 9e 74 01 00
	00		 fstp	 DWORD PTR [esi+372]
  0002e	e9 84 00 00 00	 jmp	 $LN27@iwm_comman
$LN12@iwm_comman:

; 78   : 			}
; 79   : 			else if( param == NewShopHelpControlWnd::ID_RIGHT_ROTATE_BTN )

  00033	83 7d 10 02	 cmp	 DWORD PTR _param$[ebp], 2
  00037	75 7e		 jne	 SHORT $LN27@iwm_comman

; 80   : 			{
; 81   : 				RotateY( -m_fXMLRotateYaw );

  00039	f3 0f 10 86 7c
	01 00 00	 movss	 xmm0, DWORD PTR [esi+380]
  00041	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __mask@@NegFloat@

; 82   : 			}
; 83   : 		}

  00048	eb 65		 jmp	 SHORT $LN30@iwm_comman
$LN13@iwm_comman:

; 84   : 		else if( cmd == IOBN_BTNUP )

  0004a	83 7d 0c 11	 cmp	 DWORD PTR _cmd$[ebp], 17 ; 00000011H
  0004e	75 67		 jne	 SHORT $LN27@iwm_comman

; 85   : 		{
; 86   : 			if( param == NewShopHelpControlWnd::ID_DEFAULT_POS_BTN )

  00050	83 7d 10 03	 cmp	 DWORD PTR _param$[ebp], 3
  00054	75 4a		 jne	 SHORT $LN7@iwm_comman

; 87   : 			{
; 88   : 				if( m_pPetView )

  00056	83 be 64 01 00
	00 00		 cmp	 DWORD PTR [esi+356], 0
  0005d	74 24		 je	 SHORT $LN6@iwm_comman

; 89   : 					m_pPetView->SetYaw( FLOAT10 );

  0005f	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00064	89 45 10	 mov	 DWORD PTR tv194[ebp], eax
  00067	db 45 10	 fild	 DWORD PTR tv194[ebp]
  0006a	85 c0		 test	 eax, eax
  0006c	79 06		 jns	 SHORT $LN29@iwm_comman
  0006e	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@iwm_comman:
  00074	51		 push	 ecx
  00075	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0007b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007e	e8 00 00 00 00	 call	 ?SetYaw@ioPetView@@QAEXM@Z ; ioPetView::SetYaw
$LN6@iwm_comman:

; 90   : 				if( ioWnd::m_pParent )

  00083	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00086	85 c9		 test	 ecx, ecx
  00088	74 0d		 je	 SHORT $LN5@iwm_comman

; 91   : 					ioWnd::m_pParent->iwm_command( this, cmd, param );

  0008a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008c	6a 03		 push	 3
  0008e	6a 11		 push	 17			; 00000011H
  00090	56		 push	 esi
  00091	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]
$LN5@iwm_comman:

; 92   : 				InitRotate();

  00097	8b ce		 mov	 ecx, esi
  00099	e8 00 00 00 00	 call	 ?InitRotate@PetViewWnd@@QAEXXZ ; PetViewWnd::InitRotate
  0009e	eb 17		 jmp	 SHORT $LN27@iwm_comman
$LN7@iwm_comman:

; 93   : 			}
; 94   : 			else if( param == NewShopHelpControlWnd::ID_LEFT_ROTATE_BTN )

  000a0	83 7d 10 01	 cmp	 DWORD PTR _param$[ebp], 1

; 95   : 			{
; 96   : 				RotateY( 0.0f );

  000a4	74 06		 je	 SHORT $LN31@iwm_comman

; 97   : 			}
; 98   : 			else if( param == NewShopHelpControlWnd::ID_RIGHT_ROTATE_BTN )

  000a6	83 7d 10 02	 cmp	 DWORD PTR _param$[ebp], 2
  000aa	75 0b		 jne	 SHORT $LN27@iwm_comman
$LN31@iwm_comman:

; 99   : 			{
; 100  : 				RotateY( 0.0f );

  000ac	0f 57 c0	 xorps	 xmm0, xmm0
$LN30@iwm_comman:
  000af	f3 0f 11 86 74
	01 00 00	 movss	 DWORD PTR [esi+372], xmm0
$LN27@iwm_comman:
  000b7	5e		 pop	 esi

; 101  : 			}
; 102  : 		}
; 103  : 		break;
; 104  : 	}
; 105  : }

  000b8	5d		 pop	 ebp
  000b9	c2 0c 00	 ret	 12			; 0000000cH
?iwm_command@PetViewWnd@@UAEXPAVioWnd@@HK@Z ENDP	; PetViewWnd::iwm_command
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?HideWndAnimation@NewShopHelpControlWnd@@QAEXXZ:PROC ; NewShopHelpControlWnd::HideWndAnimation
EXTRN	__imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z:PROC
EXTRN	__imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z:PROC
EXTRN	__imp__PtInRect@12:PROC
EXTRN	__imp_?GetMousePos@ioMouse@@QBEABUtagPOINT@@XZ:PROC
EXTRN	?GetSingleton@ioApplication@@SAAAV1@XZ:PROC	; ioApplication::GetSingleton
EXTRN	?Update@ioPetView@@QAEXM@Z:PROC			; ioPetView::Update
EXTRN	?RotateY@ioPetView@@QAEXM@Z:PROC		; ioPetView::RotateY
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnProcess@PetViewWnd@@MAEXM@Z
_TEXT	SEGMENT
_rcNameRect$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_fTimePerSec$ = 8					; size = 4
?OnProcess@PetViewWnd@@MAEXM@Z PROC			; PetViewWnd::OnProcess, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 133  : 	if( !IsShow() ) 

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00019	84 c0		 test	 al, al
  0001b	0f 84 cc 00 00
	00		 je	 $LN1@OnProcess

; 134  : 		return;
; 135  : 
; 136  : 	if( m_pPetView )

  00021	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  00027	85 c9		 test	 ecx, ecx
  00029	74 29		 je	 SHORT $LN6@OnProcess

; 137  : 	{
; 138  : 		m_pPetView->RotateY( m_fRotateYaw );

  0002b	f3 0f 10 86 74
	01 00 00	 movss	 xmm0, DWORD PTR [esi+372]
  00033	51		 push	 ecx
  00034	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00039	e8 00 00 00 00	 call	 ?RotateY@ioPetView@@QAEXM@Z ; ioPetView::RotateY

; 139  : 		m_pPetView->Update( fTimePerSec );

  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00043	51		 push	 ecx
  00044	8b 8e 64 01 00
	00		 mov	 ecx, DWORD PTR [esi+356]
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	e8 00 00 00 00	 call	 ?Update@ioPetView@@QAEXM@Z ; ioPetView::Update
$LN6@OnProcess:

; 140  : 	}
; 141  : 
; 142  : 	if ( m_pEffectDummy )

  00054	8b 8e 68 01 00
	00		 mov	 ecx, DWORD PTR [esi+360]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 10		 je	 SHORT $LN5@OnProcess

; 143  : 	{
; 144  : 		m_pEffectDummy->Update( fTimePerSec );

  0005e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00063	51		 push	 ecx
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	e8 00 00 00 00	 call	 ?Update@ioPetView@@QAEXM@Z ; ioPetView::Update
$LN5@OnProcess:

; 145  : 	}
; 146  : 
; 147  : 	ioLSMouse *pMouse = g_App.GetMouse();

  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 ?GetSingleton@ioApplication@@SAAAV1@XZ ; ioApplication::GetSingleton
  00074	8b f8		 mov	 edi, eax
  00076	81 c7 90 00 00
	00		 add	 edi, 144		; 00000090H

; 148  : 	if( !pMouse )

  0007c	74 6e		 je	 SHORT $LN12@OnProcess

; 149  : 		return;
; 150  : 
; 151  : 	RECT rcNameRect;
; 152  : 	rcNameRect.left = GetDerivedPosX();

  0007e	8b ce		 mov	 ecx, esi
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 153  : 	rcNameRect.top  = GetDerivedPosY();

  00086	8b ce		 mov	 ecx, esi
  00088	89 45 ec	 mov	 DWORD PTR _rcNameRect$[ebp], eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ

; 154  : 	rcNameRect.right  = rcNameRect.left + GetWidth();

  00091	8b ce		 mov	 ecx, esi
  00093	89 45 f0	 mov	 DWORD PTR _rcNameRect$[ebp+4], eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0009c	03 45 ec	 add	 eax, DWORD PTR _rcNameRect$[ebp]

; 155  : 	rcNameRect.bottom = rcNameRect.top + GetHeight();

  0009f	8b ce		 mov	 ecx, esi
  000a1	89 45 f4	 mov	 DWORD PTR _rcNameRect$[ebp+8], eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  000aa	03 45 f0	 add	 eax, DWORD PTR _rcNameRect$[ebp+4]

; 156  : 
; 157  : 	if( ::PtInRect( &rcNameRect, pMouse->GetMousePos() ) )

  000ad	8b cf		 mov	 ecx, edi
  000af	89 45 f8	 mov	 DWORD PTR _rcNameRect$[ebp+12], eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetMousePos@ioMouse@@QBEABUtagPOINT@@XZ
  000b8	ff 70 04	 push	 DWORD PTR [eax+4]
  000bb	ff 30		 push	 DWORD PTR [eax]
  000bd	8d 45 ec	 lea	 eax, DWORD PTR _rcNameRect$[ebp]
  000c0	50		 push	 eax
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12

; 158  : 	{
; 159  : 		ShowChildWnd( ID_CHAR_CONTROL_WND );		

  000c7	8b ce		 mov	 ecx, esi
  000c9	85 c0		 test	 eax, eax
  000cb	74 0c		 je	 SHORT $LN3@OnProcess
  000cd	6a 00		 push	 0
  000cf	6a 01		 push	 1
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowChildWnd@ioWnd@@QAEXK_N@Z

; 160  : 	}
; 161  : 	else

  000d7	eb 13		 jmp	 SHORT $LN12@OnProcess
$LN3@OnProcess:

; 162  : 	{
; 163  : 		NewShopHelpControlWnd *pControlWnd = (NewShopHelpControlWnd*) (FindChildWnd( ID_CHAR_CONTROL_WND ) );

  000d9	6a 01		 push	 1
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FindChildWnd@ioWnd@@QAEPAV1@K@Z

; 164  : 		if( pControlWnd )

  000e1	85 c0		 test	 eax, eax
  000e3	74 07		 je	 SHORT $LN12@OnProcess

; 165  : 			pControlWnd->HideWndAnimation();

  000e5	8b c8		 mov	 ecx, eax
  000e7	e8 00 00 00 00	 call	 ?HideWndAnimation@NewShopHelpControlWnd@@QAEXXZ ; NewShopHelpControlWnd::HideWndAnimation
$LN12@OnProcess:
  000ec	5f		 pop	 edi
$LN1@OnProcess:

; 166  : 	}
; 167  : }

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	5e		 pop	 esi
  000f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f8	c9		 leave
  000f9	c2 04 00	 ret	 4
?OnProcess@PetViewWnd@@MAEXM@Z ENDP			; PetViewWnd::OnProcess
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetFloatAttribute_e@$09@ioXMLElement@@QBEMAAY09$$CBD@Z ; ioXMLElement::GetFloatAttribute_e<10>
EXTRN	__imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioxmlelement.h
;	COMDAT ??$GetFloatAttribute_e@$09@ioXMLElement@@QBEMAAY09$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetFloatAttribute_e@$09@ioXMLElement@@QBEMAAY09$$CBD@Z PROC ; ioXMLElement::GetFloatAttribute_e<10>, COMDAT
; _this$ = ecx

; 100  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 101  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@GetFloatAt
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@GetFloatAt
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@GetFloatAt
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@GetFloatAt
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@GetFloatAt
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@GetFloatAt
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@GetFloatAt
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@GetFloatAt
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@GetFloatAt
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@GetFloatAt
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@GetFloatAt
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@GetFloatAt
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@GetFloatAt
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@GetFloatAt
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@GetFloatAt
$LN83@GetFloatAt:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@GetFloatAt
$LN84@GetFloatAt:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@GetFloatAt
$LN85@GetFloatAt:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@GetFloatAt
$LN86@GetFloatAt:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@GetFloatAt
$LN88@GetFloatAt:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@GetFloatAt
$LN89@GetFloatAt:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@GetFloatAt
$LN90@GetFloatAt:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@GetFloatAt
$LN91@GetFloatAt:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@GetFloatAt
$LN92@GetFloatAt:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@GetFloatAt
$LN93@GetFloatAt:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@GetFloatAt
$LN94@GetFloatAt:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@GetFloatAt
$LN95@GetFloatAt:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@GetFloatAt
$LN96@GetFloatAt:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetFloatAt:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@GetFloatAt:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@GetFloatAt
  00144	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH

; 102  : 		return GetFloatAttribute(_k);

  00148	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014b	50		 push	 eax
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z

; 103  : 	}

  00152	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	33 cd		 xor	 ecx, ebp
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	c9		 leave
  0015d	c2 04 00	 ret	 4
??$GetFloatAttribute_e@$09@ioXMLElement@@QBEMAAY09$$CBD@Z ENDP ; ioXMLElement::GetFloatAttribute_e<10>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetFloatAttribute_e@$0M@@ioXMLElement@@QBEMAAY0M@$$CBD@Z ; ioXMLElement::GetFloatAttribute_e<12>
; Function compile flags: /Ogsp
;	COMDAT ??$GetFloatAttribute_e@$0M@@ioXMLElement@@QBEMAAY0M@$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetFloatAttribute_e@$0M@@ioXMLElement@@QBEMAAY0M@$$CBD@Z PROC ; ioXMLElement::GetFloatAttribute_e<12>, COMDAT
; _this$ = ecx

; 100  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 101  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@GetFloatAt@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@GetFloatAt@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@GetFloatAt@2
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@GetFloatAt@2
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@GetFloatAt@2
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@GetFloatAt@2
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@GetFloatAt@2
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@GetFloatAt@2
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@GetFloatAt@2
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@GetFloatAt@2
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@GetFloatAt@2
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@GetFloatAt@2
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@GetFloatAt@2
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@GetFloatAt@2
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@GetFloatAt@2
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@GetFloatAt@2
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@GetFloatAt@2
$LN81@GetFloatAt@2:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@GetFloatAt@2
$LN82@GetFloatAt@2:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@GetFloatAt@2
$LN83@GetFloatAt@2:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@GetFloatAt@2
$LN84@GetFloatAt@2:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@GetFloatAt@2
$LN86@GetFloatAt@2:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@GetFloatAt@2
$LN87@GetFloatAt@2:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@GetFloatAt@2
$LN88@GetFloatAt@2:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@GetFloatAt@2
$LN89@GetFloatAt@2:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@GetFloatAt@2
$LN90@GetFloatAt@2:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@GetFloatAt@2
$LN91@GetFloatAt@2:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@GetFloatAt@2
$LN92@GetFloatAt@2:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@GetFloatAt@2
$LN93@GetFloatAt@2:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@GetFloatAt@2
$LN94@GetFloatAt@2:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@GetFloatAt@2
$LN95@GetFloatAt@2:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@GetFloatAt@2
$LN96@GetFloatAt@2:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetFloatAt@2:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@GetFloatAt@2:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@GetFloatAt@2
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@GetFloatAt@2:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@GetFloatAt@2
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@GetFloatAt@2:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@GetFloatAt@2

; 102  : 		return GetFloatAttribute(_k);

  0018c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0018f	50		 push	 eax
  00190	8b ce		 mov	 ecx, esi
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z

; 103  : 	}

  00198	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019b	33 cd		 xor	 ecx, ebp
  0019d	5e		 pop	 esi
  0019e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a3	c9		 leave
  001a4	c2 04 00	 ret	 4
??$GetFloatAttribute_e@$0M@@ioXMLElement@@QBEMAAY0M@$$CBD@Z ENDP ; ioXMLElement::GetFloatAttribute_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z	; operator==<7>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z PROC	; operator==<7>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 c0 00 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 a9 00 00
	00		 je	 $LN95@operator
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 92 00 00
	00		 je	 $LN94@operator
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	74 7f		 je	 SHORT $LN93@operator
  00051	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00054	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00057	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005a	84 d2		 test	 dl, dl
  0005c	74 6c		 je	 SHORT $LN92@operator
  0005e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00061	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00064	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00067	84 d2		 test	 dl, dl
  00069	74 59		 je	 SHORT $LN91@operator
  0006b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006e	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	74 6f		 je	 SHORT $LN1@operator
  00077	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0007a	84 d2		 test	 dl, dl
  0007c	74 40		 je	 SHORT $LN89@operator
  0007e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00081	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  00084	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00087	84 d2		 test	 dl, dl
  00089	74 2d		 je	 SHORT $LN88@operator
  0008b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008e	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00091	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00094	84 d2		 test	 dl, dl
  00096	74 1a		 je	 SHORT $LN87@operator
  00098	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a1	84 c0		 test	 al, al
  000a3	74 07		 je	 SHORT $LN86@operator
  000a5	34 eb		 xor	 al, -21			; ffffffebH
  000a7	88 45 fa	 mov	 BYTE PTR __t$[ebp+10], al
  000aa	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000ac	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000b0	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000b2	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000b6	eb 2e		 jmp	 SHORT $LN1@operator
$LN88@operator:
  000b8	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000bc	eb 28		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000be	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c2	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000c4	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000c8	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000ca	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000ce	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000d0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000d4	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  000d6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000da	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  000dc	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000e0	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  000e2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  000e6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000ed	6a 04		 push	 4
  000ef	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+6], 0
  000f3	58		 pop	 eax
$LL101@operator:
  000f4	8b c8		 mov	 ecx, eax
  000f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fc	79 05		 jns	 SHORT $LN115@operator
  000fe	49		 dec	 ecx
  000ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00102	41		 inc	 ecx
$LN115@operator:
  00103	b2 ed		 mov	 dl, -19			; ffffffedH
  00105	2a d1		 sub	 dl, cl
  00107	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  0010b	40		 inc	 eax
  0010c	83 f8 06	 cmp	 eax, 6
  0010f	7c e3		 jl	 SHORT $LL101@operator
  00111	8b cf		 mov	 ecx, edi
  00113	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  0011c	8a 08		 mov	 cl, BYTE PTR [eax]
  0011e	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00120	75 1a		 jne	 SHORT $LN112@operator
  00122	84 c9		 test	 cl, cl
  00124	74 12		 je	 SHORT $LN113@operator
  00126	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00129	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0012c	75 0e		 jne	 SHORT $LN112@operator
  0012e	83 c0 02	 add	 eax, 2
  00131	83 c6 02	 add	 esi, 2
  00134	84 c9		 test	 cl, cl
  00136	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  00138	33 c0		 xor	 eax, eax
  0013a	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  0013c	1b c0		 sbb	 eax, eax
  0013e	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00141	33 c9		 xor	 ecx, ecx
  00143	85 c0		 test	 eax, eax
  00145	0f 94 c0	 sete	 al

; 148  : }

  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	5f		 pop	 edi
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	c9		 leave
  00155	c3		 ret	 0
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z ENDP	; operator==<7>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z	; operator==<8>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z PROC	; operator==<8>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 d7 00 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 c0 00 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 a9 00 00
	00		 je	 $LN94@operator@2
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 92 00 00
	00		 je	 $LN93@operator@2
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	74 7f		 je	 SHORT $LN92@operator@2
  00062	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00065	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00068	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006b	84 d2		 test	 dl, dl
  0006d	74 6c		 je	 SHORT $LN91@operator@2
  0006f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00078	84 d2		 test	 dl, dl
  0007a	74 59		 je	 SHORT $LN90@operator@2
  0007c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007f	80 78 07 00	 cmp	 BYTE PTR [eax+7], 0
  00083	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  00086	74 75		 je	 SHORT $LN1@operator@2
  00088	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0008b	84 d2		 test	 dl, dl
  0008d	74 40		 je	 SHORT $LN88@operator@2
  0008f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00092	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00095	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00098	84 d2		 test	 dl, dl
  0009a	74 2d		 je	 SHORT $LN87@operator@2
  0009c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009f	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a2	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a5	84 d2		 test	 dl, dl
  000a7	74 1a		 je	 SHORT $LN86@operator@2
  000a9	8a 40 0b	 mov	 al, BYTE PTR [eax+11]
  000ac	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000af	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b2	84 c0		 test	 al, al
  000b4	74 07		 je	 SHORT $LN85@operator@2
  000b6	34 ea		 xor	 al, -22			; ffffffeaH
  000b8	88 45 fb	 mov	 BYTE PTR __t$[ebp+11], al
  000bb	eb 40		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  000bd	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000c1	eb 3a		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  000c3	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000c7	eb 34		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  000c9	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000cd	eb 2e		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  000cf	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000d3	eb 28		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000d9	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000df	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  000e1	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000e5	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  000e7	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000eb	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  000ed	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000f1	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  000f3	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000f7	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  000f9	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  000fd	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  00104	6a 04		 push	 4
  00106	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+7], 0
  0010a	58		 pop	 eax
$LL101@operator@2:
  0010b	8b c8		 mov	 ecx, eax
  0010d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00113	79 05		 jns	 SHORT $LN115@operator@2
  00115	49		 dec	 ecx
  00116	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00119	41		 inc	 ecx
$LN115@operator@2:
  0011a	b2 ed		 mov	 dl, -19			; ffffffedH
  0011c	2a d1		 sub	 dl, cl
  0011e	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00122	40		 inc	 eax
  00123	83 f8 07	 cmp	 eax, 7
  00126	7c e3		 jl	 SHORT $LL101@operator@2
  00128	8b cf		 mov	 ecx, edi
  0012a	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00137	75 1a		 jne	 SHORT $LN112@operator@2
  00139	84 c9		 test	 cl, cl
  0013b	74 12		 je	 SHORT $LN113@operator@2
  0013d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00140	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00143	75 0e		 jne	 SHORT $LN112@operator@2
  00145	83 c0 02	 add	 eax, 2
  00148	83 c6 02	 add	 esi, 2
  0014b	84 c9		 test	 cl, cl
  0014d	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  0014f	33 c0		 xor	 eax, eax
  00151	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  00153	1b c0		 sbb	 eax, eax
  00155	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  00158	33 c9		 xor	 ecx, ecx
  0015a	85 c0		 test	 eax, eax
  0015c	0f 94 c0	 sete	 al

; 148  : }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c3		 ret	 0
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z ENDP	; operator==<8>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\petviewwnd.cpp
;	COMDAT ?ParseExtraInfo@PetViewWnd@@UAEXAAVioXMLElement@@@Z
_TEXT	SEGMENT
__k$506693 = -20					; size = 12
__k$506568 = -20					; size = 10
__$ArrayPad$ = -4					; size = 4
_xElement$ = 8						; size = 4
?ParseExtraInfo@PetViewWnd@@UAEXAAVioXMLElement@@@Z PROC ; PetViewWnd::ParseExtraInfo, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _xElement$[ebp]

; 109  : 	m_fXMLRotateYaw = xElement.GetFloatAttribute_e( "RotateYaw" );

  00016	6a 02		 push	 2
  00018	8b f1		 mov	 esi, ecx
  0001a	c7 45 ec bf 83
	9f 8b		 mov	 DWORD PTR __k$506568[ebp], -1952480321 ; 8b9f83bfH
  00021	c7 45 f0 99 89
	b2 8b		 mov	 DWORD PTR __k$506568[ebp+4], -1951233639 ; 8bb28999H
  00028	8d 45 ec	 lea	 eax, DWORD PTR __k$506568[ebp]
  0002b	66 c7 45 f4 9a
	00		 mov	 WORD PTR __k$506568[ebp+8], 154 ; 0000009aH
  00031	59		 pop	 ecx
  00032	bb ed ec eb ea	 mov	 ebx, -353637139		; eaebecedH
$LL106@ParseExtra:
  00037	31 18		 xor	 DWORD PTR [eax], ebx
  00039	83 c0 04	 add	 eax, 4
  0003c	49		 dec	 ecx
  0003d	75 f8		 jne	 SHORT $LL106@ParseExtra
  0003f	80 75 f4 ed	 xor	 BYTE PTR __k$506568[ebp+8], -19 ; ffffffedH
  00043	8d 45 ec	 lea	 eax, DWORD PTR __k$506568[ebp]
  00046	50		 push	 eax
  00047	8b cf		 mov	 ecx, edi
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z
  0004f	d9 9e 7c 01 00
	00		 fstp	 DWORD PTR [esi+380]
  00055	6a 02		 push	 2

; 110  : 	m_fXMLShadowScale = xElement.GetFloatAttribute_e( "ShadowScale" );

  00057	c7 45 ec be 84
	8a 8e		 mov	 DWORD PTR __k$506693[ebp], -1903524674 ; 8e8a84beH
  0005e	c7 45 f0 82 9b
	b8 89		 mov	 DWORD PTR __k$506693[ebp+4], -1984390270 ; 89b89b82H
  00065	8d 45 ec	 lea	 eax, DWORD PTR __k$506693[ebp]
  00068	c7 45 f4 8c 80
	8e 00		 mov	 DWORD PTR __k$506693[ebp+8], 9339020 ; 008e808cH
  0006f	59		 pop	 ecx
$LL212@ParseExtra:
  00070	31 18		 xor	 DWORD PTR [eax], ebx
  00072	83 c0 04	 add	 eax, 4
  00075	49		 dec	 ecx
  00076	75 f8		 jne	 SHORT $LL212@ParseExtra
  00078	6a 08		 push	 8
  0007a	58		 pop	 eax
$LL209@ParseExtra:
  0007b	8b c8		 mov	 ecx, eax
  0007d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00083	79 05		 jns	 SHORT $LN223@ParseExtra
  00085	49		 dec	 ecx
  00086	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00089	41		 inc	 ecx
$LN223@ParseExtra:
  0008a	b2 ed		 mov	 dl, -19			; ffffffedH
  0008c	2a d1		 sub	 dl, cl
  0008e	30 54 05 ec	 xor	 BYTE PTR __k$506693[ebp+eax], dl
  00092	40		 inc	 eax
  00093	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00096	7c e3		 jl	 SHORT $LL209@ParseExtra
  00098	8d 45 ec	 lea	 eax, DWORD PTR __k$506693[ebp]
  0009b	50		 push	 eax
  0009c	8b cf		 mov	 ecx, edi
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetFloatAttribute@ioXMLElement@@QBEMPBD@Z
  000a4	d9 9e 80 01 00
	00		 fstp	 DWORD PTR [esi+384]

; 111  : }

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	33 cd		 xor	 ecx, ebp
  000b1	5b		 pop	 ebx
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	c9		 leave
  000b8	c2 04 00	 ret	 4
?ParseExtraInfo@PetViewWnd@@UAEXAAVioXMLElement@@@Z ENDP ; PetViewWnd::ParseExtraInfo
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	_pImage$GSCopy$
PUBLIC	_szType$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?AddRenderImage@PetViewWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_pImage$GSCopy$ = -28					; size = 4
_this$GSCopy$ = -24					; size = 4
_szType$GSCopy$ = -20					; size = 4
__t$506964 = -16					; size = 8
__t$506843 = -16					; size = 7
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@PetViewWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; PetViewWnd::AddRenderImage, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szType$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi

; 123  : 	{
; 124  : 		SAFEDELETE(m_p3DBack);

  00015	89 45 ec	 mov	 DWORD PTR _szType$GSCopy$[ebp], eax
  00018	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  0001b	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
  00020	6a 04		 push	 4
  00022	89 45 e4	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00025	c7 45 f0 be 84
	8a 8e		 mov	 DWORD PTR __t$506843[ebp], -1903524674 ; 8e8a84beH
  0002c	31 7d f0	 xor	 DWORD PTR __t$506843[ebp], edi
  0002f	89 4d e8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00032	66 c7 45 f4 82
	9b		 mov	 WORD PTR __t$506843[ebp+4], 39810 ; 00009b82H
  00038	c6 45 f6 00	 mov	 BYTE PTR __t$506843[ebp+6], 0
  0003c	58		 pop	 eax
$LL113@AddRenderI:

; 117  : 	if( szType == "Shadow" )

  0003d	8b c8		 mov	 ecx, eax
  0003f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00045	79 05		 jns	 SHORT $LN242@AddRenderI
  00047	49		 dec	 ecx
  00048	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0004b	41		 inc	 ecx
$LN242@AddRenderI:
  0004c	b2 ed		 mov	 dl, -19			; ffffffedH
  0004e	2a d1		 sub	 dl, cl
  00050	30 54 05 f0	 xor	 BYTE PTR __t$506843[ebp+eax], dl
  00054	40		 inc	 eax
  00055	83 f8 06	 cmp	 eax, 6
  00058	7c e3		 jl	 SHORT $LL113@AddRenderI
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  0005d	8d 75 f0	 lea	 esi, DWORD PTR __t$506843[ebp]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL234@AddRenderI:
  00066	8a 08		 mov	 cl, BYTE PTR [eax]
  00068	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0006a	75 1a		 jne	 SHORT $LN235@AddRenderI
  0006c	84 c9		 test	 cl, cl
  0006e	74 12		 je	 SHORT $LN236@AddRenderI
  00070	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00073	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00076	75 0e		 jne	 SHORT $LN235@AddRenderI
  00078	83 c0 02	 add	 eax, 2
  0007b	83 c6 02	 add	 esi, 2
  0007e	84 c9		 test	 cl, cl
  00080	75 e4		 jne	 SHORT $LL234@AddRenderI
$LN236@AddRenderI:
  00082	33 c0		 xor	 eax, eax
  00084	eb 05		 jmp	 SHORT $LN237@AddRenderI
$LN235@AddRenderI:
  00086	1b c0		 sbb	 eax, eax
  00088	83 d8 ff	 sbb	 eax, -1
$LN237@AddRenderI:
  0008b	85 c0		 test	 eax, eax
  0008d	75 29		 jne	 SHORT $LN233@AddRenderI

; 118  : 	{
; 119  : 		SAFEDELETE(m_pShadow);

  0008f	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00092	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
  00098	85 c9		 test	 ecx, ecx
  0009a	74 0e		 je	 SHORT $LN5@AddRenderI
  0009c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009e	6a 01		 push	 1
  000a0	ff 50 40	 call	 DWORD PTR [eax+64]
  000a3	83 a6 70 01 00
	00 00		 and	 DWORD PTR [esi+368], 0
$LN5@AddRenderI:

; 120  : 		m_pShadow = pImage;

  000aa	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  000ad	89 86 70 01 00
	00		 mov	 DWORD PTR [esi+368], eax
  000b3	e9 9b 00 00 00	 jmp	 $LN1@AddRenderI
$LN233@AddRenderI:

; 121  : 	}
; 122  : 	else if( szType == "3D_Back" )

  000b8	6a 04		 push	 4
  000ba	c7 45 f0 de a8
	b4 a8		 mov	 DWORD PTR __t$506964[ebp], -1464555298 ; a8b4a8deH
  000c1	31 7d f0	 xor	 DWORD PTR __t$506964[ebp], edi
  000c4	c7 45 f4 8c 8f
	80 00		 mov	 DWORD PTR __t$506964[ebp+4], 8425356 ; 00808f8cH
  000cb	58		 pop	 eax
$LL219@AddRenderI:
  000cc	8b c8		 mov	 ecx, eax
  000ce	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000d4	79 05		 jns	 SHORT $LN243@AddRenderI
  000d6	49		 dec	 ecx
  000d7	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000da	41		 inc	 ecx
$LN243@AddRenderI:
  000db	b2 ed		 mov	 dl, -19			; ffffffedH
  000dd	2a d1		 sub	 dl, cl
  000df	30 54 05 f0	 xor	 BYTE PTR __t$506964[ebp+eax], dl
  000e3	40		 inc	 eax
  000e4	83 f8 07	 cmp	 eax, 7
  000e7	7c e3		 jl	 SHORT $LL219@AddRenderI
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000ec	8d 75 f0	 lea	 esi, DWORD PTR __t$506964[ebp]
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL238@AddRenderI:
  000f5	8a 08		 mov	 cl, BYTE PTR [eax]
  000f7	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000f9	75 1a		 jne	 SHORT $LN239@AddRenderI
  000fb	84 c9		 test	 cl, cl
  000fd	74 12		 je	 SHORT $LN240@AddRenderI
  000ff	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00102	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00105	75 0e		 jne	 SHORT $LN239@AddRenderI
  00107	83 c0 02	 add	 eax, 2
  0010a	83 c6 02	 add	 esi, 2
  0010d	84 c9		 test	 cl, cl
  0010f	75 e4		 jne	 SHORT $LL238@AddRenderI
$LN240@AddRenderI:
  00111	33 c0		 xor	 eax, eax
  00113	eb 05		 jmp	 SHORT $LN241@AddRenderI
$LN239@AddRenderI:
  00115	1b c0		 sbb	 eax, eax
  00117	83 d8 ff	 sbb	 eax, -1
$LN241@AddRenderI:
  0011a	85 c0		 test	 eax, eax
  0011c	75 26		 jne	 SHORT $LN3@AddRenderI

; 123  : 	{
; 124  : 		SAFEDELETE(m_p3DBack);

  0011e	8b 75 e8	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00121	8b 8e 6c 01 00
	00		 mov	 ecx, DWORD PTR [esi+364]
  00127	85 c9		 test	 ecx, ecx
  00129	74 0e		 je	 SHORT $LN2@AddRenderI
  0012b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0012d	6a 01		 push	 1
  0012f	ff 50 40	 call	 DWORD PTR [eax+64]
  00132	83 a6 6c 01 00
	00 00		 and	 DWORD PTR [esi+364], 0
$LN2@AddRenderI:

; 125  : 		m_p3DBack = pImage;

  00139	8b 45 e4	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0013c	89 86 6c 01 00
	00		 mov	 DWORD PTR [esi+364], eax

; 126  : 	}
; 127  : 	else

  00142	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 128  : 		ioWnd::AddRenderImage( szType, pImage );

  00144	ff 75 e4	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  00147	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0014a	ff 75 ec	 push	 DWORD PTR _szType$GSCopy$[ebp]
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 129  : }

  00153	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00156	5f		 pop	 edi
  00157	33 cd		 xor	 ecx, ebp
  00159	5e		 pop	 esi
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
?AddRenderImage@PetViewWnd@@MAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; PetViewWnd::AddRenderImage
_TEXT	ENDS
END
