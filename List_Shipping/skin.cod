; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\skin.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?Enabled@CSkin@@QAE_NXZ				; CSkin::Enabled
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\skin.cpp
;	COMDAT ?Enabled@CSkin@@QAE_NXZ
_TEXT	SEGMENT
?Enabled@CSkin@@QAE_NXZ PROC				; CSkin::Enabled, COMDAT
; _this$ = ecx

; 101  : 	return m_bEnabled;

  00000	8a 41 24	 mov	 al, BYTE PTR [ecx+36]

; 102  : }

  00003	c3		 ret	 0
?Enabled@CSkin@@QAE_NXZ ENDP				; CSkin::Enabled
_TEXT	ENDS
PUBLIC	?Hooked@CSkin@@QAE_NXZ				; CSkin::Hooked
; Function compile flags: /Ogsp
;	COMDAT ?Hooked@CSkin@@QAE_NXZ
_TEXT	SEGMENT
?Hooked@CSkin@@QAE_NXZ PROC				; CSkin::Hooked, COMDAT
; _this$ = ecx

; 181  : 	return m_bHooked;

  00000	8a 41 25	 mov	 al, BYTE PTR [ecx+37]

; 182  : }

  00003	c3		 ret	 0
?Hooked@CSkin@@QAE_NXZ ENDP				; CSkin::Hooked
_TEXT	ENDS
PUBLIC	?Width@CSkin@@QAEHXZ				; CSkin::Width
; Function compile flags: /Ogsp
;	COMDAT ?Width@CSkin@@QAEHXZ
_TEXT	SEGMENT
?Width@CSkin@@QAEHXZ PROC				; CSkin::Width, COMDAT
; _this$ = ecx

; 189  : 	return m_iWidth;

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 190  : }

  00003	c3		 ret	 0
?Width@CSkin@@QAEHXZ ENDP				; CSkin::Width
_TEXT	ENDS
PUBLIC	?Height@CSkin@@QAEHXZ				; CSkin::Height
; Function compile flags: /Ogsp
;	COMDAT ?Height@CSkin@@QAEHXZ
_TEXT	SEGMENT
?Height@CSkin@@QAEHXZ PROC				; CSkin::Height, COMDAT
; _this$ = ecx

; 197  : 	return m_iHeight;

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]

; 198  : }

  00003	c3		 ret	 0
?Height@CSkin@@QAEHXZ ENDP				; CSkin::Height
_TEXT	ENDS
PUBLIC	?HDC@CSkin@@QAEPAUHDC__@@XZ			; CSkin::HDC
; Function compile flags: /Ogsp
;	COMDAT ?HDC@CSkin@@QAEPAUHDC__@@XZ
_TEXT	SEGMENT
?HDC@CSkin@@QAEPAUHDC__@@XZ PROC			; CSkin::HDC, COMDAT
; _this$ = ecx

; 207  : 	return m_dcSkin;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 208  : }

  00003	c3		 ret	 0
?HDC@CSkin@@QAEPAUHDC__@@XZ ENDP			; CSkin::HDC
_TEXT	ENDS
PUBLIC	??_C@_06FJHKNKMG@BINARY?$AA@			; `string'
PUBLIC	?GetSkinData@CSkin@@AAE_NHH@Z			; CSkin::GetSkinData
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__FreeResource@4:PROC
EXTRN	__imp__ExtCreateRegion@12:PROC
EXTRN	__imp__SizeofResource@8:PROC
EXTRN	__imp__LoadResource@8:PROC
EXTRN	__imp__FindResourceA@12:PROC
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp__LoadBitmapA@8:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
;	COMDAT ??_C@_06FJHKNKMG@BINARY?$AA@
CONST	SEGMENT
??_C@_06FJHKNKMG@BINARY?$AA@ DB 'BINARY', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?GetSkinData@CSkin@@AAE_NHH@Z
_TEXT	SEGMENT
_bmp$ = -28						; size = 24
_hInstance$ = -4					; size = 4
_iSkinRegion$ = 8					; size = 4
_pSkinData$ = 12					; size = 4
_iSkinBitmap$ = 12					; size = 4
?GetSkinData@CSkin@@AAE_NHH@Z PROC			; CSkin::GetSkinData, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 217  : 	// get app instance handle
; 218  : 	HINSTANCE hInstance = GetModuleHandle(NULL);

  00008	33 ff		 xor	 edi, edi
  0000a	57		 push	 edi
  0000b	8b f1		 mov	 esi, ecx
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 219  : 	
; 220  : 	// -------------------------------------------------
; 221  : 	// retrieve the skin bitmap from resource.
; 222  : 	// -------------------------------------------------
; 223  : 	
; 224  : 	m_hBmp = LoadBitmap(hInstance, MAKEINTRESOURCE(iSkinBitmap));

  00013	0f b7 4d 0c	 movzx	 ecx, WORD PTR _iSkinBitmap$[ebp]
  00017	51		 push	 ecx
  00018	50		 push	 eax
  00019	89 45 fc	 mov	 DWORD PTR _hInstance$[ebp], eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00022	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 225  : 	if (!m_hBmp) return false;

  00025	3b c7		 cmp	 eax, edi
  00027	75 07		 jne	 SHORT $LN5@GetSkinDat
  00029	32 c0		 xor	 al, al
  0002b	e9 88 00 00 00	 jmp	 $LN6@GetSkinDat
$LN5@GetSkinDat:
  00030	53		 push	 ebx

; 226  : 	
; 227  : 	// get skin info
; 228  : 	BITMAP bmp;
; 229  : 	GetObject(m_hBmp, sizeof(bmp), &bmp);

  00031	8d 4d e4	 lea	 ecx, DWORD PTR _bmp$[ebp]
  00034	51		 push	 ecx
  00035	6a 18		 push	 24			; 00000018H
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12

; 230  : 	
; 231  : 	// get skin dimensions
; 232  : 	m_iWidth = bmp.bmWidth;

  0003e	8b 45 e8	 mov	 eax, DWORD PTR _bmp$[ebp+4]
  00041	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 233  : 	m_iHeight = bmp.bmHeight;

  00044	8b 45 ec	 mov	 eax, DWORD PTR _bmp$[ebp+8]
  00047	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 234  : 	
; 235  : 	
; 236  : 	// -------------------------------------------------
; 237  : 	// then, we retrieve the skin region from resource.
; 238  : 	// -------------------------------------------------
; 239  : 	
; 240  : 	// ask resource for our skin.
; 241  : 	HRSRC hrSkin = FindResource(hInstance, MAKEINTRESOURCE(iSkinRegion),"BINARY");

  0004a	0f b7 45 08	 movzx	 eax, WORD PTR _iSkinRegion$[ebp]
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
  00053	50		 push	 eax
  00054	ff 75 fc	 push	 DWORD PTR _hInstance$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  0005d	8b d8		 mov	 ebx, eax

; 242  : 	if (!hrSkin) return false;

  0005f	3b df		 cmp	 ebx, edi
  00061	74 41		 je	 SHORT $LN9@GetSkinDat

; 243  : 	
; 244  : 	// this is standard "BINARY" retrieval.
; 245  : 	LPRGNDATA pSkinData = (LPRGNDATA)LoadResource(hInstance, hrSkin);

  00063	53		 push	 ebx
  00064	ff 75 fc	 push	 DWORD PTR _hInstance$[ebp]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  0006d	89 45 0c	 mov	 DWORD PTR _pSkinData$[ebp], eax

; 246  : 	if (!pSkinData) return false;

  00070	3b c7		 cmp	 eax, edi
  00072	74 30		 je	 SHORT $LN9@GetSkinDat

; 247  : 	
; 248  : 	// create the region using the binary data.
; 249  : 	m_rgnSkin = ExtCreateRegion(NULL, SizeofResource(NULL,hrSkin), pSkinData);

  00074	50		 push	 eax
  00075	53		 push	 ebx
  00076	57		 push	 edi
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SizeofResource@8
  0007d	50		 push	 eax
  0007e	57		 push	 edi
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExtCreateRegion@12

; 250  : 	
; 251  : 	// free the allocated resource
; 252  : 	FreeResource(pSkinData);

  00085	ff 75 0c	 push	 DWORD PTR _pSkinData$[ebp]
  00088	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeResource@4

; 253  : 	
; 254  : 	// check if we have the skin at hand.
; 255  : 	if (!m_rgnSkin) return false;

  00091	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  00094	74 0e		 je	 SHORT $LN9@GetSkinDat

; 256  : 	
; 257  : 	
; 258  : 	// -------------------------------------------------
; 259  : 	// well, things are looking good...
; 260  : 	// as a quick providence, just create and keep
; 261  : 	// a device context for our later blittings.
; 262  : 	// -------------------------------------------------
; 263  : 	
; 264  : 	// create a context compatible with the user desktop
; 265  : 	m_dcSkin = CreateCompatibleDC(0);

  00096	57		 push	 edi
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  0009d	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 266  : 	if (!m_dcSkin) return false;

  000a0	3b c7		 cmp	 eax, edi
  000a2	75 04		 jne	 SHORT $LN1@GetSkinDat
$LN9@GetSkinDat:
  000a4	32 c0		 xor	 al, al
  000a6	eb 0f		 jmp	 SHORT $LN8@GetSkinDat
$LN1@GetSkinDat:

; 267  : 	
; 268  : 	// select our bitmap
; 269  : 	m_hOldBmp = (HBITMAP)SelectObject(m_dcSkin, m_hBmp);

  000a8	ff 76 14	 push	 DWORD PTR [esi+20]
  000ab	50		 push	 eax
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  000b2	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 270  : 	
; 271  : 	
; 272  : 	// -------------------------------------------------
; 273  : 	// done
; 274  : 	// -------------------------------------------------
; 275  : 	return true;

  000b5	b0 01		 mov	 al, 1
$LN8@GetSkinDat:
  000b7	5b		 pop	 ebx
$LN6@GetSkinDat:
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi

; 276  : }

  000ba	c9		 leave
  000bb	c2 08 00	 ret	 8
?GetSkinData@CSkin@@AAE_NHH@Z ENDP			; CSkin::GetSkinData
_TEXT	ENDS
PUBLIC	??_C@_04NHPAFEHJ@skin?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?SkinWndProc@@YGJPAUHWND__@@IIJ@Z		; SkinWndProc
EXTRN	__imp__CallWindowProcA@20:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__GetPropA@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_04NHPAFEHJ@skin?$AA@
CONST	SEGMENT
??_C@_04NHPAFEHJ@skin?$AA@ DB 'skin', 00H		; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?SkinWndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_ps$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_uMessage$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?SkinWndProc@@YGJPAUHWND__@@IIJ@Z PROC			; SkinWndProc, COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]

; 288  : 	// we will need a pointer to the associated class instance
; 289  : 	// (it was stored in the window before, remember?)
; 290  : 	CSkin *pSkin = (CSkin*)GetProp(hWnd, "skin");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_04NHPAFEHJ@skin?$AA@
  0001b	57		 push	 edi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPropA@8
  00022	8b f0		 mov	 esi, eax

; 291  : 	
; 292  : 	// to handle WM_PAINT
; 293  : 	PAINTSTRUCT ps;
; 294  : 	
; 295  : 	// if we fail to get our class instance, we can't handle anything.
; 296  : 	if (!pSkin) return DefWindowProc(hWnd,uMessage,wParam,lParam);

  00024	33 db		 xor	 ebx, ebx
  00026	3b f3		 cmp	 esi, ebx
  00028	75 12		 jne	 SHORT $LN5@SkinWndPro
  0002a	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  0002d	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00030	ff 75 0c	 push	 DWORD PTR _uMessage$[ebp]
  00033	57		 push	 edi
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  0003a	eb 64		 jmp	 SHORT $LN6@SkinWndPro
$LN5@SkinWndPro:

; 297  : 	
; 298  : 	switch(uMessage)

  0003c	83 7d 0c 0f	 cmp	 DWORD PTR _uMessage$[ebp], 15 ; 0000000fH
  00040	74 1a		 je	 SHORT $LN2@SkinWndPro
  00042	81 7d 0c 01 02
	00 00		 cmp	 DWORD PTR _uMessage$[ebp], 513 ; 00000201H
  00049	75 42		 jne	 SHORT $LN3@SkinWndPro

; 314  : 			break;
; 315  : 		}
; 316  : 		
; 317  :     case WM_LBUTTONDOWN:
; 318  : 		{
; 319  : 			// ---------------------------------------------------------
; 320  : 			// this is a common trick for easy dragging of the window.
; 321  : 			// this message fools windows telling that the user is
; 322  : 			// actually dragging the application caption bar.
; 323  : 			// ---------------------------------------------------------
; 324  : 			SendMessage(hWnd, WM_NCLBUTTONDOWN, HTCAPTION,NULL);

  0004b	53		 push	 ebx
  0004c	6a 02		 push	 2
  0004e	68 a1 00 00 00	 push	 161			; 000000a1H
  00053	57		 push	 edi
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 325  : 			break;

  0005a	eb 31		 jmp	 SHORT $LN3@SkinWndPro
$LN2@SkinWndPro:

; 299  : 	{
; 300  : 		
; 301  :     case WM_PAINT:
; 302  : 		{
; 303  : 			// ---------------------------------------------------------
; 304  : 			// here we just need to blit our skin
; 305  : 			// directly to the device context
; 306  : 			// passed by the painting message.
; 307  : 			// ---------------------------------------------------------
; 308  : 			BeginPaint(hWnd,&ps);

  0005c	8d 45 bc	 lea	 eax, DWORD PTR _ps$[ebp]
  0005f	50		 push	 eax
  00060	57		 push	 edi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8

; 309  : 			
; 310  : 			// blit the skin
; 311  : 			BitBlt(ps.hdc,0,0,pSkin->Width(),pSkin->Height(),pSkin->HDC(),0,0,SRCCOPY);

  00067	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  0006c	53		 push	 ebx
  0006d	53		 push	 ebx
  0006e	ff 76 10	 push	 DWORD PTR [esi+16]
  00071	ff 76 20	 push	 DWORD PTR [esi+32]
  00074	ff 76 1c	 push	 DWORD PTR [esi+28]
  00077	53		 push	 ebx
  00078	53		 push	 ebx
  00079	ff 75 bc	 push	 DWORD PTR _ps$[ebp]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 312  : 			
; 313  : 			EndPaint(hWnd,&ps);

  00082	8d 45 bc	 lea	 eax, DWORD PTR _ps$[ebp]
  00085	50		 push	 eax
  00086	57		 push	 edi
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8
$LN3@SkinWndPro:

; 326  : 		}
; 327  : 		
; 328  : 	}
; 329  : 	
; 330  : 	// ---------------------------------------------------------
; 331  : 	// call the default window procedure to keep things going.
; 332  : 	// ---------------------------------------------------------
; 333  : 	return CallWindowProc(pSkin->m_OldWndProc, hWnd, uMessage, wParam, lParam);

  0008d	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00090	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00093	ff 75 0c	 push	 DWORD PTR _uMessage$[ebp]
  00096	57		 push	 edi
  00097	ff 76 08	 push	 DWORD PTR [esi+8]
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
$LN6@SkinWndPro:

; 334  : }

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	33 cd		 xor	 ecx, ebp
  000a7	5b		 pop	 ebx
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	c9		 leave
  000ae	c2 10 00	 ret	 16			; 00000010H
?SkinWndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; SkinWndProc
_TEXT	ENDS
PUBLIC	??_C@_0BN@FCDBGAPN@Unable?5to?5retrieve?5the?5skin?4?$AA@ ; `string'
PUBLIC	__TI2PAD
PUBLIC	??_7CSkin@@6B@					; CSkin::`vftable'
PUBLIC	??0CSkin@@QAE@HH@Z				; CSkin::CSkin
PUBLIC	??_R4CSkin@@6B@					; CSkin::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkin@@@8				; CSkin `RTTI Type Descriptor'
PUBLIC	??_R3CSkin@@8					; CSkin::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkin@@8					; CSkin::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkin@@8				; CSkin::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSkin@@UAEPAXI@Z:PROC			; CSkin::`vector deleting destructor'
;	COMDAT ??_R0PAX@8
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkin@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkin@@8 DD FLAT:??_R0?AVCSkin@@@8	; CSkin::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkin@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkin@@8
rdata$r	SEGMENT
??_R2CSkin@@8 DD FLAT:??_R1A@?0A@EA@CSkin@@8		; CSkin::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSkin@@8
rdata$r	SEGMENT
??_R3CSkin@@8 DD 00H					; CSkin::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSkin@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkin@@@8
_DATA	SEGMENT
??_R0?AVCSkin@@@8 DD FLAT:??_7type_info@@6B@		; CSkin `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkin@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSkin@@6B@
rdata$r	SEGMENT
??_R4CSkin@@6B@ DD 00H					; CSkin::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkin@@@8
	DD	FLAT:??_R3CSkin@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BN@FCDBGAPN@Unable?5to?5retrieve?5the?5skin?4?$AA@
CONST	SEGMENT
??_C@_0BN@FCDBGAPN@Unable?5to?5retrieve?5the?5skin?4?$AA@ DB 'Unable to r'
	DB	'etrieve the skin.', 00H			; `string'
CONST	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT ??_7CSkin@@6B@
CONST	SEGMENT
??_7CSkin@@6B@ DD FLAT:??_R4CSkin@@6B@			; CSkin::`vftable'
	DD	FLAT:??_ECSkin@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0CSkin@@QAE@HH@Z
_TEXT	SEGMENT
_iSkinRegion$ = 8					; size = 4
$T505329 = 12						; size = 4
_iSkinBitmap$ = 12					; size = 4
??0CSkin@@QAE@HH@Z PROC					; CSkin::CSkin, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 28   : 	m_bEnabled = false;
; 29   : 	m_bHooked = false;
; 30   : 
; 31   : 
; 32   : 	// try to retrieve the skin data from resource.
; 33   : 	if ( !GetSkinData(iSkinRegion, iSkinBitmap) )

  00004	ff 75 0c	 push	 DWORD PTR _iSkinBitmap$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _iSkinRegion$[ebp]
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSkin@@6B@
  00012	66 c7 46 24 00
	00		 mov	 WORD PTR [esi+36], 0
  00018	e8 00 00 00 00	 call	 ?GetSkinData@CSkin@@AAE_NHH@Z ; CSkin::GetSkinData
  0001d	84 c0		 test	 al, al
  0001f	75 15		 jne	 SHORT $LN1@CSkin

; 34   : 		throw ("Unable to retrieve the skin.");

  00021	68 00 00 00 00	 push	 OFFSET __TI2PAD
  00026	8d 45 0c	 lea	 eax, DWORD PTR $T505329[ebp]
  00029	50		 push	 eax
  0002a	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T505329[ebp], OFFSET ??_C@_0BN@FCDBGAPN@Unable?5to?5retrieve?5the?5skin?4?$AA@
  00031	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@CSkin:
$LN1@CSkin:

; 35   : }

  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN4@CSkin:
??0CSkin@@QAE@HH@Z ENDP					; CSkin::CSkin
_TEXT	ENDS
PUBLIC	?Enable@CSkin@@QAE_N_N@Z			; CSkin::Enable
EXTRN	__imp__InvalidateRect@12:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Enable@CSkin@@QAE_N_N@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 1
?Enable@CSkin@@QAE_N_N@Z PROC				; CSkin::Enable, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 82   : 	// refuse to enable if there is no window subclassed yet.
; 83   : 	if (!Hooked()) return false;

  00003	80 79 25 00	 cmp	 BYTE PTR [ecx+37], 0
  00007	75 04		 jne	 SHORT $LN1@Enable
  00009	32 c0		 xor	 al, al
  0000b	eb 15		 jmp	 SHORT $LN2@Enable
$LN1@Enable:

; 84   : 	
; 85   : 	// toggle
; 86   : 	m_bEnabled = bEnable;

  0000d	8a 45 08	 mov	 al, BYTE PTR _bEnable$[ebp]

; 87   : 	
; 88   : 	// force window repainting
; 89   : 	InvalidateRect(m_hWnd, NULL, TRUE);

  00010	6a 01		 push	 1
  00012	6a 00		 push	 0
  00014	ff 71 04	 push	 DWORD PTR [ecx+4]
  00017	88 41 24	 mov	 BYTE PTR [ecx+36], al
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 90   : 	
; 91   : 	return true;

  00020	b0 01		 mov	 al, 1
$LN2@Enable:

; 92   : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?Enable@CSkin@@QAE_N_N@Z ENDP				; CSkin::Enable
_TEXT	ENDS
PUBLIC	?UnHook@CSkin@@QAE_NXZ				; CSkin::UnHook
EXTRN	__imp__RemovePropA@8:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__SetWindowRgn@12:PROC
; Function compile flags: /Ogsp
;	COMDAT ?UnHook@CSkin@@QAE_NXZ
_TEXT	SEGMENT
?UnHook@CSkin@@QAE_NXZ PROC				; CSkin::UnHook, COMDAT
; _this$ = ecx

; 147  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 148  : 	// just to be safe we'll check this
; 149  : 	WNDPROC OurWnd;
; 150  : 	
; 151  : 	// cannot unsubclass if there is no window subclassed
; 152  : 	if (!Hooked()) return false;

  00003	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  00007	75 04		 jne	 SHORT $LN1@UnHook
  00009	32 c0		 xor	 al, al
  0000b	5e		 pop	 esi

; 172  : }

  0000c	c3		 ret	 0
$LN1@UnHook:
  0000d	57		 push	 edi

; 153  : 	
; 154  : 	// remove the skin region from the window
; 155  : 	SetWindowRgn(m_hWnd, NULL, true);

  0000e	6a 01		 push	 1
  00010	6a 00		 push	 0
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowRgn@12

; 156  : 	
; 157  : 	// unsubclass the window procedure
; 158  : 	OurWnd = (WNDPROC)SetWindowLong(m_hWnd, GWL_WNDPROC, (LONG)m_OldWndProc);

  0001b	ff 76 08	 push	 DWORD PTR [esi+8]
  0001e	6a fc		 push	 -4			; fffffffcH
  00020	ff 76 04	 push	 DWORD PTR [esi+4]
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 159  : 	
; 160  : 	// remove the pointer to our class instance, but if we fail we don't care.
; 161  : 	RemoveProp(m_hWnd, "skin");

  00029	68 00 00 00 00	 push	 OFFSET ??_C@_04NHPAFEHJ@skin?$AA@
  0002e	ff 76 04	 push	 DWORD PTR [esi+4]
  00031	8b f8		 mov	 edi, eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RemovePropA@8

; 162  : 	
; 163  : 	// update flag - if we can't get our window procedure address again,
; 164  : 	// we failed to unhook the window.
; 165  : 	m_bHooked = ( OurWnd ? false : true );
; 166  : 	
; 167  : 	// force window repainting
; 168  : 	InvalidateRect(m_hWnd, NULL, TRUE);

  00039	6a 01		 push	 1
  0003b	6a 00		 push	 0
  0003d	ff 76 04	 push	 DWORD PTR [esi+4]
  00040	85 ff		 test	 edi, edi
  00042	0f 94 c0	 sete	 al
  00045	88 46 25	 mov	 BYTE PTR [esi+37], al
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 169  : 	
; 170  : 	// successful return if we're unhooked.
; 171  : 	return !m_bHooked;

  0004e	33 c0		 xor	 eax, eax
  00050	38 46 25	 cmp	 BYTE PTR [esi+37], al
  00053	5f		 pop	 edi
  00054	0f 94 c0	 sete	 al
  00057	5e		 pop	 esi

; 172  : }

  00058	c3		 ret	 0
?UnHook@CSkin@@QAE_NXZ ENDP				; CSkin::UnHook
_TEXT	ENDS
PUBLIC	??1CSkin@@UAE@XZ				; CSkin::~CSkin
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__DeleteDC@4:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1CSkin@@UAE@XZ
_TEXT	SEGMENT
??1CSkin@@UAE@XZ PROC					; CSkin::~CSkin, COMDAT
; _this$ = ecx

; 63   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSkin@@6B@

; 64   : 	// unhook the window
; 65   : 	UnHook();

  0000a	e8 00 00 00 00	 call	 ?UnHook@CSkin@@QAE_NXZ	; CSkin::UnHook

; 66   : 	
; 67   : 	// free bitmaps and device context
; 68   : 	if (m_dcSkin) { SelectObject(m_dcSkin, m_hOldBmp); DeleteDC(m_dcSkin); }

  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	85 c0		 test	 eax, eax
  00014	74 13		 je	 SHORT $LN3@CSkin@2
  00016	ff 76 18	 push	 DWORD PTR [esi+24]
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00020	ff 76 10	 push	 DWORD PTR [esi+16]
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
$LN3@CSkin@2:

; 69   : 	if (m_hBmp) DeleteObject(m_hBmp);

  00029	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__DeleteObject@4
  00032	85 c0		 test	 eax, eax
  00034	74 03		 je	 SHORT $LN2@CSkin@2
  00036	50		 push	 eax
  00037	ff d7		 call	 edi
$LN2@CSkin@2:

; 70   : 	
; 71   : 	// free skin region
; 72   : 	if (m_rgnSkin) DeleteObject(m_rgnSkin);

  00039	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  0003c	85 f6		 test	 esi, esi
  0003e	74 03		 je	 SHORT $LN1@CSkin@2
  00040	56		 push	 esi
  00041	ff d7		 call	 edi
$LN1@CSkin@2:

; 73   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	c3		 ret	 0
??1CSkin@@UAE@XZ ENDP					; CSkin::~CSkin
_TEXT	ENDS
PUBLIC	?Hook@CSkin@@QAE_NPAUHWND__@@@Z			; CSkin::Hook
EXTRN	__imp__SetPropA@12:PROC
; Function compile flags: /Ogsp
;	COMDAT ?Hook@CSkin@@QAE_NPAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?Hook@CSkin@@QAE_NPAUHWND__@@@Z PROC			; CSkin::Hook, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 111  : 	// unsubclass any other window
; 112  : 	if (Hooked()) UnHook();

  00006	80 7e 25 00	 cmp	 BYTE PTR [esi+37], 0
  0000a	74 05		 je	 SHORT $LN2@Hook
  0000c	e8 00 00 00 00	 call	 ?UnHook@CSkin@@QAE_NXZ	; CSkin::UnHook
$LN2@Hook:

; 113  : 	
; 114  : 	// this will be our new subclassed window
; 115  : 	m_hWnd = hWnd;

  00011	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]

; 116  : 	
; 117  : 	// set the skin region to the window
; 118  : 	SetWindowRgn(m_hWnd, m_rgnSkin, true);

  00014	6a 01		 push	 1
  00016	ff 76 0c	 push	 DWORD PTR [esi+12]
  00019	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001c	50		 push	 eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowRgn@12

; 119  : 	
; 120  : 	// subclass the window procedure
; 121  : 	m_OldWndProc = (WNDPROC)SetWindowLong(m_hWnd, GWL_WNDPROC, (LONG)SkinWndProc);

  00023	68 00 00 00 00	 push	 OFFSET ?SkinWndProc@@YGJPAUHWND__@@IIJ@Z ; SkinWndProc
  00028	6a fc		 push	 -4			; fffffffcH
  0002a	ff 76 04	 push	 DWORD PTR [esi+4]
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 122  : 	
; 123  : 	// store a pointer to our class instance inside the window procedure.
; 124  : 	if (!SetProp(m_hWnd, "skin", (void*)this))

  00033	56		 push	 esi
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_04NHPAFEHJ@skin?$AA@
  00039	ff 76 04	 push	 DWORD PTR [esi+4]
  0003c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetPropA@12
  00045	85 c0		 test	 eax, eax
  00047	75 0b		 jne	 SHORT $LN1@Hook

; 125  : 	{
; 126  : 		// if we fail to do so, we just can't activate the skin.
; 127  : 		UnHook();

  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?UnHook@CSkin@@QAE_NXZ	; CSkin::UnHook

; 128  : 		return false;

  00050	32 c0		 xor	 al, al
  00052	eb 1a		 jmp	 SHORT $LN3@Hook
$LN1@Hook:

; 129  : 	}
; 130  : 	
; 131  : 	// update flag
; 132  : 	m_bHooked = ( m_OldWndProc ? true : false );

  00054	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0

; 133  : 	
; 134  : 	// force window repainting
; 135  : 	InvalidateRect(m_hWnd, NULL, TRUE);

  00058	6a 01		 push	 1
  0005a	6a 00		 push	 0
  0005c	ff 76 04	 push	 DWORD PTR [esi+4]
  0005f	0f 95 c0	 setne	 al
  00062	88 46 25	 mov	 BYTE PTR [esi+37], al
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 136  : 	
; 137  : 	// successful return if we're hooked.
; 138  : 	return m_bHooked;

  0006b	8a 46 25	 mov	 al, BYTE PTR [esi+37]
$LN3@Hook:
  0006e	5e		 pop	 esi

; 139  : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?Hook@CSkin@@QAE_NPAUHWND__@@@Z ENDP			; CSkin::Hook
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GCSkin@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkin@@UAEPAXI@Z PROC				; CSkin::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSkin@@UAE@XZ	; CSkin::~CSkin
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GCSkin@@UAEPAXI@Z ENDP				; CSkin::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CSkin@@QAE@PAUHWND__@@HH@Z			; CSkin::CSkin
; Function compile flags: /Ogsp
;	COMDAT ??0CSkin@@QAE@PAUHWND__@@HH@Z
_TEXT	SEGMENT
$T505359 = -40						; size = 40
_hWnd$ = 8						; size = 4
_iSkinRegion$ = 12					; size = 4
_iSkinBitmap$ = 16					; size = 4
??0CSkin@@QAE@PAUHWND__@@HH@Z PROC			; CSkin::CSkin, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi

; 46   : 	
; 47   : 	// initialize
; 48   : 	CSkin(iSkinRegion, iSkinBitmap);

  00007	ff 75 10	 push	 DWORD PTR _iSkinBitmap$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 75 0c	 push	 DWORD PTR _iSkinRegion$[ebp]
  0000f	8d 4d d8	 lea	 ecx, DWORD PTR $T505359[ebp]
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSkin@@6B@
  00018	e8 00 00 00 00	 call	 ??0CSkin@@QAE@HH@Z	; CSkin::CSkin
  0001d	8d 4d d8	 lea	 ecx, DWORD PTR $T505359[ebp]
  00020	e8 00 00 00 00	 call	 ??1CSkin@@UAE@XZ	; CSkin::~CSkin

; 49   : 	
; 50   : 	// subclass
; 51   : 	Hook(hWnd);

  00025	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?Hook@CSkin@@QAE_NPAUHWND__@@@Z ; CSkin::Hook

; 52   : 	
; 53   : 	// enable
; 54   : 	Enable(true);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?Enable@CSkin@@QAE_N_N@Z ; CSkin::Enable

; 55   : }

  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi
  0003b	c9		 leave
  0003c	c2 0c 00	 ret	 12			; 0000000cH
??0CSkin@@QAE@PAUHWND__@@HH@Z ENDP			; CSkin::CSkin
_TEXT	ENDS
END
