; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioOtherMarker.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
;	COMDAT ?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@2HB DD 01H ; std::deque<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_EEM_DS
CONST	ENDS
PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?return5@@YAIXZ					; return5
; Function compile flags: /Ogsp
;	COMDAT ?return5@@YAIXZ
_TEXT	SEGMENT
?return5@@YAIXZ PROC					; return5, COMDAT

; 18   : 	__forceinline unsigned int return5() { __asm mov eax, 5 };

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?return5@@YAIXZ ENDP					; return5
_TEXT	ENDS
PUBLIC	?return10@@YAIXZ				; return10
; Function compile flags: /Ogsp
;	COMDAT ?return10@@YAIXZ
_TEXT	SEGMENT
?return10@@YAIXZ PROC					; return10, COMDAT

; 21   : 	__forceinline unsigned int return10() { __asm mov eax, 10 };

  00000	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00005	c3		 ret	 0
?return10@@YAIXZ ENDP					; return10
_TEXT	ENDS
PUBLIC	?IsOwnerChar@ioBaseChar@@QBE_NXZ		; ioBaseChar::IsOwnerChar
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?IsOwnerChar@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?IsOwnerChar@ioBaseChar@@QBE_NXZ PROC			; ioBaseChar::IsOwnerChar, COMDAT
; _this$ = ecx

; 1467 : 	inline bool IsOwnerChar() const { return m_bOwnerChar; }

  00000	8a 81 84 13 00
	00		 mov	 al, BYTE PTR [ecx+4996]
  00006	c3		 ret	 0
?IsOwnerChar@ioBaseChar@@QBE_NXZ ENDP			; ioBaseChar::IsOwnerChar
_TEXT	ENDS
PUBLIC	?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ; ioBaseChar::GetTargetRot
; Function compile flags: /Ogsp
;	COMDAT ?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ
_TEXT	SEGMENT
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ PROC	; ioBaseChar::GetTargetRot, COMDAT
; _this$ = ecx

; 2599 : 	inline const D3DXQUATERNION& GetTargetRot() const { return m_qtTargetRot; }

  00000	8d 81 a4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1700]
  00006	c3		 ret	 0
?GetTargetRot@ioBaseChar@@QBEABUD3DXQUATERNION@@XZ ENDP	; ioBaseChar::GetTargetRot
_TEXT	ENDS
PUBLIC	??_7ioOtherMarker@@6B@				; ioOtherMarker::`vftable'
PUBLIC	??0ioOtherMarker@@QAE@PAVioBaseChar@@@Z		; ioOtherMarker::ioOtherMarker
PUBLIC	??_R4ioOtherMarker@@6B@				; ioOtherMarker::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioOtherMarker@@@8			; ioOtherMarker `RTTI Type Descriptor'
PUBLIC	??_R3ioOtherMarker@@8				; ioOtherMarker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioOtherMarker@@8				; ioOtherMarker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioOtherMarker@@8			; ioOtherMarker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioTargetMarker@@8			; ioTargetMarker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioTargetMarker@@@8			; ioTargetMarker `RTTI Type Descriptor'
PUBLIC	??_R3ioTargetMarker@@8				; ioTargetMarker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioTargetMarker@@8				; ioTargetMarker::`RTTI Base Class Array'
PUBLIC	?SetMarkerState@ioOtherMarker@@UAEXPAVioPlayStage@@W4MarkerState@ioTargetMarker@@@Z ; ioOtherMarker::SetMarkerState
PUBLIC	?CreateEffect@ioOtherMarker@@MAEKPAVioPlayStage@@ABVioHashString@@@Z ; ioOtherMarker::CreateEffect
PUBLIC	?Update@ioOtherMarker@@UAEXPAVioPlayStage@@@Z	; ioOtherMarker::Update
PUBLIC	?GetMarkerType@ioOtherMarker@@UBE?AW4MarkerType@ioTargetMarker@@XZ ; ioOtherMarker::GetMarkerType
EXTRN	??0ioTargetMarker@@QAE@PAVioBaseChar@@@Z:PROC	; ioTargetMarker::ioTargetMarker
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SetTarget@ioTargetMarker@@UAEXABVioHashString@@_N@Z:PROC ; ioTargetMarker::SetTarget
EXTRN	?IsTarget@ioTargetMarker@@UAE_NXZ:PROC		; ioTargetMarker::IsTarget
EXTRN	??_EioOtherMarker@@UAEPAXI@Z:PROC		; ioOtherMarker::`vector deleting destructor'
;	COMDAT ??_R2ioTargetMarker@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioothermarker.cpp
rdata$r	SEGMENT
??_R2ioTargetMarker@@8 DD FLAT:??_R1A@?0A@EA@ioTargetMarker@@8 ; ioTargetMarker::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioTargetMarker@@8
rdata$r	SEGMENT
??_R3ioTargetMarker@@8 DD 00H				; ioTargetMarker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioTargetMarker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioTargetMarker@@@8
_DATA	SEGMENT
??_R0?AVioTargetMarker@@@8 DD FLAT:??_7type_info@@6B@	; ioTargetMarker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioTargetMarker@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioTargetMarker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioTargetMarker@@8 DD FLAT:??_R0?AVioTargetMarker@@@8 ; ioTargetMarker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioTargetMarker@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioOtherMarker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioOtherMarker@@8 DD FLAT:??_R0?AVioOtherMarker@@@8 ; ioOtherMarker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioOtherMarker@@8
rdata$r	ENDS
;	COMDAT ??_R2ioOtherMarker@@8
rdata$r	SEGMENT
??_R2ioOtherMarker@@8 DD FLAT:??_R1A@?0A@EA@ioOtherMarker@@8 ; ioOtherMarker::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioTargetMarker@@8
rdata$r	ENDS
;	COMDAT ??_R3ioOtherMarker@@8
rdata$r	SEGMENT
??_R3ioOtherMarker@@8 DD 00H				; ioOtherMarker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioOtherMarker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioOtherMarker@@@8
_DATA	SEGMENT
??_R0?AVioOtherMarker@@@8 DD FLAT:??_7type_info@@6B@	; ioOtherMarker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioOtherMarker@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioOtherMarker@@6B@
rdata$r	SEGMENT
??_R4ioOtherMarker@@6B@ DD 00H				; ioOtherMarker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioOtherMarker@@@8
	DD	FLAT:??_R3ioOtherMarker@@8
rdata$r	ENDS
;	COMDAT ??_7ioOtherMarker@@6B@
CONST	SEGMENT
??_7ioOtherMarker@@6B@ DD FLAT:??_R4ioOtherMarker@@6B@	; ioOtherMarker::`vftable'
	DD	FLAT:?SetMarkerState@ioOtherMarker@@UAEXPAVioPlayStage@@W4MarkerState@ioTargetMarker@@@Z
	DD	FLAT:?SetTarget@ioTargetMarker@@UAEXABVioHashString@@_N@Z
	DD	FLAT:?IsTarget@ioTargetMarker@@UAE_NXZ
	DD	FLAT:?CreateEffect@ioOtherMarker@@MAEKPAVioPlayStage@@ABVioHashString@@@Z
	DD	FLAT:?Update@ioOtherMarker@@UAEXPAVioPlayStage@@@Z
	DD	FLAT:?GetMarkerType@ioOtherMarker@@UBE?AW4MarkerType@ioTargetMarker@@XZ
	DD	FLAT:??_EioOtherMarker@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioOtherMarker@@QAE@PAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
??0ioOtherMarker@@QAE@PAVioBaseChar@@@Z PROC		; ioOtherMarker::ioOtherMarker, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0ioTargetMarker@@QAE@PAVioBaseChar@@@Z ; ioTargetMarker::ioTargetMarker
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioOtherMarker@@6B@

; 13   : }

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0ioOtherMarker@@QAE@PAVioBaseChar@@@Z ENDP		; ioOtherMarker::ioOtherMarker
_TEXT	ENDS
PUBLIC	??1ioOtherMarker@@UAE@XZ			; ioOtherMarker::~ioOtherMarker
EXTRN	??1ioTargetMarker@@UAE@XZ:PROC			; ioTargetMarker::~ioTargetMarker
; Function compile flags: /Ogsp
;	COMDAT ??1ioOtherMarker@@UAE@XZ
_TEXT	SEGMENT
??1ioOtherMarker@@UAE@XZ PROC				; ioOtherMarker::~ioOtherMarker, COMDAT
; _this$ = ecx

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioOtherMarker@@6B@

; 17   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioTargetMarker@@UAE@XZ ; ioTargetMarker::~ioTargetMarker
??1ioOtherMarker@@UAE@XZ ENDP				; ioOtherMarker::~ioOtherMarker
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetMarkerType@ioOtherMarker@@UBE?AW4MarkerType@ioTargetMarker@@XZ
_TEXT	SEGMENT
?GetMarkerType@ioOtherMarker@@UBE?AW4MarkerType@ioTargetMarker@@XZ PROC ; ioOtherMarker::GetMarkerType, COMDAT
; _this$ = ecx

; 21   : 	return MT_OTHER_MARKER;

  00000	6a 07		 push	 7
  00002	58		 pop	 eax

; 22   : }

  00003	c3		 ret	 0
?GetMarkerType@ioOtherMarker@@UBE?AW4MarkerType@ioTargetMarker@@XZ ENDP ; ioOtherMarker::GetMarkerType
_TEXT	ENDS
EXTRN	?SetMarkerState@ioTargetMarker@@UAEXPAVioPlayStage@@W4MarkerState@1@@Z:PROC ; ioTargetMarker::SetMarkerState
; Function compile flags: /Ogsp
;	COMDAT ?SetMarkerState@ioOtherMarker@@UAEXPAVioPlayStage@@W4MarkerState@ioTargetMarker@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
_eState$ = 12						; size = 4
?SetMarkerState@ioOtherMarker@@UAEXPAVioPlayStage@@W4MarkerState@ioTargetMarker@@@Z PROC ; ioOtherMarker::SetMarkerState, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : }

  00003	5d		 pop	 ebp

; 26   : 	ioTargetMarker::SetMarkerState( pStage, eState );

  00004	e9 00 00 00 00	 jmp	 ?SetMarkerState@ioTargetMarker@@UAEXPAVioPlayStage@@W4MarkerState@1@@Z ; ioTargetMarker::SetMarkerState
?SetMarkerState@ioOtherMarker@@UAEXPAVioPlayStage@@W4MarkerState@ioTargetMarker@@@Z ENDP ; ioOtherMarker::SetMarkerState
_TEXT	ENDS
PUBLIC	__real@3f91df46a2526c7a
PUBLIC	??$DEGtoRAD@M@@YAMM@Z				; DEGtoRAD<float>
EXTRN	__fltused:DWORD
;	COMDAT __real@3f91df46a2526c7a
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\veryoftenusedefine.h
CONST	SEGMENT
__real@3f91df46a2526c7a DQ 03f91df46a2526c7ar	; 0.0174533
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??$DEGtoRAD@M@@YAMM@Z
_TEXT	SEGMENT
tv129 = 8						; size = 4
_val$ = 8						; size = 4
??$DEGtoRAD@M@@YAMM@Z PROC				; DEGtoRAD<float>, COMDAT

; 20   : type  DEGtoRAD (type val) {return (type) (val * 0.0174532925199);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR _val$[ebp]
  00006	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f91df46a2526c7a
  0000c	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$DEGtoRAD@M@@YAMM@Z ENDP				; DEGtoRAD<float>
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogsp
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 328  :     x += v.x;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00010	0f 5a c0	 cvtps2pd xmm0, xmm0
  00013	0f 5a c9	 cvtps2pd xmm1, xmm1
  00016	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 329  :     y += v.y;

  0001a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0001f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00023	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00032	f2 0f 58 c1	 addsd	 xmm0, xmm1

; 330  :     z += v.z;

  00036	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0003b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00044	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00049	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00053	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00057	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 331  :     return *this;
; 332  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogsp
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0000a	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	0f 5a c9	 cvtps2pd xmm1, xmm1
  00017	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0001b	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00020	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00024	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00028	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	0f 5a c9	 cvtps2pd xmm1, xmm1
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0003c	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00045	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0004a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004d	0f 5a c9	 cvtps2pd xmm1, xmm1
  00050	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00054	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00058	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 382  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
; Function compile flags: /Ogsp
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00008	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00012	0f 5a c9	 cvtps2pd xmm1, xmm1
  00015	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00019	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0001e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00022	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00031	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00035	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0003e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00043	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00048	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004b	0f 5a c9	 cvtps2pd xmm1, xmm1
  0004e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00052	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00056	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 394  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
PUBLIC	??D@YA?AUD3DXVECTOR3@@MABU0@@Z			; operator*
; Function compile flags: /Ogsp
;	COMDAT ??D@YA?AUD3DXVECTOR3@@MABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AUD3DXVECTOR3@@MABU0@@Z PROC			; operator*, COMDAT

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0000b	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00012	0f 5a c0	 cvtps2pd xmm0, xmm0
  00015	0f 5a c9	 cvtps2pd xmm1, xmm1
  00018	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0001c	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  00021	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00025	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00029	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00031	0f 5a c9	 cvtps2pd xmm1, xmm1
  00034	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00038	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _f$[ebp]
  0003d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00041	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00046	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0004e	0f 5a c9	 cvtps2pd xmm1, xmm1
  00051	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00055	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00059	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 408  : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
??D@YA?AUD3DXVECTOR3@@MABU0@@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
; Function compile flags: /Ogsp
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00006	56		 push	 esi
  00007	57		 push	 edi

; 1748 :     D3DXVECTOR3 v;
; 1749 : 
; 1750 : #ifdef D3DX_DEBUG
; 1751 :     if(!pOut || !pV1 || !pV2)
; 1752 :         return NULL;
; 1753 : #endif
; 1754 : 
; 1755 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00008	8b 45 0c	 mov	 eax, DWORD PTR _pV1$[ebp]
  0000b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00010	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _pV2$[ebp]
  00018	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0001d	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00022	0f 5a e8	 cvtps2pd xmm5, xmm0
  00025	0f 5a e1	 cvtps2pd xmm4, xmm1
  00028	0f 5a f2	 cvtps2pd xmm6, xmm2
  0002b	f2 0f 59 e5	 mulsd	 xmm4, xmm5

; 1756 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0002f	0f 5a d2	 cvtps2pd xmm2, xmm2
  00032	0f 5a c9	 cvtps2pd xmm1, xmm1
  00035	0f 5a eb	 cvtps2pd xmm5, xmm3
  00038	f2 0f 59 ee	 mulsd	 xmm5, xmm6
  0003c	f2 0f 5c e5	 subsd	 xmm4, xmm5
  00040	f3 0f 10 28	 movss	 xmm5, DWORD PTR [eax]

; 1757 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1758 : 
; 1759 :     *pOut = v;

  00044	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00047	66 0f 5a e4	 cvtpd2ps xmm4, xmm4
  0004b	f3 0f 11 65 f4	 movss	 DWORD PTR _v$[ebp], xmm4
  00050	f3 0f 10 21	 movss	 xmm4, DWORD PTR [ecx]
  00054	0f 5a f4	 cvtps2pd xmm6, xmm4
  00057	f2 0f 59 f2	 mulsd	 xmm6, xmm2
  0005b	0f 5a d5	 cvtps2pd xmm2, xmm5
  0005e	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00062	f2 0f 5c f2	 subsd	 xmm6, xmm2
  00066	66 0f 5a ce	 cvtpd2ps xmm1, xmm6
  0006a	f3 0f 11 4d f8	 movss	 DWORD PTR _v$[ebp+4], xmm1
  0006f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00072	0f 5a d3	 cvtps2pd xmm2, xmm3
  00075	0f 5a cd	 cvtps2pd xmm1, xmm5
  00078	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0007c	8d 75 f4	 lea	 esi, DWORD PTR _v$[ebp]
  0007f	8b f8		 mov	 edi, eax
  00081	0f 5a d4	 cvtps2pd xmm2, xmm4
  00084	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  00088	f2 0f 5c ca	 subsd	 xmm1, xmm2
  0008c	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  00090	f3 0f 11 45 fc	 movss	 DWORD PTR _v$[ebp+8], xmm0
  00095	a5		 movsd
  00096	a5		 movsd
  00097	a5		 movsd
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi

; 1760 :     return pOut;
; 1761 : }

  0009a	c9		 leave
  0009b	c3		 ret	 0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
PUBLIC	?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ	; ioGameEntity::GetGroup
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iogameentity.h
;	COMDAT ?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ
_TEXT	SEGMENT
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ PROC	; ioGameEntity::GetGroup, COMDAT
; _this$ = ecx

; 166  : 	inline ioEntityGroup* GetGroup() const { return m_pGroup; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetGroup@ioGameEntity@@QBEPAVioEntityGroup@@XZ ENDP	; ioGameEntity::GetGroup
_TEXT	ENDS
PUBLIC	?IsBallTarget@ioTargetMarker@@QBE_NXZ		; ioTargetMarker::IsBallTarget
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iotargetmarker.h
;	COMDAT ?IsBallTarget@ioTargetMarker@@QBE_NXZ
_TEXT	SEGMENT
?IsBallTarget@ioTargetMarker@@QBE_NXZ PROC		; ioTargetMarker::IsBallTarget, COMDAT
; _this$ = ecx

; 77   : 	inline bool IsBallTarget() const { return m_bBall; }

  00000	8a 81 90 00 00
	00		 mov	 al, BYTE PTR [ecx+144]
  00006	c3		 ret	 0
?IsBallTarget@ioTargetMarker@@QBE_NXZ ENDP		; ioTargetMarker::IsBallTarget
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioOtherMarker@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioOtherMarker@@UAEPAXI@Z PROC			; ioOtherMarker::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioOtherMarker@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioTargetMarker@@UAE@XZ ; ioTargetMarker::~ioTargetMarker
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioOtherMarker@@UAEPAXI@Z ENDP			; ioOtherMarker::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	??_C@_0N@NFGLJLMH@Bip01?5R?5Hand?$AA@		; `string'
PUBLIC	?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemPoint
EXTRN	__imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z:PROC
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	__imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z:PROC
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT __real@4f800000
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT ??_C@_0N@NFGLJLMH@Bip01?5R?5Hand?$AA@
CONST	SEGMENT
??_C@_0N@NFGLJLMH@Bip01?5R?5Hand?$AA@ DB 'Bip01 R Hand', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ$0
__ehfuncinfo$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioothermarker.cpp
xdata$x	ENDS
;	COMDAT ?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
$T531098 = -96						; size = 16
tv477 = -80						; size = 4
_qtRotate$530487 = -76					; size = 16
___$ReturnUdt$GSCopy$ = -60				; size = 4
_pBiped$ = -56						; size = 4
$T530494 = -52						; size = 12
$T530493 = -52						; size = 12
$T530492 = -52						; size = 12
$T530490 = -40						; size = 12
_vTargetPos$530488 = -28				; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ PROC ; ioOtherMarker::GetFireItemPoint, COMDAT
; _this$ = ecx

; 57   : {

  00000	6a 54		 push	 84			; 00000054H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	8b d9		 mov	 ebx, ecx

; 58   : 	ioBiped *pBiped = m_pOwner->GetGroup()->GetBiped( "Bip01 R Hand" );

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NFGLJLMH@Bip01?5R?5Hand?$AA@
  00016	8d 4d a0	 lea	 ecx, DWORD PTR $T531098[ebp]
  00019	89 75 c4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00022	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00025	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00028	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8d 45 a0	 lea	 eax, DWORD PTR $T531098[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z
  00036	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003a	8d 4d a0	 lea	 ecx, DWORD PTR $T531098[ebp]
  0003d	89 45 c8	 mov	 DWORD PTR _pBiped$[ebp], eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 59   : 	if( pBiped )

  00046	83 7d c8 00	 cmp	 DWORD PTR _pBiped$[ebp], 0
  0004a	0f 84 7c 01 00
	00		 je	 $LN1@GetFireIte

; 60   : 	{
; 61   : 		D3DXQUATERNION qtRotate = m_pOwner->GetTargetRot();

  00050	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00053	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  00059	8d 7d b4	 lea	 edi, DWORD PTR _qtRotate$530487[ebp]
  0005c	a5		 movsd
  0005d	a5		 movsd
  0005e	a5		 movsd
  0005f	a5		 movsd

; 62   : 		D3DXVECTOR3 vTargetPos = qtRotate * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	0f 57 c0	 xorps	 xmm0, xmm0
  00068	89 45 b0	 mov	 DWORD PTR tv477[ebp], eax
  0006b	db 45 b0	 fild	 DWORD PTR tv477[ebp]
  0006e	f3 0f 11 45 d8	 movss	 DWORD PTR $T530490[ebp], xmm0
  00073	f3 0f 11 45 dc	 movss	 DWORD PTR $T530490[ebp+4], xmm0
  00078	85 c0		 test	 eax, eax
  0007a	79 06		 jns	 SHORT $LN28@GetFireIte
  0007c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN28@GetFireIte:
  00082	8d 45 d8	 lea	 eax, DWORD PTR $T530490[ebp]
  00085	d9 e0		 fchs
  00087	50		 push	 eax
  00088	d9 5d e0	 fstp	 DWORD PTR $T530490[ebp+8]
  0008b	8d 45 b4	 lea	 eax, DWORD PTR _qtRotate$530487[ebp]
  0008e	50		 push	 eax
  0008f	8d 45 e4	 lea	 eax, DWORD PTR _vTargetPos$530488[ebp]
  00092	50		 push	 eax
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 63   : 		vTargetPos = vTargetPos * m_fMarkerRange;

  00099	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _vTargetPos$530488[ebp]
  0009e	f3 0f 10 83 84
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+132]
  000a6	0f 5a c8	 cvtps2pd xmm1, xmm0

; 64   : 		vTargetPos = vTargetPos + pBiped->GetDerivedPosition();

  000a9	8b 4d c8	 mov	 ecx, DWORD PTR _pBiped$[ebp]
  000ac	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ae	0f 5a d2	 cvtps2pd xmm2, xmm2
  000b1	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000b5	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000b9	f3 0f 11 4d cc	 movss	 DWORD PTR $T530492[ebp], xmm1
  000be	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vTargetPos$530488[ebp+4]
  000c3	0f 5a c9	 cvtps2pd xmm1, xmm1
  000c6	0f 5a d0	 cvtps2pd xmm2, xmm0
  000c9	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000cd	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000d1	f3 0f 11 4d d0	 movss	 DWORD PTR $T530492[ebp+4], xmm1
  000d6	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vTargetPos$530488[ebp+8]
  000db	0f 5a c0	 cvtps2pd xmm0, xmm0
  000de	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e1	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000e5	0f 57 c0	 xorps	 xmm0, xmm0
  000e8	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  000ec	f3 0f 11 45 d4	 movss	 DWORD PTR $T530492[ebp+8], xmm0
  000f1	8d 75 cc	 lea	 esi, DWORD PTR $T530492[ebp]
  000f4	8d 7d e4	 lea	 edi, DWORD PTR _vTargetPos$530488[ebp]
  000f7	a5		 movsd
  000f8	a5		 movsd
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fc	a5		 movsd
  000fd	ff 50 7c	 call	 DWORD PTR [eax+124]
  00100	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00104	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vTargetPos$530488[ebp]

; 65   : 		vTargetPos = vTargetPos + m_pOwner->GetWorldPosition();

  00109	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  0010c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010f	0f 5a c9	 cvtps2pd xmm1, xmm1
  00112	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00116	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vTargetPos$530488[ebp+4]
  0011b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0011f	f3 0f 11 45 cc	 movss	 DWORD PTR $T530493[ebp], xmm0
  00124	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00129	0f 5a c0	 cvtps2pd xmm0, xmm0
  0012c	0f 5a c9	 cvtps2pd xmm1, xmm1
  0012f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00133	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vTargetPos$530488[ebp+8]
  00138	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0013c	f3 0f 11 45 d0	 movss	 DWORD PTR $T530493[ebp+4], xmm0
  00141	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00146	0f 5a c0	 cvtps2pd xmm0, xmm0
  00149	0f 5a c9	 cvtps2pd xmm1, xmm1
  0014c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00150	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00154	f3 0f 11 45 d4	 movss	 DWORD PTR $T530493[ebp+8], xmm0
  00159	8d 75 cc	 lea	 esi, DWORD PTR $T530493[ebp]
  0015c	8d 7d e4	 lea	 edi, DWORD PTR _vTargetPos$530488[ebp]
  0015f	a5		 movsd
  00160	a5		 movsd
  00161	a5		 movsd
  00162	8b 03		 mov	 eax, DWORD PTR [ebx]
  00164	8b cb		 mov	 ecx, ebx
  00166	ff 50 70	 call	 DWORD PTR [eax+112]
  00169	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vTargetPos$530488[ebp]
  0016e	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00172	0f 5a c0	 cvtps2pd xmm0, xmm0
  00175	0f 5a c9	 cvtps2pd xmm1, xmm1
  00178	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017c	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vTargetPos$530488[ebp+4]
  00181	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00185	f3 0f 11 45 cc	 movss	 DWORD PTR $T530494[ebp], xmm0
  0018a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0018f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00192	0f 5a c9	 cvtps2pd xmm1, xmm1
  00195	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00199	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0019d	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vTargetPos$530488[ebp+8]
  001a2	f3 0f 11 45 d0	 movss	 DWORD PTR $T530494[ebp+4], xmm0
  001a7	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]

; 66   : 
; 67   : 		return vTargetPos;

  001ac	8b 45 c4	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  001af	0f 5a c0	 cvtps2pd xmm0, xmm0
  001b2	0f 5a c9	 cvtps2pd xmm1, xmm1
  001b5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001b9	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001bd	f3 0f 11 45 d4	 movss	 DWORD PTR $T530494[ebp+8], xmm0
  001c2	8d 75 cc	 lea	 esi, DWORD PTR $T530494[ebp]
  001c5	8b f8		 mov	 edi, eax
  001c7	a5		 movsd
  001c8	a5		 movsd
  001c9	a5		 movsd
  001ca	eb 13		 jmp	 SHORT $LN2@GetFireIte
$LN1@GetFireIte:

; 68   : 	}
; 69   : 
; 70   : 	return D3DXVECTOR3( 0.0f, 0.0f, 0.0f );

  001cc	0f 57 c0	 xorps	 xmm0, xmm0
  001cf	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001d3	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001d8	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  001dd	8b c6		 mov	 eax, esi
$LN2@GetFireIte:

; 71   : }

  001df	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001e4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T531098[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ENDP ; ioOtherMarker::GetFireItemPoint
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemJumpPoint
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
xdata$x	SEGMENT
__unwindtable$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ$0
__ehfuncinfo$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioothermarker.cpp
xdata$x	ENDS
;	COMDAT ?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
$T531175 = -124						; size = 16
_qtRot$530511 = -108					; size = 16
_qtRotate$530503 = -92					; size = 16
___$ReturnUdt$GSCopy$ = -76				; size = 4
tv684 = -72						; size = 4
tv677 = -72						; size = 4
_pBiped$ = -68						; size = 4
$T530516 = -64						; size = 12
$T530510 = -64						; size = 12
_vAxis$530508 = -52					; size = 12
_vDir$530504 = -40					; size = 12
_v$531211 = -28						; size = 12
_vTargetPos$530517 = -28				; size = 12
$T530506 = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ PROC ; ioOtherMarker::GetFireItemJumpPoint, COMDAT
; _this$ = ecx

; 74   : {

  00000	6a 70		 push	 112			; 00000070H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	8b d9		 mov	 ebx, ecx

; 75   : 	ioBiped *pBiped = m_pOwner->GetGroup()->GetBiped( "Bip01 R Hand" );

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NFGLJLMH@Bip01?5R?5Hand?$AA@
  00016	8d 4d 84	 lea	 ecx, DWORD PTR $T531175[ebp]
  00019	89 75 b4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  00022	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00025	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00028	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8d 45 84	 lea	 eax, DWORD PTR $T531175[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBiped@ioEntityGroup@@QAEPAVioBiped@@ABVioHashString@@@Z
  00036	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0003a	8d 4d 84	 lea	 ecx, DWORD PTR $T531175[ebp]
  0003d	89 45 bc	 mov	 DWORD PTR _pBiped$[ebp], eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioHashString@@QAE@XZ

; 76   : 	if( pBiped )

  00046	83 7d bc 00	 cmp	 DWORD PTR _pBiped$[ebp], 0
  0004a	0f 84 41 02 00
	00		 je	 $LN1@GetFireIte@2

; 77   : 	{
; 78   : 		D3DXQUATERNION qtRotate = m_pOwner->GetTargetRot();

  00050	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00053	81 c6 a4 06 00
	00		 add	 esi, 1700		; 000006a4H
  00059	8d 7d a4	 lea	 edi, DWORD PTR _qtRotate$530503[ebp]
  0005c	a5		 movsd
  0005d	a5		 movsd
  0005e	a5		 movsd
  0005f	a5		 movsd

; 79   : 		D3DXVECTOR3 vDir = qtRotate * D3DXVECTOR3( 0.0f, 0.0f, -FLOAT1 );

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	0f 57 c0	 xorps	 xmm0, xmm0
  00068	89 45 b8	 mov	 DWORD PTR tv684[ebp], eax
  0006b	db 45 b8	 fild	 DWORD PTR tv684[ebp]
  0006e	f3 0f 11 45 e4	 movss	 DWORD PTR $T530506[ebp], xmm0
  00073	f3 0f 11 45 e8	 movss	 DWORD PTR $T530506[ebp+4], xmm0
  00078	85 c0		 test	 eax, eax
  0007a	79 06		 jns	 SHORT $LN40@GetFireIte@2
  0007c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN40@GetFireIte@2:
  00082	8d 45 e4	 lea	 eax, DWORD PTR $T530506[ebp]
  00085	d9 e0		 fchs
  00087	50		 push	 eax
  00088	d9 5d ec	 fstp	 DWORD PTR $T530506[ebp+8]
  0008b	8d 45 a4	 lea	 eax, DWORD PTR _qtRotate$530503[ebp]
  0008e	50		 push	 eax
  0008f	8d 45 d8	 lea	 eax, DWORD PTR _vDir$530504[ebp]
  00092	50		 push	 eax
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : 		
; 81   : 		D3DXVECTOR3 vAxis;
; 82   : 		D3DXVec3Cross( &vAxis, &vDir, &D3DXVECTOR3( 0.0f, -FLOAT1, 0.0f ) );

  0009c	b8 01 00 00 00	 mov	 eax, 1
  000a1	89 45 b8	 mov	 DWORD PTR tv677[ebp], eax
  000a4	db 45 b8	 fild	 DWORD PTR tv677[ebp]
  000a7	85 c0		 test	 eax, eax
  000a9	79 06		 jns	 SHORT $LN41@GetFireIte@2
  000ab	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN41@GetFireIte@2:
  000b1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vDir$530504[ebp+4]
  000b6	d9 e0		 fchs
  000b8	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _vDir$530504[ebp+8]
  000bd	d9 5d c4	 fstp	 DWORD PTR $T530510[ebp+4]
  000c0	f3 0f 10 5d c4	 movss	 xmm3, DWORD PTR $T530510[ebp+4]
  000c5	0f 5a c8	 cvtps2pd xmm1, xmm0
  000c8	0f 57 c0	 xorps	 xmm0, xmm0
  000cb	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000cf	0f 5a d2	 cvtps2pd xmm2, xmm2
  000d2	0f 5a db	 cvtps2pd xmm3, xmm3
  000d5	f2 0f 59 d3	 mulsd	 xmm2, xmm3
  000d9	66 0f 28 d9	 movapd	 xmm3, xmm1
  000dd	f2 0f 5c da	 subsd	 xmm3, xmm2
  000e1	0f 57 d2	 xorps	 xmm2, xmm2
  000e4	f2 0f 5a d3	 cvtsd2ss xmm2, xmm3
  000e8	f3 0f 10 5d d8	 movss	 xmm3, DWORD PTR _vDir$530504[ebp]
  000ed	f3 0f 11 55 e4	 movss	 DWORD PTR _v$531211[ebp], xmm2
  000f2	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _vDir$530504[ebp+8]
  000f7	0f 5a d2	 cvtps2pd xmm2, xmm2
  000fa	f2 0f 59 d0	 mulsd	 xmm2, xmm0
  000fe	0f 5a db	 cvtps2pd xmm3, xmm3
  00101	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  00105	0f 57 c0	 xorps	 xmm0, xmm0
  00108	f2 0f 5c d3	 subsd	 xmm2, xmm3
  0010c	f2 0f 5a c2	 cvtsd2ss xmm0, xmm2
  00110	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _vDir$530504[ebp]
  00115	f3 0f 11 45 e8	 movss	 DWORD PTR _v$531211[ebp+4], xmm0
  0011a	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR $T530510[ebp+4]
  0011f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00122	0f 5a d2	 cvtps2pd xmm2, xmm2
  00125	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00129	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0012d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00131	f3 0f 11 45 ec	 movss	 DWORD PTR _v$531211[ebp+8], xmm0

; 83   : 
; 84   : 		D3DXQUATERNION qtRot;
; 85   : 		D3DXQuaternionRotationAxis( &qtRot, &vAxis, DEGtoRAD(m_fJumpMarkerAngle) );

  00136	f3 0f 10 83 8c
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+140]
  0013e	8d 75 e4	 lea	 esi, DWORD PTR _v$531211[ebp]
  00141	8d 7d cc	 lea	 edi, DWORD PTR _vAxis$530508[ebp]
  00144	a5		 movsd
  00145	0f 5a c0	 cvtps2pd xmm0, xmm0
  00148	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a2526c7a
  00150	51		 push	 ecx
  00151	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015a	8d 45 cc	 lea	 eax, DWORD PTR _vAxis$530508[ebp]
  0015d	a5		 movsd
  0015e	50		 push	 eax
  0015f	8d 45 94	 lea	 eax, DWORD PTR _qtRot$530511[ebp]
  00162	50		 push	 eax
  00163	a5		 movsd
  00164	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 86   : 		vDir = qtRot * vDir;

  00169	8d 45 d8	 lea	 eax, DWORD PTR _vDir$530504[ebp]
  0016c	50		 push	 eax
  0016d	8d 45 94	 lea	 eax, DWORD PTR _qtRot$530511[ebp]
  00170	50		 push	 eax
  00171	8d 45 c0	 lea	 eax, DWORD PTR $T530516[ebp]
  00174	50		 push	 eax
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??D@YA?AUD3DXVECTOR3@@ABUD3DXQUATERNION@@ABU0@@Z

; 87   : 
; 88   : 		D3DXVECTOR3 vTargetPos = m_fMarkerRange * vDir;

  0017b	f3 0f 10 83 84
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+132]
  00183	8b f0		 mov	 esi, eax
  00185	8d 7d d8	 lea	 edi, DWORD PTR _vDir$530504[ebp]
  00188	a5		 movsd
  00189	a5		 movsd
  0018a	0f 5a d0	 cvtps2pd xmm2, xmm0
  0018d	a5		 movsd
  0018e	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _vDir$530504[ebp]
  00193	0f 5a c9	 cvtps2pd xmm1, xmm1
  00196	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0019a	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0019e	f3 0f 11 4d e4	 movss	 DWORD PTR _vTargetPos$530517[ebp], xmm1
  001a3	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _vDir$530504[ebp+4]
  001a8	0f 5a c9	 cvtps2pd xmm1, xmm1
  001ab	0f 5a d0	 cvtps2pd xmm2, xmm0
  001ae	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001b2	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  001b6	f3 0f 11 4d e8	 movss	 DWORD PTR _vTargetPos$530517[ebp+4], xmm1
  001bb	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _vDir$530504[ebp+8]
  001c0	0f 5a c0	 cvtps2pd xmm0, xmm0
  001c3	0f 5a c9	 cvtps2pd xmm1, xmm1
  001c6	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cd	0f 57 c0	 xorps	 xmm0, xmm0

; 89   : 		vTargetPos += m_pOwner->GetWorldPosition() + pBiped->GetDerivedPosition();

  001d0	8b 4d bc	 mov	 ecx, DWORD PTR _pBiped$[ebp]
  001d3	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d5	66 0f 5a c1	 cvtpd2ps xmm0, xmm1
  001d9	f3 0f 11 45 ec	 movss	 DWORD PTR _vTargetPos$530517[ebp+8], xmm0
  001de	ff 50 7c	 call	 DWORD PTR [eax+124]
  001e1	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  001e4	8b f0		 mov	 esi, eax
  001e6	8b 03		 mov	 eax, DWORD PTR [ebx]
  001e8	8b cb		 mov	 ecx, ebx
  001ea	ff 50 70	 call	 DWORD PTR [eax+112]
  001ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f1	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  001f5	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  001fa	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
  001ff	0f 5a c0	 cvtps2pd xmm0, xmm0
  00202	0f 5a c9	 cvtps2pd xmm1, xmm1
  00205	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00209	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0020e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00212	0f 5a c9	 cvtps2pd xmm1, xmm1
  00215	0f 5a d2	 cvtps2pd xmm2, xmm2
  00218	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0021c	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]

; 90   : 
; 91   : 		return vTargetPos;

  00221	8b 45 b4	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00224	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00228	0f 5a db	 cvtps2pd xmm3, xmm3
  0022b	0f 5a d2	 cvtps2pd xmm2, xmm2
  0022e	f2 0f 58 d3	 addsd	 xmm2, xmm3
  00232	f3 0f 10 5d e4	 movss	 xmm3, DWORD PTR _vTargetPos$530517[ebp]
  00237	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  0023b	0f 5a db	 cvtps2pd xmm3, xmm3
  0023e	f2 0f 58 c3	 addsd	 xmm0, xmm3
  00242	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00246	f3 0f 11 45 e4	 movss	 DWORD PTR _vTargetPos$530517[ebp], xmm0
  0024b	0f 57 c0	 xorps	 xmm0, xmm0
  0024e	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00252	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _vTargetPos$530517[ebp+4]
  00257	0f 5a c9	 cvtps2pd xmm1, xmm1
  0025a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0025e	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _vTargetPos$530517[ebp+8]
  00263	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00267	f3 0f 11 45 e8	 movss	 DWORD PTR _vTargetPos$530517[ebp+4], xmm0
  0026c	0f 57 c0	 xorps	 xmm0, xmm0
  0026f	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  00273	f3 0f 5a c2	 cvtss2sd xmm0, xmm2
  00277	0f 5a c9	 cvtps2pd xmm1, xmm1
  0027a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0027e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00282	f3 0f 11 45 ec	 movss	 DWORD PTR _vTargetPos$530517[ebp+8], xmm0
  00287	8d 75 e4	 lea	 esi, DWORD PTR _vTargetPos$530517[ebp]
  0028a	8b f8		 mov	 edi, eax
  0028c	a5		 movsd
  0028d	a5		 movsd
  0028e	a5		 movsd
  0028f	eb 13		 jmp	 SHORT $LN2@GetFireIte@2
$LN1@GetFireIte@2:

; 92   : 	}
; 93   : 
; 94   : 	return D3DXVECTOR3( 0.0f, 0.0f, 0.0f );

  00291	0f 57 c0	 xorps	 xmm0, xmm0
  00294	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00298	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  0029d	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  002a2	8b c6		 mov	 eax, esi
$LN2@GetFireIte@2:

; 95   : }

  002a4	e8 00 00 00 00	 call	 __EH_epilog3_GS
  002a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR $T531175[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ENDP ; ioOtherMarker::GetFireItemJumpPoint
PUBLIC	_szEffect$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	?GetUniqueID@ioMapEffect@@QBEKXZ:PROC		; ioMapEffect::GetUniqueID
EXTRN	?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z:PROC ; ioPlayStage::CreateMapEffect
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?CreateEffect@ioOtherMarker@@MAEKPAVioPlayStage@@ABVioHashString@@@Z
_TEXT	SEGMENT
$T530534 = -48						; size = 12
_szEffect$GSCopy$ = -36					; size = 4
tv212 = -32						; size = 4
tv209 = -32						; size = 4
tv206 = -32						; size = 4
_vScale$ = -28						; size = 12
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
_szEffect$ = 12						; size = 4
?CreateEffect@ioOtherMarker@@MAEKPAVioPlayStage@@ABVioHashString@@@Z PROC ; ioOtherMarker::CreateEffect, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pStage$[ebp]
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _szEffect$[ebp]

; 109  : 
; 110  : 	ioMapEffect *pEff = pStage->CreateMapEffect( szEffect, vPos, vScale );

  0001a	89 4d dc	 mov	 DWORD PTR _szEffect$GSCopy$[ebp], ecx
  0001d	85 db		 test	 ebx, ebx
  0001f	0f 84 ad 00 00
	00		 je	 $LN1@CreateEffe

; 99   : 	if( !pStage ) return -1;
; 100  : 	if( szEffect.IsEmpty() ) return -1;

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0002b	84 c0		 test	 al, al
  0002d	0f 85 9f 00 00
	00		 jne	 $LN1@CreateEffe

; 101  : 
; 102  : 	D3DXVECTOR3 vPos( 0.0f, 0.0f, 0.0f );

  00033	0f 57 c0	 xorps	 xmm0, xmm0
  00036	57		 push	 edi
  00037	f3 0f 11 45 f0	 movss	 DWORD PTR _vPos$[ebp], xmm0
  0003c	f3 0f 11 45 f4	 movss	 DWORD PTR _vPos$[ebp+4], xmm0
  00041	f3 0f 11 45 f8	 movss	 DWORD PTR _vPos$[ebp+8], xmm0

; 103  : 	D3DXVECTOR3 vScale( FLOAT1, FLOAT1, FLOAT1 );

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	8b c8		 mov	 ecx, eax
  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	8b d0		 mov	 edx, eax
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	89 45 e0	 mov	 DWORD PTR tv212[ebp], eax
  0005c	db 45 e0	 fild	 DWORD PTR tv212[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	79 06		 jns	 SHORT $LN18@CreateEffe
  00063	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN18@CreateEffe:
  00069	89 55 e0	 mov	 DWORD PTR tv209[ebp], edx
  0006c	d9 5d e4	 fstp	 DWORD PTR _vScale$[ebp]
  0006f	db 45 e0	 fild	 DWORD PTR tv209[ebp]
  00072	85 d2		 test	 edx, edx
  00074	79 06		 jns	 SHORT $LN19@CreateEffe
  00076	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN19@CreateEffe:
  0007c	89 4d e0	 mov	 DWORD PTR tv206[ebp], ecx
  0007f	d9 5d e8	 fstp	 DWORD PTR _vScale$[ebp+4]
  00082	db 45 e0	 fild	 DWORD PTR tv206[ebp]
  00085	85 c9		 test	 ecx, ecx
  00087	79 06		 jns	 SHORT $LN20@CreateEffe
  00089	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN20@CreateEffe:

; 104  : 
; 105  : 	if( m_MarkerState == MS_JUMP_AIM )

  0008f	83 7e 08 05	 cmp	 DWORD PTR [esi+8], 5
  00093	d9 5d ec	 fstp	 DWORD PTR _vScale$[ebp+8]

; 106  : 		vPos = GetFireItemJumpPoint();

  00096	8d 45 d0	 lea	 eax, DWORD PTR $T530534[ebp]
  00099	8b ce		 mov	 ecx, esi
  0009b	50		 push	 eax
  0009c	75 07		 jne	 SHORT $LN3@CreateEffe
  0009e	e8 00 00 00 00	 call	 ?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemJumpPoint

; 107  : 	else

  000a3	eb 05		 jmp	 SHORT $LN21@CreateEffe
$LN3@CreateEffe:

; 108  : 		vPos = GetFireItemPoint();

  000a5	e8 00 00 00 00	 call	 ?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemPoint
$LN21@CreateEffe:
  000aa	8b f0		 mov	 esi, eax
  000ac	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  000af	a5		 movsd

; 109  : 
; 110  : 	ioMapEffect *pEff = pStage->CreateMapEffect( szEffect, vPos, vScale );

  000b0	8d 45 e4	 lea	 eax, DWORD PTR _vScale$[ebp]
  000b3	50		 push	 eax
  000b4	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  000b7	a5		 movsd
  000b8	50		 push	 eax
  000b9	ff 75 dc	 push	 DWORD PTR _szEffect$GSCopy$[ebp]
  000bc	8b cb		 mov	 ecx, ebx
  000be	a5		 movsd
  000bf	e8 00 00 00 00	 call	 ?CreateMapEffect@ioPlayStage@@QAEPAVioMapEffect@@ABVioHashString@@ABUD3DXVECTOR3@@1@Z ; ioPlayStage::CreateMapEffect
  000c4	5f		 pop	 edi

; 111  : 	if( pEff )

  000c5	85 c0		 test	 eax, eax
  000c7	74 09		 je	 SHORT $LN1@CreateEffe

; 112  : 	{
; 113  : 		return pEff->GetUniqueID();

  000c9	8b c8		 mov	 ecx, eax
  000cb	e8 00 00 00 00	 call	 ?GetUniqueID@ioMapEffect@@QBEKXZ ; ioMapEffect::GetUniqueID
  000d0	eb 03		 jmp	 SHORT $LN6@CreateEffe
$LN1@CreateEffe:

; 114  : 	}
; 115  : 
; 116  : 	return -1;

  000d2	83 c8 ff	 or	 eax, -1
$LN6@CreateEffe:

; 117  : }

  000d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d8	5e		 pop	 esi
  000d9	33 cd		 xor	 ecx, ebp
  000db	5b		 pop	 ebx
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	c9		 leave
  000e2	c2 08 00	 ret	 8
?CreateEffect@ioOtherMarker@@MAEKPAVioPlayStage@@ABVioHashString@@@Z ENDP ; ioOtherMarker::CreateEffect
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateReadyState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateReadyState
EXTRN	?SetVisible@ioMapEffect@@QAEX_N@Z:PROC		; ioMapEffect::SetVisible
EXTRN	?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z:PROC ; ioMapEffect::SetWorldPosition
EXTRN	?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z:PROC ; ioPlayStage::FindMapEffect
; Function compile flags: /Ogsp
;	COMDAT ?UpdateReadyState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?UpdateReadyState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z PROC ; ioOtherMarker::UpdateReadyState, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pStage$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 121  : 	if( !pStage ) return;

  00017	85 ff		 test	 edi, edi
  00019	74 4c		 je	 SHORT $LN1@UpdateRead

; 122  : 	if( m_ReadyID == -1 ) return;

  0001b	83 7e 6c ff	 cmp	 DWORD PTR [esi+108], -1
  0001f	74 46		 je	 SHORT $LN1@UpdateRead

; 123  : 
; 124  : 	bool bVisible = false;
; 125  : 	bool bDisable = false;
; 126  : 
; 127  : 	if( m_pOwner->IsOwnerChar() )

  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	53		 push	 ebx
  00025	32 db		 xor	 bl, bl
  00027	38 98 84 13 00
	00		 cmp	 BYTE PTR [eax+4996], bl
  0002d	74 02		 je	 SHORT $LN5@UpdateRead

; 128  : 		bVisible = true;

  0002f	fe c3		 inc	 bl
$LN5@UpdateRead:

; 129  : 
; 130  : 	D3DXVECTOR3 vPos = GetFireItemPoint();

  00031	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemPoint

; 131  : 
; 132  : 	ioMapEffect *pEff = pStage->FindMapEffect( m_ReadyID );

  0003a	ff 76 6c	 push	 DWORD PTR [esi+108]
  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00044	8b f0		 mov	 esi, eax

; 133  : 	if( pEff )

  00046	85 f6		 test	 esi, esi
  00048	74 1c		 je	 SHORT $LN12@UpdateRead

; 134  : 	{
; 135  : 		pEff->SetWorldPosition( vPos );

  0004a	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  0004d	50		 push	 eax
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 139  : 		else
; 140  : 			pEff->SetVisible( true );

  00055	8b ce		 mov	 ecx, esi
  00057	84 db		 test	 bl, bl
  00059	74 04		 je	 SHORT $LN2@UpdateRead
  0005b	6a 01		 push	 1
  0005d	eb 02		 jmp	 SHORT $LN13@UpdateRead
$LN2@UpdateRead:

; 136  : 
; 137  : 		if( bDisable || !bVisible )
; 138  : 			pEff->SetVisible( false );

  0005f	6a 00		 push	 0
$LN13@UpdateRead:
  00061	e8 00 00 00 00	 call	 ?SetVisible@ioMapEffect@@QAEX_N@Z ; ioMapEffect::SetVisible
$LN12@UpdateRead:
  00066	5b		 pop	 ebx
$LN1@UpdateRead:

; 141  : 	}
; 142  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	5f		 pop	 edi
  0006b	33 cd		 xor	 ecx, ebp
  0006d	5e		 pop	 esi
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	c9		 leave
  00074	c2 04 00	 ret	 4
?UpdateReadyState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ENDP ; ioOtherMarker::UpdateReadyState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateAimingState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateAimingState
; Function compile flags: /Ogsp
;	COMDAT ?UpdateAimingState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?UpdateAimingState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z PROC ; ioOtherMarker::UpdateAimingState, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pStage$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 146  : 	if( !pStage ) return;

  00017	85 ff		 test	 edi, edi
  00019	74 4c		 je	 SHORT $LN1@UpdateAimi

; 147  : 	if( m_AimingID == -1 ) return;

  0001b	83 7e 70 ff	 cmp	 DWORD PTR [esi+112], -1
  0001f	74 46		 je	 SHORT $LN1@UpdateAimi

; 148  : 
; 149  : 	bool bVisible = false;
; 150  : 	bool bDisable = false;
; 151  : 
; 152  : 	if( m_pOwner->IsOwnerChar() )

  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	53		 push	 ebx
  00025	32 db		 xor	 bl, bl
  00027	38 98 84 13 00
	00		 cmp	 BYTE PTR [eax+4996], bl
  0002d	74 02		 je	 SHORT $LN5@UpdateAimi

; 153  : 		bVisible = true;

  0002f	fe c3		 inc	 bl
$LN5@UpdateAimi:

; 154  : 
; 155  : 	D3DXVECTOR3 vPos = GetFireItemPoint();

  00031	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemPoint

; 156  : 
; 157  : 	ioMapEffect *pEff = pStage->FindMapEffect( m_AimingID );

  0003a	ff 76 70	 push	 DWORD PTR [esi+112]
  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00044	8b f0		 mov	 esi, eax

; 158  : 	if( pEff )

  00046	85 f6		 test	 esi, esi
  00048	74 1c		 je	 SHORT $LN12@UpdateAimi

; 159  : 	{
; 160  : 		pEff->SetWorldPosition( vPos );

  0004a	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  0004d	50		 push	 eax
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 164  : 		else
; 165  : 			pEff->SetVisible( true );

  00055	8b ce		 mov	 ecx, esi
  00057	84 db		 test	 bl, bl
  00059	74 04		 je	 SHORT $LN2@UpdateAimi
  0005b	6a 01		 push	 1
  0005d	eb 02		 jmp	 SHORT $LN13@UpdateAimi
$LN2@UpdateAimi:

; 161  : 
; 162  : 		if( bDisable || !bVisible )
; 163  : 			pEff->SetVisible( false );

  0005f	6a 00		 push	 0
$LN13@UpdateAimi:
  00061	e8 00 00 00 00	 call	 ?SetVisible@ioMapEffect@@QAEX_N@Z ; ioMapEffect::SetVisible
$LN12@UpdateAimi:
  00066	5b		 pop	 ebx
$LN1@UpdateAimi:

; 166  : 	}
; 167  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	5f		 pop	 edi
  0006b	33 cd		 xor	 ecx, ebp
  0006d	5e		 pop	 esi
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	c9		 leave
  00074	c2 04 00	 ret	 4
?UpdateAimingState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ENDP ; ioOtherMarker::UpdateAimingState
_TEXT	ENDS
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateAimedState
EXTRN	?DestroyMarker@ioTargetMarker@@QAEXPAVioPlayStage@@@Z:PROC ; ioTargetMarker::DestroyMarker
EXTRN	?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z:PROC ; ioGameEntity::GetMidPositionByRate
EXTRN	?GetTargetChar@ioTargetMarker@@QBEPAVioBaseChar@@XZ:PROC ; ioTargetMarker::GetTargetChar
EXTRN	?FindBall@ioBaseChar@@QAEPAVioBall@@XZ:PROC	; ioBaseChar::FindBall
; Function compile flags: /Ogsp
;	COMDAT ?UpdateAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$GSCopy$ = -40					; size = 4
tv355 = -36						; size = 4
tv351 = -36						; size = 4
tv347 = -36						; size = 4
tv329 = -36						; size = 4
tv325 = -36						; size = 4
tv321 = -36						; size = 4
_bVisible$ = -29					; size = 1
$T530588 = -28						; size = 12
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?UpdateAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z PROC ; ioOtherMarker::UpdateAimedState, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 205  : 	}
; 206  : 
; 207  : 	if( m_AimedID == -1 ) return;

  00016	89 45 d8	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 3b 01 00
	00		 je	 $LN1@UpdateAime

; 171  : 	if( !pStage ) return;
; 172  : 
; 173  : 	bool bVisible = false;
; 174  : 	bool bDisable = false;
; 175  : 
; 176  : 	D3DXVECTOR3 vPos = GetFireItemPoint();

  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00026	50		 push	 eax
  00027	c6 45 e3 00	 mov	 BYTE PTR _bVisible$[ebp], 0
  0002b	e8 00 00 00 00	 call	 ?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemPoint

; 177  : 	if( IsBallTarget() )

  00030	80 bb 90 00 00
	00 00		 cmp	 BYTE PTR [ebx+144], 0
  00037	74 4c		 je	 SHORT $LN12@UpdateAime

; 178  : 	{
; 179  : 		ioBall *pBall = m_pOwner->FindBall();

  00039	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003c	e8 00 00 00 00	 call	 ?FindBall@ioBaseChar@@QAEPAVioBall@@XZ ; ioBaseChar::FindBall
  00041	8b c8		 mov	 ecx, eax

; 180  : 		if( pBall )

  00043	85 c9		 test	 ecx, ecx
  00045	0f 84 9d 00 00
	00		 je	 $LN9@UpdateAime

; 181  : 		{
; 182  : 			bVisible = true;

  0004b	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1

; 183  : 			vPos = pBall->GetMidPositionByRate();

  0004f	b8 05 00 00 00	 mov	 eax, 5
  00054	8b d0		 mov	 edx, eax
  00056	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0005b	89 55 dc	 mov	 DWORD PTR tv355[ebp], edx
  0005e	db 45 dc	 fild	 DWORD PTR tv355[ebp]
  00061	85 d2		 test	 edx, edx
  00063	79 06		 jns	 SHORT $LN32@UpdateAime
  00065	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@UpdateAime:
  0006b	89 45 dc	 mov	 DWORD PTR tv351[ebp], eax
  0006e	db 45 dc	 fild	 DWORD PTR tv351[ebp]
  00071	85 c0		 test	 eax, eax
  00073	79 06		 jns	 SHORT $LN33@UpdateAime
  00075	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@UpdateAime:
  0007b	de f9		 fdivp	 ST(1), ST(0)
  0007d	d9 5d dc	 fstp	 DWORD PTR tv347[ebp]
  00080	d9 45 dc	 fld	 DWORD PTR tv347[ebp]

; 184  : 		}
; 185  : 	}
; 186  : 	else

  00083	eb 4e		 jmp	 SHORT $LN36@UpdateAime
$LN12@UpdateAime:

; 187  : 	{
; 188  : 		ioBaseChar *pTarget = GetTargetChar();

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?GetTargetChar@ioTargetMarker@@QBEPAVioBaseChar@@XZ ; ioTargetMarker::GetTargetChar
  0008c	8b c8		 mov	 ecx, eax

; 189  : 		if( pTarget )

  0008e	85 c9		 test	 ecx, ecx
  00090	74 56		 je	 SHORT $LN9@UpdateAime

; 190  : 		{
; 191  : 			if( pTarget->IsOwnerChar() )

  00092	80 b9 84 13 00
	00 00		 cmp	 BYTE PTR [ecx+4996], 0
  00099	74 04		 je	 SHORT $LN8@UpdateAime

; 192  : 				bVisible = true;

  0009b	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1
$LN8@UpdateAime:

; 193  : 
; 194  : 			vPos = pTarget->GetMidPositionByRate();

  0009f	b8 05 00 00 00	 mov	 eax, 5
  000a4	8b d0		 mov	 edx, eax
  000a6	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000ab	89 55 dc	 mov	 DWORD PTR tv329[ebp], edx
  000ae	db 45 dc	 fild	 DWORD PTR tv329[ebp]
  000b1	85 d2		 test	 edx, edx
  000b3	79 06		 jns	 SHORT $LN34@UpdateAime
  000b5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@UpdateAime:
  000bb	89 45 dc	 mov	 DWORD PTR tv325[ebp], eax
  000be	db 45 dc	 fild	 DWORD PTR tv325[ebp]
  000c1	85 c0		 test	 eax, eax
  000c3	79 06		 jns	 SHORT $LN35@UpdateAime
  000c5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@UpdateAime:
  000cb	de f9		 fdivp	 ST(1), ST(0)
  000cd	d9 5d dc	 fstp	 DWORD PTR tv321[ebp]
  000d0	d9 45 dc	 fld	 DWORD PTR tv321[ebp]
$LN36@UpdateAime:
  000d3	51		 push	 ecx
  000d4	8d 45 e4	 lea	 eax, DWORD PTR $T530588[ebp]
  000d7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  000e0	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  000e3	8b f0		 mov	 esi, eax
  000e5	a5		 movsd
  000e6	a5		 movsd
  000e7	a5		 movsd
$LN9@UpdateAime:

; 195  : 		}
; 196  : 	}
; 197  : 
; 198  : 	if( m_pOwner->IsOwnerChar() )

  000e8	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000eb	80 b8 84 13 00
	00 00		 cmp	 BYTE PTR [eax+4996], 0
  000f2	74 04		 je	 SHORT $LN7@UpdateAime

; 199  : 		bVisible = true;

  000f4	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1
$LN7@UpdateAime:

; 200  : 
; 201  : 	if( !m_bPreUseEnable && m_bUseEnable )

  000f8	80 bb 92 00 00
	00 00		 cmp	 BYTE PTR [ebx+146], 0
  000ff	75 24		 jne	 SHORT $LN30@UpdateAime
  00101	80 bb 91 00 00
	00 00		 cmp	 BYTE PTR [ebx+145], 0
  00108	74 1b		 je	 SHORT $LN30@UpdateAime

; 202  : 	{
; 203  : 		DestroyMarker( pStage );

  0010a	ff 75 d8	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  0010d	8b cb		 mov	 ecx, ebx
  0010f	e8 00 00 00 00	 call	 ?DestroyMarker@ioTargetMarker@@QAEXPAVioPlayStage@@@Z ; ioTargetMarker::DestroyMarker

; 204  : 		m_AimedID = CreateEffect( pStage, m_szAimedEffect );

  00114	8b 03		 mov	 eax, DWORD PTR [ebx]
  00116	8d 4b 3c	 lea	 ecx, DWORD PTR [ebx+60]
  00119	51		 push	 ecx
  0011a	ff 75 d8	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  0011d	8b cb		 mov	 ecx, ebx
  0011f	ff 50 0c	 call	 DWORD PTR [eax+12]
  00122	89 43 74	 mov	 DWORD PTR [ebx+116], eax
$LN30@UpdateAime:

; 205  : 	}
; 206  : 
; 207  : 	if( m_AimedID == -1 ) return;

  00125	8b 5b 74	 mov	 ebx, DWORD PTR [ebx+116]
  00128	83 fb ff	 cmp	 ebx, -1
  0012b	74 2d		 je	 SHORT $LN31@UpdateAime

; 208  : 
; 209  : 	ioMapEffect *pEff = pStage->FindMapEffect( m_AimedID );

  0012d	8b 4d d8	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  00130	53		 push	 ebx
  00131	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00136	8b f0		 mov	 esi, eax

; 210  : 	if( pEff )

  00138	85 f6		 test	 esi, esi
  0013a	74 1e		 je	 SHORT $LN31@UpdateAime

; 211  : 	{
; 212  : 		pEff->SetWorldPosition( vPos );

  0013c	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  0013f	50		 push	 eax
  00140	8b ce		 mov	 ecx, esi
  00142	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 213  : 
; 214  : 		if( bDisable || !bVisible )

  00147	80 7d e3 00	 cmp	 BYTE PTR _bVisible$[ebp], 0

; 216  : 		else
; 217  : 			pEff->SetVisible( true );

  0014b	8b ce		 mov	 ecx, esi
  0014d	74 04		 je	 SHORT $LN2@UpdateAime
  0014f	6a 01		 push	 1
  00151	eb 02		 jmp	 SHORT $LN37@UpdateAime
$LN2@UpdateAime:

; 215  : 			pEff->SetVisible( false );

  00153	6a 00		 push	 0
$LN37@UpdateAime:
  00155	e8 00 00 00 00	 call	 ?SetVisible@ioMapEffect@@QAEX_N@Z ; ioMapEffect::SetVisible
$LN31@UpdateAime:
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
$LN1@UpdateAime:

; 218  : 	}
; 219  : }

  0015c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	33 cd		 xor	 ecx, ebp
  00161	5b		 pop	 ebx
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	c9		 leave
  00168	c2 04 00	 ret	 4
?UpdateAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ENDP ; ioOtherMarker::UpdateAimedState
_TEXT	ENDS
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateZeroAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateZeroAimedState
; Function compile flags: /Ogsp
;	COMDAT ?UpdateZeroAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$GSCopy$ = -40					; size = 4
tv355 = -36						; size = 4
tv351 = -36						; size = 4
tv347 = -36						; size = 4
tv329 = -36						; size = 4
tv325 = -36						; size = 4
tv321 = -36						; size = 4
_bVisible$ = -29					; size = 1
$T530614 = -28						; size = 12
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?UpdateZeroAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z PROC ; ioOtherMarker::UpdateZeroAimedState, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 257  : 	}
; 258  : 
; 259  : 	if( m_ZeroAimedID == -1 ) return;

  00016	89 45 d8	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 3b 01 00
	00		 je	 $LN1@UpdateZero

; 223  : 	if( !pStage ) return;
; 224  : 
; 225  : 	bool bVisible = false;
; 226  : 	bool bDisable = false;
; 227  : 
; 228  : 	D3DXVECTOR3 vPos = GetFireItemPoint();

  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00026	50		 push	 eax
  00027	c6 45 e3 00	 mov	 BYTE PTR _bVisible$[ebp], 0
  0002b	e8 00 00 00 00	 call	 ?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemPoint

; 229  : 	if( IsBallTarget() )

  00030	80 bb 90 00 00
	00 00		 cmp	 BYTE PTR [ebx+144], 0
  00037	74 4c		 je	 SHORT $LN12@UpdateZero

; 230  : 	{
; 231  : 		ioBall *pBall = m_pOwner->FindBall();

  00039	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003c	e8 00 00 00 00	 call	 ?FindBall@ioBaseChar@@QAEPAVioBall@@XZ ; ioBaseChar::FindBall
  00041	8b c8		 mov	 ecx, eax

; 232  : 		if( pBall )

  00043	85 c9		 test	 ecx, ecx
  00045	0f 84 9d 00 00
	00		 je	 $LN9@UpdateZero

; 233  : 		{
; 234  : 			bVisible = true;

  0004b	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1

; 235  : 			vPos = pBall->GetMidPositionByRate();

  0004f	b8 05 00 00 00	 mov	 eax, 5
  00054	8b d0		 mov	 edx, eax
  00056	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0005b	89 55 dc	 mov	 DWORD PTR tv355[ebp], edx
  0005e	db 45 dc	 fild	 DWORD PTR tv355[ebp]
  00061	85 d2		 test	 edx, edx
  00063	79 06		 jns	 SHORT $LN32@UpdateZero
  00065	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@UpdateZero:
  0006b	89 45 dc	 mov	 DWORD PTR tv351[ebp], eax
  0006e	db 45 dc	 fild	 DWORD PTR tv351[ebp]
  00071	85 c0		 test	 eax, eax
  00073	79 06		 jns	 SHORT $LN33@UpdateZero
  00075	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@UpdateZero:
  0007b	de f9		 fdivp	 ST(1), ST(0)
  0007d	d9 5d dc	 fstp	 DWORD PTR tv347[ebp]
  00080	d9 45 dc	 fld	 DWORD PTR tv347[ebp]

; 236  : 		}
; 237  : 	}
; 238  : 	else

  00083	eb 4e		 jmp	 SHORT $LN36@UpdateZero
$LN12@UpdateZero:

; 239  : 	{
; 240  : 		ioBaseChar *pTarget = GetTargetChar();

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?GetTargetChar@ioTargetMarker@@QBEPAVioBaseChar@@XZ ; ioTargetMarker::GetTargetChar
  0008c	8b c8		 mov	 ecx, eax

; 241  : 		if( pTarget )

  0008e	85 c9		 test	 ecx, ecx
  00090	74 56		 je	 SHORT $LN9@UpdateZero

; 242  : 		{
; 243  : 			if( pTarget->IsOwnerChar() )

  00092	80 b9 84 13 00
	00 00		 cmp	 BYTE PTR [ecx+4996], 0
  00099	74 04		 je	 SHORT $LN8@UpdateZero

; 244  : 				bVisible = true;

  0009b	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1
$LN8@UpdateZero:

; 245  : 
; 246  : 			vPos = pTarget->GetMidPositionByRate();

  0009f	b8 05 00 00 00	 mov	 eax, 5
  000a4	8b d0		 mov	 edx, eax
  000a6	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000ab	89 55 dc	 mov	 DWORD PTR tv329[ebp], edx
  000ae	db 45 dc	 fild	 DWORD PTR tv329[ebp]
  000b1	85 d2		 test	 edx, edx
  000b3	79 06		 jns	 SHORT $LN34@UpdateZero
  000b5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@UpdateZero:
  000bb	89 45 dc	 mov	 DWORD PTR tv325[ebp], eax
  000be	db 45 dc	 fild	 DWORD PTR tv325[ebp]
  000c1	85 c0		 test	 eax, eax
  000c3	79 06		 jns	 SHORT $LN35@UpdateZero
  000c5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@UpdateZero:
  000cb	de f9		 fdivp	 ST(1), ST(0)
  000cd	d9 5d dc	 fstp	 DWORD PTR tv321[ebp]
  000d0	d9 45 dc	 fld	 DWORD PTR tv321[ebp]
$LN36@UpdateZero:
  000d3	51		 push	 ecx
  000d4	8d 45 e4	 lea	 eax, DWORD PTR $T530614[ebp]
  000d7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  000e0	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  000e3	8b f0		 mov	 esi, eax
  000e5	a5		 movsd
  000e6	a5		 movsd
  000e7	a5		 movsd
$LN9@UpdateZero:

; 247  : 		}
; 248  : 	}
; 249  : 
; 250  : 	if( m_pOwner->IsOwnerChar() )

  000e8	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000eb	80 b8 84 13 00
	00 00		 cmp	 BYTE PTR [eax+4996], 0
  000f2	74 04		 je	 SHORT $LN7@UpdateZero

; 251  : 		bVisible = true;

  000f4	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1
$LN7@UpdateZero:

; 252  : 
; 253  : 	if( !m_bPreUseEnable && m_bUseEnable )

  000f8	80 bb 92 00 00
	00 00		 cmp	 BYTE PTR [ebx+146], 0
  000ff	75 24		 jne	 SHORT $LN30@UpdateZero
  00101	80 bb 91 00 00
	00 00		 cmp	 BYTE PTR [ebx+145], 0
  00108	74 1b		 je	 SHORT $LN30@UpdateZero

; 254  : 	{
; 255  : 		DestroyMarker( pStage );

  0010a	ff 75 d8	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  0010d	8b cb		 mov	 ecx, ebx
  0010f	e8 00 00 00 00	 call	 ?DestroyMarker@ioTargetMarker@@QAEXPAVioPlayStage@@@Z ; ioTargetMarker::DestroyMarker

; 256  : 		m_ZeroAimedID = CreateEffect( pStage, m_szZeroAimedEffect );

  00114	8b 03		 mov	 eax, DWORD PTR [ebx]
  00116	8d 4b 4c	 lea	 ecx, DWORD PTR [ebx+76]
  00119	51		 push	 ecx
  0011a	ff 75 d8	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  0011d	8b cb		 mov	 ecx, ebx
  0011f	ff 50 0c	 call	 DWORD PTR [eax+12]
  00122	89 43 78	 mov	 DWORD PTR [ebx+120], eax
$LN30@UpdateZero:

; 257  : 	}
; 258  : 
; 259  : 	if( m_ZeroAimedID == -1 ) return;

  00125	8b 5b 78	 mov	 ebx, DWORD PTR [ebx+120]
  00128	83 fb ff	 cmp	 ebx, -1
  0012b	74 2d		 je	 SHORT $LN31@UpdateZero

; 260  : 
; 261  : 	ioMapEffect *pEff = pStage->FindMapEffect( m_ZeroAimedID );

  0012d	8b 4d d8	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  00130	53		 push	 ebx
  00131	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00136	8b f0		 mov	 esi, eax

; 262  : 	if( pEff )

  00138	85 f6		 test	 esi, esi
  0013a	74 1e		 je	 SHORT $LN31@UpdateZero

; 263  : 	{
; 264  : 		pEff->SetWorldPosition( vPos );

  0013c	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  0013f	50		 push	 eax
  00140	8b ce		 mov	 ecx, esi
  00142	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 265  : 
; 266  : 		if( bDisable || !bVisible )

  00147	80 7d e3 00	 cmp	 BYTE PTR _bVisible$[ebp], 0

; 268  : 		else
; 269  : 			pEff->SetVisible( true );

  0014b	8b ce		 mov	 ecx, esi
  0014d	74 04		 je	 SHORT $LN2@UpdateZero
  0014f	6a 01		 push	 1
  00151	eb 02		 jmp	 SHORT $LN37@UpdateZero
$LN2@UpdateZero:

; 267  : 			pEff->SetVisible( false );

  00153	6a 00		 push	 0
$LN37@UpdateZero:
  00155	e8 00 00 00 00	 call	 ?SetVisible@ioMapEffect@@QAEX_N@Z ; ioMapEffect::SetVisible
$LN31@UpdateZero:
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
$LN1@UpdateZero:

; 270  : 	}
; 271  : }

  0015c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015f	33 cd		 xor	 ecx, ebp
  00161	5b		 pop	 ebx
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	c9		 leave
  00168	c2 04 00	 ret	 4
?UpdateZeroAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ENDP ; ioOtherMarker::UpdateZeroAimedState
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateJumpAimState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateJumpAimState
; Function compile flags: /Ogsp
;	COMDAT ?UpdateJumpAimState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?UpdateJumpAimState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z PROC ; ioOtherMarker::UpdateJumpAimState, COMDAT
; _this$ = ecx

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _pStage$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 275  : 	if( !pStage ) return;

  00017	85 ff		 test	 edi, edi
  00019	74 4c		 je	 SHORT $LN1@UpdateJump

; 276  : 	if( m_JumpAimID == -1 ) return;

  0001b	83 7e 7c ff	 cmp	 DWORD PTR [esi+124], -1
  0001f	74 46		 je	 SHORT $LN1@UpdateJump

; 277  : 
; 278  : 	bool bVisible = false;
; 279  : 	bool bDisable = false;
; 280  : 
; 281  : 	if( m_pOwner->IsOwnerChar() )

  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	53		 push	 ebx
  00025	32 db		 xor	 bl, bl
  00027	38 98 84 13 00
	00		 cmp	 BYTE PTR [eax+4996], bl
  0002d	74 02		 je	 SHORT $LN5@UpdateJump

; 282  : 		bVisible = true;

  0002f	fe c3		 inc	 bl
$LN5@UpdateJump:

; 283  : 
; 284  : 	D3DXVECTOR3 vPos = GetFireItemJumpPoint();

  00031	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GetFireItemJumpPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemJumpPoint

; 285  : 
; 286  : 	ioMapEffect *pEff = pStage->FindMapEffect( m_JumpAimID );

  0003a	ff 76 7c	 push	 DWORD PTR [esi+124]
  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00044	8b f0		 mov	 esi, eax

; 287  : 	if( pEff )

  00046	85 f6		 test	 esi, esi
  00048	74 1c		 je	 SHORT $LN12@UpdateJump

; 288  : 	{
; 289  : 		pEff->SetWorldPosition( vPos );

  0004a	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  0004d	50		 push	 eax
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 293  : 		else
; 294  : 			pEff->SetVisible( true );

  00055	8b ce		 mov	 ecx, esi
  00057	84 db		 test	 bl, bl
  00059	74 04		 je	 SHORT $LN2@UpdateJump
  0005b	6a 01		 push	 1
  0005d	eb 02		 jmp	 SHORT $LN13@UpdateJump
$LN2@UpdateJump:

; 290  : 
; 291  : 		if( bDisable || !bVisible )
; 292  : 			pEff->SetVisible( false );

  0005f	6a 00		 push	 0
$LN13@UpdateJump:
  00061	e8 00 00 00 00	 call	 ?SetVisible@ioMapEffect@@QAEX_N@Z ; ioMapEffect::SetVisible
$LN12@UpdateJump:
  00066	5b		 pop	 ebx
$LN1@UpdateJump:

; 295  : 	}
; 296  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	5f		 pop	 edi
  0006b	33 cd		 xor	 ecx, ebp
  0006d	5e		 pop	 esi
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	c9		 leave
  00074	c2 04 00	 ret	 4
?UpdateJumpAimState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ENDP ; ioOtherMarker::UpdateJumpAimState
_TEXT	ENDS
PUBLIC	_pStage$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateHeadAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateHeadAimedState
; Function compile flags: /Ogsp
;	COMDAT ?UpdateHeadAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$GSCopy$ = -40					; size = 4
tv357 = -36						; size = 4
tv353 = -36						; size = 4
tv349 = -36						; size = 4
tv331 = -36						; size = 4
tv327 = -36						; size = 4
tv323 = -36						; size = 4
_bVisible$ = -29					; size = 1
$T530656 = -28						; size = 12
_vPos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_pStage$ = 8						; size = 4
?UpdateHeadAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z PROC ; ioOtherMarker::UpdateHeadAimedState, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pStage$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 335  : 	}
; 336  : 
; 337  : 	if( m_HeadAimedID == -1 ) return;

  00016	89 45 d8	 mov	 DWORD PTR _pStage$GSCopy$[ebp], eax
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 3e 01 00
	00		 je	 $LN1@UpdateHead

; 301  : 	if( !pStage ) return;
; 302  : 
; 303  : 	bool bVisible = false;
; 304  : 	bool bDisable = false;
; 305  : 
; 306  : 	D3DXVECTOR3 vPos = GetFireItemPoint();

  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00026	50		 push	 eax
  00027	c6 45 e3 00	 mov	 BYTE PTR _bVisible$[ebp], 0
  0002b	e8 00 00 00 00	 call	 ?GetFireItemPoint@ioOtherMarker@@IBE?AUD3DXVECTOR3@@XZ ; ioOtherMarker::GetFireItemPoint

; 307  : 	if( IsBallTarget() )

  00030	80 bb 90 00 00
	00 00		 cmp	 BYTE PTR [ebx+144], 0
  00037	74 4c		 je	 SHORT $LN12@UpdateHead

; 308  : 	{
; 309  : 		ioBall *pBall = m_pOwner->FindBall();

  00039	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003c	e8 00 00 00 00	 call	 ?FindBall@ioBaseChar@@QAEPAVioBall@@XZ ; ioBaseChar::FindBall
  00041	8b c8		 mov	 ecx, eax

; 310  : 		if( pBall )

  00043	85 c9		 test	 ecx, ecx
  00045	0f 84 9d 00 00
	00		 je	 $LN9@UpdateHead

; 311  : 		{
; 312  : 			bVisible = true;

  0004b	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1

; 313  : 			vPos = pBall->GetMidPositionByRate();

  0004f	b8 05 00 00 00	 mov	 eax, 5
  00054	8b d0		 mov	 edx, eax
  00056	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0005b	89 55 dc	 mov	 DWORD PTR tv357[ebp], edx
  0005e	db 45 dc	 fild	 DWORD PTR tv357[ebp]
  00061	85 d2		 test	 edx, edx
  00063	79 06		 jns	 SHORT $LN32@UpdateHead
  00065	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@UpdateHead:
  0006b	89 45 dc	 mov	 DWORD PTR tv353[ebp], eax
  0006e	db 45 dc	 fild	 DWORD PTR tv353[ebp]
  00071	85 c0		 test	 eax, eax
  00073	79 06		 jns	 SHORT $LN33@UpdateHead
  00075	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@UpdateHead:
  0007b	de f9		 fdivp	 ST(1), ST(0)
  0007d	d9 5d dc	 fstp	 DWORD PTR tv349[ebp]
  00080	d9 45 dc	 fld	 DWORD PTR tv349[ebp]

; 314  : 		}
; 315  : 	}
; 316  : 	else

  00083	eb 4e		 jmp	 SHORT $LN36@UpdateHead
$LN12@UpdateHead:

; 317  : 	{
; 318  : 		ioBaseChar *pTarget = GetTargetChar();

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?GetTargetChar@ioTargetMarker@@QBEPAVioBaseChar@@XZ ; ioTargetMarker::GetTargetChar
  0008c	8b c8		 mov	 ecx, eax

; 319  : 		if( pTarget )

  0008e	85 c9		 test	 ecx, ecx
  00090	74 56		 je	 SHORT $LN9@UpdateHead

; 320  : 		{
; 321  : 			if( pTarget->IsOwnerChar() )

  00092	80 b9 84 13 00
	00 00		 cmp	 BYTE PTR [ecx+4996], 0
  00099	74 04		 je	 SHORT $LN8@UpdateHead

; 322  : 				bVisible = true;

  0009b	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1
$LN8@UpdateHead:

; 323  : 
; 324  : 			vPos = pTarget->GetMidPositionByRate();

  0009f	b8 05 00 00 00	 mov	 eax, 5
  000a4	8b d0		 mov	 edx, eax
  000a6	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  000ab	89 55 dc	 mov	 DWORD PTR tv331[ebp], edx
  000ae	db 45 dc	 fild	 DWORD PTR tv331[ebp]
  000b1	85 d2		 test	 edx, edx
  000b3	79 06		 jns	 SHORT $LN34@UpdateHead
  000b5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@UpdateHead:
  000bb	89 45 dc	 mov	 DWORD PTR tv327[ebp], eax
  000be	db 45 dc	 fild	 DWORD PTR tv327[ebp]
  000c1	85 c0		 test	 eax, eax
  000c3	79 06		 jns	 SHORT $LN35@UpdateHead
  000c5	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@UpdateHead:
  000cb	de f9		 fdivp	 ST(1), ST(0)
  000cd	d9 5d dc	 fstp	 DWORD PTR tv323[ebp]
  000d0	d9 45 dc	 fld	 DWORD PTR tv323[ebp]
$LN36@UpdateHead:
  000d3	51		 push	 ecx
  000d4	8d 45 e4	 lea	 eax, DWORD PTR $T530656[ebp]
  000d7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ?GetMidPositionByRate@ioGameEntity@@QBE?AUD3DXVECTOR3@@M@Z ; ioGameEntity::GetMidPositionByRate
  000e0	8d 7d f0	 lea	 edi, DWORD PTR _vPos$[ebp]
  000e3	8b f0		 mov	 esi, eax
  000e5	a5		 movsd
  000e6	a5		 movsd
  000e7	a5		 movsd
$LN9@UpdateHead:

; 325  : 		}
; 326  : 	}
; 327  : 
; 328  : 	if( m_pOwner->IsOwnerChar() )

  000e8	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000eb	80 b8 84 13 00
	00 00		 cmp	 BYTE PTR [eax+4996], 0
  000f2	74 04		 je	 SHORT $LN7@UpdateHead

; 329  : 		bVisible = true;

  000f4	c6 45 e3 01	 mov	 BYTE PTR _bVisible$[ebp], 1
$LN7@UpdateHead:

; 330  : 
; 331  : 	if( !m_bPreUseEnable && m_bUseEnable )

  000f8	80 bb 92 00 00
	00 00		 cmp	 BYTE PTR [ebx+146], 0
  000ff	75 24		 jne	 SHORT $LN30@UpdateHead
  00101	80 bb 91 00 00
	00 00		 cmp	 BYTE PTR [ebx+145], 0
  00108	74 1b		 je	 SHORT $LN30@UpdateHead

; 332  : 	{
; 333  : 		DestroyMarker( pStage );

  0010a	ff 75 d8	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  0010d	8b cb		 mov	 ecx, ebx
  0010f	e8 00 00 00 00	 call	 ?DestroyMarker@ioTargetMarker@@QAEXPAVioPlayStage@@@Z ; ioTargetMarker::DestroyMarker

; 334  : 		m_ZeroAimedID = CreateEffect( pStage, m_szHeadAimedEffect );

  00114	8b 03		 mov	 eax, DWORD PTR [ebx]
  00116	8d 4b 5c	 lea	 ecx, DWORD PTR [ebx+92]
  00119	51		 push	 ecx
  0011a	ff 75 d8	 push	 DWORD PTR _pStage$GSCopy$[ebp]
  0011d	8b cb		 mov	 ecx, ebx
  0011f	ff 50 0c	 call	 DWORD PTR [eax+12]
  00122	89 43 78	 mov	 DWORD PTR [ebx+120], eax
$LN30@UpdateHead:

; 335  : 	}
; 336  : 
; 337  : 	if( m_HeadAimedID == -1 ) return;

  00125	8b 9b 80 00 00
	00		 mov	 ebx, DWORD PTR [ebx+128]
  0012b	83 fb ff	 cmp	 ebx, -1
  0012e	74 2d		 je	 SHORT $LN31@UpdateHead

; 338  : 
; 339  : 	ioMapEffect *pEff = pStage->FindMapEffect( m_HeadAimedID );

  00130	8b 4d d8	 mov	 ecx, DWORD PTR _pStage$GSCopy$[ebp]
  00133	53		 push	 ebx
  00134	e8 00 00 00 00	 call	 ?FindMapEffect@ioPlayStage@@QAEPAVioMapEffect@@K@Z ; ioPlayStage::FindMapEffect
  00139	8b f0		 mov	 esi, eax

; 340  : 	if( pEff )

  0013b	85 f6		 test	 esi, esi
  0013d	74 1e		 je	 SHORT $LN31@UpdateHead

; 341  : 	{
; 342  : 		pEff->SetWorldPosition( vPos );

  0013f	8d 45 f0	 lea	 eax, DWORD PTR _vPos$[ebp]
  00142	50		 push	 eax
  00143	8b ce		 mov	 ecx, esi
  00145	e8 00 00 00 00	 call	 ?SetWorldPosition@ioMapEffect@@QAEXABUD3DXVECTOR3@@@Z ; ioMapEffect::SetWorldPosition

; 343  : 
; 344  : 		if( bDisable || !bVisible )

  0014a	80 7d e3 00	 cmp	 BYTE PTR _bVisible$[ebp], 0

; 346  : 		else
; 347  : 			pEff->SetVisible( true );

  0014e	8b ce		 mov	 ecx, esi
  00150	74 04		 je	 SHORT $LN2@UpdateHead
  00152	6a 01		 push	 1
  00154	eb 02		 jmp	 SHORT $LN37@UpdateHead
$LN2@UpdateHead:

; 345  : 			pEff->SetVisible( false );

  00156	6a 00		 push	 0
$LN37@UpdateHead:
  00158	e8 00 00 00 00	 call	 ?SetVisible@ioMapEffect@@QAEX_N@Z ; ioMapEffect::SetVisible
$LN31@UpdateHead:
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
$LN1@UpdateHead:

; 348  : 	}
; 349  : }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	33 cd		 xor	 ecx, ebp
  00164	5b		 pop	 ebx
  00165	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016a	c9		 leave
  0016b	c2 04 00	 ret	 4
?UpdateHeadAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ENDP ; ioOtherMarker::UpdateHeadAimedState
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?Update@ioOtherMarker@@UAEXPAVioPlayStage@@@Z
_TEXT	SEGMENT
_pStage$ = 8						; size = 4
?Update@ioOtherMarker@@UAEXPAVioPlayStage@@@Z PROC	; ioOtherMarker::Update, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	switch( m_MarkerState )

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	48		 dec	 eax
  00007	74 2d		 je	 SHORT $LN6@Update
  00009	48		 dec	 eax
  0000a	74 24		 je	 SHORT $LN5@Update
  0000c	48		 dec	 eax
  0000d	74 1b		 je	 SHORT $LN4@Update
  0000f	48		 dec	 eax
  00010	74 12		 je	 SHORT $LN3@Update
  00012	48		 dec	 eax
  00013	74 09		 je	 SHORT $LN2@Update
  00015	48		 dec	 eax
  00016	75 24		 jne	 SHORT $LN8@Update

; 52   : 		break;
; 53   : 	}
; 54   : }

  00018	5d		 pop	 ebp

; 49   : 		break;
; 50   : 	case MS_HEAD_AIMED:
; 51   : 		UpdateHeadAimedState( pStage );

  00019	e9 00 00 00 00	 jmp	 ?UpdateHeadAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateHeadAimedState
$LN2@Update:

; 52   : 		break;
; 53   : 	}
; 54   : }

  0001e	5d		 pop	 ebp

; 46   : 		break;
; 47   : 	case MS_JUMP_AIM:
; 48   : 		UpdateJumpAimState( pStage );

  0001f	e9 00 00 00 00	 jmp	 ?UpdateJumpAimState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateJumpAimState
$LN3@Update:

; 52   : 		break;
; 53   : 	}
; 54   : }

  00024	5d		 pop	 ebp

; 43   : 		break;
; 44   : 	case MS_ZERO_AIMED:
; 45   : 		UpdateZeroAimedState( pStage );

  00025	e9 00 00 00 00	 jmp	 ?UpdateZeroAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateZeroAimedState
$LN4@Update:

; 52   : 		break;
; 53   : 	}
; 54   : }

  0002a	5d		 pop	 ebp

; 40   : 		break;
; 41   : 	case MS_AIMED:
; 42   : 		UpdateAimedState( pStage );

  0002b	e9 00 00 00 00	 jmp	 ?UpdateAimedState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateAimedState
$LN5@Update:

; 52   : 		break;
; 53   : 	}
; 54   : }

  00030	5d		 pop	 ebp

; 37   : 		break;
; 38   : 	case MS_AIMING:
; 39   : 		UpdateAimingState( pStage );

  00031	e9 00 00 00 00	 jmp	 ?UpdateAimingState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateAimingState
$LN6@Update:

; 52   : 		break;
; 53   : 	}
; 54   : }

  00036	5d		 pop	 ebp

; 32   : 	{
; 33   : 	case MS_NONE:
; 34   : 		break;
; 35   : 	case MS_READY:
; 36   : 		UpdateReadyState( pStage );

  00037	e9 00 00 00 00	 jmp	 ?UpdateReadyState@ioOtherMarker@@IAEXPAVioPlayStage@@@Z ; ioOtherMarker::UpdateReadyState
$LN8@Update:

; 52   : 		break;
; 53   : 	}
; 54   : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?Update@ioOtherMarker@@UAEXPAVioPlayStage@@@Z ENDP	; ioOtherMarker::Update
_TEXT	ENDS
END
