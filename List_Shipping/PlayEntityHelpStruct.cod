; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\PlayEntityHelpStruct.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z	; CEncrypt<int>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z PROC	; CEncrypt<int>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ENDP	; CEncrypt<int>::EncryptValueToPool
_TEXT	ENDS
PUBLIC	?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z	; CEncrypt<int>::DecryptValueToPool
EXTRN	?DecryptByte@ccddaabb@@QBEXPBDPADH@Z:PROC	; ccddaabb::DecryptByte
; Function compile flags: /Ogsp
;	COMDAT ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z PROC	; CEncrypt<int>::DecryptValueToPool, COMDAT
; _this$ = ecx

; 837  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 838  : 		m_RC5.DecryptByte( m_MemPool, m_TempMem, 4 );

  00004	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00007	6a 04		 push	 4
  00009	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00011	e8 00 00 00 00	 call	 ?DecryptByte@ccddaabb@@QBEXPBDPADH@Z ; ccddaabb::DecryptByte

; 839  : 		*value = *((int*)m_TempMem);

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _value$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
  0001d	5e		 pop	 esi

; 840  : 	}

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ENDP	; CEncrypt<int>::DecryptValueToPool
_TEXT	ENDS
PUBLIC	??O?$CEncrypt@H@@QAE_NABH@Z			; CEncrypt<int>::operator>
; Function compile flags: /Ogsp
;	COMDAT ??O?$CEncrypt@H@@QAE_NABH@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_inValue$ = 8						; size = 4
??O?$CEncrypt@H@@QAE_NABH@Z PROC			; CEncrypt<int>::operator>, COMDAT
; _this$ = ecx

; 1009 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1010 : 		
; 1011 : 		type value;
; 1012 : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 1013 : #ifdef _NOTUSE
; 1014 : 		Debug();
; 1015 : #endif
; 1016 : 		return (value > inValue);

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _inValue$[ebp]
  00010	8b 55 fc	 mov	 edx, DWORD PTR _value$[ebp]
  00013	33 c0		 xor	 eax, eax
  00015	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00017	0f 9f c0	 setg	 al

; 1017 : 	}		

  0001a	c9		 leave
  0001b	c2 04 00	 ret	 4
??O?$CEncrypt@H@@QAE_NABH@Z ENDP			; CEncrypt<int>::operator>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z	; operator==<7>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 7
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z PROC	; operator==<7>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 c0 00 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 a9 00 00
	00		 je	 $LN95@operator
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 92 00 00
	00		 je	 $LN94@operator
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	74 7f		 je	 SHORT $LN93@operator
  00051	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00054	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00057	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005a	84 d2		 test	 dl, dl
  0005c	74 6c		 je	 SHORT $LN92@operator
  0005e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00061	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00064	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00067	84 d2		 test	 dl, dl
  00069	74 59		 je	 SHORT $LN91@operator
  0006b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0006e	80 78 06 00	 cmp	 BYTE PTR [eax+6], 0
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	74 6f		 je	 SHORT $LN1@operator
  00077	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0007a	84 d2		 test	 dl, dl
  0007c	74 40		 je	 SHORT $LN89@operator
  0007e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00081	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  00084	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00087	84 d2		 test	 dl, dl
  00089	74 2d		 je	 SHORT $LN88@operator
  0008b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0008e	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00091	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00094	84 d2		 test	 dl, dl
  00096	74 1a		 je	 SHORT $LN87@operator
  00098	8a 40 0a	 mov	 al, BYTE PTR [eax+10]
  0009b	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009e	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a1	84 c0		 test	 al, al
  000a3	74 07		 je	 SHORT $LN86@operator
  000a5	34 eb		 xor	 al, -21			; ffffffebH
  000a7	88 45 fa	 mov	 BYTE PTR __t$[ebp+10], al
  000aa	eb 3a		 jmp	 SHORT $LN1@operator
$LN86@operator:
  000ac	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000b0	eb 34		 jmp	 SHORT $LN1@operator
$LN87@operator:
  000b2	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000b6	eb 2e		 jmp	 SHORT $LN1@operator
$LN88@operator:
  000b8	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000bc	eb 28		 jmp	 SHORT $LN1@operator
$LN89@operator:
  000be	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000c2	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  000c4	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000c8	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  000ca	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000ce	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  000d0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000d4	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  000d6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000da	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  000dc	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000e0	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  000e2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  000e6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000ed	6a 04		 push	 4
  000ef	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+6], 0
  000f3	58		 pop	 eax
$LL101@operator:
  000f4	8b c8		 mov	 ecx, eax
  000f6	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000fc	79 05		 jns	 SHORT $LN115@operator
  000fe	49		 dec	 ecx
  000ff	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00102	41		 inc	 ecx
$LN115@operator:
  00103	b2 ed		 mov	 dl, -19			; ffffffedH
  00105	2a d1		 sub	 dl, cl
  00107	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  0010b	40		 inc	 eax
  0010c	83 f8 06	 cmp	 eax, 6
  0010f	7c e3		 jl	 SHORT $LL101@operator
  00111	8b cf		 mov	 ecx, edi
  00113	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  0011c	8a 08		 mov	 cl, BYTE PTR [eax]
  0011e	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00120	75 1a		 jne	 SHORT $LN112@operator
  00122	84 c9		 test	 cl, cl
  00124	74 12		 je	 SHORT $LN113@operator
  00126	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00129	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0012c	75 0e		 jne	 SHORT $LN112@operator
  0012e	83 c0 02	 add	 eax, 2
  00131	83 c6 02	 add	 esi, 2
  00134	84 c9		 test	 cl, cl
  00136	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  00138	33 c0		 xor	 eax, eax
  0013a	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  0013c	1b c0		 sbb	 eax, eax
  0013e	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  00141	33 c9		 xor	 ecx, ecx
  00143	85 c0		 test	 eax, eax
  00145	0f 94 c0	 sete	 al

; 148  : }

  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	5f		 pop	 edi
  0014c	33 cd		 xor	 ecx, ebp
  0014e	5e		 pop	 esi
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	c9		 leave
  00155	c3		 ret	 0
??$?8$06@@YA_NABVioHashString@@AAY06$$CBD@Z ENDP	; operator==<7>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z	; operator==<9>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z PROC	; operator==<9>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 ee 00 00
	00		 je	 $LN96@operator@2
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 d7 00 00
	00		 je	 $LN95@operator@2
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 c0 00 00
	00		 je	 $LN94@operator@2
  00042	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00045	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  00048	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004b	84 d2		 test	 dl, dl
  0004d	0f 84 a9 00 00
	00		 je	 $LN93@operator@2
  00053	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00056	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  00059	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005c	84 d2		 test	 dl, dl
  0005e	0f 84 92 00 00
	00		 je	 $LN92@operator@2
  00064	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00067	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006a	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006d	84 d2		 test	 dl, dl
  0006f	74 7f		 je	 SHORT $LN91@operator@2
  00071	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00074	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  00077	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007a	84 d2		 test	 dl, dl
  0007c	74 6c		 je	 SHORT $LN90@operator@2
  0007e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00081	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  00084	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00087	84 d2		 test	 dl, dl
  00089	74 59		 je	 SHORT $LN89@operator@2
  0008b	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0008e	80 78 08 00	 cmp	 BYTE PTR [eax+8], 0
  00092	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  00095	74 7b		 je	 SHORT $LN1@operator@2
  00097	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  0009a	84 d2		 test	 dl, dl
  0009c	74 40		 je	 SHORT $LN87@operator@2
  0009e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000a1	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000a4	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a7	84 d2		 test	 dl, dl
  000a9	74 2d		 je	 SHORT $LN86@operator@2
  000ab	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000ae	88 55 f6	 mov	 BYTE PTR __t$[ebp+10], dl
  000b1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000b4	84 d2		 test	 dl, dl
  000b6	74 1a		 je	 SHORT $LN85@operator@2
  000b8	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  000bb	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000be	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000c1	84 c0		 test	 al, al
  000c3	74 07		 je	 SHORT $LN84@operator@2
  000c5	34 ed		 xor	 al, -19			; ffffffedH
  000c7	88 45 f8	 mov	 BYTE PTR __t$[ebp+12], al
  000ca	eb 46		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  000cc	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  000d0	eb 40		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  000d2	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000d6	eb 3a		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  000d8	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000dc	eb 34		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  000de	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000e2	eb 2e		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  000e4	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  000e8	eb 28		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  000ea	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000ee	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  000f0	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000f4	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  000f6	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000fa	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  000fc	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00100	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  00102	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  00106	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  00108	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  0010c	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  0010e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  00112	6a 02		 push	 2
  00114	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  00117	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+8], 0
  0011b	5a		 pop	 edx
$LL104@operator@2:
  0011c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00122	83 c0 04	 add	 eax, 4
  00125	4a		 dec	 edx
  00126	75 f4		 jne	 SHORT $LL104@operator@2
  00128	56		 push	 esi
  00129	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  00132	8a 08		 mov	 cl, BYTE PTR [eax]
  00134	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00136	75 1a		 jne	 SHORT $LN112@operator@2
  00138	84 c9		 test	 cl, cl
  0013a	74 12		 je	 SHORT $LN113@operator@2
  0013c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0013f	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00142	75 0e		 jne	 SHORT $LN112@operator@2
  00144	83 c0 02	 add	 eax, 2
  00147	83 c6 02	 add	 esi, 2
  0014a	84 c9		 test	 cl, cl
  0014c	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  00152	1b c0		 sbb	 eax, eax
  00154	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  00157	33 c9		 xor	 ecx, ecx
  00159	85 c0		 test	 eax, eax
  0015b	0f 94 c0	 sete	 al

; 148  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	5e		 pop	 esi
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	c9		 leave
  0016a	c3		 ret	 0
??$?8$08@@YA_NABVioHashString@@AAY08$$CBD@Z ENDP	; operator==<9>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z	; operator==<8>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z PROC	; operator==<8>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 d7 00 00
	00		 je	 $LN96@operator@3
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 c0 00 00
	00		 je	 $LN95@operator@3
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 a9 00 00
	00		 je	 $LN94@operator@3
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 92 00 00
	00		 je	 $LN93@operator@3
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	74 7f		 je	 SHORT $LN92@operator@3
  00062	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00065	88 55 f4	 mov	 BYTE PTR __t$[ebp+4], dl
  00068	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006b	84 d2		 test	 dl, dl
  0006d	74 6c		 je	 SHORT $LN91@operator@3
  0006f	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00072	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00075	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00078	84 d2		 test	 dl, dl
  0007a	74 59		 je	 SHORT $LN90@operator@3
  0007c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0007f	80 78 07 00	 cmp	 BYTE PTR [eax+7], 0
  00083	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  00086	74 75		 je	 SHORT $LN1@operator@3
  00088	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0008b	84 d2		 test	 dl, dl
  0008d	74 40		 je	 SHORT $LN88@operator@3
  0008f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00092	88 55 f8	 mov	 BYTE PTR __t$[ebp+8], dl
  00095	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  00098	84 d2		 test	 dl, dl
  0009a	74 2d		 je	 SHORT $LN87@operator@3
  0009c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0009f	88 55 f9	 mov	 BYTE PTR __t$[ebp+9], dl
  000a2	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000a5	84 d2		 test	 dl, dl
  000a7	74 1a		 je	 SHORT $LN86@operator@3
  000a9	8a 40 0b	 mov	 al, BYTE PTR [eax+11]
  000ac	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000af	88 55 fa	 mov	 BYTE PTR __t$[ebp+10], dl
  000b2	84 c0		 test	 al, al
  000b4	74 07		 je	 SHORT $LN85@operator@3
  000b6	34 ea		 xor	 al, -22			; ffffffeaH
  000b8	88 45 fb	 mov	 BYTE PTR __t$[ebp+11], al
  000bb	eb 40		 jmp	 SHORT $LN1@operator@3
$LN85@operator@3:
  000bd	c6 45 fb ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  000c1	eb 3a		 jmp	 SHORT $LN1@operator@3
$LN86@operator@3:
  000c3	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+10], -21 ; ffffffebH
  000c7	eb 34		 jmp	 SHORT $LN1@operator@3
$LN87@operator@3:
  000c9	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  000cd	eb 2e		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  000cf	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  000d3	eb 28		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  000d5	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  000d9	eb 22		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  000db	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  000df	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN92@operator@3:
  000e1	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  000e5	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  000e7	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000eb	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  000ed	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000f1	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  000f3	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000f7	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  000f9	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  000fd	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  00104	6a 04		 push	 4
  00106	c6 45 f7 00	 mov	 BYTE PTR __t$[ebp+7], 0
  0010a	58		 pop	 eax
$LL101@operator@3:
  0010b	8b c8		 mov	 ecx, eax
  0010d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00113	79 05		 jns	 SHORT $LN115@operator@3
  00115	49		 dec	 ecx
  00116	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00119	41		 inc	 ecx
$LN115@operator@3:
  0011a	b2 ed		 mov	 dl, -19			; ffffffedH
  0011c	2a d1		 sub	 dl, cl
  0011e	30 54 05 f0	 xor	 BYTE PTR __t$[ebp+eax], dl
  00122	40		 inc	 eax
  00123	83 f8 07	 cmp	 eax, 7
  00126	7c e3		 jl	 SHORT $LL101@operator@3
  00128	8b cf		 mov	 ecx, edi
  0012a	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  00133	8a 08		 mov	 cl, BYTE PTR [eax]
  00135	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00137	75 1a		 jne	 SHORT $LN112@operator@3
  00139	84 c9		 test	 cl, cl
  0013b	74 12		 je	 SHORT $LN113@operator@3
  0013d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00140	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00143	75 0e		 jne	 SHORT $LN112@operator@3
  00145	83 c0 02	 add	 eax, 2
  00148	83 c6 02	 add	 esi, 2
  0014b	84 c9		 test	 cl, cl
  0014d	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  0014f	33 c0		 xor	 eax, eax
  00151	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  00153	1b c0		 sbb	 eax, eax
  00155	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  00158	33 c9		 xor	 ecx, ecx
  0015a	85 c0		 test	 eax, eax
  0015c	0f 94 c0	 sete	 al

; 148  : }

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	5f		 pop	 edi
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	c9		 leave
  0016c	c3		 ret	 0
??$?8$07@@YA_NABVioHashString@@AAY07$$CBD@Z ENDP	; operator==<8>
_TEXT	ENDS
PUBLIC	??B?$CEncrypt@H@@QAEHXZ				; CEncrypt<int>::operator int
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??B?$CEncrypt@H@@QAEHXZ
_TEXT	SEGMENT
_value$ = -4						; size = 4
??B?$CEncrypt@H@@QAEHXZ PROC				; CEncrypt<int>::operator int, COMDAT
; _this$ = ecx

; 134  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 		type value;
; 136  : 		DecryptValueToPool(&value);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool

; 137  : 
; 138  : #ifdef _NOTUSE
; 139  : 		Debug();
; 140  : #endif
; 141  : 		return value;

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]

; 142  : 	}

  00010	c9		 leave
  00011	c3		 ret	 0
??B?$CEncrypt@H@@QAEHXZ ENDP				; CEncrypt<int>::operator int
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@H@@QAEHH@Z			; CEncrypt<int>::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$CEncrypt@H@@QAEHH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@H@@QAEHH@Z PROC				; CEncrypt<int>::operator=, COMDAT
; _this$ = ecx

; 843  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  : 		type value = inValue;

  00003	8b 45 08	 mov	 eax, DWORD PTR _inValue$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _value$[ebp], eax

; 845  : 		EncryptValueToPool((char*)&value);

  00009	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool

; 846  : #ifdef _NOTUSE
; 847  : 		m_value = inValue;
; 848  : 		Debug();
; 849  : #endif
; 850  : 		return value;

  00012	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 851  : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@H@@QAEHH@Z ENDP				; CEncrypt<int>::operator=
_TEXT	ENDS
PUBLIC	_rkName$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?GetAniCollisionType@@YA?AW4AniCollisionType@@ABVioHashString@@@Z ; GetAniCollisionType
EXTRN	__imp_?IsEmpty@ioHashString@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.cpp
;	COMDAT ?GetAniCollisionType@@YA?AW4AniCollisionType@@ABVioHashString@@@Z
_TEXT	SEGMENT
_rkName$GSCopy$ = -24					; size = 4
__t$506463 = -20					; size = 8
__t$506338 = -20					; size = 9
__t$506226 = -20					; size = 9
__t$506101 = -20					; size = 7
__t$505976 = -20					; size = 7
__t$505838 = -20					; size = 7
__t$505713 = -20					; size = 7
__$ArrayPad$ = -4					; size = 4
_rkName$ = 8						; size = 4
?GetAniCollisionType@@YA?AW4AniCollisionType@@ABVioHashString@@@Z PROC ; GetAniCollisionType, COMDAT

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _rkName$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 22   : 		if( rkName == "special" )

  00016	89 4d e8	 mov	 DWORD PTR _rkName$GSCopy$[ebp], ecx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@ioHashString@@QBE_NXZ
  0001f	84 c0		 test	 al, al
  00021	0f 85 dd 02 00
	00		 jne	 $LN1@GetAniColl

; 8    : 	if( !rkName.IsEmpty() )
; 9    : 	{
; 10   : 		if( rkName == "l_hand" )

  00027	33 db		 xor	 ebx, ebx
  00029	be ed ec eb ea	 mov	 esi, -353637139		; eaebecedH
  0002e	6a 04		 push	 4
  00030	c7 45 ec 81 b3
	83 8b		 mov	 DWORD PTR __t$505713[ebp], -1954303103 ; 8b83b381H
  00037	31 75 ec	 xor	 DWORD PTR __t$505713[ebp], esi
  0003a	66 c7 45 f0 83
	88		 mov	 WORD PTR __t$505713[ebp+4], 34947 ; 00008883H
  00040	88 5d f2	 mov	 BYTE PTR __t$505713[ebp+6], bl
  00043	58		 pop	 eax
$LL111@GetAniColl:
  00044	8b c8		 mov	 ecx, eax
  00046	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0004c	79 05		 jns	 SHORT $LN818@GetAniColl
  0004e	49		 dec	 ecx
  0004f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00052	41		 inc	 ecx
$LN818@GetAniColl:
  00053	b2 ed		 mov	 dl, -19			; ffffffedH
  00055	2a d1		 sub	 dl, cl
  00057	30 54 05 ec	 xor	 BYTE PTR __t$505713[ebp+eax], dl
  0005b	40		 inc	 eax
  0005c	83 f8 06	 cmp	 eax, 6
  0005f	7c e3		 jl	 SHORT $LL111@GetAniColl
  00061	8b 4d e8	 mov	 ecx, DWORD PTR _rkName$GSCopy$[ebp]
  00064	8d 7d ec	 lea	 edi, DWORD PTR __t$505713[ebp]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL787@GetAniColl:
  0006d	8a 08		 mov	 cl, BYTE PTR [eax]
  0006f	3a 0f		 cmp	 cl, BYTE PTR [edi]
  00071	75 1a		 jne	 SHORT $LN788@GetAniColl
  00073	3a cb		 cmp	 cl, bl
  00075	74 12		 je	 SHORT $LN789@GetAniColl
  00077	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0007a	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  0007d	75 0e		 jne	 SHORT $LN788@GetAniColl
  0007f	83 c0 02	 add	 eax, 2
  00082	83 c7 02	 add	 edi, 2
  00085	3a cb		 cmp	 cl, bl
  00087	75 e4		 jne	 SHORT $LL787@GetAniColl
$LN789@GetAniColl:
  00089	33 c0		 xor	 eax, eax
  0008b	eb 05		 jmp	 SHORT $LN790@GetAniColl
$LN788@GetAniColl:
  0008d	1b c0		 sbb	 eax, eax
  0008f	83 d8 ff	 sbb	 eax, -1
$LN790@GetAniColl:
  00092	3b c3		 cmp	 eax, ebx
  00094	75 07		 jne	 SHORT $LN781@GetAniColl

; 11   : 			return ACT_LEFT_HAND;

  00096	33 c0		 xor	 eax, eax
  00098	e9 6a 02 00 00	 jmp	 $LN9@GetAniColl
$LN781@GetAniColl:

; 12   : 		if( rkName == "r_hand" )

  0009d	6a 04		 push	 4
  0009f	c7 45 ec 9f b3
	83 8b		 mov	 DWORD PTR __t$505838[ebp], -1954303073 ; 8b83b39fH
  000a6	31 75 ec	 xor	 DWORD PTR __t$505838[ebp], esi
  000a9	66 c7 45 f0 83
	88		 mov	 WORD PTR __t$505838[ebp+4], 34947 ; 00008883H
  000af	88 5d f2	 mov	 BYTE PTR __t$505838[ebp+6], bl
  000b2	58		 pop	 eax
$LL217@GetAniColl:
  000b3	8b c8		 mov	 ecx, eax
  000b5	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000bb	79 05		 jns	 SHORT $LN819@GetAniColl
  000bd	49		 dec	 ecx
  000be	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000c1	41		 inc	 ecx
$LN819@GetAniColl:
  000c2	b2 ed		 mov	 dl, -19			; ffffffedH
  000c4	2a d1		 sub	 dl, cl
  000c6	30 54 05 ec	 xor	 BYTE PTR __t$505838[ebp+eax], dl
  000ca	40		 inc	 eax
  000cb	83 f8 06	 cmp	 eax, 6
  000ce	7c e3		 jl	 SHORT $LL217@GetAniColl
  000d0	8b 4d e8	 mov	 ecx, DWORD PTR _rkName$GSCopy$[ebp]
  000d3	8d 7d ec	 lea	 edi, DWORD PTR __t$505838[ebp]
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL791@GetAniColl:
  000dc	8a 08		 mov	 cl, BYTE PTR [eax]
  000de	3a 0f		 cmp	 cl, BYTE PTR [edi]
  000e0	75 1a		 jne	 SHORT $LN792@GetAniColl
  000e2	3a cb		 cmp	 cl, bl
  000e4	74 12		 je	 SHORT $LN793@GetAniColl
  000e6	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e9	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  000ec	75 0e		 jne	 SHORT $LN792@GetAniColl
  000ee	83 c0 02	 add	 eax, 2
  000f1	83 c7 02	 add	 edi, 2
  000f4	3a cb		 cmp	 cl, bl
  000f6	75 e4		 jne	 SHORT $LL791@GetAniColl
$LN793@GetAniColl:
  000f8	33 c0		 xor	 eax, eax
  000fa	eb 05		 jmp	 SHORT $LN794@GetAniColl
$LN792@GetAniColl:
  000fc	1b c0		 sbb	 eax, eax
  000fe	83 d8 ff	 sbb	 eax, -1
$LN794@GetAniColl:
  00101	3b c3		 cmp	 eax, ebx
  00103	75 08		 jne	 SHORT $LN782@GetAniColl

; 13   : 			return ACT_RIGHT_HAND;

  00105	33 c0		 xor	 eax, eax
  00107	40		 inc	 eax
  00108	e9 fa 01 00 00	 jmp	 $LN9@GetAniColl
$LN782@GetAniColl:

; 14   : 		if( rkName == "l_foot" )

  0010d	6a 04		 push	 4
  0010f	c7 45 ec 81 b3
	8d 85		 mov	 DWORD PTR __t$505976[ebp], -2054311039 ; 858db381H
  00116	31 75 ec	 xor	 DWORD PTR __t$505976[ebp], esi
  00119	66 c7 45 f0 82
	98		 mov	 WORD PTR __t$505976[ebp+4], 39042 ; 00009882H
  0011f	88 5d f2	 mov	 BYTE PTR __t$505976[ebp+6], bl
  00122	58		 pop	 eax
$LL323@GetAniColl:
  00123	8b c8		 mov	 ecx, eax
  00125	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0012b	79 05		 jns	 SHORT $LN820@GetAniColl
  0012d	49		 dec	 ecx
  0012e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00131	41		 inc	 ecx
$LN820@GetAniColl:
  00132	b2 ed		 mov	 dl, -19			; ffffffedH
  00134	2a d1		 sub	 dl, cl
  00136	30 54 05 ec	 xor	 BYTE PTR __t$505976[ebp+eax], dl
  0013a	40		 inc	 eax
  0013b	83 f8 06	 cmp	 eax, 6
  0013e	7c e3		 jl	 SHORT $LL323@GetAniColl
  00140	8b 4d e8	 mov	 ecx, DWORD PTR _rkName$GSCopy$[ebp]
  00143	8d 7d ec	 lea	 edi, DWORD PTR __t$505976[ebp]
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL795@GetAniColl:
  0014c	8a 08		 mov	 cl, BYTE PTR [eax]
  0014e	3a 0f		 cmp	 cl, BYTE PTR [edi]
  00150	75 1a		 jne	 SHORT $LN796@GetAniColl
  00152	3a cb		 cmp	 cl, bl
  00154	74 12		 je	 SHORT $LN815@GetAniColl
  00156	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00159	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  0015c	75 0e		 jne	 SHORT $LN796@GetAniColl
  0015e	83 c0 02	 add	 eax, 2
  00161	83 c7 02	 add	 edi, 2
  00164	3a cb		 cmp	 cl, bl
  00166	75 e4		 jne	 SHORT $LL795@GetAniColl
$LN815@GetAniColl:
  00168	33 c0		 xor	 eax, eax
  0016a	eb 05		 jmp	 SHORT $LN798@GetAniColl
$LN796@GetAniColl:
  0016c	1b c0		 sbb	 eax, eax
  0016e	83 d8 ff	 sbb	 eax, -1
$LN798@GetAniColl:
  00171	3b c3		 cmp	 eax, ebx
  00173	75 07		 jne	 SHORT $LN783@GetAniColl

; 15   : 			return ACT_LEFT_FOOT;

  00175	6a 02		 push	 2
  00177	e9 8a 01 00 00	 jmp	 $LN823@GetAniColl
$LN783@GetAniColl:

; 16   : 		if( rkName == "r_foot" )

  0017c	6a 04		 push	 4
  0017e	c7 45 ec 9f b3
	8d 85		 mov	 DWORD PTR __t$506101[ebp], -2054311009 ; 858db39fH
  00185	31 75 ec	 xor	 DWORD PTR __t$506101[ebp], esi
  00188	66 c7 45 f0 82
	98		 mov	 WORD PTR __t$506101[ebp+4], 39042 ; 00009882H
  0018e	88 5d f2	 mov	 BYTE PTR __t$506101[ebp+6], bl
  00191	58		 pop	 eax
$LL429@GetAniColl:
  00192	8b c8		 mov	 ecx, eax
  00194	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0019a	79 05		 jns	 SHORT $LN821@GetAniColl
  0019c	49		 dec	 ecx
  0019d	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001a0	41		 inc	 ecx
$LN821@GetAniColl:
  001a1	b2 ed		 mov	 dl, -19			; ffffffedH
  001a3	2a d1		 sub	 dl, cl
  001a5	30 54 05 ec	 xor	 BYTE PTR __t$506101[ebp+eax], dl
  001a9	40		 inc	 eax
  001aa	83 f8 06	 cmp	 eax, 6
  001ad	7c e3		 jl	 SHORT $LL429@GetAniColl
  001af	8b 4d e8	 mov	 ecx, DWORD PTR _rkName$GSCopy$[ebp]
  001b2	8d 7d ec	 lea	 edi, DWORD PTR __t$506101[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL799@GetAniColl:
  001bb	8a 08		 mov	 cl, BYTE PTR [eax]
  001bd	3a 0f		 cmp	 cl, BYTE PTR [edi]
  001bf	75 1a		 jne	 SHORT $LN800@GetAniColl
  001c1	3a cb		 cmp	 cl, bl
  001c3	74 12		 je	 SHORT $LN816@GetAniColl
  001c5	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001c8	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  001cb	75 0e		 jne	 SHORT $LN800@GetAniColl
  001cd	83 c0 02	 add	 eax, 2
  001d0	83 c7 02	 add	 edi, 2
  001d3	3a cb		 cmp	 cl, bl
  001d5	75 e4		 jne	 SHORT $LL799@GetAniColl
$LN816@GetAniColl:
  001d7	33 c0		 xor	 eax, eax
  001d9	eb 05		 jmp	 SHORT $LN802@GetAniColl
$LN800@GetAniColl:
  001db	1b c0		 sbb	 eax, eax
  001dd	83 d8 ff	 sbb	 eax, -1
$LN802@GetAniColl:
  001e0	3b c3		 cmp	 eax, ebx
  001e2	75 07		 jne	 SHORT $LN784@GetAniColl

; 17   : 			return ACT_RIGHT_FOOT;

  001e4	6a 03		 push	 3
  001e6	e9 1b 01 00 00	 jmp	 $LN823@GetAniColl
$LN784@GetAniColl:

; 18   : 		if( rkName == "r_weapon" )

  001eb	6a 02		 push	 2
  001ed	c7 45 ec 9f b3
	9c 8f		 mov	 DWORD PTR __t$506226[ebp], -1885555809 ; 8f9cb39fH
  001f4	c7 45 f0 8c 9c
	84 84		 mov	 DWORD PTR __t$506226[ebp+4], -2071683956 ; 84849c8cH
  001fb	8d 45 ec	 lea	 eax, DWORD PTR __t$506226[ebp]
  001fe	88 5d f4	 mov	 BYTE PTR __t$506226[ebp+8], bl
  00201	59		 pop	 ecx
$LL538@GetAniColl:
  00202	31 30		 xor	 DWORD PTR [eax], esi
  00204	83 c0 04	 add	 eax, 4
  00207	49		 dec	 ecx
  00208	75 f8		 jne	 SHORT $LL538@GetAniColl
  0020a	8b 4d e8	 mov	 ecx, DWORD PTR _rkName$GSCopy$[ebp]
  0020d	8d 7d ec	 lea	 edi, DWORD PTR __t$506226[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL803@GetAniColl:
  00216	8a 08		 mov	 cl, BYTE PTR [eax]
  00218	3a 0f		 cmp	 cl, BYTE PTR [edi]
  0021a	75 1a		 jne	 SHORT $LN804@GetAniColl
  0021c	3a cb		 cmp	 cl, bl
  0021e	74 12		 je	 SHORT $LN817@GetAniColl
  00220	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00223	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  00226	75 0e		 jne	 SHORT $LN804@GetAniColl
  00228	83 c0 02	 add	 eax, 2
  0022b	83 c7 02	 add	 edi, 2
  0022e	3a cb		 cmp	 cl, bl
  00230	75 e4		 jne	 SHORT $LL803@GetAniColl
$LN817@GetAniColl:
  00232	33 c0		 xor	 eax, eax
  00234	eb 05		 jmp	 SHORT $LN806@GetAniColl
$LN804@GetAniColl:
  00236	1b c0		 sbb	 eax, eax
  00238	83 d8 ff	 sbb	 eax, -1
$LN806@GetAniColl:
  0023b	3b c3		 cmp	 eax, ebx
  0023d	75 07		 jne	 SHORT $LN785@GetAniColl

; 19   : 			return ACT_RIGHT_WEAPON;

  0023f	6a 05		 push	 5
  00241	e9 c0 00 00 00	 jmp	 $LN823@GetAniColl
$LN785@GetAniColl:

; 20   : 		if( rkName == "l_weapon" )

  00246	6a 02		 push	 2
  00248	c7 45 ec 81 b3
	9c 8f		 mov	 DWORD PTR __t$506338[ebp], -1885555839 ; 8f9cb381H
  0024f	c7 45 f0 8c 9c
	84 84		 mov	 DWORD PTR __t$506338[ebp+4], -2071683956 ; 84849c8cH
  00256	8d 45 ec	 lea	 eax, DWORD PTR __t$506338[ebp]
  00259	88 5d f4	 mov	 BYTE PTR __t$506338[ebp+8], bl
  0025c	59		 pop	 ecx
$LL644@GetAniColl:
  0025d	31 30		 xor	 DWORD PTR [eax], esi
  0025f	83 c0 04	 add	 eax, 4
  00262	49		 dec	 ecx
  00263	75 f8		 jne	 SHORT $LL644@GetAniColl
  00265	8b 4d e8	 mov	 ecx, DWORD PTR _rkName$GSCopy$[ebp]
  00268	8d 7d ec	 lea	 edi, DWORD PTR __t$506338[ebp]
  0026b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL807@GetAniColl:
  00271	8a 08		 mov	 cl, BYTE PTR [eax]
  00273	3a 0f		 cmp	 cl, BYTE PTR [edi]
  00275	75 1a		 jne	 SHORT $LN808@GetAniColl
  00277	3a cb		 cmp	 cl, bl
  00279	74 12		 je	 SHORT $LN809@GetAniColl
  0027b	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0027e	3a 4f 01	 cmp	 cl, BYTE PTR [edi+1]
  00281	75 0e		 jne	 SHORT $LN808@GetAniColl
  00283	83 c0 02	 add	 eax, 2
  00286	83 c7 02	 add	 edi, 2
  00289	3a cb		 cmp	 cl, bl
  0028b	75 e4		 jne	 SHORT $LL807@GetAniColl
$LN809@GetAniColl:
  0028d	33 c0		 xor	 eax, eax
  0028f	eb 05		 jmp	 SHORT $LN810@GetAniColl
$LN808@GetAniColl:
  00291	1b c0		 sbb	 eax, eax
  00293	83 d8 ff	 sbb	 eax, -1
$LN810@GetAniColl:

; 21   : 			return ACT_LEFT_WEAPON;

  00296	6a 04		 push	 4
  00298	3b c3		 cmp	 eax, ebx
  0029a	58		 pop	 eax
  0029b	74 6a		 je	 SHORT $LN9@GetAniColl

; 22   : 		if( rkName == "special" )

  0029d	c7 45 ec 9e 9c
	8e 89		 mov	 DWORD PTR __t$506463[ebp], -1987142498 ; 898e9c9eH
  002a4	31 75 ec	 xor	 DWORD PTR __t$506463[ebp], esi
  002a7	c7 45 f0 84 8d
	87 00		 mov	 DWORD PTR __t$506463[ebp+4], 8883588 ; 00878d84H
$LL747@GetAniColl:
  002ae	8b c8		 mov	 ecx, eax
  002b0	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002b6	79 05		 jns	 SHORT $LN822@GetAniColl
  002b8	49		 dec	 ecx
  002b9	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002bc	41		 inc	 ecx
$LN822@GetAniColl:
  002bd	b2 ed		 mov	 dl, -19			; ffffffedH
  002bf	2a d1		 sub	 dl, cl
  002c1	30 54 05 ec	 xor	 BYTE PTR __t$506463[ebp+eax], dl
  002c5	40		 inc	 eax
  002c6	83 f8 07	 cmp	 eax, 7
  002c9	7c e3		 jl	 SHORT $LL747@GetAniColl
  002cb	8b 4d e8	 mov	 ecx, DWORD PTR _rkName$GSCopy$[ebp]
  002ce	8d 75 ec	 lea	 esi, DWORD PTR __t$506463[ebp]
  002d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL811@GetAniColl:
  002d7	8a 08		 mov	 cl, BYTE PTR [eax]
  002d9	3a 0e		 cmp	 cl, BYTE PTR [esi]
  002db	75 1a		 jne	 SHORT $LN812@GetAniColl
  002dd	3a cb		 cmp	 cl, bl
  002df	74 12		 je	 SHORT $LN813@GetAniColl
  002e1	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  002e4	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  002e7	75 0e		 jne	 SHORT $LN812@GetAniColl
  002e9	83 c0 02	 add	 eax, 2
  002ec	83 c6 02	 add	 esi, 2
  002ef	3a cb		 cmp	 cl, bl
  002f1	75 e4		 jne	 SHORT $LL811@GetAniColl
$LN813@GetAniColl:
  002f3	33 c0		 xor	 eax, eax
  002f5	eb 05		 jmp	 SHORT $LN814@GetAniColl
$LN812@GetAniColl:
  002f7	1b c0		 sbb	 eax, eax
  002f9	83 d8 ff	 sbb	 eax, -1
$LN814@GetAniColl:
  002fc	3b c3		 cmp	 eax, ebx
  002fe	75 04		 jne	 SHORT $LN1@GetAniColl

; 23   : 			return ACT_SPECIAL;

  00300	6a 07		 push	 7
  00302	eb 02		 jmp	 SHORT $LN823@GetAniColl
$LN1@GetAniColl:

; 24   : 	}
; 25   : 
; 26   : 	return ACT_NONE;

  00304	6a 06		 push	 6
$LN823@GetAniColl:
  00306	58		 pop	 eax
$LN9@GetAniColl:

; 27   : }

  00307	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030a	5f		 pop	 edi
  0030b	5e		 pop	 esi
  0030c	33 cd		 xor	 ecx, ebp
  0030e	5b		 pop	 ebx
  0030f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00314	c9		 leave
  00315	c3		 ret	 0
?GetAniCollisionType@@YA?AW4AniCollisionType@@ABVioHashString@@@Z ENDP ; GetAniCollisionType
_TEXT	ENDS
PUBLIC	?AttachSoldierExp@FishingResultInfo@@QAEXXZ	; FishingResultInfo::AttachSoldierExp
EXTRN	?AddGradeExp@ioMyInfo@@QAEXH@Z:PROC		; ioMyInfo::AddGradeExp
EXTRN	?AddClassExp@ioMyInfo@@QAEXHH@Z:PROC		; ioMyInfo::AddClassExp
EXTRN	?IsCharExerciseStyleToClassType@ioMyInfo@@QAE_NHH@Z:PROC ; ioMyInfo::IsCharExerciseStyleToClassType
EXTRN	?GetSingleton@ioMyInfo@@SAAAV1@XZ:PROC		; ioMyInfo::GetSingleton
; Function compile flags: /Ogsp
;	COMDAT ?AttachSoldierExp@FishingResultInfo@@QAEXXZ
_TEXT	SEGMENT
_value$506679 = -8					; size = 4
_value$506674 = -8					; size = 4
_value$506669 = -8					; size = 4
_value$506665 = -4					; size = 4
_value$506655 = -4					; size = 4
_value$506651 = -4					; size = 4
_value$506660 = -4					; size = 4
?AttachSoldierExp@FishingResultInfo@@QAEXXZ PROC	; FishingResultInfo::AttachSoldierExp, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 31   : 	if( m_iClassType > 0 && m_iAddSoldierExp > 0 )

  00009	8d 45 fc	 lea	 eax, DWORD PTR _value$506651[ebp]
  0000c	8d be c0 00 00
	00		 lea	 edi, DWORD PTR [esi+192]
  00012	50		 push	 eax
  00013	8b cf		 mov	 ecx, edi
  00015	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  0001a	83 7d fc 00	 cmp	 DWORD PTR _value$506651[ebp], 0
  0001e	0f 8e 88 00 00
	00		 jle	 $LN17@AttachSold
  00024	8d 45 fc	 lea	 eax, DWORD PTR _value$506655[ebp]
  00027	81 c6 f0 00 00
	00		 add	 esi, 240		; 000000f0H
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00035	83 7d fc 00	 cmp	 DWORD PTR _value$506655[ebp], 0
  00039	7e 71		 jle	 SHORT $LN17@AttachSold

; 32   : 	{
; 33   : 		if( g_MyInfo.IsCharExerciseStyleToClassType( m_iClassType, EXERCISE_RENTAL ) == false )

  0003b	8d 45 fc	 lea	 eax, DWORD PTR _value$506660[ebp]
  0003e	50		 push	 eax
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00046	6a 04		 push	 4
  00048	ff 75 fc	 push	 DWORD PTR _value$506660[ebp]
  0004b	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ?IsCharExerciseStyleToClassType@ioMyInfo@@QAE_NHH@Z ; ioMyInfo::IsCharExerciseStyleToClassType
  00057	84 c0		 test	 al, al
  00059	75 28		 jne	 SHORT $LN1@AttachSold

; 34   : 			g_MyInfo.AddClassExp( m_iClassType, m_iAddSoldierExp );

  0005b	8d 45 fc	 lea	 eax, DWORD PTR _value$506665[ebp]
  0005e	50		 push	 eax
  0005f	8b ce		 mov	 ecx, esi
  00061	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00066	8d 45 f8	 lea	 eax, DWORD PTR _value$506669[ebp]
  00069	50		 push	 eax
  0006a	8b cf		 mov	 ecx, edi
  0006c	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  00071	ff 75 fc	 push	 DWORD PTR _value$506665[ebp]
  00074	ff 75 f8	 push	 DWORD PTR _value$506669[ebp]
  00077	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  0007c	8b c8		 mov	 ecx, eax
  0007e	e8 00 00 00 00	 call	 ?AddClassExp@ioMyInfo@@QAEXHH@Z ; ioMyInfo::AddClassExp
$LN1@AttachSold:

; 35   : 		g_MyInfo.AddGradeExp( m_iAddSoldierExp );

  00083	8d 45 f8	 lea	 eax, DWORD PTR _value$506674[ebp]
  00086	50		 push	 eax
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?DecryptValueToPool@?$CEncrypt@H@@QAEXPAH@Z ; CEncrypt<int>::DecryptValueToPool
  0008e	ff 75 f8	 push	 DWORD PTR _value$506674[ebp]
  00091	e8 00 00 00 00	 call	 ?GetSingleton@ioMyInfo@@SAAAV1@XZ ; ioMyInfo::GetSingleton
  00096	8b c8		 mov	 ecx, eax
  00098	e8 00 00 00 00	 call	 ?AddGradeExp@ioMyInfo@@QAEXH@Z ; ioMyInfo::AddGradeExp

; 36   : 		m_iAddSoldierExp = 0;

  0009d	83 65 f8 00	 and	 DWORD PTR _value$506679[ebp], 0
  000a1	8d 45 f8	 lea	 eax, DWORD PTR _value$506679[ebp]
  000a4	50		 push	 eax
  000a5	8b ce		 mov	 ecx, esi
  000a7	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@H@@AAEXPBD@Z ; CEncrypt<int>::EncryptValueToPool
$LN17@AttachSold:
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi

; 37   : 	}
; 38   : }

  000ae	c9		 leave
  000af	c3		 ret	 0
?AttachSoldierExp@FishingResultInfo@@QAEXXZ ENDP	; FishingResultInfo::AttachSoldierExp
_TEXT	ENDS
END
