; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\GUI\NoviceGradeBuffBtn.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7NoviceGradeBuffBtn@@6B@			; NoviceGradeBuffBtn::`vftable'
PUBLIC	__real@3f333333
PUBLIC	??0NoviceGradeBuffBtn@@QAE@XZ			; NoviceGradeBuffBtn::NoviceGradeBuffBtn
PUBLIC	??_R4NoviceGradeBuffBtn@@6B@			; NoviceGradeBuffBtn::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNoviceGradeBuffBtn@@@8			; NoviceGradeBuffBtn `RTTI Type Descriptor'
PUBLIC	??_R3NoviceGradeBuffBtn@@8			; NoviceGradeBuffBtn::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NoviceGradeBuffBtn@@8			; NoviceGradeBuffBtn::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NoviceGradeBuffBtn@@8		; NoviceGradeBuffBtn::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioButton@@8			; ioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioButton@@@8				; ioButton `RTTI Type Descriptor'
PUBLIC	??_R3ioButton@@8				; ioButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioButton@@8				; ioButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioWnd@@8				; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioWnd@@@8				; ioWnd `RTTI Type Descriptor'
PUBLIC	??_R3ioWnd@@8					; ioWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioWnd@@8					; ioWnd::`RTTI Base Class Array'
PUBLIC	?AddRenderImage@NoviceGradeBuffBtn@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ; NoviceGradeBuffBtn::AddRenderImage
PUBLIC	?ParseExtraInfo@NoviceGradeBuffBtn@@UAEXAAVioXMLElement@@@Z ; NoviceGradeBuffBtn::ParseExtraInfo
PUBLIC	?OnRender@NoviceGradeBuffBtn@@MAEXXZ		; NoviceGradeBuffBtn::OnRender
PUBLIC	?OnProcess@NoviceGradeBuffBtn@@MAEXM@Z		; NoviceGradeBuffBtn::OnProcess
PUBLIC	?iwm_show@NoviceGradeBuffBtn@@UAEXXZ		; NoviceGradeBuffBtn::iwm_show
EXTRN	__imp_??0ioButton@@QAE@XZ:PROC
EXTRN	__fltused:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z:PROC ; ioButton::AddRenderFrame
EXTRN	?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z:PROC ; ioWnd::AddTooltipHelp
EXTRN	?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC ; ioWnd::AddNamedRenderImage
EXTRN	?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z:PROC ; ioWnd::RemoveNamedRenderImage
EXTRN	?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z:PROC ; ioWnd::GetNamedRenderImage
EXTRN	?SetWindowAlpha@ioButton@@UAEXH@Z:PROC		; ioButton::SetWindowAlpha
EXTRN	?SetActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetActive
EXTRN	?SetInActive@ioWnd@@UAEXXZ:PROC			; ioWnd::SetInActive
EXTRN	?ClearElementImageList@ioWnd@@UAEXXZ:PROC	; ioWnd::ClearElementImageList
EXTRN	?SetSize@ioWnd@@UAEXHH@Z:PROC			; ioWnd::SetSize
EXTRN	?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z:PROC	; ioWnd::SetPositionToDefault
EXTRN	?IsNeedProcess@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsNeedProcess
EXTRN	?IsCanMouseReaction@ioWnd@@UBE_NXZ:PROC		; ioWnd::IsCanMouseReaction
EXTRN	?AddChild@ioWnd@@UAEXPAV1@@Z:PROC		; ioWnd::AddChild
EXTRN	?DeleteChild@ioWnd@@UAEXK@Z:PROC		; ioWnd::DeleteChild
EXTRN	?DeleteAllChild@ioWnd@@UAEXXZ:PROC		; ioWnd::DeleteAllChild
EXTRN	?OnRenderShowAndHide@ioWnd@@MAE_NXZ:PROC	; ioWnd::OnRenderShowAndHide
EXTRN	?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z:PROC ; ioWnd::OnRenderShowAndHideByDefault
EXTRN	?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByTop
EXTRN	?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z:PROC	; ioWnd::OnRenderShowAndHideByDown
EXTRN	?OnRenderAfterChild@ioWnd@@MAEXXZ:PROC		; ioWnd::OnRenderAfterChild
EXTRN	?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z:PROC	; ioWnd::OnMouseProcess
EXTRN	?CheckFrameReSize@ioButton@@MAEXHHHH@Z:PROC	; ioButton::CheckFrameReSize
EXTRN	?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z:PROC ; ioWnd::RenderImageList
EXTRN	?iwm_create@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_create
EXTRN	?iwm_destroy@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_destroy
EXTRN	?iwm_lbuttondown@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttondown
EXTRN	?iwm_lbuttonup@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttonup
EXTRN	?iwm_lbuttonDBLCLK@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_lbuttonDBLCLK
EXTRN	?iwm_rbuttondown@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_rbuttondown
EXTRN	?iwm_rbuttonup@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_rbuttonup
EXTRN	?iwm_command@ioWnd@@UAEXPAV1@HK@Z:PROC		; ioWnd::iwm_command
EXTRN	?iwm_mouseover@ioButton@@UAEXABVioMouse@@@Z:PROC ; ioButton::iwm_mouseover
EXTRN	?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mousemove
EXTRN	?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z:PROC	; ioWnd::iwm_mouseleave
EXTRN	?iwm_vscroll@ioWnd@@UAEXKH@Z:PROC		; ioWnd::iwm_vscroll
EXTRN	?iwm_wheel@ioWnd@@UAEXH@Z:PROC			; ioWnd::iwm_wheel
EXTRN	?iwm_hide@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_hide
EXTRN	?iwm_esc@ioWnd@@UAE_NXZ:PROC			; ioWnd::iwm_esc
EXTRN	?iwm_spacebar@ioWnd@@UAE_NXZ:PROC		; ioWnd::iwm_spacebar
EXTRN	?iwm_gototop@ioWnd@@UAEXXZ:PROC			; ioWnd::iwm_gototop
EXTRN	?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragenter
EXTRN	?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z:PROC ; ioWnd::iwm_dragover
EXTRN	?iwm_dragleave@ioWnd@@UAEXXZ:PROC		; ioWnd::iwm_dragleave
EXTRN	?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z:PROC ; ioWnd::iwm_dropitem
EXTRN	?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z:PROC ; ioWnd::iwm_dropdone
EXTRN	?IsEXType@ioWnd@@UBE_NXZ:PROC			; ioWnd::IsEXType
EXTRN	?GetWndType@ioButton@@UBEKXZ:PROC		; ioButton::GetWndType
EXTRN	?RenderWnd@ioWnd@@UAEXXZ:PROC			; ioWnd::RenderWnd
EXTRN	?SetIDEX@ioWnd@@UAEXAAK_N@Z:PROC		; ioWnd::SetIDEX
EXTRN	?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z:PROC	; ioWnd::ParseXML
EXTRN	?GetHeaderFileName@ioButton@@UAEPBDXZ:PROC	; ioButton::GetHeaderFileName
EXTRN	?GetTemplateName@ioButton@@UAEPBDXZ:PROC	; ioButton::GetTemplateName
EXTRN	?GetDefClassName@ioButton@@UBEPBDXZ:PROC	; ioButton::GetDefClassName
EXTRN	?_Clone@ioButton@@UAEPAVioWnd@@XZ:PROC		; ioButton::_Clone
EXTRN	?Copy@ioButton@@UAEXPAVioWnd@@@Z:PROC		; ioButton::Copy
EXTRN	?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z:PROC	; ioWnd::Save
EXTRN	?SetSaveData@ioButton@@UAEXAAVioXMLElement@@@Z:PROC ; ioButton::SetSaveData
EXTRN	?SetPosX@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosX
EXTRN	?SetPosY@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetPosY
EXTRN	?SetWidth@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetWidth
EXTRN	?SetHeight@ioWnd@@UAEXH@Z:PROC			; ioWnd::SetHeight
EXTRN	?GetNumFixedRenderFrame@ioButton@@UBEHXZ:PROC	; ioButton::GetNumFixedRenderFrame
EXTRN	?GetFixedRenderFrameType@ioButton@@UAEPBDH@Z:PROC ; ioButton::GetFixedRenderFrameType
EXTRN	?GetRenderFrame@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioButton::GetRenderFrame
EXTRN	?GetNumFixedRenderImage@ioButton@@UBEHXZ:PROC	; ioButton::GetNumFixedRenderImage
EXTRN	?GetFixedRenderImageType@ioButton@@UAEPBDH@Z:PROC ; ioButton::GetFixedRenderImageType
EXTRN	?GetRenderImage@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z:PROC ; ioButton::GetRenderImage
EXTRN	?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z:PROC ; ioWnd::AddEffect
EXTRN	?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z:PROC ; ioWnd::GetEffect
EXTRN	??_ENoviceGradeBuffBtn@@UAEPAXI@Z:PROC		; NoviceGradeBuffBtn::`vector deleting destructor'
EXTRN	?OnDrawNormal@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawNormal
EXTRN	?OnDrawOvered@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawOvered
EXTRN	?OnDrawOveredAdd@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawOveredAdd
EXTRN	?OnDrawPushed@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawPushed
EXTRN	?OnDrawDisabled@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawDisabled
EXTRN	?OnDrawExDisabledNormal@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledNormal
EXTRN	?OnDrawExDisabledOvered@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledOvered
EXTRN	?OnDrawExDisabledPushed@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawExDisabledPushed
EXTRN	?OnDrawBack@ioButton@@MAEXHH@Z:PROC		; ioButton::OnDrawBack
EXTRN	?OnDrawNormalList@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawNormalList
EXTRN	?OnDrawDisableList@ioButton@@MAEXHH@Z:PROC	; ioButton::OnDrawDisableList
;	COMDAT ??_R2ioWnd@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\novicegradebuffbtn.cpp
rdata$r	SEGMENT
??_R2ioWnd@@8 DD FLAT:??_R1A@?0A@EA@ioWnd@@8		; ioWnd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioWnd@@8
rdata$r	SEGMENT
??_R3ioWnd@@8 DD 00H					; ioWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioWnd@@@8
_DATA	SEGMENT
??_R0?AVioWnd@@@8 DD FLAT:??_7type_info@@6B@		; ioWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioWnd@@8 DD FLAT:??_R0?AVioWnd@@@8	; ioWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2ioButton@@8
rdata$r	SEGMENT
??_R2ioButton@@8 DD FLAT:??_R1A@?0A@EA@ioButton@@8	; ioButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3ioButton@@8
rdata$r	SEGMENT
??_R3ioButton@@8 DD 00H					; ioButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioButton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioButton@@@8
_DATA	SEGMENT
??_R0?AVioButton@@@8 DD FLAT:??_7type_info@@6B@		; ioButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioButton@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioButton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioButton@@8 DD FLAT:??_R0?AVioButton@@@8	; ioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioButton@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NoviceGradeBuffBtn@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NoviceGradeBuffBtn@@8 DD FLAT:??_R0?AVNoviceGradeBuffBtn@@@8 ; NoviceGradeBuffBtn::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NoviceGradeBuffBtn@@8
rdata$r	ENDS
;	COMDAT ??_R2NoviceGradeBuffBtn@@8
rdata$r	SEGMENT
??_R2NoviceGradeBuffBtn@@8 DD FLAT:??_R1A@?0A@EA@NoviceGradeBuffBtn@@8 ; NoviceGradeBuffBtn::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioButton@@8
	DD	FLAT:??_R1A@?0A@EA@ioWnd@@8
rdata$r	ENDS
;	COMDAT ??_R3NoviceGradeBuffBtn@@8
rdata$r	SEGMENT
??_R3NoviceGradeBuffBtn@@8 DD 00H			; NoviceGradeBuffBtn::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NoviceGradeBuffBtn@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNoviceGradeBuffBtn@@@8
_DATA	SEGMENT
??_R0?AVNoviceGradeBuffBtn@@@8 DD FLAT:??_7type_info@@6B@ ; NoviceGradeBuffBtn `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNoviceGradeBuffBtn@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NoviceGradeBuffBtn@@6B@
rdata$r	SEGMENT
??_R4NoviceGradeBuffBtn@@6B@ DD 00H			; NoviceGradeBuffBtn::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNoviceGradeBuffBtn@@@8
	DD	FLAT:??_R3NoviceGradeBuffBtn@@8
rdata$r	ENDS
;	COMDAT ??_7NoviceGradeBuffBtn@@6B@
CONST	SEGMENT
??_7NoviceGradeBuffBtn@@6B@ DD FLAT:??_R4NoviceGradeBuffBtn@@6B@ ; NoviceGradeBuffBtn::`vftable'
	DD	FLAT:?AddRenderFrame@ioButton@@UAEXABVioHashString@@PAVioUIRenderFrame@@@Z
	DD	FLAT:?AddRenderImage@NoviceGradeBuffBtn@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?AddTooltipHelp@ioWnd@@UAEXABVioHashString@@00@Z
	DD	FLAT:?ParseExtraInfo@NoviceGradeBuffBtn@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?AddNamedRenderImage@ioWnd@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
	DD	FLAT:?RemoveNamedRenderImage@ioWnd@@UAEXABVioHashString@@@Z
	DD	FLAT:?GetNamedRenderImage@ioWnd@@UBEPAVioUIRenderImage@@ABVioHashString@@@Z
	DD	FLAT:?SetWindowAlpha@ioButton@@UAEXH@Z
	DD	FLAT:?SetActive@ioWnd@@UAEXXZ
	DD	FLAT:?SetInActive@ioWnd@@UAEXXZ
	DD	FLAT:?ClearElementImageList@ioWnd@@UAEXXZ
	DD	FLAT:?SetSize@ioWnd@@UAEXHH@Z
	DD	FLAT:?SetPositionToDefault@ioWnd@@UAEXHH_N0@Z
	DD	FLAT:?IsNeedProcess@ioWnd@@UBE_NXZ
	DD	FLAT:?IsCanMouseReaction@ioWnd@@UBE_NXZ
	DD	FLAT:?AddChild@ioWnd@@UAEXPAV1@@Z
	DD	FLAT:?DeleteChild@ioWnd@@UAEXK@Z
	DD	FLAT:?DeleteAllChild@ioWnd@@UAEXXZ
	DD	FLAT:?OnRenderShowAndHide@ioWnd@@MAE_NXZ
	DD	FLAT:?OnRenderShowAndHideByDefault@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByTop@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRenderShowAndHideByDown@ioWnd@@MAE_NK@Z
	DD	FLAT:?OnRender@NoviceGradeBuffBtn@@MAEXXZ
	DD	FLAT:?OnRenderAfterChild@ioWnd@@MAEXXZ
	DD	FLAT:?OnProcess@NoviceGradeBuffBtn@@MAEXM@Z
	DD	FLAT:?OnMouseProcess@ioWnd@@MAEXABVioMouse@@@Z
	DD	FLAT:?CheckFrameReSize@ioButton@@MAEXHHHH@Z
	DD	FLAT:?RenderImageList@ioWnd@@MAEXHHW4UIRenderType@@@Z
	DD	FLAT:?iwm_create@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_destroy@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_lbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_lbuttonDBLCLK@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttondown@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_rbuttonup@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_command@ioWnd@@UAEXPAV1@HK@Z
	DD	FLAT:?iwm_mouseover@ioButton@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mousemove@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_mouseleave@ioWnd@@UAEXABVioMouse@@@Z
	DD	FLAT:?iwm_vscroll@ioWnd@@UAEXKH@Z
	DD	FLAT:?iwm_wheel@ioWnd@@UAEXH@Z
	DD	FLAT:?iwm_show@NoviceGradeBuffBtn@@UAEXXZ
	DD	FLAT:?iwm_hide@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_esc@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_spacebar@ioWnd@@UAE_NXZ
	DD	FLAT:?iwm_gototop@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dragenter@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragover@ioWnd@@UAE?AW4IWDropEffect@@PAVioDragItem@@ABVioMouse@@@Z
	DD	FLAT:?iwm_dragleave@ioWnd@@UAEXXZ
	DD	FLAT:?iwm_dropitem@ioWnd@@UAE_NPAVioDragItem@@ABVioMouse@@PAV1@@Z
	DD	FLAT:?iwm_dropdone@ioWnd@@UAEXPAVioDragItem@@PAV1@_N@Z
	DD	FLAT:?IsEXType@ioWnd@@UBE_NXZ
	DD	FLAT:?GetWndType@ioButton@@UBEKXZ
	DD	FLAT:?RenderWnd@ioWnd@@UAEXXZ
	DD	FLAT:?SetIDEX@ioWnd@@UAEXAAK_N@Z
	DD	FLAT:?ParseXML@ioWnd@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?GetHeaderFileName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetTemplateName@ioButton@@UAEPBDXZ
	DD	FLAT:?GetDefClassName@ioButton@@UBEPBDXZ
	DD	FLAT:?_Clone@ioButton@@UAEPAVioWnd@@XZ
	DD	FLAT:?Copy@ioButton@@UAEXPAVioWnd@@@Z
	DD	FLAT:?Save@ioWnd@@UAE_NAAVioXMLElement@@@Z
	DD	FLAT:?SetSaveData@ioButton@@UAEXAAVioXMLElement@@@Z
	DD	FLAT:?SetPosX@ioWnd@@UAEXH@Z
	DD	FLAT:?SetPosY@ioWnd@@UAEXH@Z
	DD	FLAT:?SetWidth@ioWnd@@UAEXH@Z
	DD	FLAT:?SetHeight@ioWnd@@UAEXH@Z
	DD	FLAT:?GetNumFixedRenderFrame@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderFrameType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderFrame@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?GetNumFixedRenderImage@ioButton@@UBEHXZ
	DD	FLAT:?GetFixedRenderImageType@ioButton@@UAEPBDH@Z
	DD	FLAT:?GetRenderImage@ioButton@@UAEPAPAVioUIRenderElement@@PBD@Z
	DD	FLAT:?AddEffect@ioWnd@@UAEXABVioHashString@@PAVioUI3DEffectRender@@@Z
	DD	FLAT:?GetEffect@ioWnd@@UAEPAVioUI3DEffectRender@@VioHashString@@@Z
	DD	FLAT:??_ENoviceGradeBuffBtn@@UAEPAXI@Z
	DD	FLAT:?OnDrawNormal@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOvered@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawOveredAdd@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawPushed@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisabled@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledNormal@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledOvered@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawExDisabledPushed@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawBack@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawNormalList@ioButton@@MAEXHH@Z
	DD	FLAT:?OnDrawDisableList@ioButton@@MAEXHH@Z
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0NoviceGradeBuffBtn@@QAE@XZ
_TEXT	SEGMENT
??0NoviceGradeBuffBtn@@QAE@XZ PROC			; NoviceGradeBuffBtn::NoviceGradeBuffBtn, COMDAT
; _this$ = ecx

; 9    : {	

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioButton@@QAE@XZ

; 10   : 	m_pIcon = NULL;
; 11   : 	m_pIconEffect = NULL;
; 12   : 	m_pIconAddEffect = NULL;
; 13   : 
; 14   : 	m_fScale = 0.7f;

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00011	33 c0		 xor	 eax, eax
  00013	89 86 fc 01 00
	00		 mov	 DWORD PTR [esi+508], eax
  00019	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax
  0001f	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax

; 15   : 	m_dwCheckTime = 0;

  00025	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax

; 16   : 	m_nCurAlpha = 0;

  0002b	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NoviceGradeBuffBtn@@6B@
  00037	f3 0f 11 86 08
	02 00 00	 movss	 DWORD PTR [esi+520], xmm0

; 17   : 	m_bIsAddAlpha = true;

  0003f	c6 86 1c 02 00
	00 01		 mov	 BYTE PTR [esi+540], 1

; 18   : }

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c3		 ret	 0
??0NoviceGradeBuffBtn@@QAE@XZ ENDP			; NoviceGradeBuffBtn::NoviceGradeBuffBtn
_TEXT	ENDS
PUBLIC	??1NoviceGradeBuffBtn@@UAE@XZ			; NoviceGradeBuffBtn::~NoviceGradeBuffBtn
EXTRN	__imp_??1ioButton@@UAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1NoviceGradeBuffBtn@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NoviceGradeBuffBtn@@UAE@XZ$0
__ehfuncinfo$??1NoviceGradeBuffBtn@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1NoviceGradeBuffBtn@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1NoviceGradeBuffBtn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1NoviceGradeBuffBtn@@UAE@XZ PROC			; NoviceGradeBuffBtn::~NoviceGradeBuffBtn, COMDAT
; _this$ = ecx

; 21   : {	

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1NoviceGradeBuffBtn@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NoviceGradeBuffBtn@@6B@

; 22   : 	SAFEDELETE( m_pIcon );

  00017	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	85 c9		 test	 ecx, ecx
  00023	74 0e		 je	 SHORT $LN3@NoviceGrad
  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	6a 01		 push	 1
  00029	ff 50 40	 call	 DWORD PTR [eax+64]
  0002c	83 a6 fc 01 00
	00 00		 and	 DWORD PTR [esi+508], 0
$LN3@NoviceGrad:

; 23   : 	SAFEDELETE( m_pIconEffect );

  00033	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  00039	85 c9		 test	 ecx, ecx
  0003b	74 0e		 je	 SHORT $LN2@NoviceGrad
  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	6a 01		 push	 1
  00041	ff 50 40	 call	 DWORD PTR [eax+64]
  00044	83 a6 00 02 00
	00 00		 and	 DWORD PTR [esi+512], 0
$LN2@NoviceGrad:

; 24   : 	SAFEDELETE( m_pIconAddEffect );

  0004b	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  00051	85 c9		 test	 ecx, ecx
  00053	74 0e		 je	 SHORT $LN1@NoviceGrad
  00055	8b 01		 mov	 eax, DWORD PTR [ecx]
  00057	6a 01		 push	 1
  00059	ff 50 40	 call	 DWORD PTR [eax+64]
  0005c	83 a6 04 02 00
	00 00		 and	 DWORD PTR [esi+516], 0
$LN1@NoviceGrad:

; 25   : }

  00063	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	8b ce		 mov	 ecx, esi
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioButton@@UAE@XZ
  0006f	e8 00 00 00 00	 call	 __EH_epilog3
  00074	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NoviceGradeBuffBtn@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioButton@@UAE@XZ
__ehhandler$??1NoviceGradeBuffBtn@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1NoviceGradeBuffBtn@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1NoviceGradeBuffBtn@@UAE@XZ ENDP			; NoviceGradeBuffBtn::~NoviceGradeBuffBtn
EXTRN	__imp_?GetLoopSec@ioFrameTimer@@QBEKXZ:PROC
EXTRN	__imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?iwm_show@NoviceGradeBuffBtn@@UAEXXZ
_TEXT	SEGMENT
?iwm_show@NoviceGradeBuffBtn@@UAEXXZ PROC		; NoviceGradeBuffBtn::iwm_show, COMDAT
; _this$ = ecx

; 57   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 58   : 	m_dwCheckTime = FRAMEGETTIME();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00009	8b c8		 mov	 ecx, eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 59   : 	m_nCurAlpha = 0;

  00011	83 a6 14 02 00
	00 00		 and	 DWORD PTR [esi+532], 0
  00018	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax

; 60   : 	m_bIsAddAlpha = true;

  0001e	c6 86 1c 02 00
	00 01		 mov	 BYTE PTR [esi+540], 1
  00025	5e		 pop	 esi

; 61   : }

  00026	c3		 ret	 0
?iwm_show@NoviceGradeBuffBtn@@UAEXXZ ENDP		; NoviceGradeBuffBtn::iwm_show
_TEXT	ENDS
EXTRN	__imp_?GetDerivedPosY@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetHeight@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetDerivedPosX@ioWnd@@QBEHXZ:PROC
EXTRN	__imp_?GetWidth@ioWnd@@QBEHXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?OnRender@NoviceGradeBuffBtn@@MAEXXZ
_TEXT	SEGMENT
tv205 = -4						; size = 4
?OnRender@NoviceGradeBuffBtn@@MAEXXZ PROC		; NoviceGradeBuffBtn::OnRender, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx

; 75   : 	int nNewXPos = GetDerivedPosX() + GetWidth() / 2;

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWidth@ioWnd@@QBEHXZ
  0000f	99		 cdq
  00010	2b c2		 sub	 eax, edx
  00012	8b f8		 mov	 edi, eax
  00014	8b ce		 mov	 ecx, esi
  00016	d1 ff		 sar	 edi, 1
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosX@ioWnd@@QBEHXZ

; 76   : 	int nNewYPos = GetDerivedPosY() + GetHeight() / 2;

  0001e	8b ce		 mov	 ecx, esi
  00020	03 f8		 add	 edi, eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetHeight@ioWnd@@QBEHXZ
  00028	99		 cdq
  00029	2b c2		 sub	 eax, edx
  0002b	89 45 fc	 mov	 DWORD PTR tv205[ebp], eax
  0002e	d1 7d fc	 sar	 DWORD PTR tv205[ebp], 1
  00031	8b ce		 mov	 ecx, esi
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDerivedPosY@ioWnd@@QBEHXZ
  00039	8b d8		 mov	 ebx, eax
  0003b	03 5d fc	 add	 ebx, DWORD PTR tv205[ebp]

; 77   : 
; 78   : 	if( m_pIcon )

  0003e	33 c0		 xor	 eax, eax
  00040	39 86 fc 01 00
	00		 cmp	 DWORD PTR [esi+508], eax
  00046	74 47		 je	 SHORT $LN3@OnRender

; 79   : 	{
; 80   : 		m_pIcon->SetScale( m_fScale );

  00048	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  0004e	f3 0f 10 86 08
	02 00 00	 movss	 xmm0, DWORD PTR [esi+520]
  00056	8b 01		 mov	 eax, DWORD PTR [ecx]
  00058	51		 push	 ecx
  00059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005e	ff 50 1c	 call	 DWORD PTR [eax+28]

; 81   : 		m_pIcon->Render( nNewXPos, nNewYPos, UI_RENDER_NORMAL, TFO_BILINEAR );

  00061	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  00067	8b 11		 mov	 edx, DWORD PTR [ecx]
  00069	33 c0		 xor	 eax, eax
  0006b	50		 push	 eax
  0006c	50		 push	 eax
  0006d	6a 01		 push	 1
  0006f	50		 push	 eax
  00070	0f 57 c0	 xorps	 xmm0, xmm0
  00073	51		 push	 ecx
  00074	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  00078	51		 push	 ecx
  00079	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0007f	0f 57 c0	 xorps	 xmm0, xmm0
  00082	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	ff 12		 call	 DWORD PTR [edx]
  0008d	33 c0		 xor	 eax, eax
$LN3@OnRender:

; 82   : 	}
; 83   : 
; 84   : 	if ( m_pIconEffect )

  0008f	39 86 00 02 00
	00		 cmp	 DWORD PTR [esi+512], eax
  00095	74 32		 je	 SHORT $LN2@OnRender

; 85   : 		m_pIconEffect->Render( nNewXPos-2, nNewYPos-4, UI_RENDER_NORMAL, TFO_BILINEAR );

  00097	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  0009d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009f	50		 push	 eax
  000a0	50		 push	 eax
  000a1	6a 01		 push	 1
  000a3	50		 push	 eax
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	51		 push	 ecx
  000a8	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  000ab	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000af	51		 push	 ecx
  000b0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000b6	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]
  000b9	0f 57 c0	 xorps	 xmm0, xmm0
  000bc	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	ff 12		 call	 DWORD PTR [edx]
  000c7	33 c0		 xor	 eax, eax
$LN2@OnRender:

; 86   : 
; 87   : 	if ( m_pIconAddEffect )

  000c9	39 86 04 02 00
	00		 cmp	 DWORD PTR [esi+516], eax
  000cf	74 31		 je	 SHORT $LN1@OnRender

; 88   : 		m_pIconAddEffect->Render( nNewXPos-2, nNewYPos-4, UI_RENDER_ADD, TFO_BILINEAR );

  000d1	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  000d7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d9	50		 push	 eax
  000da	50		 push	 eax
  000db	6a 01		 push	 1
  000dd	6a 03		 push	 3
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	51		 push	 ecx
  000e3	83 c3 fc	 add	 ebx, -4			; fffffffcH
  000e6	f3 0f 2a c3	 cvtsi2ss xmm0, ebx
  000ea	51		 push	 ecx
  000eb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f1	83 c7 fe	 add	 edi, -2			; fffffffeH
  000f4	0f 57 c0	 xorps	 xmm0, xmm0
  000f7	f3 0f 2a c7	 cvtsi2ss xmm0, edi
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	ff 12		 call	 DWORD PTR [edx]
$LN1@OnRender:
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 89   : }

  00105	c9		 leave
  00106	c3		 ret	 0
?OnRender@NoviceGradeBuffBtn@@MAEXXZ ENDP		; NoviceGradeBuffBtn::OnRender
_TEXT	ENDS
PUBLIC	?UpdateEffect@NoviceGradeBuffBtn@@IAEXXZ	; NoviceGradeBuffBtn::UpdateEffect
; Function compile flags: /Ogsp
;	COMDAT ?UpdateEffect@NoviceGradeBuffBtn@@IAEXXZ
_TEXT	SEGMENT
?UpdateEffect@NoviceGradeBuffBtn@@IAEXXZ PROC		; NoviceGradeBuffBtn::UpdateEffect, COMDAT
; _this$ = ecx

; 94   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 95   : 	DWORD dwCurTime = FRAMEGETTIME();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetSingleton@ioFrameTimer@@SAAAV1@XZ
  00009	8b c8		 mov	 ecx, eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLoopSec@ioFrameTimer@@QBEKXZ

; 96   : 	if ( m_dwCheckTime + m_dwChangeTime > dwCurTime )

  00011	8b 96 10 02 00
	00		 mov	 edx, DWORD PTR [esi+528]
  00017	03 96 0c 02 00
	00		 add	 edx, DWORD PTR [esi+524]
  0001d	3b d0		 cmp	 edx, eax
  0001f	77 6e		 ja	 SHORT $LN1@UpdateEffe

; 97   : 		return;
; 98   : 
; 99   : 	m_dwCheckTime = dwCurTime;

  00021	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax

; 100  : 
; 101  : 	if ( m_nCurAlpha >= 255 )

  00027	8b 86 14 02 00
	00		 mov	 eax, DWORD PTR [esi+532]
  0002d	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00032	3b c1		 cmp	 eax, ecx
  00034	7c 09		 jl	 SHORT $LN6@UpdateEffe

; 102  : 		m_bIsAddAlpha = false;

  00036	c6 86 1c 02 00
	00 00		 mov	 BYTE PTR [esi+540], 0
  0003d	eb 0b		 jmp	 SHORT $LN4@UpdateEffe
$LN6@UpdateEffe:

; 103  : 	else if ( m_nCurAlpha <= 0 )

  0003f	85 c0		 test	 eax, eax
  00041	7f 07		 jg	 SHORT $LN4@UpdateEffe

; 104  : 		m_bIsAddAlpha = true;

  00043	c6 86 1c 02 00
	00 01		 mov	 BYTE PTR [esi+540], 1
$LN4@UpdateEffe:

; 105  : 
; 106  : 	if ( m_bIsAddAlpha )

  0004a	80 be 1c 02 00
	00 00		 cmp	 BYTE PTR [esi+540], 0
  00051	74 0d		 je	 SHORT $LN3@UpdateEffe

; 107  : 	{
; 108  : 		m_nCurAlpha+=m_nAddAlpha;

  00053	03 86 18 02 00
	00		 add	 eax, DWORD PTR [esi+536]

; 109  : 		m_nCurAlpha = min( m_nCurAlpha, 255 );

  00059	3b c1		 cmp	 eax, ecx
  0005b	0f 4d c1	 cmovge	 eax, ecx

; 110  : 	}
; 111  : 	else

  0005e	eb 12		 jmp	 SHORT $LN13@UpdateEffe
$LN3@UpdateEffe:

; 112  : 	{
; 113  : 		m_nCurAlpha-=m_nAddAlpha;

  00060	2b 86 18 02 00
	00		 sub	 eax, DWORD PTR [esi+536]
  00066	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax

; 114  : 		m_nCurAlpha = max( m_nCurAlpha, 0 );

  0006c	85 c0		 test	 eax, eax
  0006e	7f 02		 jg	 SHORT $LN13@UpdateEffe
  00070	33 c0		 xor	 eax, eax
$LN13@UpdateEffe:

; 115  : 	}
; 116  : 
; 117  : 	if ( m_pIconAddEffect )

  00072	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  00078	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax
  0007e	85 c9		 test	 ecx, ecx
  00080	74 0d		 je	 SHORT $LN1@UpdateEffe

; 118  : 		m_pIconAddEffect->SetAlpha( m_nCurAlpha );

  00082	0f b6 96 14 02
	00 00		 movzx	 edx, BYTE PTR [esi+532]
  00089	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008b	52		 push	 edx
  0008c	ff 50 30	 call	 DWORD PTR [eax+48]
$LN1@UpdateEffe:
  0008f	5e		 pop	 esi

; 119  : }

  00090	c3		 ret	 0
?UpdateEffect@NoviceGradeBuffBtn@@IAEXXZ ENDP		; NoviceGradeBuffBtn::UpdateEffect
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GNoviceGradeBuffBtn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNoviceGradeBuffBtn@@UAEPAXI@Z PROC			; NoviceGradeBuffBtn::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1NoviceGradeBuffBtn@@UAE@XZ ; NoviceGradeBuffBtn::~NoviceGradeBuffBtn
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GNoviceGradeBuffBtn@@UAEPAXI@Z ENDP			; NoviceGradeBuffBtn::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_?IsShow@ioWnd@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\novicegradebuffbtn.cpp
;	COMDAT ?OnProcess@NoviceGradeBuffBtn@@MAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?OnProcess@NoviceGradeBuffBtn@@MAEXM@Z PROC		; NoviceGradeBuffBtn::OnProcess, COMDAT
; _this$ = ecx

; 66   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 67   : 	if( !IsShow() ) 

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsShow@ioWnd@@QBE_NXZ
  00009	84 c0		 test	 al, al
  0000b	74 07		 je	 SHORT $LN2@OnProcess

; 68   : 		return;
; 69   : 
; 70   : 	UpdateEffect();

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?UpdateEffect@NoviceGradeBuffBtn@@IAEXXZ ; NoviceGradeBuffBtn::UpdateEffect
$LN2@OnProcess:
  00014	5e		 pop	 esi

; 71   : }

  00015	c2 04 00	 ret	 4
?OnProcess@NoviceGradeBuffBtn@@MAEXM@Z ENDP		; NoviceGradeBuffBtn::OnProcess
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z	; operator==<11>
EXTRN	__imp_?c_str@ioHashString@@QBEPBDXZ:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\iohashstring.h
;	COMDAT ??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z
_TEXT	SEGMENT
__t$ = -20						; size = 11
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z PROC	; operator==<11>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 24 01 00
	00		 je	 $LN96@operator
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 ec	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 0d 01 00
	00		 je	 $LN95@operator
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 ed	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 f6 00 00
	00		 je	 $LN94@operator
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 ee	 mov	 BYTE PTR __t$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 df 00 00
	00		 je	 $LN93@operator
  00055	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00058	88 55 ef	 mov	 BYTE PTR __t$[ebp+3], dl
  0005b	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005e	84 d2		 test	 dl, dl
  00060	0f 84 c8 00 00
	00		 je	 $LN92@operator
  00066	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00069	88 55 f0	 mov	 BYTE PTR __t$[ebp+4], dl
  0006c	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006f	84 d2		 test	 dl, dl
  00071	0f 84 b1 00 00
	00		 je	 $LN91@operator
  00077	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007a	88 55 f1	 mov	 BYTE PTR __t$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 9a 00 00
	00		 je	 $LN90@operator
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 f2	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 83 00 00
	00		 je	 $LN89@operator
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 f3	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	74 70		 je	 SHORT $LN88@operator
  000a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a9	88 55 f4	 mov	 BYTE PTR __t$[ebp+8], dl
  000ac	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000af	84 d2		 test	 dl, dl
  000b1	74 5d		 je	 SHORT $LN87@operator
  000b3	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b6	80 78 0a 00	 cmp	 BYTE PTR [eax+10], 0
  000ba	88 55 f5	 mov	 BYTE PTR __t$[ebp+9], dl
  000bd	0f 84 87 00 00
	00		 je	 $LN1@operator
  000c3	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000c6	84 d2		 test	 dl, dl
  000c8	74 40		 je	 SHORT $LN85@operator
  000ca	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000cd	88 55 f7	 mov	 BYTE PTR __t$[ebp+11], dl
  000d0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d3	84 d2		 test	 dl, dl
  000d5	74 2d		 je	 SHORT $LN84@operator
  000d7	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000da	88 55 f8	 mov	 BYTE PTR __t$[ebp+12], dl
  000dd	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000e0	84 d2		 test	 dl, dl
  000e2	74 1a		 je	 SHORT $LN83@operator
  000e4	8a 40 0e	 mov	 al, BYTE PTR [eax+14]
  000e7	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ea	88 55 f9	 mov	 BYTE PTR __t$[ebp+13], dl
  000ed	84 c0		 test	 al, al
  000ef	74 07		 je	 SHORT $LN82@operator
  000f1	34 eb		 xor	 al, -21			; ffffffebH
  000f3	88 45 fa	 mov	 BYTE PTR __t$[ebp+14], al
  000f6	eb 52		 jmp	 SHORT $LN1@operator
$LN82@operator:
  000f8	c6 45 fa eb	 mov	 BYTE PTR __t$[ebp+14], -21 ; ffffffebH
  000fc	eb 4c		 jmp	 SHORT $LN1@operator
$LN83@operator:
  000fe	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+13], -20 ; ffffffecH
  00102	eb 46		 jmp	 SHORT $LN1@operator
$LN84@operator:
  00104	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00108	eb 40		 jmp	 SHORT $LN1@operator
$LN85@operator:
  0010a	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0010e	eb 3a		 jmp	 SHORT $LN1@operator
$LN87@operator:
  00110	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00114	eb 34		 jmp	 SHORT $LN1@operator
$LN88@operator:
  00116	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0011a	eb 2e		 jmp	 SHORT $LN1@operator
$LN89@operator:
  0011c	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00120	eb 28		 jmp	 SHORT $LN1@operator
$LN90@operator:
  00122	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00126	eb 22		 jmp	 SHORT $LN1@operator
$LN91@operator:
  00128	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0012c	eb 1c		 jmp	 SHORT $LN1@operator
$LN92@operator:
  0012e	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00132	eb 16		 jmp	 SHORT $LN1@operator
$LN93@operator:
  00134	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00138	eb 10		 jmp	 SHORT $LN1@operator
$LN94@operator:
  0013a	c6 45 ee eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0013e	eb 0a		 jmp	 SHORT $LN1@operator
$LN95@operator:
  00140	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00144	eb 04		 jmp	 SHORT $LN1@operator
$LN96@operator:
  00146	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator:
  0014a	6a 02		 push	 2
  0014c	8d 45 ec	 lea	 eax, DWORD PTR __t$[ebp]
  0014f	c6 45 f6 00	 mov	 BYTE PTR __t$[ebp+10], 0
  00153	5a		 pop	 edx
$LL104@operator:
  00154	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0015a	83 c0 04	 add	 eax, 4
  0015d	4a		 dec	 edx
  0015e	75 f4		 jne	 SHORT $LL104@operator
  00160	6a 08		 push	 8
  00162	58		 pop	 eax
$LL101@operator:
  00163	8b c8		 mov	 ecx, eax
  00165	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0016b	79 05		 jns	 SHORT $LN115@operator
  0016d	49		 dec	 ecx
  0016e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00171	41		 inc	 ecx
$LN115@operator:
  00172	b2 ed		 mov	 dl, -19			; ffffffedH
  00174	2a d1		 sub	 dl, cl
  00176	30 54 05 ec	 xor	 BYTE PTR __t$[ebp+eax], dl
  0017a	40		 inc	 eax
  0017b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0017e	7c e3		 jl	 SHORT $LL101@operator
  00180	8b cf		 mov	 ecx, edi
  00182	8d 75 ec	 lea	 esi, DWORD PTR __t$[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator:
  0018b	8a 08		 mov	 cl, BYTE PTR [eax]
  0018d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0018f	75 1a		 jne	 SHORT $LN112@operator
  00191	84 c9		 test	 cl, cl
  00193	74 12		 je	 SHORT $LN113@operator
  00195	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00198	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0019b	75 0e		 jne	 SHORT $LN112@operator
  0019d	83 c0 02	 add	 eax, 2
  001a0	83 c6 02	 add	 esi, 2
  001a3	84 c9		 test	 cl, cl
  001a5	75 e4		 jne	 SHORT $LL111@operator
$LN113@operator:
  001a7	33 c0		 xor	 eax, eax
  001a9	eb 05		 jmp	 SHORT $LN114@operator
$LN112@operator:
  001ab	1b c0		 sbb	 eax, eax
  001ad	83 d8 ff	 sbb	 eax, -1
$LN114@operator:
  001b0	33 c9		 xor	 ecx, ecx
  001b2	85 c0		 test	 eax, eax
  001b4	0f 94 c0	 sete	 al

; 148  : }

  001b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ba	5f		 pop	 edi
  001bb	33 cd		 xor	 ecx, ebp
  001bd	5e		 pop	 esi
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	c9		 leave
  001c4	c3		 ret	 0
??$?8$0L@@@YA_NABVioHashString@@AAY0L@$$CBD@Z ENDP	; operator==<11>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z	; operator==<14>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z
_TEXT	SEGMENT
__t$ = -24						; size = 14
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z PROC	; operator==<14>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _lhs$[ebp]
  0001a	84 d2		 test	 dl, dl
  0001c	0f 84 64 01 00
	00		 je	 $LN96@operator@2
  00022	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00025	88 55 e8	 mov	 BYTE PTR __t$[ebp], dl
  00028	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002b	84 d2		 test	 dl, dl
  0002d	0f 84 4d 01 00
	00		 je	 $LN95@operator@2
  00033	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00036	88 55 e9	 mov	 BYTE PTR __t$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 36 01 00
	00		 je	 $LN94@operator@2
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 ea	 mov	 BYTE PTR __t$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 1e 01 00
	00		 je	 $LN93@operator@2
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 eb	 mov	 BYTE PTR __t$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 07 01 00
	00		 je	 $LN92@operator@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 ec	 mov	 BYTE PTR __t$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 f0 00 00
	00		 je	 $LN91@operator@2
  00078	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0007b	88 55 ed	 mov	 BYTE PTR __t$[ebp+5], dl
  0007e	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00081	84 d2		 test	 dl, dl
  00083	0f 84 da 00 00
	00		 je	 $LN90@operator@2
  00089	32 d1		 xor	 dl, cl
  0008b	88 55 ee	 mov	 BYTE PTR __t$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 c4 00 00
	00		 je	 $LN89@operator@2
  00099	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009c	88 55 ef	 mov	 BYTE PTR __t$[ebp+7], dl
  0009f	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a2	84 d2		 test	 dl, dl
  000a4	0f 84 ad 00 00
	00		 je	 $LN88@operator@2
  000aa	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ad	88 55 f0	 mov	 BYTE PTR __t$[ebp+8], dl
  000b0	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b3	84 d2		 test	 dl, dl
  000b5	0f 84 96 00 00
	00		 je	 $LN87@operator@2
  000bb	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000be	88 55 f1	 mov	 BYTE PTR __t$[ebp+9], dl
  000c1	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c4	84 d2		 test	 dl, dl
  000c6	0f 84 80 00 00
	00		 je	 $LN86@operator@2
  000cc	32 d1		 xor	 dl, cl
  000ce	88 55 f2	 mov	 BYTE PTR __t$[ebp+10], dl
  000d1	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d4	84 d2		 test	 dl, dl
  000d6	74 6e		 je	 SHORT $LN85@operator@2
  000d8	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000db	88 55 f3	 mov	 BYTE PTR __t$[ebp+11], dl
  000de	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e1	84 d2		 test	 dl, dl
  000e3	74 5b		 je	 SHORT $LN84@operator@2
  000e5	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000e8	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ec	88 55 f4	 mov	 BYTE PTR __t$[ebp+12], dl
  000ef	0f 84 95 00 00
	00		 je	 $LN1@operator@2
  000f5	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000f8	84 d2		 test	 dl, dl
  000fa	74 3f		 je	 SHORT $LN82@operator@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f6	 mov	 BYTE PTR __t$[ebp+14], dl
  00101	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00104	84 d2		 test	 dl, dl
  00106	74 2d		 je	 SHORT $LN81@operator@2
  00108	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0010b	88 55 f7	 mov	 BYTE PTR __t$[ebp+15], dl
  0010e	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00111	84 d2		 test	 dl, dl
  00113	74 1a		 je	 SHORT $LN80@operator@2
  00115	8a 40 11	 mov	 al, BYTE PTR [eax+17]
  00118	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0011b	88 55 f8	 mov	 BYTE PTR __t$[ebp+16], dl
  0011e	84 c0		 test	 al, al
  00120	74 07		 je	 SHORT $LN79@operator@2
  00122	34 ec		 xor	 al, -20			; ffffffecH
  00124	88 45 f9	 mov	 BYTE PTR __t$[ebp+17], al
  00127	eb 61		 jmp	 SHORT $LN1@operator@2
$LN79@operator@2:
  00129	c6 45 f9 ec	 mov	 BYTE PTR __t$[ebp+17], -20 ; ffffffecH
  0012d	eb 5b		 jmp	 SHORT $LN1@operator@2
$LN80@operator@2:
  0012f	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+16], -19 ; ffffffedH
  00133	eb 55		 jmp	 SHORT $LN1@operator@2
$LN81@operator@2:
  00135	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+15], -22 ; ffffffeaH
  00139	eb 4f		 jmp	 SHORT $LN1@operator@2
$LN82@operator@2:
  0013b	88 4d f6	 mov	 BYTE PTR __t$[ebp+14], cl
  0013e	eb 4a		 jmp	 SHORT $LN1@operator@2
$LN84@operator@2:
  00140	c6 45 f4 ed	 mov	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  00144	eb 44		 jmp	 SHORT $LN1@operator@2
$LN85@operator@2:
  00146	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+11], -22 ; ffffffeaH
  0014a	eb 3e		 jmp	 SHORT $LN1@operator@2
$LN86@operator@2:
  0014c	88 4d f2	 mov	 BYTE PTR __t$[ebp+10], cl
  0014f	eb 39		 jmp	 SHORT $LN1@operator@2
$LN87@operator@2:
  00151	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+9], -20 ; ffffffecH
  00155	eb 33		 jmp	 SHORT $LN1@operator@2
$LN88@operator@2:
  00157	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0015b	eb 2d		 jmp	 SHORT $LN1@operator@2
$LN89@operator@2:
  0015d	c6 45 ef ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00161	eb 27		 jmp	 SHORT $LN1@operator@2
$LN90@operator@2:
  00163	88 4d ee	 mov	 BYTE PTR __t$[ebp+6], cl
  00166	eb 22		 jmp	 SHORT $LN1@operator@2
$LN91@operator@2:
  00168	c6 45 ed ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0016c	eb 1c		 jmp	 SHORT $LN1@operator@2
$LN92@operator@2:
  0016e	c6 45 ec ed	 mov	 BYTE PTR __t$[ebp+4], -19 ; ffffffedH
  00172	eb 16		 jmp	 SHORT $LN1@operator@2
$LN93@operator@2:
  00174	c6 45 eb ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  00178	eb 10		 jmp	 SHORT $LN1@operator@2
$LN94@operator@2:
  0017a	c6 45 ea eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  0017e	eb 0a		 jmp	 SHORT $LN1@operator@2
$LN95@operator@2:
  00180	c6 45 e9 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  00184	eb 04		 jmp	 SHORT $LN1@operator@2
$LN96@operator@2:
  00186	c6 45 e8 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@2:
  0018a	6a 03		 push	 3
  0018c	8d 45 e8	 lea	 eax, DWORD PTR __t$[ebp]
  0018f	c6 45 f5 00	 mov	 BYTE PTR __t$[ebp+13], 0
  00193	5a		 pop	 edx
$LL104@operator@2:
  00194	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0019a	83 c0 04	 add	 eax, 4
  0019d	4a		 dec	 edx
  0019e	75 f4		 jne	 SHORT $LL104@operator@2
  001a0	80 75 f4 ed	 xor	 BYTE PTR __t$[ebp+12], -19 ; ffffffedH
  001a4	8b cf		 mov	 ecx, edi
  001a6	8d 75 e8	 lea	 esi, DWORD PTR __t$[ebp]
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@2:
  001af	8a 08		 mov	 cl, BYTE PTR [eax]
  001b1	3a 0e		 cmp	 cl, BYTE PTR [esi]
  001b3	75 1a		 jne	 SHORT $LN112@operator@2
  001b5	84 c9		 test	 cl, cl
  001b7	74 12		 je	 SHORT $LN113@operator@2
  001b9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001bc	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  001bf	75 0e		 jne	 SHORT $LN112@operator@2
  001c1	83 c0 02	 add	 eax, 2
  001c4	83 c6 02	 add	 esi, 2
  001c7	84 c9		 test	 cl, cl
  001c9	75 e4		 jne	 SHORT $LL111@operator@2
$LN113@operator@2:
  001cb	33 c0		 xor	 eax, eax
  001cd	eb 05		 jmp	 SHORT $LN114@operator@2
$LN112@operator@2:
  001cf	1b c0		 sbb	 eax, eax
  001d1	83 d8 ff	 sbb	 eax, -1
$LN114@operator@2:
  001d4	33 c9		 xor	 ecx, ecx
  001d6	85 c0		 test	 eax, eax
  001d8	0f 94 c0	 sete	 al

; 148  : }

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	5f		 pop	 edi
  001df	33 cd		 xor	 ecx, ebp
  001e1	5e		 pop	 esi
  001e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e7	c9		 leave
  001e8	c3		 ret	 0
??$?8$0O@@@YA_NABVioHashString@@AAY0O@$$CBD@Z ENDP	; operator==<14>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z	; operator==<5>
; Function compile flags: /Ogsp
;	COMDAT ??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z
_TEXT	SEGMENT
__t$ = -16						; size = 5
__$ArrayPad$ = -4					; size = 4
_lhs$ = 8						; size = 4
_t$ = 12						; size = 4
??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z PROC	; operator==<5>, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]

; 147  : 	_ENCSTR(t, _t); return ( strcmp( lhs.c_str(), _t ) == 0 );

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _lhs$[ebp]
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 92 00 00
	00		 je	 $LN96@operator@3
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 f0	 mov	 BYTE PTR __t$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	74 7f		 je	 SHORT $LN95@operator@3
  0002d	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00030	88 55 f1	 mov	 BYTE PTR __t$[ebp+1], dl
  00033	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00036	84 d2		 test	 dl, dl
  00038	74 6c		 je	 SHORT $LN94@operator@3
  0003a	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0003d	88 55 f2	 mov	 BYTE PTR __t$[ebp+2], dl
  00040	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00043	84 d2		 test	 dl, dl
  00045	74 59		 je	 SHORT $LN93@operator@3
  00047	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0004a	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  0004e	88 55 f3	 mov	 BYTE PTR __t$[ebp+3], dl
  00051	74 63		 je	 SHORT $LN1@operator@3
  00053	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00056	84 d2		 test	 dl, dl
  00058	74 40		 je	 SHORT $LN91@operator@3
  0005a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0005d	88 55 f5	 mov	 BYTE PTR __t$[ebp+5], dl
  00060	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00063	84 d2		 test	 dl, dl
  00065	74 2d		 je	 SHORT $LN90@operator@3
  00067	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0006a	88 55 f6	 mov	 BYTE PTR __t$[ebp+6], dl
  0006d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00070	84 d2		 test	 dl, dl
  00072	74 1a		 je	 SHORT $LN89@operator@3
  00074	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  00077	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0007a	88 55 f7	 mov	 BYTE PTR __t$[ebp+7], dl
  0007d	84 c0		 test	 al, al
  0007f	74 07		 je	 SHORT $LN88@operator@3
  00081	34 ed		 xor	 al, -19			; ffffffedH
  00083	88 45 f8	 mov	 BYTE PTR __t$[ebp+8], al
  00086	eb 2e		 jmp	 SHORT $LN1@operator@3
$LN88@operator@3:
  00088	c6 45 f8 ed	 mov	 BYTE PTR __t$[ebp+8], -19 ; ffffffedH
  0008c	eb 28		 jmp	 SHORT $LN1@operator@3
$LN89@operator@3:
  0008e	c6 45 f7 ea	 mov	 BYTE PTR __t$[ebp+7], -22 ; ffffffeaH
  00092	eb 22		 jmp	 SHORT $LN1@operator@3
$LN90@operator@3:
  00094	c6 45 f6 eb	 mov	 BYTE PTR __t$[ebp+6], -21 ; ffffffebH
  00098	eb 1c		 jmp	 SHORT $LN1@operator@3
$LN91@operator@3:
  0009a	c6 45 f5 ec	 mov	 BYTE PTR __t$[ebp+5], -20 ; ffffffecH
  0009e	eb 16		 jmp	 SHORT $LN1@operator@3
$LN93@operator@3:
  000a0	c6 45 f3 ea	 mov	 BYTE PTR __t$[ebp+3], -22 ; ffffffeaH
  000a4	eb 10		 jmp	 SHORT $LN1@operator@3
$LN94@operator@3:
  000a6	c6 45 f2 eb	 mov	 BYTE PTR __t$[ebp+2], -21 ; ffffffebH
  000aa	eb 0a		 jmp	 SHORT $LN1@operator@3
$LN95@operator@3:
  000ac	c6 45 f1 ec	 mov	 BYTE PTR __t$[ebp+1], -20 ; ffffffecH
  000b0	eb 04		 jmp	 SHORT $LN1@operator@3
$LN96@operator@3:
  000b2	c6 45 f0 ed	 mov	 BYTE PTR __t$[ebp], -19	; ffffffedH
$LN1@operator@3:
  000b6	81 75 f0 ed ec
	eb ea		 xor	 DWORD PTR __t$[ebp], -353637139 ; eaebecedH
  000bd	56		 push	 esi
  000be	c6 45 f4 00	 mov	 BYTE PTR __t$[ebp+4], 0
  000c2	8d 75 f0	 lea	 esi, DWORD PTR __t$[ebp]
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL111@operator@3:
  000cb	8a 08		 mov	 cl, BYTE PTR [eax]
  000cd	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000cf	75 1a		 jne	 SHORT $LN112@operator@3
  000d1	84 c9		 test	 cl, cl
  000d3	74 12		 je	 SHORT $LN113@operator@3
  000d5	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000d8	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000db	75 0e		 jne	 SHORT $LN112@operator@3
  000dd	83 c0 02	 add	 eax, 2
  000e0	83 c6 02	 add	 esi, 2
  000e3	84 c9		 test	 cl, cl
  000e5	75 e4		 jne	 SHORT $LL111@operator@3
$LN113@operator@3:
  000e7	33 c0		 xor	 eax, eax
  000e9	eb 05		 jmp	 SHORT $LN114@operator@3
$LN112@operator@3:
  000eb	1b c0		 sbb	 eax, eax
  000ed	83 d8 ff	 sbb	 eax, -1
$LN114@operator@3:
  000f0	33 c9		 xor	 ecx, ecx
  000f2	85 c0		 test	 eax, eax
  000f4	0f 94 c0	 sete	 al

; 148  : }

  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	5e		 pop	 esi
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	c9		 leave
  00103	c3		 ret	 0
??$?8$04@@YA_NABVioHashString@@AAY04$$CBD@Z ENDP	; operator==<5>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z ; ioXMLElement::GetIntAttribute_e<12>
EXTRN	__imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioxmlelement.h
;	COMDAT ??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<12>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 32 01 00
	00		 je	 $LN96@GetIntAttr
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 1b 01 00
	00		 je	 $LN95@GetIntAttr
  00031	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00034	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00037	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003a	84 d2		 test	 dl, dl
  0003c	0f 84 04 01 00
	00		 je	 $LN94@GetIntAttr
  00042	b1 eb		 mov	 cl, -21			; ffffffebH
  00044	32 d1		 xor	 dl, cl
  00046	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 ec 00 00
	00		 je	 $LN93@GetIntAttr
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 d5 00 00
	00		 je	 $LN92@GetIntAttr
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 be 00 00
	00		 je	 $LN91@GetIntAttr
  00076	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00079	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007c	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007f	84 d2		 test	 dl, dl
  00081	0f 84 a8 00 00
	00		 je	 $LN90@GetIntAttr
  00087	32 d1		 xor	 dl, cl
  00089	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 92 00 00
	00		 je	 $LN89@GetIntAttr
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	74 7f		 je	 SHORT $LN88@GetIntAttr
  000a4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a7	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000aa	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ad	84 d2		 test	 dl, dl
  000af	74 6c		 je	 SHORT $LN87@GetIntAttr
  000b1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000b4	88 55 f5	 mov	 BYTE PTR __k$[ebp+9], dl
  000b7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ba	84 d2		 test	 dl, dl
  000bc	74 5a		 je	 SHORT $LN86@GetIntAttr
  000be	32 d1		 xor	 dl, cl
  000c0	80 78 0b 00	 cmp	 BYTE PTR [eax+11], 0
  000c4	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000c7	0f 84 89 00 00
	00		 je	 $LN1@GetIntAttr
  000cd	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000d0	84 d2		 test	 dl, dl
  000d2	74 3e		 je	 SHORT $LN84@GetIntAttr
  000d4	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d7	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000da	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000dd	84 d2		 test	 dl, dl
  000df	74 2b		 je	 SHORT $LN83@GetIntAttr
  000e1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000e4	88 55 f9	 mov	 BYTE PTR __k$[ebp+13], dl
  000e7	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  000ea	84 d2		 test	 dl, dl
  000ec	74 19		 je	 SHORT $LN82@GetIntAttr
  000ee	8a 40 0f	 mov	 al, BYTE PTR [eax+15]
  000f1	32 d1		 xor	 dl, cl
  000f3	88 55 fa	 mov	 BYTE PTR __k$[ebp+14], dl
  000f6	84 c0		 test	 al, al
  000f8	74 07		 je	 SHORT $LN81@GetIntAttr
  000fa	34 ea		 xor	 al, -22			; ffffffeaH
  000fc	88 45 fb	 mov	 BYTE PTR __k$[ebp+15], al
  000ff	eb 55		 jmp	 SHORT $LN1@GetIntAttr
$LN81@GetIntAttr:
  00101	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00105	eb 4f		 jmp	 SHORT $LN1@GetIntAttr
$LN82@GetIntAttr:
  00107	88 4d fa	 mov	 BYTE PTR __k$[ebp+14], cl
  0010a	eb 4a		 jmp	 SHORT $LN1@GetIntAttr
$LN83@GetIntAttr:
  0010c	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  00110	eb 44		 jmp	 SHORT $LN1@GetIntAttr
$LN84@GetIntAttr:
  00112	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00116	eb 3e		 jmp	 SHORT $LN1@GetIntAttr
$LN86@GetIntAttr:
  00118	88 4d f6	 mov	 BYTE PTR __k$[ebp+10], cl
  0011b	eb 39		 jmp	 SHORT $LN1@GetIntAttr
$LN87@GetIntAttr:
  0011d	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00121	eb 33		 jmp	 SHORT $LN1@GetIntAttr
$LN88@GetIntAttr:
  00123	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00127	eb 2d		 jmp	 SHORT $LN1@GetIntAttr
$LN89@GetIntAttr:
  00129	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0012d	eb 27		 jmp	 SHORT $LN1@GetIntAttr
$LN90@GetIntAttr:
  0012f	88 4d f2	 mov	 BYTE PTR __k$[ebp+6], cl
  00132	eb 22		 jmp	 SHORT $LN1@GetIntAttr
$LN91@GetIntAttr:
  00134	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00138	eb 1c		 jmp	 SHORT $LN1@GetIntAttr
$LN92@GetIntAttr:
  0013a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0013e	eb 16		 jmp	 SHORT $LN1@GetIntAttr
$LN93@GetIntAttr:
  00140	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00144	eb 10		 jmp	 SHORT $LN1@GetIntAttr
$LN94@GetIntAttr:
  00146	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0014a	eb 0a		 jmp	 SHORT $LN1@GetIntAttr
$LN95@GetIntAttr:
  0014c	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00150	eb 04		 jmp	 SHORT $LN1@GetIntAttr
$LN96@GetIntAttr:
  00152	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr:
  00156	6a 02		 push	 2
  00158	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0015b	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+11], 0
  0015f	5a		 pop	 edx
$LL104@GetIntAttr:
  00160	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00166	83 c0 04	 add	 eax, 4
  00169	4a		 dec	 edx
  0016a	75 f4		 jne	 SHORT $LL104@GetIntAttr
  0016c	6a 08		 push	 8
  0016e	58		 pop	 eax
$LL101@GetIntAttr:
  0016f	8b c8		 mov	 ecx, eax
  00171	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00177	79 05		 jns	 SHORT $LN111@GetIntAttr
  00179	49		 dec	 ecx
  0017a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0017d	41		 inc	 ecx
$LN111@GetIntAttr:
  0017e	b2 ed		 mov	 dl, -19			; ffffffedH
  00180	2a d1		 sub	 dl, cl
  00182	30 54 05 ec	 xor	 BYTE PTR __k$[ebp+eax], dl
  00186	40		 inc	 eax
  00187	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0018a	7c e3		 jl	 SHORT $LL101@GetIntAttr

; 88   : 		return GetIntAttribute(_k);

  0018c	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0018f	50		 push	 eax
  00190	8b ce		 mov	 ecx, esi
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  00198	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019b	33 cd		 xor	 ecx, ebp
  0019d	5e		 pop	 esi
  0019e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a3	c9		 leave
  001a4	c2 04 00	 ret	 4
??$GetIntAttribute_e@$0M@@ioXMLElement@@QBEHAAY0M@$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<12>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z ; ioXMLElement::GetIntAttribute_e<10>
; Function compile flags: /Ogsp
;	COMDAT ??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z
_TEXT	SEGMENT
__k$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z PROC ; ioXMLElement::GetIntAttribute_e<10>, COMDAT
; _this$ = ecx

; 86   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 87   : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	84 d2		 test	 dl, dl
  00017	0f 84 0d 01 00
	00		 je	 $LN96@GetIntAttr@2
  0001d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00020	88 55 ec	 mov	 BYTE PTR __k$[ebp], dl
  00023	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00026	84 d2		 test	 dl, dl
  00028	0f 84 f6 00 00
	00		 je	 $LN95@GetIntAttr@2
  0002e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00031	88 55 ed	 mov	 BYTE PTR __k$[ebp+1], dl
  00034	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00037	84 d2		 test	 dl, dl
  00039	0f 84 df 00 00
	00		 je	 $LN94@GetIntAttr@2
  0003f	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00042	88 55 ee	 mov	 BYTE PTR __k$[ebp+2], dl
  00045	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00048	84 d2		 test	 dl, dl
  0004a	0f 84 c8 00 00
	00		 je	 $LN93@GetIntAttr@2
  00050	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00053	88 55 ef	 mov	 BYTE PTR __k$[ebp+3], dl
  00056	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00059	84 d2		 test	 dl, dl
  0005b	0f 84 b1 00 00
	00		 je	 $LN92@GetIntAttr@2
  00061	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00064	88 55 f0	 mov	 BYTE PTR __k$[ebp+4], dl
  00067	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006a	84 d2		 test	 dl, dl
  0006c	0f 84 9a 00 00
	00		 je	 $LN91@GetIntAttr@2
  00072	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00075	88 55 f1	 mov	 BYTE PTR __k$[ebp+5], dl
  00078	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007b	84 d2		 test	 dl, dl
  0007d	0f 84 83 00 00
	00		 je	 $LN90@GetIntAttr@2
  00083	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00086	88 55 f2	 mov	 BYTE PTR __k$[ebp+6], dl
  00089	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008c	84 d2		 test	 dl, dl
  0008e	74 70		 je	 SHORT $LN89@GetIntAttr@2
  00090	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00093	88 55 f3	 mov	 BYTE PTR __k$[ebp+7], dl
  00096	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  00099	84 d2		 test	 dl, dl
  0009b	74 5d		 je	 SHORT $LN88@GetIntAttr@2
  0009d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000a0	80 78 09 00	 cmp	 BYTE PTR [eax+9], 0
  000a4	88 55 f4	 mov	 BYTE PTR __k$[ebp+8], dl
  000a7	0f 84 81 00 00
	00		 je	 $LN1@GetIntAttr@2
  000ad	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000b0	84 d2		 test	 dl, dl
  000b2	74 40		 je	 SHORT $LN86@GetIntAttr@2
  000b4	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000b7	88 55 f6	 mov	 BYTE PTR __k$[ebp+10], dl
  000ba	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000bd	84 d2		 test	 dl, dl
  000bf	74 2d		 je	 SHORT $LN85@GetIntAttr@2
  000c1	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000c4	88 55 f7	 mov	 BYTE PTR __k$[ebp+11], dl
  000c7	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ca	84 d2		 test	 dl, dl
  000cc	74 1a		 je	 SHORT $LN84@GetIntAttr@2
  000ce	8a 40 0d	 mov	 al, BYTE PTR [eax+13]
  000d1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000d4	88 55 f8	 mov	 BYTE PTR __k$[ebp+12], dl
  000d7	84 c0		 test	 al, al
  000d9	74 07		 je	 SHORT $LN83@GetIntAttr@2
  000db	34 ec		 xor	 al, -20			; ffffffecH
  000dd	88 45 f9	 mov	 BYTE PTR __k$[ebp+13], al
  000e0	eb 4c		 jmp	 SHORT $LN1@GetIntAttr@2
$LN83@GetIntAttr@2:
  000e2	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  000e6	eb 46		 jmp	 SHORT $LN1@GetIntAttr@2
$LN84@GetIntAttr@2:
  000e8	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  000ec	eb 40		 jmp	 SHORT $LN1@GetIntAttr@2
$LN85@GetIntAttr@2:
  000ee	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  000f2	eb 3a		 jmp	 SHORT $LN1@GetIntAttr@2
$LN86@GetIntAttr@2:
  000f4	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  000f8	eb 34		 jmp	 SHORT $LN1@GetIntAttr@2
$LN88@GetIntAttr@2:
  000fa	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  000fe	eb 2e		 jmp	 SHORT $LN1@GetIntAttr@2
$LN89@GetIntAttr@2:
  00100	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00104	eb 28		 jmp	 SHORT $LN1@GetIntAttr@2
$LN90@GetIntAttr@2:
  00106	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0010a	eb 22		 jmp	 SHORT $LN1@GetIntAttr@2
$LN91@GetIntAttr@2:
  0010c	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00110	eb 1c		 jmp	 SHORT $LN1@GetIntAttr@2
$LN92@GetIntAttr@2:
  00112	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00116	eb 16		 jmp	 SHORT $LN1@GetIntAttr@2
$LN93@GetIntAttr@2:
  00118	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0011c	eb 10		 jmp	 SHORT $LN1@GetIntAttr@2
$LN94@GetIntAttr@2:
  0011e	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00122	eb 0a		 jmp	 SHORT $LN1@GetIntAttr@2
$LN95@GetIntAttr@2:
  00124	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00128	eb 04		 jmp	 SHORT $LN1@GetIntAttr@2
$LN96@GetIntAttr@2:
  0012a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@GetIntAttr@2:
  0012e	6a 02		 push	 2
  00130	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  00133	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+9], 0
  00137	5a		 pop	 edx
$LL104@GetIntAttr@2:
  00138	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0013e	83 c0 04	 add	 eax, 4
  00141	4a		 dec	 edx
  00142	75 f4		 jne	 SHORT $LL104@GetIntAttr@2
  00144	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH

; 88   : 		return GetIntAttribute(_k);

  00148	8d 45 ec	 lea	 eax, DWORD PTR __k$[ebp]
  0014b	50		 push	 eax
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z

; 89   : 	}

  00152	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	33 cd		 xor	 ecx, ebp
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	c9		 leave
  0015d	c2 04 00	 ret	 4
??$GetIntAttribute_e@$09@ioXMLElement@@QBEHAAY09$$CBD@Z ENDP ; ioXMLElement::GetIntAttribute_e<10>
_TEXT	ENDS
PUBLIC	_pImage$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	_szType$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z:PROC
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\gui\novicegradebuffbtn.cpp
;	COMDAT ?AddRenderImage@NoviceGradeBuffBtn@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
_TEXT	SEGMENT
_pImage$GSCopy$ = -36					; size = 4
_this$GSCopy$ = -32					; size = 4
_szType$GSCopy$ = -28					; size = 4
__t$506463 = -24					; size = 14
__t$506338 = -24					; size = 11
__t$506588 = -16					; size = 5
__$ArrayPad$ = -4					; size = 4
_szType$ = 8						; size = 4
_pImage$ = 12						; size = 4
?AddRenderImage@NoviceGradeBuffBtn@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z PROC ; NoviceGradeBuffBtn::AddRenderImage, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _szType$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 40   : 	{
; 41   : 		SAFEDELETE( m_pIcon );

  00016	89 45 e4	 mov	 DWORD PTR _szType$GSCopy$[ebp], eax
  00019	8b 45 0c	 mov	 eax, DWORD PTR _pImage$[ebp]
  0001c	33 db		 xor	 ebx, ebx
  0001e	6a 02		 push	 2
  00020	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00023	89 45 dc	 mov	 DWORD PTR _pImage$GSCopy$[ebp], eax
  00026	c7 45 e8 a4 8f
	84 84		 mov	 DWORD PTR __t$506338[ebp], -2071687260 ; 84848fa4H
  0002d	c7 45 ec a8 8a
	8d 8f		 mov	 DWORD PTR __t$506338[ebp+4], -1886549336 ; 8f8d8aa8H
  00034	66 c7 45 f0 8e
	98		 mov	 WORD PTR __t$506338[ebp+8], 39054 ; 0000988eH
  0003a	8d 45 e8	 lea	 eax, DWORD PTR __t$506338[ebp]
  0003d	88 5d f2	 mov	 BYTE PTR __t$506338[ebp+10], bl
  00040	59		 pop	 ecx
  00041	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL121@AddRenderI:

; 29   : 	if( szType == "IconEffect" )

  00046	31 38		 xor	 DWORD PTR [eax], edi
  00048	83 c0 04	 add	 eax, 4
  0004b	49		 dec	 ecx
  0004c	75 f8		 jne	 SHORT $LL121@AddRenderI
  0004e	6a 08		 push	 8
  00050	58		 pop	 eax
$LL118@AddRenderI:
  00051	8b c8		 mov	 ecx, eax
  00053	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00059	79 05		 jns	 SHORT $LN362@AddRenderI
  0005b	49		 dec	 ecx
  0005c	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0005f	41		 inc	 ecx
$LN362@AddRenderI:
  00060	b2 ed		 mov	 dl, -19			; ffffffedH
  00062	2a d1		 sub	 dl, cl
  00064	30 54 05 e8	 xor	 BYTE PTR __t$506338[ebp+eax], dl
  00068	40		 inc	 eax
  00069	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0006c	7c e3		 jl	 SHORT $LL118@AddRenderI
  0006e	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00071	8d 75 e8	 lea	 esi, DWORD PTR __t$506338[ebp]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL350@AddRenderI:
  0007a	8a 08		 mov	 cl, BYTE PTR [eax]
  0007c	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0007e	75 1a		 jne	 SHORT $LN351@AddRenderI
  00080	3a cb		 cmp	 cl, bl
  00082	74 12		 je	 SHORT $LN352@AddRenderI
  00084	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00087	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0008a	75 0e		 jne	 SHORT $LN351@AddRenderI
  0008c	83 c0 02	 add	 eax, 2
  0008f	83 c6 02	 add	 esi, 2
  00092	3a cb		 cmp	 cl, bl
  00094	75 e4		 jne	 SHORT $LL350@AddRenderI
$LN352@AddRenderI:
  00096	33 c0		 xor	 eax, eax
  00098	eb 05		 jmp	 SHORT $LN353@AddRenderI
$LN351@AddRenderI:
  0009a	1b c0		 sbb	 eax, eax
  0009c	83 d8 ff	 sbb	 eax, -1
$LN353@AddRenderI:
  0009f	3b c3		 cmp	 eax, ebx
  000a1	75 28		 jne	 SHORT $LN348@AddRenderI

; 30   : 	{
; 31   : 		SAFEDELETE( m_pIconEffect );

  000a3	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  000a6	8b 8e 00 02 00
	00		 mov	 ecx, DWORD PTR [esi+512]
  000ac	3b cb		 cmp	 ecx, ebx
  000ae	74 0d		 je	 SHORT $LN8@AddRenderI
  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	6a 01		 push	 1
  000b4	ff 50 40	 call	 DWORD PTR [eax+64]
  000b7	89 9e 00 02 00
	00		 mov	 DWORD PTR [esi+512], ebx
$LN8@AddRenderI:

; 32   : 		m_pIconEffect = pImage;

  000bd	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  000c0	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax
  000c6	e9 fd 00 00 00	 jmp	 $LN1@AddRenderI
$LN348@AddRenderI:

; 33   : 	}
; 34   : 	else if( szType == "IconAddEffect" )

  000cb	6a 03		 push	 3
  000cd	c7 45 e8 a4 8f
	84 84		 mov	 DWORD PTR __t$506463[ebp], -2071687260 ; 84848fa4H
  000d4	c7 45 ec ac 88
	8f af		 mov	 DWORD PTR __t$506463[ebp+4], -1349547860 ; af8f88acH
  000db	c7 45 f0 8b 8a
	8e 89		 mov	 DWORD PTR __t$506463[ebp+8], -1987147125 ; 898e8a8bH
  000e2	8d 45 e8	 lea	 eax, DWORD PTR __t$506463[ebp]
  000e5	66 c7 45 f4 99
	00		 mov	 WORD PTR __t$506463[ebp+12], 153 ; 00000099H
  000eb	59		 pop	 ecx
$LL227@AddRenderI:
  000ec	31 38		 xor	 DWORD PTR [eax], edi
  000ee	83 c0 04	 add	 eax, 4
  000f1	49		 dec	 ecx
  000f2	75 f8		 jne	 SHORT $LL227@AddRenderI
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  000f7	80 75 f4 ed	 xor	 BYTE PTR __t$506463[ebp+12], -19 ; ffffffedH
  000fb	8d 75 e8	 lea	 esi, DWORD PTR __t$506463[ebp]
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL354@AddRenderI:
  00104	8a 08		 mov	 cl, BYTE PTR [eax]
  00106	3a 0e		 cmp	 cl, BYTE PTR [esi]
  00108	75 1a		 jne	 SHORT $LN355@AddRenderI
  0010a	3a cb		 cmp	 cl, bl
  0010c	74 12		 je	 SHORT $LN356@AddRenderI
  0010e	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00111	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00114	75 0e		 jne	 SHORT $LN355@AddRenderI
  00116	83 c0 02	 add	 eax, 2
  00119	83 c6 02	 add	 esi, 2
  0011c	3a cb		 cmp	 cl, bl
  0011e	75 e4		 jne	 SHORT $LL354@AddRenderI
$LN356@AddRenderI:
  00120	33 c0		 xor	 eax, eax
  00122	eb 05		 jmp	 SHORT $LN357@AddRenderI
$LN355@AddRenderI:
  00124	1b c0		 sbb	 eax, eax
  00126	83 d8 ff	 sbb	 eax, -1
$LN357@AddRenderI:
  00129	3b c3		 cmp	 eax, ebx
  0012b	75 25		 jne	 SHORT $LN349@AddRenderI

; 35   : 	{
; 36   : 		SAFEDELETE( m_pIconAddEffect );

  0012d	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00130	8b 8e 04 02 00
	00		 mov	 ecx, DWORD PTR [esi+516]
  00136	3b cb		 cmp	 ecx, ebx
  00138	74 0d		 je	 SHORT $LN5@AddRenderI
  0013a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013c	6a 01		 push	 1
  0013e	ff 50 40	 call	 DWORD PTR [eax+64]
  00141	89 9e 04 02 00
	00		 mov	 DWORD PTR [esi+516], ebx
$LN5@AddRenderI:

; 37   : 		m_pIconAddEffect = pImage;

  00147	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  0014a	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  00150	eb 76		 jmp	 SHORT $LN1@AddRenderI
$LN349@AddRenderI:

; 38   : 	}
; 39   : 	else if( szType == "Icon" )

  00152	8b 4d e4	 mov	 ecx, DWORD PTR _szType$GSCopy$[ebp]
  00155	c7 45 f0 a4 8f
	84 84		 mov	 DWORD PTR __t$506588[ebp], -2071687260 ; 84848fa4H
  0015c	31 7d f0	 xor	 DWORD PTR __t$506588[ebp], edi
  0015f	88 5d f4	 mov	 BYTE PTR __t$506588[ebp+4], bl
  00162	8d 75 f0	 lea	 esi, DWORD PTR __t$506588[ebp]
  00165	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@ioHashString@@QBEPBDXZ
$LL358@AddRenderI:
  0016b	8a 08		 mov	 cl, BYTE PTR [eax]
  0016d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0016f	75 1a		 jne	 SHORT $LN359@AddRenderI
  00171	3a cb		 cmp	 cl, bl
  00173	74 12		 je	 SHORT $LN360@AddRenderI
  00175	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00178	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0017b	75 0e		 jne	 SHORT $LN359@AddRenderI
  0017d	83 c0 02	 add	 eax, 2
  00180	83 c6 02	 add	 esi, 2
  00183	3a cb		 cmp	 cl, bl
  00185	75 e4		 jne	 SHORT $LL358@AddRenderI
$LN360@AddRenderI:
  00187	33 c0		 xor	 eax, eax
  00189	eb 05		 jmp	 SHORT $LN361@AddRenderI
$LN359@AddRenderI:
  0018b	1b c0		 sbb	 eax, eax
  0018d	83 d8 ff	 sbb	 eax, -1
$LN361@AddRenderI:
  00190	3b c3		 cmp	 eax, ebx
  00192	75 25		 jne	 SHORT $LN3@AddRenderI

; 40   : 	{
; 41   : 		SAFEDELETE( m_pIcon );

  00194	8b 75 e0	 mov	 esi, DWORD PTR _this$GSCopy$[ebp]
  00197	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  0019d	3b cb		 cmp	 ecx, ebx
  0019f	74 0d		 je	 SHORT $LN2@AddRenderI
  001a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a3	6a 01		 push	 1
  001a5	ff 50 40	 call	 DWORD PTR [eax+64]
  001a8	89 9e fc 01 00
	00		 mov	 DWORD PTR [esi+508], ebx
$LN2@AddRenderI:

; 42   : 		m_pIcon = pImage;

  001ae	8b 45 dc	 mov	 eax, DWORD PTR _pImage$GSCopy$[ebp]
  001b1	89 86 fc 01 00
	00		 mov	 DWORD PTR [esi+508], eax

; 43   : 	}
; 44   : 	else

  001b7	eb 0f		 jmp	 SHORT $LN1@AddRenderI
$LN3@AddRenderI:

; 45   : 		ioButton::AddRenderImage( szType, pImage );	

  001b9	ff 75 dc	 push	 DWORD PTR _pImage$GSCopy$[ebp]
  001bc	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001bf	ff 75 e4	 push	 DWORD PTR _szType$GSCopy$[ebp]
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AddRenderImage@ioButton@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z
$LN1@AddRenderI:

; 46   : }

  001c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	33 cd		 xor	 ecx, ebp
  001cf	5b		 pop	 ebx
  001d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d5	c9		 leave
  001d6	c2 08 00	 ret	 8
?AddRenderImage@NoviceGradeBuffBtn@@UAEXABVioHashString@@PAVioUIRenderImage@@@Z ENDP ; NoviceGradeBuffBtn::AddRenderImage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_?ParseExtraInfo@ioButton@@UAEXAAVioXMLElement@@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?ParseExtraInfo@NoviceGradeBuffBtn@@UAEXAAVioXMLElement@@@Z
_TEXT	SEGMENT
__k$506922 = -20					; size = 10
__k$506745 = -20					; size = 12
__$ArrayPad$ = -4					; size = 4
_xElement$ = 8						; size = 4
?ParseExtraInfo@NoviceGradeBuffBtn@@UAEXAAVioXMLElement@@@Z PROC ; NoviceGradeBuffBtn::ParseExtraInfo, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _xElement$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi

; 50   : 	ioButton::ParseExtraInfo( xElement );

  00016	53		 push	 ebx
  00017	8b f9		 mov	 edi, ecx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ParseExtraInfo@ioButton@@UAEXAAVioXMLElement@@@Z

; 51   : 
; 52   : 	m_dwChangeTime = xElement.GetIntAttribute_e( "Change_Time" );

  0001f	6a 02		 push	 2
  00021	c7 45 ec ae 84
	8a 84		 mov	 DWORD PTR __k$506745[ebp], -2071296850 ; 848a84aeH
  00028	c7 45 f0 8a 89
	b4 be		 mov	 DWORD PTR __k$506745[ebp+4], -1095464566 ; beb4898aH
  0002f	8d 45 ec	 lea	 eax, DWORD PTR __k$506745[ebp]
  00032	c7 45 f4 84 81
	8e 00		 mov	 DWORD PTR __k$506745[ebp+8], 9339268 ; 008e8184H
  00039	59		 pop	 ecx
$LL106@ParseExtra:
  0003a	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00040	83 c0 04	 add	 eax, 4
  00043	49		 dec	 ecx
  00044	75 f4		 jne	 SHORT $LL106@ParseExtra
  00046	6a 08		 push	 8
  00048	5e		 pop	 esi
$LL103@ParseExtra:
  00049	8b c6		 mov	 eax, esi
  0004b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00050	79 05		 jns	 SHORT $LN223@ParseExtra
  00052	48		 dec	 eax
  00053	83 c8 fc	 or	 eax, -4			; fffffffcH
  00056	40		 inc	 eax
$LN223@ParseExtra:
  00057	b1 ed		 mov	 cl, -19			; ffffffedH
  00059	2a c8		 sub	 cl, al
  0005b	30 4c 35 ec	 xor	 BYTE PTR __k$506745[ebp+esi], cl
  0005f	46		 inc	 esi
  00060	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00063	7c e4		 jl	 SHORT $LL103@ParseExtra
  00065	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_?GetIntAttribute@ioXMLElement@@QBEHPBD@Z
  0006b	8d 45 ec	 lea	 eax, DWORD PTR __k$506745[ebp]
  0006e	50		 push	 eax
  0006f	8b cb		 mov	 ecx, ebx
  00071	ff d6		 call	 esi
  00073	6a 02		 push	 2
  00075	89 87 10 02 00
	00		 mov	 DWORD PTR [edi+528], eax

; 53   : 	m_nAddAlpha = xElement.GetIntAttribute_e( "Add_Alpha" );

  0007b	c7 45 ec ac 88
	8f b5		 mov	 DWORD PTR __k$506922[ebp], -1248884564 ; b58f88acH
  00082	c7 45 f0 ac 80
	9b 82		 mov	 DWORD PTR __k$506922[ebp+4], -2103738196 ; 829b80acH
  00089	8d 45 ec	 lea	 eax, DWORD PTR __k$506922[ebp]
  0008c	66 c7 45 f4 8c
	00		 mov	 WORD PTR __k$506922[ebp+8], 140 ; 0000008cH
  00092	59		 pop	 ecx
$LL212@ParseExtra:
  00093	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00099	83 c0 04	 add	 eax, 4
  0009c	49		 dec	 ecx
  0009d	75 f4		 jne	 SHORT $LL212@ParseExtra
  0009f	80 75 f4 ed	 xor	 BYTE PTR __k$506922[ebp+8], -19 ; ffffffedH
  000a3	8d 45 ec	 lea	 eax, DWORD PTR __k$506922[ebp]
  000a6	50		 push	 eax
  000a7	8b cb		 mov	 ecx, ebx
  000a9	ff d6		 call	 esi

; 54   : }

  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	89 87 18 02 00
	00		 mov	 DWORD PTR [edi+536], eax
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	33 cd		 xor	 ecx, ebp
  000b8	5b		 pop	 ebx
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	c9		 leave
  000bf	c2 04 00	 ret	 4
?ParseExtraInfo@NoviceGradeBuffBtn@@UAEXAAVioXMLElement@@@Z ENDP ; NoviceGradeBuffBtn::ParseExtraInfo
_TEXT	ENDS
END
