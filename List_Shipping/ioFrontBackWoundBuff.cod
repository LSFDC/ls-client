; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioFrontBackWoundBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??1FrontBackWoundInfo@@QAE@XZ			; FrontBackWoundInfo::~FrontBackWoundInfo
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1FrontBackWoundInfo@@QAE@XZ DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$??1FrontBackWoundInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1FrontBackWoundInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$11
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1FrontBackWoundInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FrontBackWoundInfo@@QAE@XZ PROC			; FrontBackWoundInfo::~FrontBackWoundInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1FrontBackWoundInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  00017	8d 8f d4 00 00
	00		 lea	 ecx, DWORD PTR [edi+212]
  0001d	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00024	ff d6		 call	 esi
  00026	8d 8f c4 00 00
	00		 lea	 ecx, DWORD PTR [edi+196]
  0002c	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00030	ff d6		 call	 esi
  00032	8d 8f b0 00 00
	00		 lea	 ecx, DWORD PTR [edi+176]
  00038	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0003c	ff d6		 call	 esi
  0003e	8d 8f a0 00 00
	00		 lea	 ecx, DWORD PTR [edi+160]
  00044	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00048	ff d6		 call	 esi
  0004a	8d 8f 8c 00 00
	00		 lea	 ecx, DWORD PTR [edi+140]
  00050	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00054	ff d6		 call	 esi
  00056	8d 4f 7c	 lea	 ecx, DWORD PTR [edi+124]
  00059	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0005d	ff d6		 call	 esi
  0005f	8d 4f 68	 lea	 ecx, DWORD PTR [edi+104]
  00062	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00066	ff d6		 call	 esi
  00068	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  0006b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0006f	ff d6		 call	 esi
  00071	8d 4f 44	 lea	 ecx, DWORD PTR [edi+68]
  00074	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00078	ff d6		 call	 esi
  0007a	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  0007d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00081	ff d6		 call	 esi
  00083	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008a	ff d6		 call	 esi
  0008c	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0008f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00093	ff d6		 call	 esi
  00095	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	8b cf		 mov	 ecx, edi
  0009b	ff d6		 call	 esi
  0009d	e8 00 00 00 00	 call	 __EH_epilog3
  000a2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 34	 add	 ecx, 52			; 00000034H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 44	 add	 ecx, 68			; 00000044H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 58	 add	 ecx, 88			; 00000058H
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$6:
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 68	 add	 ecx, 104		; 00000068H
  0004b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$7:
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00057	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$8:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 8c 00 00
	00		 add	 ecx, 140		; 0000008cH
  00066	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$9:
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00075	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$10:
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00084	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??1FrontBackWoundInfo@@QAE@XZ$11:
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 c4 00 00
	00		 add	 ecx, 196		; 000000c4H
  00093	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??1FrontBackWoundInfo@@QAE@XZ:
  00099	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0009d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a0	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  000a3	33 c8		 xor	 ecx, eax
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FrontBackWoundInfo@@QAE@XZ
  000af	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FrontBackWoundInfo@@QAE@XZ ENDP			; FrontBackWoundInfo::~FrontBackWoundInfo
PUBLIC	??0FrontBackWoundInfo@@QAE@ABU0@@Z		; FrontBackWoundInfo::FrontBackWoundInfo
EXTRN	__imp_??0ioHashString@@QAE@ABV0@@Z:PROC
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0FrontBackWoundInfo@@QAE@ABU0@@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$??0FrontBackWoundInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0FrontBackWoundInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$11
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0FrontBackWoundInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0FrontBackWoundInfo@@QAE@ABU0@@Z PROC			; FrontBackWoundInfo::FrontBackWoundInfo, COMDAT
; _this$ = ecx
  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FrontBackWoundInfo@@QAE@ABU0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0ioHashString@@QAE@ABV0@@Z
  0001a	57		 push	 edi
  0001b	ff d3		 call	 ebx
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00024	50		 push	 eax
  00025	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00028	ff d3		 call	 ebx
  0002a	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  0002d	50		 push	 eax
  0002e	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00031	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00035	ff d3		 call	 ebx
  00037	d9 47 30	 fld	 DWORD PTR [edi+48]
  0003a	8d 47 34	 lea	 eax, DWORD PTR [edi+52]
  0003d	d9 5e 30	 fstp	 DWORD PTR [esi+48]
  00040	50		 push	 eax
  00041	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00044	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00048	ff d3		 call	 ebx
  0004a	8d 47 44	 lea	 eax, DWORD PTR [edi+68]
  0004d	50		 push	 eax
  0004e	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00051	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00055	ff d3		 call	 ebx
  00057	d9 47 54	 fld	 DWORD PTR [edi+84]
  0005a	8d 47 58	 lea	 eax, DWORD PTR [edi+88]
  0005d	d9 5e 54	 fstp	 DWORD PTR [esi+84]
  00060	50		 push	 eax
  00061	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00064	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00068	ff d3		 call	 ebx
  0006a	8d 47 68	 lea	 eax, DWORD PTR [edi+104]
  0006d	50		 push	 eax
  0006e	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00071	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00075	ff d3		 call	 ebx
  00077	d9 47 78	 fld	 DWORD PTR [edi+120]
  0007a	8d 47 7c	 lea	 eax, DWORD PTR [edi+124]
  0007d	d9 5e 78	 fstp	 DWORD PTR [esi+120]
  00080	50		 push	 eax
  00081	8d 4e 7c	 lea	 ecx, DWORD PTR [esi+124]
  00084	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00088	ff d3		 call	 ebx
  0008a	8d 87 8c 00 00
	00		 lea	 eax, DWORD PTR [edi+140]
  00090	50		 push	 eax
  00091	8d 8e 8c 00 00
	00		 lea	 ecx, DWORD PTR [esi+140]
  00097	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0009b	ff d3		 call	 ebx
  0009d	d9 87 9c 00 00
	00		 fld	 DWORD PTR [edi+156]
  000a3	8d 87 a0 00 00
	00		 lea	 eax, DWORD PTR [edi+160]
  000a9	d9 9e 9c 00 00
	00		 fstp	 DWORD PTR [esi+156]
  000af	50		 push	 eax
  000b0	8d 8e a0 00 00
	00		 lea	 ecx, DWORD PTR [esi+160]
  000b6	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000ba	ff d3		 call	 ebx
  000bc	8d 87 b0 00 00
	00		 lea	 eax, DWORD PTR [edi+176]
  000c2	50		 push	 eax
  000c3	8d 8e b0 00 00
	00		 lea	 ecx, DWORD PTR [esi+176]
  000c9	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  000cd	ff d3		 call	 ebx
  000cf	d9 87 c0 00 00
	00		 fld	 DWORD PTR [edi+192]
  000d5	8d 87 c4 00 00
	00		 lea	 eax, DWORD PTR [edi+196]
  000db	d9 9e c0 00 00
	00		 fstp	 DWORD PTR [esi+192]
  000e1	50		 push	 eax
  000e2	8d 8e c4 00 00
	00		 lea	 ecx, DWORD PTR [esi+196]
  000e8	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  000ec	ff d3		 call	 ebx
  000ee	8d 87 d4 00 00
	00		 lea	 eax, DWORD PTR [edi+212]
  000f4	50		 push	 eax
  000f5	8d 8e d4 00 00
	00		 lea	 ecx, DWORD PTR [esi+212]
  000fb	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  000ff	ff d3		 call	 ebx
  00101	d9 87 e4 00 00
	00		 fld	 DWORD PTR [edi+228]
  00107	d9 9e e4 00 00
	00		 fstp	 DWORD PTR [esi+228]
  0010d	8b c6		 mov	 eax, esi
  0010f	e8 00 00 00 00	 call	 __EH_epilog3
  00114	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 34	 add	 ecx, 52			; 00000034H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 44	 add	 ecx, 68			; 00000044H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 58	 add	 ecx, 88			; 00000058H
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$6:
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 68	 add	 ecx, 104		; 00000068H
  0004b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$7:
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00057	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$8:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 8c 00 00
	00		 add	 ecx, 140		; 0000008cH
  00066	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$9:
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00075	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$10:
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00084	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@ABU0@@Z$11:
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 c4 00 00
	00		 add	 ecx, 196		; 000000c4H
  00093	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FrontBackWoundInfo@@QAE@ABU0@@Z:
  00099	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0009d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a0	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  000a3	33 c8		 xor	 ecx, eax
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FrontBackWoundInfo@@QAE@ABU0@@Z
  000af	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FrontBackWoundInfo@@QAE@ABU0@@Z ENDP			; FrontBackWoundInfo::FrontBackWoundInfo
PUBLIC	??_7ioFrontBackWoundBuff@@6B@			; ioFrontBackWoundBuff::`vftable'
PUBLIC	??1ioFrontBackWoundBuff@@UAE@XZ			; ioFrontBackWoundBuff::~ioFrontBackWoundBuff
PUBLIC	??_R4ioFrontBackWoundBuff@@6B@			; ioFrontBackWoundBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioFrontBackWoundBuff@@@8		; ioFrontBackWoundBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioFrontBackWoundBuff@@8			; ioFrontBackWoundBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioFrontBackWoundBuff@@8			; ioFrontBackWoundBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioFrontBackWoundBuff@@8		; ioFrontBackWoundBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioFrontBackWoundBuff@@UAEXAAVioINILoader@@@Z ; ioFrontBackWoundBuff::LoadProperty
PUBLIC	?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ	; ioFrontBackWoundBuff::Clone
PUBLIC	?StartBuff@ioFrontBackWoundBuff@@UAEXPAVioBaseChar@@@Z ; ioFrontBackWoundBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioFrontBackWoundBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioFrontBackWoundBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioFrontBackWoundBuff@@UAEXM@Z	; ioFrontBackWoundBuff::ProcessBuff
PUBLIC	?EndBuff@ioFrontBackWoundBuff@@UAEXXZ		; ioFrontBackWoundBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioFrontBackWoundBuff@@UAEPAXI@Z:PROC	; ioFrontBackWoundBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofrontbackwoundbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioFrontBackWoundBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioFrontBackWoundBuff@@8 DD FLAT:??_R0?AVioFrontBackWoundBuff@@@8 ; ioFrontBackWoundBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioFrontBackWoundBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioFrontBackWoundBuff@@8
rdata$r	SEGMENT
??_R2ioFrontBackWoundBuff@@8 DD FLAT:??_R1A@?0A@EA@ioFrontBackWoundBuff@@8 ; ioFrontBackWoundBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioFrontBackWoundBuff@@8
rdata$r	SEGMENT
??_R3ioFrontBackWoundBuff@@8 DD 00H			; ioFrontBackWoundBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioFrontBackWoundBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioFrontBackWoundBuff@@@8
_DATA	SEGMENT
??_R0?AVioFrontBackWoundBuff@@@8 DD FLAT:??_7type_info@@6B@ ; ioFrontBackWoundBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioFrontBackWoundBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioFrontBackWoundBuff@@6B@
rdata$r	SEGMENT
??_R4ioFrontBackWoundBuff@@6B@ DD 00H			; ioFrontBackWoundBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioFrontBackWoundBuff@@@8
	DD	FLAT:??_R3ioFrontBackWoundBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioFrontBackWoundBuff@@6B@
CONST	SEGMENT
??_7ioFrontBackWoundBuff@@6B@ DD FLAT:??_R4ioFrontBackWoundBuff@@6B@ ; ioFrontBackWoundBuff::`vftable'
	DD	FLAT:?LoadProperty@ioFrontBackWoundBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioFrontBackWoundBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioFrontBackWoundBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioFrontBackWoundBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioFrontBackWoundBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioFrontBackWoundBuff@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ioFrontBackWoundBuff@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ioFrontBackWoundBuff@@UAE@XZ$0
__ehfuncinfo$??1ioFrontBackWoundBuff@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ioFrontBackWoundBuff@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1ioFrontBackWoundBuff@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ioFrontBackWoundBuff@@UAE@XZ PROC			; ioFrontBackWoundBuff::~ioFrontBackWoundBuff, COMDAT
; _this$ = ecx

; 21   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1ioFrontBackWoundBuff@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioFrontBackWoundBuff@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 22   : }

  0001b	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00021	e8 00 00 00 00	 call	 ??1FrontBackWoundInfo@@QAE@XZ
  00026	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00031	e8 00 00 00 00	 call	 __EH_epilog3
  00036	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ioFrontBackWoundBuff@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??1ioFrontBackWoundBuff@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ioFrontBackWoundBuff@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ioFrontBackWoundBuff@@UAE@XZ ENDP			; ioFrontBackWoundBuff::~ioFrontBackWoundBuff
EXTRN	?SetFrontBackWoundInfo@ioBaseChar@@QAEXABUFrontBackWoundInfo@@@Z:PROC ; ioBaseChar::SetFrontBackWoundInfo
EXTRN	__imp_??4ioHashString@@QAEAAV0@ABV0@@Z:PROC
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioFrontBackWoundBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioFrontBackWoundBuff@@UAEXPAVioBaseChar@@@Z PROC ; ioFrontBackWoundBuff::StartBuff, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 87   : 	ioBuff::StartBuff( pOwner );

  00005	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff

; 88   : 
; 89   : 	m_FrontBackWoundInfo.m_BuffName = m_Name;

  0000f	8d be 6c 09 00
	00		 lea	 edi, DWORD PTR [esi+2412]
  00015	81 c6 34 02 00
	00		 add	 esi, 564		; 00000234H
  0001b	56		 push	 esi
  0001c	8b cf		 mov	 ecx, edi
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 90   : 	pOwner->SetFrontBackWoundInfo( m_FrontBackWoundInfo );

  00024	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ?SetFrontBackWoundInfo@ioBaseChar@@QAEXABUFrontBackWoundInfo@@@Z ; ioBaseChar::SetFrontBackWoundInfo
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 91   : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?StartBuff@ioFrontBackWoundBuff@@UAEXPAVioBaseChar@@@Z ENDP ; ioFrontBackWoundBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioFrontBackWoundBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioFrontBackWoundBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioFrontBackWoundBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 95   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00004	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000f	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00014	84 c0		 test	 al, al
  00016	74 22		 je	 SHORT $LN2@ApplyStart
$LN1@ApplyStart:
  00018	57		 push	 edi

; 96   : 		return false;
; 97   : 
; 98   : 	m_FrontBackWoundInfo.m_BuffName = m_Name;

  00019	8d be 6c 09 00
	00		 lea	 edi, DWORD PTR [esi+2412]
  0001f	81 c6 34 02 00
	00		 add	 esi, 564		; 00000234H
  00025	56		 push	 esi
  00026	8b cf		 mov	 ecx, edi
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4ioHashString@@QAEAAV0@ABV0@@Z

; 99   : 	pOwner->SetFrontBackWoundInfo( m_FrontBackWoundInfo );

  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _pOwner$[ebp]
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ?SetFrontBackWoundInfo@ioBaseChar@@QAEXABUFrontBackWoundInfo@@@Z ; ioBaseChar::SetFrontBackWoundInfo

; 100  : 	return true;

  00037	b0 01		 mov	 al, 1
  00039	5f		 pop	 edi
$LN2@ApplyStart:
  0003a	5e		 pop	 esi

; 101  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioFrontBackWoundBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioFrontBackWoundBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
EXTRN	?RemoveFrontBackWoundInfo@ioBaseChar@@QAEXABVioHashString@@@Z:PROC ; ioBaseChar::RemoveFrontBackWoundInfo
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioFrontBackWoundBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioFrontBackWoundBuff@@UAEXXZ PROC		; ioFrontBackWoundBuff::EndBuff, COMDAT
; _this$ = ecx

; 129  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 130  : 	m_pOwner->RemoveFrontBackWoundInfo( m_Name );

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	8d 86 34 02 00
	00		 lea	 eax, DWORD PTR [esi+564]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?RemoveFrontBackWoundInfo@ioBaseChar@@QAEXABVioHashString@@@Z ; ioBaseChar::RemoveFrontBackWoundInfo

; 131  : 
; 132  : 	ioBuff::EndBuff();

  00015	8b ce		 mov	 ecx, esi
  00017	5e		 pop	 esi
  00018	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioFrontBackWoundBuff@@UAEXXZ ENDP		; ioFrontBackWoundBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioFrontBackWoundBuff@@IAEXXZ ; ioFrontBackWoundBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioFrontBackWoundBuff@@IAEXXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioFrontBackWoundBuff@@IAEXXZ PROC	; ioFrontBackWoundBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 136  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 137  : 	if( !m_pOwner ) return;

  00003	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00009	33 d2		 xor	 edx, edx
  0000b	3b ca		 cmp	 ecx, edx
  0000d	74 57		 je	 SHORT $LN1@CheckOwner

; 138  : 
; 139  : 	CharState eState = m_pOwner->GetState();

  0000f	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]

; 140  : 
; 141  : 	if( m_bDisableDownState )

  00015	38 96 54 0a 00
	00		 cmp	 BYTE PTR [esi+2644], dl
  0001b	74 49		 je	 SHORT $LN1@CheckOwner

; 142  : 	{
; 143  : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0001d	3c 17		 cmp	 al, 23			; 00000017H
  0001f	75 10		 jne	 SHORT $LN13@CheckOwner
  00021	38 91 c5 15 00
	00		 cmp	 BYTE PTR [ecx+5573], dl
$LN29@CheckOwner:
  00027	74 3d		 je	 SHORT $LN1@CheckOwner
$LN28@CheckOwner:

; 144  : 			SetReserveEndBuff();

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
  0002c	e9 00 00 00 00	 jmp	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN13@CheckOwner:

; 145  : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00031	3c 0c		 cmp	 al, 12			; 0000000cH
  00033	75 0b		 jne	 SHORT $LN11@CheckOwner
$LN31@CheckOwner:
  00035	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  0003a	84 c0		 test	 al, al
  0003c	75 28		 jne	 SHORT $LN1@CheckOwner

; 146  : 			SetReserveEndBuff();

  0003e	eb e9		 jmp	 SHORT $LN28@CheckOwner
$LN11@CheckOwner:

; 147  : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00040	3c 31		 cmp	 al, 49			; 00000031H

; 148  : 			SetReserveEndBuff();

  00042	74 f1		 je	 SHORT $LN31@CheckOwner

; 149  : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00044	3c 0f		 cmp	 al, 15			; 0000000fH
  00046	75 0a		 jne	 SHORT $LN7@CheckOwner
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0004e	84 c0		 test	 al, al

; 150  : 			SetReserveEndBuff();

  00050	eb d5		 jmp	 SHORT $LN29@CheckOwner
$LN7@CheckOwner:

; 151  : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00052	3c 26		 cmp	 al, 38			; 00000026H
  00054	75 08		 jne	 SHORT $LN5@CheckOwner
$LN30@CheckOwner:
  00056	38 91 c7 15 00
	00		 cmp	 BYTE PTR [ecx+5575], dl

; 152  : 			SetReserveEndBuff();

  0005c	eb c9		 jmp	 SHORT $LN29@CheckOwner
$LN5@CheckOwner:

; 153  : 		else if( eState == CS_DROP_ZONE_DOWN )

  0005e	3c 10		 cmp	 al, 16			; 00000010H

; 154  : 			SetReserveEndBuff();

  00060	74 c7		 je	 SHORT $LN28@CheckOwner

; 155  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00062	3c 3b		 cmp	 al, 59			; 0000003bH

; 156  : 			SetReserveEndBuff();

  00064	74 f0		 je	 SHORT $LN30@CheckOwner
$LN1@CheckOwner:
  00066	5e		 pop	 esi

; 157  : 	}
; 158  : }

  00067	c3		 ret	 0
?CheckOwnerStateCheck@ioFrontBackWoundBuff@@IAEXXZ ENDP	; ioFrontBackWoundBuff::CheckOwnerStateCheck
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??0FrontBackWoundInfo@@QAE@XZ			; FrontBackWoundInfo::FrontBackWoundInfo
EXTRN	__imp_??0ioHashString@@QAE@XZ:PROC
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0FrontBackWoundInfo@@QAE@XZ DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$??0FrontBackWoundInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0FrontBackWoundInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$11
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\playentityhelpstruct.h
xdata$x	ENDS
;	COMDAT ??0FrontBackWoundInfo@@QAE@XZ
_TEXT	SEGMENT
tv258 = -16						; size = 4
tv254 = -16						; size = 4
tv250 = -16						; size = 4
tv246 = -16						; size = 4
tv242 = -16						; size = 4
tv238 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FrontBackWoundInfo@@QAE@XZ PROC			; FrontBackWoundInfo::FrontBackWoundInfo, COMDAT
; _this$ = ecx

; 993  : 	FrontBackWoundInfo()

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FrontBackWoundInfo@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0ioHashString@@QAE@XZ
  00017	ff d7		 call	 edi
  00019	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001d	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00020	ff d7		 call	 edi
  00022	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00025	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00029	ff d7		 call	 edi
  0002b	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  0002e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00032	ff d7		 call	 edi
  00034	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00037	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0003b	ff d7		 call	 edi
  0003d	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00040	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00044	ff d7		 call	 edi
  00046	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00049	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0004d	ff d7		 call	 edi
  0004f	8d 4e 7c	 lea	 ecx, DWORD PTR [esi+124]
  00052	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00056	ff d7		 call	 edi
  00058	8d 8e 8c 00 00
	00		 lea	 ecx, DWORD PTR [esi+140]
  0005e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00062	ff d7		 call	 edi
  00064	8d 8e a0 00 00
	00		 lea	 ecx, DWORD PTR [esi+160]
  0006a	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0006e	ff d7		 call	 edi
  00070	8d 8e b0 00 00
	00		 lea	 ecx, DWORD PTR [esi+176]
  00076	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0007a	ff d7		 call	 edi
  0007c	8d 8e c4 00 00
	00		 lea	 ecx, DWORD PTR [esi+196]
  00082	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00086	ff d7		 call	 edi
  00088	8d 8e d4 00 00
	00		 lea	 ecx, DWORD PTR [esi+212]
  0008e	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00092	ff d7		 call	 edi

; 994  : 	{
; 995  : 		m_fFrontDamageRate = FLOAT1;

  00094	b8 01 00 00 00	 mov	 eax, 1
  00099	89 45 f0	 mov	 DWORD PTR tv258[ebp], eax
  0009c	db 45 f0	 fild	 DWORD PTR tv258[ebp]
  0009f	85 c0		 test	 eax, eax
  000a1	79 06		 jns	 SHORT $LN29@FrontBackW
  000a3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN29@FrontBackW:
  000a9	d9 5e 30	 fstp	 DWORD PTR [esi+48]

; 996  : 		m_fBackDamageRate = FLOAT1;

  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	89 45 f0	 mov	 DWORD PTR tv254[ebp], eax
  000b4	db 45 f0	 fild	 DWORD PTR tv254[ebp]
  000b7	85 c0		 test	 eax, eax
  000b9	79 06		 jns	 SHORT $LN30@FrontBackW
  000bb	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN30@FrontBackW:
  000c1	d9 5e 54	 fstp	 DWORD PTR [esi+84]

; 997  : 
; 998  : 		m_fDownFrontDamageRate = FLOAT1;

  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	89 45 f0	 mov	 DWORD PTR tv250[ebp], eax
  000cc	db 45 f0	 fild	 DWORD PTR tv250[ebp]
  000cf	85 c0		 test	 eax, eax
  000d1	79 06		 jns	 SHORT $LN31@FrontBackW
  000d3	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN31@FrontBackW:
  000d9	d9 5e 78	 fstp	 DWORD PTR [esi+120]

; 999  : 		m_fDownBackDamageRate = FLOAT1;

  000dc	b8 01 00 00 00	 mov	 eax, 1
  000e1	89 45 f0	 mov	 DWORD PTR tv246[ebp], eax
  000e4	db 45 f0	 fild	 DWORD PTR tv246[ebp]
  000e7	85 c0		 test	 eax, eax
  000e9	79 06		 jns	 SHORT $LN32@FrontBackW
  000eb	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN32@FrontBackW:
  000f1	d9 9e 9c 00 00
	00		 fstp	 DWORD PTR [esi+156]

; 1000 : 
; 1001 : 		m_fAirFrontDamageRate = FLOAT1;

  000f7	b8 01 00 00 00	 mov	 eax, 1
  000fc	89 45 f0	 mov	 DWORD PTR tv242[ebp], eax
  000ff	db 45 f0	 fild	 DWORD PTR tv242[ebp]
  00102	85 c0		 test	 eax, eax
  00104	79 06		 jns	 SHORT $LN33@FrontBackW
  00106	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN33@FrontBackW:
  0010c	d9 9e c0 00 00
	00		 fstp	 DWORD PTR [esi+192]

; 1002 : 		m_fAirBackDamageRate = FLOAT1;

  00112	b8 01 00 00 00	 mov	 eax, 1
  00117	89 45 f0	 mov	 DWORD PTR tv238[ebp], eax
  0011a	db 45 f0	 fild	 DWORD PTR tv238[ebp]
  0011d	85 c0		 test	 eax, eax
  0011f	79 06		 jns	 SHORT $LN34@FrontBackW
  00121	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@FrontBackW:
  00127	d9 9e e4 00 00
	00		 fstp	 DWORD PTR [esi+228]

; 1003 : 	}

  0012d	8b c6		 mov	 eax, esi
  0012f	e8 00 00 00 00	 call	 __EH_epilog3
  00134	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$2:
  00015	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 20	 add	 ecx, 32			; 00000020H
  0001b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 34	 add	 ecx, 52			; 00000034H
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$4:
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 44	 add	 ecx, 68			; 00000044H
  00033	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$5:
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 58	 add	 ecx, 88			; 00000058H
  0003f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$6:
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 68	 add	 ecx, 104		; 00000068H
  0004b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$7:
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00057	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$8:
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 8c 00 00
	00		 add	 ecx, 140		; 0000008cH
  00066	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$9:
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00075	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$10:
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  00084	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$??0FrontBackWoundInfo@@QAE@XZ$11:
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 c4 00 00
	00		 add	 ecx, 196		; 000000c4H
  00093	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$??0FrontBackWoundInfo@@QAE@XZ:
  00099	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0009d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a0	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  000a3	33 c8		 xor	 ecx, eax
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FrontBackWoundInfo@@QAE@XZ
  000af	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FrontBackWoundInfo@@QAE@XZ ENDP			; FrontBackWoundInfo::FrontBackWoundInfo
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
_TEXT	ENDS
PUBLIC	??0ioFrontBackWoundBuff@@QAE@XZ			; ioFrontBackWoundBuff::ioFrontBackWoundBuff
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
;	COMDAT xdata$x
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofrontbackwoundbuff.cpp
xdata$x	SEGMENT
__unwindtable$??0ioFrontBackWoundBuff@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioFrontBackWoundBuff@@QAE@XZ$0
__ehfuncinfo$??0ioFrontBackWoundBuff@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioFrontBackWoundBuff@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioFrontBackWoundBuff@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0ioFrontBackWoundBuff@@QAE@XZ PROC			; ioFrontBackWoundBuff::ioFrontBackWoundBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioFrontBackWoundBuff@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00016	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001a	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioFrontBackWoundBuff@@6B@
  00026	e8 00 00 00 00	 call	 ??0FrontBackWoundInfo@@QAE@XZ ; FrontBackWoundInfo::FrontBackWoundInfo

; 11   : }

  0002b	8b c6		 mov	 eax, esi
  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioFrontBackWoundBuff@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioFrontBackWoundBuff@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioFrontBackWoundBuff@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioFrontBackWoundBuff@@QAE@XZ ENDP			; ioFrontBackWoundBuff::ioFrontBackWoundBuff
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_GioFrontBackWoundBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioFrontBackWoundBuff@@UAEPAXI@Z PROC		; ioFrontBackWoundBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioFrontBackWoundBuff@@UAE@XZ ; ioFrontBackWoundBuff::~ioFrontBackWoundBuff
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioFrontBackWoundBuff@@UAEPAXI@Z ENDP		; ioFrontBackWoundBuff::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0ioFrontBackWoundBuff@@QAE@ABV0@@Z		; ioFrontBackWoundBuff::ioFrontBackWoundBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z$0
__ehfuncinfo$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0ioFrontBackWoundBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0ioFrontBackWoundBuff@@QAE@ABV0@@Z PROC		; ioFrontBackWoundBuff::ioFrontBackWoundBuff, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  0001a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0001e	8d 87 6c 09 00
	00		 lea	 eax, DWORD PTR [edi+2412]
  00024	50		 push	 eax
  00025	8d 8e 6c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2412]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioFrontBackWoundBuff@@6B@
  00031	e8 00 00 00 00	 call	 ??0FrontBackWoundInfo@@QAE@ABU0@@Z
  00036	8a 87 54 0a 00
	00		 mov	 al, BYTE PTR [edi+2644]
  0003c	88 86 54 0a 00
	00		 mov	 BYTE PTR [esi+2644], al

; 18   : }

  00042	8b c6		 mov	 eax, esi
  00044	e8 00 00 00 00	 call	 __EH_epilog3
  00049	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
__ehhandler$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ioFrontBackWoundBuff@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ioFrontBackWoundBuff@@QAE@ABV0@@Z ENDP		; ioFrontBackWoundBuff::ioFrontBackWoundBuff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T526745 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ PROC	; ioFrontBackWoundBuff::Clone, COMDAT
; _this$ = ecx

; 81   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 82   : 	return new ioFrontBackWoundBuff( *this );

  0000e	68 58 0a 00 00	 push	 2648			; 00000a58H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T526745[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioFrontBackWoundBuff@@QAE@ABV0@@Z ; ioFrontBackWoundBuff::ioFrontBackWoundBuff
$LN3@Clone:

; 83   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T526745[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioFrontBackWoundBuff@@UAEPAVioBuff@@XZ ENDP	; ioFrontBackWoundBuff::Clone
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
; Function compile flags: /Ogsp
;	COMDAT ?ProcessBuff@ioFrontBackWoundBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioFrontBackWoundBuff@@UAEXM@Z PROC		; ioFrontBackWoundBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 105  : 	CheckOwnerStateCheck();

  00006	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioFrontBackWoundBuff@@IAEXXZ ; ioFrontBackWoundBuff::CheckOwnerStateCheck

; 106  : 
; 107  : 	switch( m_iOperationType )

  0000b	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00011	83 e8 00	 sub	 eax, 0
  00014	74 43		 je	 SHORT $LN1@ProcessBuf
  00016	48		 dec	 eax
  00017	74 06		 je	 SHORT $LN2@ProcessBuf
  00019	48		 dec	 eax
  0001a	74 17		 je	 SHORT $LN4@ProcessBuf
  0001c	48		 dec	 eax
  0001d	75 41		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 118  : 	case OT_DELAY:
; 119  : 	case OT_ACTIVE:
; 120  : 		ioBuff::ProcessBuff( fTimePerSec );

  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 121  : 		break;

  00031	eb 2d		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 108  : 	{
; 109  : 	case OT_SWITCH:
; 110  : 		if( !CheckSwitchType( fTimePerSec ) )

  00033	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00038	51		 push	 ecx
  00039	8b ce		 mov	 ecx, esi
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 111  : 		{
; 112  : 			SetReserveEndBuff();

  00045	8b ce		 mov	 ecx, esi
  00047	84 c0		 test	 al, al
  00049	75 07		 jne	 SHORT $LN3@ProcessBuf
  0004b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 113  : 			return;

  00050	eb 0e		 jmp	 SHORT $LN5@ProcessBuf
$LN3@ProcessBuf:

; 114  : 		}
; 115  : 
; 116  : 		CheckCallingProcess();

  00052	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 117  : 		break;

  00057	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 122  : 	case OT_PASSIVE:
; 123  : 		CheckCallingAreaWeapon();

  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  00060	5e		 pop	 esi

; 124  : 		break;
; 125  : 	}
; 126  : }

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?ProcessBuff@ioFrontBackWoundBuff@@UAEXM@Z ENDP		; ioFrontBackWoundBuff::ProcessBuff
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<17>
EXTRN	__imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<17>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 a7 01 00
	00		 je	 $LN96@LoadString
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 90 01 00
	00		 je	 $LN95@LoadString
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 78 01 00
	00		 je	 $LN94@LoadString
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 61 01 00
	00		 je	 $LN93@LoadString
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 4a 01 00
	00		 je	 $LN92@LoadString
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 34 01 00
	00		 je	 $LN91@LoadString
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 1e 01 00
	00		 je	 $LN90@LoadString
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 07 01 00
	00		 je	 $LN89@LoadString
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 f0 00 00
	00		 je	 $LN88@LoadString
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 da 00 00
	00		 je	 $LN87@LoadString
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 c4 00 00
	00		 je	 $LN86@LoadString
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 ad 00 00
	00		 je	 $LN85@LoadString
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 96 00 00
	00		 je	 $LN84@LoadString
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 80 00 00
	00		 je	 $LN83@LoadString
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	74 6e		 je	 SHORT $LN82@LoadString
  00110	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00113	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00116	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00119	84 d2		 test	 dl, dl
  0011b	74 5b		 je	 SHORT $LN81@LoadString
  0011d	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00120	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	0f 84 a6 00 00
	00		 je	 $LN111@LoadString
  0012d	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00130	84 d2		 test	 dl, dl
  00132	74 3f		 je	 SHORT $LN79@LoadString
  00134	32 d1		 xor	 dl, cl
  00136	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00139	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0013c	84 d2		 test	 dl, dl
  0013e	74 2d		 je	 SHORT $LN78@LoadString
  00140	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00143	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00146	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00149	84 d2		 test	 dl, dl
  0014b	74 1a		 je	 SHORT $LN77@LoadString
  0014d	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00150	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00153	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00156	84 c0		 test	 al, al
  00158	74 07		 je	 SHORT $LN76@LoadString
  0015a	34 ed		 xor	 al, -19			; ffffffedH
  0015c	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  0015f	eb 72		 jmp	 SHORT $LN111@LoadString
$LN76@LoadString:
  00161	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00165	eb 6c		 jmp	 SHORT $LN111@LoadString
$LN77@LoadString:
  00167	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0016b	eb 66		 jmp	 SHORT $LN111@LoadString
$LN78@LoadString:
  0016d	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00171	eb 60		 jmp	 SHORT $LN111@LoadString
$LN79@LoadString:
  00173	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00176	eb 5b		 jmp	 SHORT $LN111@LoadString
$LN81@LoadString:
  00178	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0017c	eb 55		 jmp	 SHORT $LN111@LoadString
$LN82@LoadString:
  0017e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00182	eb 4f		 jmp	 SHORT $LN111@LoadString
$LN83@LoadString:
  00184	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  00187	eb 4a		 jmp	 SHORT $LN111@LoadString
$LN84@LoadString:
  00189	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0018d	eb 44		 jmp	 SHORT $LN111@LoadString
$LN85@LoadString:
  0018f	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00193	eb 3e		 jmp	 SHORT $LN111@LoadString
$LN86@LoadString:
  00195	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00199	eb 38		 jmp	 SHORT $LN111@LoadString
$LN87@LoadString:
  0019b	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  0019e	eb 33		 jmp	 SHORT $LN111@LoadString
$LN88@LoadString:
  001a0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001a4	eb 2d		 jmp	 SHORT $LN111@LoadString
$LN89@LoadString:
  001a6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001aa	eb 27		 jmp	 SHORT $LN111@LoadString
$LN90@LoadString:
  001ac	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001b0	eb 21		 jmp	 SHORT $LN111@LoadString
$LN91@LoadString:
  001b2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001b5	eb 1c		 jmp	 SHORT $LN111@LoadString
$LN92@LoadString:
  001b7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001bb	eb 16		 jmp	 SHORT $LN111@LoadString
$LN93@LoadString:
  001bd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001c1	eb 10		 jmp	 SHORT $LN111@LoadString
$LN94@LoadString:
  001c3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001c7	eb 0a		 jmp	 SHORT $LN111@LoadString
$LN95@LoadString:
  001c9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001cd	eb 04		 jmp	 SHORT $LN111@LoadString
$LN96@LoadString:
  001cf	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString:
  001d3	6a 04		 push	 4
  001d5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d8	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001dc	5a		 pop	 edx
$LL104@LoadString:
  001dd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001e3	83 c0 04	 add	 eax, 4
  001e6	4a		 dec	 edx
  001e7	75 f4		 jne	 SHORT $LL104@LoadString

; 163  : 		LoadString(_k, d, b, i);

  001e9	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001ec	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001ef	57		 push	 edi
  001f0	56		 push	 esi
  001f1	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f4	50		 push	 eax
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  001fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fe	5f		 pop	 edi
  001ff	33 cd		 xor	 ecx, ebp
  00201	5e		 pop	 esi
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	c9		 leave
  00208	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BB@@ioINILoader@@QAEXAAY0BB@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<17>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<20>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<20>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 dd 01 00
	00		 je	 $LN96@LoadString@2
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 c6 01 00
	00		 je	 $LN95@LoadString@2
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 ae 01 00
	00		 je	 $LN94@LoadString@2
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 96 01 00
	00		 je	 $LN93@LoadString@2
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 7f 01 00
	00		 je	 $LN92@LoadString@2
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 69 01 00
	00		 je	 $LN91@LoadString@2
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 54 01 00
	00		 je	 $LN90@LoadString@2
  00090	32 d1		 xor	 dl, cl
  00092	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 3e 01 00
	00		 je	 $LN89@LoadString@2
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 27 01 00
	00		 je	 $LN88@LoadString@2
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 11 01 00
	00		 je	 $LN87@LoadString@2
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 fc 00 00
	00		 je	 $LN86@LoadString@2
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 e6 00 00
	00		 je	 $LN85@LoadString@2
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 cf 00 00
	00		 je	 $LN84@LoadString@2
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 b9 00 00
	00		 je	 $LN83@LoadString@2
  00104	32 d3		 xor	 dl, bl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 a4 00 00
	00		 je	 $LN82@LoadString@2
  00114	32 d1		 xor	 dl, cl
  00116	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 8e 00 00
	00		 je	 $LN81@LoadString@2
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	74 7b		 je	 SHORT $LN80@LoadString@2
  00131	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00134	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00137	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013a	84 d2		 test	 dl, dl
  0013c	74 69		 je	 SHORT $LN79@LoadString@2
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	74 58		 je	 SHORT $LN78@LoadString@2
  0014a	32 d1		 xor	 dl, cl
  0014c	80 78 13 00	 cmp	 BYTE PTR [eax+19], 0
  00150	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@2
  00159	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015c	84 d2		 test	 dl, dl
  0015e	74 3c		 je	 SHORT $LN76@LoadString@2
  00160	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00163	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00166	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00169	84 d2		 test	 dl, dl
  0016b	74 2a		 je	 SHORT $LN75@LoadString@2
  0016d	32 d3		 xor	 dl, bl
  0016f	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00172	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00175	84 d2		 test	 dl, dl
  00177	74 19		 je	 SHORT $LN74@LoadString@2
  00179	8a 40 17	 mov	 al, BYTE PTR [eax+23]
  0017c	32 d1		 xor	 dl, cl
  0017e	88 55 fa	 mov	 BYTE PTR __k$[ebp+22], dl
  00181	84 c0		 test	 al, al
  00183	74 07		 je	 SHORT $LN73@LoadString@2
  00185	34 ea		 xor	 al, -22			; ffffffeaH
  00187	88 45 fb	 mov	 BYTE PTR __k$[ebp+23], al
  0018a	eb 7e		 jmp	 SHORT $LN111@LoadString@2
$LN73@LoadString@2:
  0018c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00190	eb 78		 jmp	 SHORT $LN111@LoadString@2
$LN74@LoadString@2:
  00192	88 4d fa	 mov	 BYTE PTR __k$[ebp+22], cl
  00195	eb 73		 jmp	 SHORT $LN111@LoadString@2
$LN75@LoadString@2:
  00197	88 5d f9	 mov	 BYTE PTR __k$[ebp+21], bl
  0019a	eb 6e		 jmp	 SHORT $LN111@LoadString@2
$LN76@LoadString@2:
  0019c	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001a0	eb 68		 jmp	 SHORT $LN111@LoadString@2
$LN78@LoadString@2:
  001a2	88 4d f6	 mov	 BYTE PTR __k$[ebp+18], cl
  001a5	eb 63		 jmp	 SHORT $LN111@LoadString@2
$LN79@LoadString@2:
  001a7	88 5d f5	 mov	 BYTE PTR __k$[ebp+17], bl
  001aa	eb 5e		 jmp	 SHORT $LN111@LoadString@2
$LN80@LoadString@2:
  001ac	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001b0	eb 58		 jmp	 SHORT $LN111@LoadString@2
$LN81@LoadString@2:
  001b2	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001b6	eb 52		 jmp	 SHORT $LN111@LoadString@2
$LN82@LoadString@2:
  001b8	88 4d f2	 mov	 BYTE PTR __k$[ebp+14], cl
  001bb	eb 4d		 jmp	 SHORT $LN111@LoadString@2
$LN83@LoadString@2:
  001bd	88 5d f1	 mov	 BYTE PTR __k$[ebp+13], bl
  001c0	eb 48		 jmp	 SHORT $LN111@LoadString@2
$LN84@LoadString@2:
  001c2	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001c6	eb 42		 jmp	 SHORT $LN111@LoadString@2
$LN85@LoadString@2:
  001c8	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001cc	eb 3c		 jmp	 SHORT $LN111@LoadString@2
$LN86@LoadString@2:
  001ce	88 4d ee	 mov	 BYTE PTR __k$[ebp+10], cl
  001d1	eb 37		 jmp	 SHORT $LN111@LoadString@2
$LN87@LoadString@2:
  001d3	88 5d ed	 mov	 BYTE PTR __k$[ebp+9], bl
  001d6	eb 32		 jmp	 SHORT $LN111@LoadString@2
$LN88@LoadString@2:
  001d8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001dc	eb 2c		 jmp	 SHORT $LN111@LoadString@2
$LN89@LoadString@2:
  001de	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001e2	eb 26		 jmp	 SHORT $LN111@LoadString@2
$LN90@LoadString@2:
  001e4	88 4d ea	 mov	 BYTE PTR __k$[ebp+6], cl
  001e7	eb 21		 jmp	 SHORT $LN111@LoadString@2
$LN91@LoadString@2:
  001e9	88 5d e9	 mov	 BYTE PTR __k$[ebp+5], bl
  001ec	eb 1c		 jmp	 SHORT $LN111@LoadString@2
$LN92@LoadString@2:
  001ee	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001f2	eb 16		 jmp	 SHORT $LN111@LoadString@2
$LN93@LoadString@2:
  001f4	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001f8	eb 10		 jmp	 SHORT $LN111@LoadString@2
$LN94@LoadString@2:
  001fa	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001fe	eb 0a		 jmp	 SHORT $LN111@LoadString@2
$LN95@LoadString@2:
  00200	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00204	eb 04		 jmp	 SHORT $LN111@LoadString@2
$LN96@LoadString@2:
  00206	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@2:
  0020a	6a 04		 push	 4
  0020c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0020f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+19], 0
  00213	5a		 pop	 edx
$LL104@LoadString@2:
  00214	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0021a	83 c0 04	 add	 eax, 4
  0021d	4a		 dec	 edx
  0021e	75 f4		 jne	 SHORT $LL104@LoadString@2
  00220	6a 10		 push	 16			; 00000010H
  00222	58		 pop	 eax
$LL101@LoadString@2:
  00223	8b c8		 mov	 ecx, eax
  00225	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0022b	79 05		 jns	 SHORT $LN112@LoadString@2
  0022d	49		 dec	 ecx
  0022e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00231	41		 inc	 ecx
$LN112@LoadString@2:
  00232	b2 ed		 mov	 dl, -19			; ffffffedH
  00234	2a d1		 sub	 dl, cl
  00236	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0023a	40		 inc	 eax
  0023b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0023e	7c e3		 jl	 SHORT $LL101@LoadString@2

; 163  : 		LoadString(_k, d, b, i);

  00240	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00243	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00246	57		 push	 edi
  00247	56		 push	 esi
  00248	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0024b	50		 push	 eax
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00252	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	33 cd		 xor	 ecx, ebp
  00259	5b		 pop	 ebx
  0025a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025f	c9		 leave
  00260	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BE@@ioINILoader@@QAEXAAY0BE@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<20>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ; ioINILoader::LoadFloat_e<24>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<24>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 45 02 00
	00		 je	 $LN96@LoadFloat_
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 2e 02 00
	00		 je	 $LN95@LoadFloat_
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 16 02 00
	00		 je	 $LN94@LoadFloat_
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 fe 01 00
	00		 je	 $LN93@LoadFloat_
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 e7 01 00
	00		 je	 $LN92@LoadFloat_
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 d1 01 00
	00		 je	 $LN91@LoadFloat_
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 bc 01 00
	00		 je	 $LN90@LoadFloat_
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 a6 01 00
	00		 je	 $LN89@LoadFloat_
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 8f 01 00
	00		 je	 $LN88@LoadFloat_
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 79 01 00
	00		 je	 $LN87@LoadFloat_
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 64 01 00
	00		 je	 $LN86@LoadFloat_
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 4e 01 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 37 01 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 21 01 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 0c 01 00
	00		 je	 $LN82@LoadFloat_
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 f6 00 00
	00		 je	 $LN81@LoadFloat_
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 df 00 00
	00		 je	 $LN80@LoadFloat_
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 c9 00 00
	00		 je	 $LN79@LoadFloat_
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 b4 00 00
	00		 je	 $LN78@LoadFloat_
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 9e 00 00
	00		 je	 $LN77@LoadFloat_
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 87 00 00
	00		 je	 $LN76@LoadFloat_
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	74 75		 je	 SHORT $LN75@LoadFloat_
  0017c	32 d3		 xor	 dl, bl
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00184	84 d2		 test	 dl, dl
  00186	74 64		 je	 SHORT $LN74@LoadFloat_
  00188	32 d1		 xor	 dl, cl
  0018a	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  0018e	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00191	0f 84 d3 00 00
	00		 je	 $LN1@LoadFloat_
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 48		 je	 SHORT $LN72@LoadFloat_
  0019e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a1	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a4	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a7	84 d2		 test	 dl, dl
  001a9	74 33		 je	 SHORT $LN71@LoadFloat_
  001ab	32 d3		 xor	 dl, bl
  001ad	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b0	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001b3	84 d2		 test	 dl, dl
  001b5	74 1f		 je	 SHORT $LN70@LoadFloat_
  001b7	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001ba	32 d1		 xor	 dl, cl
  001bc	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001bf	84 c0		 test	 al, al
  001c1	74 0a		 je	 SHORT $LN69@LoadFloat_
  001c3	34 ea		 xor	 al, -22			; ffffffeaH
  001c5	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001c8	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_
$LN69@LoadFloat_:
  001cd	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d1	e9 94 00 00 00	 jmp	 $LN1@LoadFloat_
$LN70@LoadFloat_:
  001d6	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001d9	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_
$LN71@LoadFloat_:
  001de	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e1	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_
$LN72@LoadFloat_:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001ea	eb 7e		 jmp	 SHORT $LN1@LoadFloat_
$LN74@LoadFloat_:
  001ec	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001ef	eb 79		 jmp	 SHORT $LN1@LoadFloat_
$LN75@LoadFloat_:
  001f1	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001f4	eb 74		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  001f6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001fa	eb 6e		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  001fc	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00200	eb 68		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00202	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  00205	eb 63		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  00207	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  0020a	eb 5e		 jmp	 SHORT $LN1@LoadFloat_
$LN80@LoadFloat_:
  0020c	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00210	eb 58		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00212	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00216	eb 52		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00218	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  0021b	eb 4d		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0021d	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00220	eb 48		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00222	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00226	eb 42		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00228	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0022c	eb 3c		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0022e	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00231	eb 37		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00233	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  00236	eb 32		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00238	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0023c	eb 2c		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0023e	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00242	eb 26		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  00244	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  00247	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  00249	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  0024c	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  0024e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00252	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  00254	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00258	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  0025a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0025e	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  00260	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00264	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  00266	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  0026a	6a 05		 push	 5
  0026c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0026f	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  00273	5a		 pop	 edx
$LL104@LoadFloat_:
  00274	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0027a	83 c0 04	 add	 eax, 4
  0027d	4a		 dec	 edx
  0027e	75 f4		 jne	 SHORT $LL104@LoadFloat_
  00280	6a 14		 push	 20			; 00000014H
  00282	58		 pop	 eax
$LL101@LoadFloat_:
  00283	8b c8		 mov	 ecx, eax
  00285	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0028b	79 05		 jns	 SHORT $LN111@LoadFloat_
  0028d	49		 dec	 ecx
  0028e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00291	41		 inc	 ecx
$LN111@LoadFloat_:
  00292	b2 ed		 mov	 dl, -19			; ffffffedH
  00294	2a d1		 sub	 dl, cl
  00296	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0029a	40		 inc	 eax
  0029b	83 f8 17	 cmp	 eax, 23			; 00000017H
  0029e	7c e3		 jl	 SHORT $LL101@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  002a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002a5	51		 push	 ecx
  002a6	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	50		 push	 eax
  002af	8b ce		 mov	 ecx, esi
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	5e		 pop	 esi
  002bb	33 cd		 xor	 ecx, ebp
  002bd	5b		 pop	 ebx
  002be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c3	c9		 leave
  002c4	c2 08 00	 ret	 8
??$LoadFloat_e@$0BI@@ioINILoader@@QAEMAAY0BI@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<24>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<16>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -28					; size = 4
__k$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<16>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e4	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 8c 01 00
	00		 je	 $LN96@LoadString@3
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e8	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 75 01 00
	00		 je	 $LN95@LoadString@3
  00039	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003c	88 55 e9	 mov	 BYTE PTR __k$[ebp+1], dl
  0003f	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00042	84 d2		 test	 dl, dl
  00044	0f 84 5e 01 00
	00		 je	 $LN94@LoadString@3
  0004a	b1 eb		 mov	 cl, -21			; ffffffebH
  0004c	32 d1		 xor	 dl, cl
  0004e	88 55 ea	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 46 01 00
	00		 je	 $LN93@LoadString@3
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 eb	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 2f 01 00
	00		 je	 $LN92@LoadString@3
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 ec	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 18 01 00
	00		 je	 $LN91@LoadString@3
  0007e	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00081	88 55 ed	 mov	 BYTE PTR __k$[ebp+5], dl
  00084	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00087	84 d2		 test	 dl, dl
  00089	0f 84 02 01 00
	00		 je	 $LN90@LoadString@3
  0008f	32 d1		 xor	 dl, cl
  00091	88 55 ee	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 ec 00 00
	00		 je	 $LN89@LoadString@3
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 ef	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 d5 00 00
	00		 je	 $LN88@LoadString@3
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 f0	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 be 00 00
	00		 je	 $LN87@LoadString@3
  000c1	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 a8 00 00
	00		 je	 $LN86@LoadString@3
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 f2	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 92 00 00
	00		 je	 $LN85@LoadString@3
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 f3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	74 7f		 je	 SHORT $LN84@LoadString@3
  000ef	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f2	88 55 f4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f5	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f8	84 d2		 test	 dl, dl
  000fa	74 6c		 je	 SHORT $LN83@LoadString@3
  000fc	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000ff	88 55 f5	 mov	 BYTE PTR __k$[ebp+13], dl
  00102	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00105	84 d2		 test	 dl, dl
  00107	74 5a		 je	 SHORT $LN82@LoadString@3
  00109	32 d1		 xor	 dl, cl
  0010b	80 78 0f 00	 cmp	 BYTE PTR [eax+15], 0
  0010f	88 55 f6	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	0f 84 a0 00 00
	00		 je	 $LN111@LoadString@3
  00118	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0011b	84 d2		 test	 dl, dl
  0011d	74 3e		 je	 SHORT $LN80@LoadString@3
  0011f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00122	88 55 f8	 mov	 BYTE PTR __k$[ebp+16], dl
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 2b		 je	 SHORT $LN79@LoadString@3
  0012c	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0012f	88 55 f9	 mov	 BYTE PTR __k$[ebp+17], dl
  00132	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00135	84 d2		 test	 dl, dl
  00137	74 19		 je	 SHORT $LN78@LoadString@3
  00139	8a 40 13	 mov	 al, BYTE PTR [eax+19]
  0013c	32 d1		 xor	 dl, cl
  0013e	88 55 fa	 mov	 BYTE PTR __k$[ebp+18], dl
  00141	84 c0		 test	 al, al
  00143	74 07		 je	 SHORT $LN77@LoadString@3
  00145	34 ea		 xor	 al, -22			; ffffffeaH
  00147	88 45 fb	 mov	 BYTE PTR __k$[ebp+19], al
  0014a	eb 6c		 jmp	 SHORT $LN111@LoadString@3
$LN77@LoadString@3:
  0014c	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00150	eb 66		 jmp	 SHORT $LN111@LoadString@3
$LN78@LoadString@3:
  00152	88 4d fa	 mov	 BYTE PTR __k$[ebp+18], cl
  00155	eb 61		 jmp	 SHORT $LN111@LoadString@3
$LN79@LoadString@3:
  00157	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  0015b	eb 5b		 jmp	 SHORT $LN111@LoadString@3
$LN80@LoadString@3:
  0015d	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00161	eb 55		 jmp	 SHORT $LN111@LoadString@3
$LN82@LoadString@3:
  00163	88 4d f6	 mov	 BYTE PTR __k$[ebp+14], cl
  00166	eb 50		 jmp	 SHORT $LN111@LoadString@3
$LN83@LoadString@3:
  00168	c6 45 f5 ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  0016c	eb 4a		 jmp	 SHORT $LN111@LoadString@3
$LN84@LoadString@3:
  0016e	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00172	eb 44		 jmp	 SHORT $LN111@LoadString@3
$LN85@LoadString@3:
  00174	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00178	eb 3e		 jmp	 SHORT $LN111@LoadString@3
$LN86@LoadString@3:
  0017a	88 4d f2	 mov	 BYTE PTR __k$[ebp+10], cl
  0017d	eb 39		 jmp	 SHORT $LN111@LoadString@3
$LN87@LoadString@3:
  0017f	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  00183	eb 33		 jmp	 SHORT $LN111@LoadString@3
$LN88@LoadString@3:
  00185	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00189	eb 2d		 jmp	 SHORT $LN111@LoadString@3
$LN89@LoadString@3:
  0018b	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0018f	eb 27		 jmp	 SHORT $LN111@LoadString@3
$LN90@LoadString@3:
  00191	88 4d ee	 mov	 BYTE PTR __k$[ebp+6], cl
  00194	eb 22		 jmp	 SHORT $LN111@LoadString@3
$LN91@LoadString@3:
  00196	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  0019a	eb 1c		 jmp	 SHORT $LN111@LoadString@3
$LN92@LoadString@3:
  0019c	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001a0	eb 16		 jmp	 SHORT $LN111@LoadString@3
$LN93@LoadString@3:
  001a2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001a6	eb 10		 jmp	 SHORT $LN111@LoadString@3
$LN94@LoadString@3:
  001a8	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ac	eb 0a		 jmp	 SHORT $LN111@LoadString@3
$LN95@LoadString@3:
  001ae	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001b2	eb 04		 jmp	 SHORT $LN111@LoadString@3
$LN96@LoadString@3:
  001b4	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@3:
  001b8	6a 03		 push	 3
  001ba	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001bd	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+15], 0
  001c1	5a		 pop	 edx
$LL104@LoadString@3:
  001c2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001c8	83 c0 04	 add	 eax, 4
  001cb	4a		 dec	 edx
  001cc	75 f4		 jne	 SHORT $LL104@LoadString@3
  001ce	6a 0c		 push	 12			; 0000000cH
  001d0	58		 pop	 eax
$LL101@LoadString@3:
  001d1	8b c8		 mov	 ecx, eax
  001d3	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  001d9	79 05		 jns	 SHORT $LN112@LoadString@3
  001db	49		 dec	 ecx
  001dc	83 c9 fc	 or	 ecx, -4			; fffffffcH
  001df	41		 inc	 ecx
$LN112@LoadString@3:
  001e0	b2 ed		 mov	 dl, -19			; ffffffedH
  001e2	2a d1		 sub	 dl, cl
  001e4	30 54 05 e8	 xor	 BYTE PTR __k$[ebp+eax], dl
  001e8	40		 inc	 eax
  001e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ec	7c e3		 jl	 SHORT $LL101@LoadString@3

; 163  : 		LoadString(_k, d, b, i);

  001ee	ff 75 14	 push	 DWORD PTR _i$[ebp]
  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  001f4	57		 push	 edi
  001f5	56		 push	 esi
  001f6	8d 45 e8	 lea	 eax, DWORD PTR __k$[ebp]
  001f9	50		 push	 eax
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00200	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	5f		 pop	 edi
  00204	33 cd		 xor	 ecx, ebp
  00206	5e		 pop	 esi
  00207	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020c	c9		 leave
  0020d	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BA@@ioINILoader@@QAEXAAY0BA@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<16>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<19>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -32					; size = 4
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<19>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  00019	57		 push	 edi
  0001a	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001d	89 4d e0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00020	84 d2		 test	 dl, dl
  00022	0f 84 cf 01 00
	00		 je	 $LN96@LoadString@4
  00028	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002b	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  0002e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00031	84 d2		 test	 dl, dl
  00033	0f 84 b8 01 00
	00		 je	 $LN95@LoadString@4
  00039	b1 ec		 mov	 cl, -20			; ffffffecH
  0003b	32 d1		 xor	 dl, cl
  0003d	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 a0 01 00
	00		 je	 $LN94@LoadString@4
  0004b	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004e	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00051	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00054	84 d2		 test	 dl, dl
  00056	0f 84 89 01 00
	00		 je	 $LN93@LoadString@4
  0005c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0005f	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  00062	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00065	84 d2		 test	 dl, dl
  00067	0f 84 72 01 00
	00		 je	 $LN92@LoadString@4
  0006d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00070	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  00073	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00076	84 d2		 test	 dl, dl
  00078	0f 84 5c 01 00
	00		 je	 $LN91@LoadString@4
  0007e	32 d1		 xor	 dl, cl
  00080	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  00083	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00086	84 d2		 test	 dl, dl
  00088	0f 84 46 01 00
	00		 je	 $LN90@LoadString@4
  0008e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00091	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  00094	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00097	84 d2		 test	 dl, dl
  00099	0f 84 2f 01 00
	00		 je	 $LN89@LoadString@4
  0009f	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a2	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  000a5	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a8	84 d2		 test	 dl, dl
  000aa	0f 84 18 01 00
	00		 je	 $LN88@LoadString@4
  000b0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b3	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000b6	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b9	84 d2		 test	 dl, dl
  000bb	0f 84 02 01 00
	00		 je	 $LN87@LoadString@4
  000c1	32 d1		 xor	 dl, cl
  000c3	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000c6	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c9	84 d2		 test	 dl, dl
  000cb	0f 84 ec 00 00
	00		 je	 $LN86@LoadString@4
  000d1	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d4	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 d5 00 00
	00		 je	 $LN85@LoadString@4
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 be 00 00
	00		 je	 $LN84@LoadString@4
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 a8 00 00
	00		 je	 $LN83@LoadString@4
  00104	32 d1		 xor	 dl, cl
  00106	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 92 00 00
	00		 je	 $LN82@LoadString@4
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	74 7f		 je	 SHORT $LN81@LoadString@4
  00121	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00124	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  00127	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012a	84 d2		 test	 dl, dl
  0012c	74 6c		 je	 SHORT $LN80@LoadString@4
  0012e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00131	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  00134	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00137	84 d2		 test	 dl, dl
  00139	74 5a		 je	 SHORT $LN79@LoadString@4
  0013b	32 d1		 xor	 dl, cl
  0013d	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00141	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00144	0f 84 b1 00 00
	00		 je	 $LN111@LoadString@4
  0014a	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0014d	84 d2		 test	 dl, dl
  0014f	74 3e		 je	 SHORT $LN77@LoadString@4
  00151	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00154	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  00157	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0015a	84 d2		 test	 dl, dl
  0015c	74 2b		 je	 SHORT $LN76@LoadString@4
  0015e	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00161	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  00164	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00167	84 d2		 test	 dl, dl
  00169	74 19		 je	 SHORT $LN75@LoadString@4
  0016b	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  0016e	32 d1		 xor	 dl, cl
  00170	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  00173	84 c0		 test	 al, al
  00175	74 07		 je	 SHORT $LN74@LoadString@4
  00177	34 eb		 xor	 al, -21			; ffffffebH
  00179	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  0017c	eb 7d		 jmp	 SHORT $LN111@LoadString@4
$LN74@LoadString@4:
  0017e	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  00182	eb 77		 jmp	 SHORT $LN111@LoadString@4
$LN75@LoadString@4:
  00184	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  00187	eb 72		 jmp	 SHORT $LN111@LoadString@4
$LN76@LoadString@4:
  00189	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0018d	eb 6c		 jmp	 SHORT $LN111@LoadString@4
$LN77@LoadString@4:
  0018f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00193	eb 66		 jmp	 SHORT $LN111@LoadString@4
$LN79@LoadString@4:
  00195	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00198	eb 61		 jmp	 SHORT $LN111@LoadString@4
$LN80@LoadString@4:
  0019a	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0019e	eb 5b		 jmp	 SHORT $LN111@LoadString@4
$LN81@LoadString@4:
  001a0	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001a4	eb 55		 jmp	 SHORT $LN111@LoadString@4
$LN82@LoadString@4:
  001a6	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001aa	eb 4f		 jmp	 SHORT $LN111@LoadString@4
$LN83@LoadString@4:
  001ac	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001af	eb 4a		 jmp	 SHORT $LN111@LoadString@4
$LN84@LoadString@4:
  001b1	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001b5	eb 44		 jmp	 SHORT $LN111@LoadString@4
$LN85@LoadString@4:
  001b7	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001bb	eb 3e		 jmp	 SHORT $LN111@LoadString@4
$LN86@LoadString@4:
  001bd	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001c1	eb 38		 jmp	 SHORT $LN111@LoadString@4
$LN87@LoadString@4:
  001c3	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001c6	eb 33		 jmp	 SHORT $LN111@LoadString@4
$LN88@LoadString@4:
  001c8	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001cc	eb 2d		 jmp	 SHORT $LN111@LoadString@4
$LN89@LoadString@4:
  001ce	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001d2	eb 27		 jmp	 SHORT $LN111@LoadString@4
$LN90@LoadString@4:
  001d4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d8	eb 21		 jmp	 SHORT $LN111@LoadString@4
$LN91@LoadString@4:
  001da	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001dd	eb 1c		 jmp	 SHORT $LN111@LoadString@4
$LN92@LoadString@4:
  001df	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001e3	eb 16		 jmp	 SHORT $LN111@LoadString@4
$LN93@LoadString@4:
  001e5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e9	eb 10		 jmp	 SHORT $LN111@LoadString@4
$LN94@LoadString@4:
  001eb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001ef	eb 0a		 jmp	 SHORT $LN111@LoadString@4
$LN95@LoadString@4:
  001f1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001f5	eb 04		 jmp	 SHORT $LN111@LoadString@4
$LN96@LoadString@4:
  001f7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@4:
  001fb	6a 04		 push	 4
  001fd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  00200	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  00204	5a		 pop	 edx
$LL104@LoadString@4:
  00205	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0020b	83 c0 04	 add	 eax, 4
  0020e	4a		 dec	 edx
  0020f	75 f4		 jne	 SHORT $LL104@LoadString@4
  00211	6a 10		 push	 16			; 00000010H
  00213	58		 pop	 eax
$LL101@LoadString@4:
  00214	8b c8		 mov	 ecx, eax
  00216	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0021c	79 05		 jns	 SHORT $LN112@LoadString@4
  0021e	49		 dec	 ecx
  0021f	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00222	41		 inc	 ecx
$LN112@LoadString@4:
  00223	b2 ed		 mov	 dl, -19			; ffffffedH
  00225	2a d1		 sub	 dl, cl
  00227	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  0022b	40		 inc	 eax
  0022c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0022f	7c e3		 jl	 SHORT $LL101@LoadString@4

; 163  : 		LoadString(_k, d, b, i);

  00231	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00234	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0023c	50		 push	 eax
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	5f		 pop	 edi
  00247	33 cd		 xor	 ecx, ebp
  00249	5e		 pop	 esi
  0024a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024f	c9		 leave
  00250	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BD@@ioINILoader@@QAEXAAY0BD@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<19>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ; ioINILoader::LoadFloat_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<23>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 2d 02 00
	00		 je	 $LN96@LoadFloat_@2
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 16 02 00
	00		 je	 $LN95@LoadFloat_@2
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 fe 01 00
	00		 je	 $LN94@LoadFloat_@2
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 e7 01 00
	00		 je	 $LN93@LoadFloat_@2
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 cf 01 00
	00		 je	 $LN92@LoadFloat_@2
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 b9 01 00
	00		 je	 $LN91@LoadFloat_@2
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 a3 01 00
	00		 je	 $LN90@LoadFloat_@2
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 8d 01 00
	00		 je	 $LN89@LoadFloat_@2
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 77 01 00
	00		 je	 $LN88@LoadFloat_@2
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 61 01 00
	00		 je	 $LN87@LoadFloat_@2
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 4b 01 00
	00		 je	 $LN86@LoadFloat_@2
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 35 01 00
	00		 je	 $LN85@LoadFloat_@2
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 1f 01 00
	00		 je	 $LN84@LoadFloat_@2
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 09 01 00
	00		 je	 $LN83@LoadFloat_@2
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 f3 00 00
	00		 je	 $LN82@LoadFloat_@2
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 dd 00 00
	00		 je	 $LN81@LoadFloat_@2
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 c7 00 00
	00		 je	 $LN80@LoadFloat_@2
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 b1 00 00
	00		 je	 $LN79@LoadFloat_@2
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 9b 00 00
	00		 je	 $LN78@LoadFloat_@2
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 85 00 00
	00		 je	 $LN77@LoadFloat_@2
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	74 73		 je	 SHORT $LN76@LoadFloat_@2
  0016b	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0016e	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00171	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00174	84 d2		 test	 dl, dl
  00176	74 61		 je	 SHORT $LN75@LoadFloat_@2
  00178	32 d1		 xor	 dl, cl
  0017a	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  0017e	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00181	0f 84 cb 00 00
	00		 je	 $LN1@LoadFloat_@2
  00187	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018a	84 d2		 test	 dl, dl
  0018c	74 46		 je	 SHORT $LN73@LoadFloat_@2
  0018e	32 d3		 xor	 dl, bl
  00190	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00193	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  00196	84 d2		 test	 dl, dl
  00198	74 34		 je	 SHORT $LN72@LoadFloat_@2
  0019a	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0019d	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001a3	84 d2		 test	 dl, dl
  001a5	74 1f		 je	 SHORT $LN71@LoadFloat_@2
  001a7	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001aa	32 d1		 xor	 dl, cl
  001ac	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001af	84 c0		 test	 al, al
  001b1	74 0a		 je	 SHORT $LN70@LoadFloat_@2
  001b3	34 eb		 xor	 al, -21			; ffffffebH
  001b5	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001b8	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN70@LoadFloat_@2:
  001bd	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c1	e9 8c 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN71@LoadFloat_@2:
  001c6	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001c9	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@2
$LN72@LoadFloat_@2:
  001ce	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001d2	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN73@LoadFloat_@2:
  001d4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001d7	eb 79		 jmp	 SHORT $LN1@LoadFloat_@2
$LN75@LoadFloat_@2:
  001d9	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001dc	eb 74		 jmp	 SHORT $LN1@LoadFloat_@2
$LN76@LoadFloat_@2:
  001de	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001e2	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN77@LoadFloat_@2:
  001e4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001e7	eb 69		 jmp	 SHORT $LN1@LoadFloat_@2
$LN78@LoadFloat_@2:
  001e9	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001ed	eb 63		 jmp	 SHORT $LN1@LoadFloat_@2
$LN79@LoadFloat_@2:
  001ef	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001f2	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@2
$LN80@LoadFloat_@2:
  001f4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001f8	eb 58		 jmp	 SHORT $LN1@LoadFloat_@2
$LN81@LoadFloat_@2:
  001fa	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001fd	eb 53		 jmp	 SHORT $LN1@LoadFloat_@2
$LN82@LoadFloat_@2:
  001ff	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00203	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN83@LoadFloat_@2:
  00205	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00208	eb 48		 jmp	 SHORT $LN1@LoadFloat_@2
$LN84@LoadFloat_@2:
  0020a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0020e	eb 42		 jmp	 SHORT $LN1@LoadFloat_@2
$LN85@LoadFloat_@2:
  00210	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00213	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@2
$LN86@LoadFloat_@2:
  00215	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00219	eb 37		 jmp	 SHORT $LN1@LoadFloat_@2
$LN87@LoadFloat_@2:
  0021b	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  0021e	eb 32		 jmp	 SHORT $LN1@LoadFloat_@2
$LN88@LoadFloat_@2:
  00220	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00224	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN89@LoadFloat_@2:
  00226	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00229	eb 27		 jmp	 SHORT $LN1@LoadFloat_@2
$LN90@LoadFloat_@2:
  0022b	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  0022f	eb 21		 jmp	 SHORT $LN1@LoadFloat_@2
$LN91@LoadFloat_@2:
  00231	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00234	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@2
$LN92@LoadFloat_@2:
  00236	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0023a	eb 16		 jmp	 SHORT $LN1@LoadFloat_@2
$LN93@LoadFloat_@2:
  0023c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00240	eb 10		 jmp	 SHORT $LN1@LoadFloat_@2
$LN94@LoadFloat_@2:
  00242	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00246	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@2
$LN95@LoadFloat_@2:
  00248	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0024c	eb 04		 jmp	 SHORT $LN1@LoadFloat_@2
$LN96@LoadFloat_@2:
  0024e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@2:
  00252	6a 05		 push	 5
  00254	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00257	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  0025b	5a		 pop	 edx
$LL104@LoadFloat_@2:
  0025c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00262	83 c0 04	 add	 eax, 4
  00265	4a		 dec	 edx
  00266	75 f4		 jne	 SHORT $LL104@LoadFloat_@2
  00268	6a 14		 push	 20			; 00000014H
  0026a	58		 pop	 eax
$LL101@LoadFloat_@2:
  0026b	8b c8		 mov	 ecx, eax
  0026d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00273	79 05		 jns	 SHORT $LN111@LoadFloat_@2
  00275	49		 dec	 ecx
  00276	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00279	41		 inc	 ecx
$LN111@LoadFloat_@2:
  0027a	b2 ed		 mov	 dl, -19			; ffffffedH
  0027c	2a d1		 sub	 dl, cl
  0027e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  00282	40		 inc	 eax
  00283	83 f8 16	 cmp	 eax, 22			; 00000016H
  00286	7c e3		 jl	 SHORT $LL101@LoadFloat_@2

; 137  : 		return LoadFloat(_k, f);

  00288	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  0028d	51		 push	 ecx
  0028e	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	50		 push	 eax
  00297	8b ce		 mov	 ecx, esi
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0029f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a2	5e		 pop	 esi
  002a3	33 cd		 xor	 ecx, ebp
  002a5	5b		 pop	 ebx
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	c9		 leave
  002ac	c2 08 00	 ret	 8
??$LoadFloat_e@$0BH@@ioINILoader@@QAEMAAY0BH@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<23>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<22>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 22
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<22>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 15 02 00
	00		 je	 $LN96@LoadString@5
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 fe 01 00
	00		 je	 $LN95@LoadString@5
  0003a	80 f2 ec	 xor	 dl, -20			; ffffffecH
  0003d	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00040	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00043	84 d2		 test	 dl, dl
  00045	0f 84 e7 01 00
	00		 je	 $LN94@LoadString@5
  0004b	b1 eb		 mov	 cl, -21			; ffffffebH
  0004d	32 d1		 xor	 dl, cl
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 cf 01 00
	00		 je	 $LN93@LoadString@5
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 b7 01 00
	00		 je	 $LN92@LoadString@5
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 a0 01 00
	00		 je	 $LN91@LoadString@5
  00080	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00083	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00086	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00089	84 d2		 test	 dl, dl
  0008b	0f 84 8a 01 00
	00		 je	 $LN90@LoadString@5
  00091	32 d1		 xor	 dl, cl
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 75 01 00
	00		 je	 $LN89@LoadString@5
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 5f 01 00
	00		 je	 $LN88@LoadString@5
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 48 01 00
	00		 je	 $LN87@LoadString@5
  000c2	80 f2 ec	 xor	 dl, -20			; ffffffecH
  000c5	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c8	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000cb	84 d2		 test	 dl, dl
  000cd	0f 84 32 01 00
	00		 je	 $LN86@LoadString@5
  000d3	32 d1		 xor	 dl, cl
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 1d 01 00
	00		 je	 $LN85@LoadString@5
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 07 01 00
	00		 je	 $LN84@LoadString@5
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 f0 00 00
	00		 je	 $LN83@LoadString@5
  00104	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00107	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  0010a	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010d	84 d2		 test	 dl, dl
  0010f	0f 84 da 00 00
	00		 je	 $LN82@LoadString@5
  00115	32 d1		 xor	 dl, cl
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 c5 00 00
	00		 je	 $LN81@LoadString@5
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 af 00 00
	00		 je	 $LN80@LoadString@5
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 98 00 00
	00		 je	 $LN79@LoadString@5
  00146	80 f2 ec	 xor	 dl, -20			; ffffffecH
  00149	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014c	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014f	84 d2		 test	 dl, dl
  00151	0f 84 82 00 00
	00		 je	 $LN78@LoadString@5
  00157	32 d1		 xor	 dl, cl
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	74 71		 je	 SHORT $LN77@LoadString@5
  00163	32 d3		 xor	 dl, bl
  00165	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00168	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016b	84 d2		 test	 dl, dl
  0016d	74 5f		 je	 SHORT $LN76@LoadString@5
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	0f 84 c3 00 00
	00		 je	 $LN111@LoadString@5
  0017f	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00182	84 d2		 test	 dl, dl
  00184	74 43		 je	 SHORT $LN74@LoadString@5
  00186	32 d1		 xor	 dl, cl
  00188	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  0018b	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0018e	84 d2		 test	 dl, dl
  00190	74 32		 je	 SHORT $LN73@LoadString@5
  00192	32 d3		 xor	 dl, bl
  00194	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00197	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019a	84 d2		 test	 dl, dl
  0019c	74 20		 je	 SHORT $LN72@LoadString@5
  0019e	8a 40 19	 mov	 al, BYTE PTR [eax+25]
  001a1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a4	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a7	84 c0		 test	 al, al
  001a9	74 0a		 je	 SHORT $LN71@LoadString@5
  001ab	34 ec		 xor	 al, -20			; ffffffecH
  001ad	88 45 f9	 mov	 BYTE PTR __k$[ebp+25], al
  001b0	e9 8d 00 00 00	 jmp	 $LN111@LoadString@5
$LN71@LoadString@5:
  001b5	c6 45 f9 ec	 mov	 BYTE PTR __k$[ebp+25], -20 ; ffffffecH
  001b9	e9 84 00 00 00	 jmp	 $LN111@LoadString@5
$LN72@LoadString@5:
  001be	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001c2	eb 7e		 jmp	 SHORT $LN111@LoadString@5
$LN73@LoadString@5:
  001c4	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001c7	eb 79		 jmp	 SHORT $LN111@LoadString@5
$LN74@LoadString@5:
  001c9	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001cc	eb 74		 jmp	 SHORT $LN111@LoadString@5
$LN76@LoadString@5:
  001ce	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001d2	eb 6e		 jmp	 SHORT $LN111@LoadString@5
$LN77@LoadString@5:
  001d4	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001d7	eb 69		 jmp	 SHORT $LN111@LoadString@5
$LN78@LoadString@5:
  001d9	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  001dc	eb 64		 jmp	 SHORT $LN111@LoadString@5
$LN79@LoadString@5:
  001de	c6 45 f1 ec	 mov	 BYTE PTR __k$[ebp+17], -20 ; ffffffecH
  001e2	eb 5e		 jmp	 SHORT $LN111@LoadString@5
$LN80@LoadString@5:
  001e4	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001e8	eb 58		 jmp	 SHORT $LN111@LoadString@5
$LN81@LoadString@5:
  001ea	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  001ed	eb 53		 jmp	 SHORT $LN111@LoadString@5
$LN82@LoadString@5:
  001ef	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  001f2	eb 4e		 jmp	 SHORT $LN111@LoadString@5
$LN83@LoadString@5:
  001f4	c6 45 ed ec	 mov	 BYTE PTR __k$[ebp+13], -20 ; ffffffecH
  001f8	eb 48		 jmp	 SHORT $LN111@LoadString@5
$LN84@LoadString@5:
  001fa	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001fe	eb 42		 jmp	 SHORT $LN111@LoadString@5
$LN85@LoadString@5:
  00200	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  00203	eb 3d		 jmp	 SHORT $LN111@LoadString@5
$LN86@LoadString@5:
  00205	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00208	eb 38		 jmp	 SHORT $LN111@LoadString@5
$LN87@LoadString@5:
  0020a	c6 45 e9 ec	 mov	 BYTE PTR __k$[ebp+9], -20 ; ffffffecH
  0020e	eb 32		 jmp	 SHORT $LN111@LoadString@5
$LN88@LoadString@5:
  00210	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00214	eb 2c		 jmp	 SHORT $LN111@LoadString@5
$LN89@LoadString@5:
  00216	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00219	eb 27		 jmp	 SHORT $LN111@LoadString@5
$LN90@LoadString@5:
  0021b	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  0021e	eb 22		 jmp	 SHORT $LN111@LoadString@5
$LN91@LoadString@5:
  00220	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+5], -20 ; ffffffecH
  00224	eb 1c		 jmp	 SHORT $LN111@LoadString@5
$LN92@LoadString@5:
  00226	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0022a	eb 16		 jmp	 SHORT $LN111@LoadString@5
$LN93@LoadString@5:
  0022c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00230	eb 10		 jmp	 SHORT $LN111@LoadString@5
$LN94@LoadString@5:
  00232	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00236	eb 0a		 jmp	 SHORT $LN111@LoadString@5
$LN95@LoadString@5:
  00238	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0023c	eb 04		 jmp	 SHORT $LN111@LoadString@5
$LN96@LoadString@5:
  0023e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@5:
  00242	6a 05		 push	 5
  00244	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00247	c6 45 f5 00	 mov	 BYTE PTR __k$[ebp+21], 0
  0024b	5a		 pop	 edx
$LL104@LoadString@5:
  0024c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00252	83 c0 04	 add	 eax, 4
  00255	4a		 dec	 edx
  00256	75 f4		 jne	 SHORT $LL104@LoadString@5

; 163  : 		LoadString(_k, d, b, i);

  00258	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0025b	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0025e	80 75 f4 ed	 xor	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00262	57		 push	 edi
  00263	56		 push	 esi
  00264	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00267	50		 push	 eax
  00268	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0026e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	33 cd		 xor	 ecx, ebp
  00275	5b		 pop	 ebx
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	c9		 leave
  0027c	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BG@@ioINILoader@@QAEXAAY0BG@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<22>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<25>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
__k$ = -36						; size = 25
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<25>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 5f 02 00
	00		 je	 $LN96@LoadString@6
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 48 02 00
	00		 je	 $LN95@LoadString@6
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 30 02 00
	00		 je	 $LN94@LoadString@6
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 18 02 00
	00		 je	 $LN93@LoadString@6
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 01 02 00
	00		 je	 $LN92@LoadString@6
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 eb 01 00
	00		 je	 $LN91@LoadString@6
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 d6 01 00
	00		 je	 $LN90@LoadString@6
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 c0 01 00
	00		 je	 $LN89@LoadString@6
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 a9 01 00
	00		 je	 $LN88@LoadString@6
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 93 01 00
	00		 je	 $LN87@LoadString@6
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 7e 01 00
	00		 je	 $LN86@LoadString@6
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 68 01 00
	00		 je	 $LN85@LoadString@6
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 51 01 00
	00		 je	 $LN84@LoadString@6
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 3b 01 00
	00		 je	 $LN83@LoadString@6
  00104	32 d1		 xor	 dl, cl
  00106	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 26 01 00
	00		 je	 $LN82@LoadString@6
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 10 01 00
	00		 je	 $LN81@LoadString@6
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 f9 00 00
	00		 je	 $LN80@LoadString@6
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 e3 00 00
	00		 je	 $LN79@LoadString@6
  00146	32 d1		 xor	 dl, cl
  00148	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 ce 00 00
	00		 je	 $LN78@LoadString@6
  00156	32 d3		 xor	 dl, bl
  00158	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  0015b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015e	84 d2		 test	 dl, dl
  00160	0f 84 b8 00 00
	00		 je	 $LN77@LoadString@6
  00166	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00169	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 a1 00 00
	00		 je	 $LN76@LoadString@6
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	0f 84 8b 00 00
	00		 je	 $LN75@LoadString@6
  00188	32 d1		 xor	 dl, cl
  0018a	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  0018d	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00190	84 d2		 test	 dl, dl
  00192	74 7a		 je	 SHORT $LN74@LoadString@6
  00194	32 d3		 xor	 dl, bl
  00196	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00199	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  0019c	84 d2		 test	 dl, dl
  0019e	74 68		 je	 SHORT $LN73@LoadString@6
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	80 78 18 00	 cmp	 BYTE PTR [eax+24], 0
  001a7	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001aa	0f 84 dc 00 00
	00		 je	 $LN111@LoadString@6
  001b0	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b3	84 d2		 test	 dl, dl
  001b5	74 49		 je	 SHORT $LN71@LoadString@6
  001b7	32 d1		 xor	 dl, cl
  001b9	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001bc	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bf	84 d2		 test	 dl, dl
  001c1	74 35		 je	 SHORT $LN70@LoadString@6
  001c3	32 d3		 xor	 dl, bl
  001c5	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001c8	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cb	84 d2		 test	 dl, dl
  001cd	74 20		 je	 SHORT $LN69@LoadString@6
  001cf	8a 40 1c	 mov	 al, BYTE PTR [eax+28]
  001d2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001d5	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d8	84 c0		 test	 al, al
  001da	74 0a		 je	 SHORT $LN68@LoadString@6
  001dc	34 ed		 xor	 al, -19			; ffffffedH
  001de	88 45 f8	 mov	 BYTE PTR __k$[ebp+28], al
  001e1	e9 a6 00 00 00	 jmp	 $LN111@LoadString@6
$LN68@LoadString@6:
  001e6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  001ea	e9 9d 00 00 00	 jmp	 $LN111@LoadString@6
$LN69@LoadString@6:
  001ef	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001f3	e9 94 00 00 00	 jmp	 $LN111@LoadString@6
$LN70@LoadString@6:
  001f8	88 5d f6	 mov	 BYTE PTR __k$[ebp+26], bl
  001fb	e9 8c 00 00 00	 jmp	 $LN111@LoadString@6
$LN71@LoadString@6:
  00200	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00203	e9 84 00 00 00	 jmp	 $LN111@LoadString@6
$LN73@LoadString@6:
  00208	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0020c	eb 7e		 jmp	 SHORT $LN111@LoadString@6
$LN74@LoadString@6:
  0020e	88 5d f2	 mov	 BYTE PTR __k$[ebp+22], bl
  00211	eb 79		 jmp	 SHORT $LN111@LoadString@6
$LN75@LoadString@6:
  00213	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00216	eb 74		 jmp	 SHORT $LN111@LoadString@6
$LN76@LoadString@6:
  00218	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0021c	eb 6e		 jmp	 SHORT $LN111@LoadString@6
$LN77@LoadString@6:
  0021e	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00222	eb 68		 jmp	 SHORT $LN111@LoadString@6
$LN78@LoadString@6:
  00224	88 5d ee	 mov	 BYTE PTR __k$[ebp+18], bl
  00227	eb 63		 jmp	 SHORT $LN111@LoadString@6
$LN79@LoadString@6:
  00229	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  0022c	eb 5e		 jmp	 SHORT $LN111@LoadString@6
$LN80@LoadString@6:
  0022e	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00232	eb 58		 jmp	 SHORT $LN111@LoadString@6
$LN81@LoadString@6:
  00234	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00238	eb 52		 jmp	 SHORT $LN111@LoadString@6
$LN82@LoadString@6:
  0023a	88 5d ea	 mov	 BYTE PTR __k$[ebp+14], bl
  0023d	eb 4d		 jmp	 SHORT $LN111@LoadString@6
$LN83@LoadString@6:
  0023f	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  00242	eb 48		 jmp	 SHORT $LN111@LoadString@6
$LN84@LoadString@6:
  00244	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00248	eb 42		 jmp	 SHORT $LN111@LoadString@6
$LN85@LoadString@6:
  0024a	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0024e	eb 3c		 jmp	 SHORT $LN111@LoadString@6
$LN86@LoadString@6:
  00250	88 5d e6	 mov	 BYTE PTR __k$[ebp+10], bl
  00253	eb 37		 jmp	 SHORT $LN111@LoadString@6
$LN87@LoadString@6:
  00255	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00258	eb 32		 jmp	 SHORT $LN111@LoadString@6
$LN88@LoadString@6:
  0025a	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0025e	eb 2c		 jmp	 SHORT $LN111@LoadString@6
$LN89@LoadString@6:
  00260	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  00264	eb 26		 jmp	 SHORT $LN111@LoadString@6
$LN90@LoadString@6:
  00266	88 5d e2	 mov	 BYTE PTR __k$[ebp+6], bl
  00269	eb 21		 jmp	 SHORT $LN111@LoadString@6
$LN91@LoadString@6:
  0026b	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  0026e	eb 1c		 jmp	 SHORT $LN111@LoadString@6
$LN92@LoadString@6:
  00270	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00274	eb 16		 jmp	 SHORT $LN111@LoadString@6
$LN93@LoadString@6:
  00276	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  0027a	eb 10		 jmp	 SHORT $LN111@LoadString@6
$LN94@LoadString@6:
  0027c	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00280	eb 0a		 jmp	 SHORT $LN111@LoadString@6
$LN95@LoadString@6:
  00282	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00286	eb 04		 jmp	 SHORT $LN111@LoadString@6
$LN96@LoadString@6:
  00288	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@6:
  0028c	6a 06		 push	 6
  0028e	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  00291	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+24], 0
  00295	5a		 pop	 edx
$LL104@LoadString@6:
  00296	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0029c	83 c0 04	 add	 eax, 4
  0029f	4a		 dec	 edx
  002a0	75 f4		 jne	 SHORT $LL104@LoadString@6

; 163  : 		LoadString(_k, d, b, i);

  002a2	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002a5	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002a8	57		 push	 edi
  002a9	56		 push	 esi
  002aa	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002ad	50		 push	 eax
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b7	5f		 pop	 edi
  002b8	5e		 pop	 esi
  002b9	33 cd		 xor	 ecx, ebp
  002bb	5b		 pop	 ebx
  002bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c1	c9		 leave
  002c2	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BJ@@ioINILoader@@QAEXAAY0BJ@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<25>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z ; ioINILoader::LoadFloat_e<29>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -40						; size = 29
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<29>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 c3 02 00
	00		 je	 $LN96@LoadFloat_@3
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 d8	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 ac 02 00
	00		 je	 $LN95@LoadFloat_@3
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 d9	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 94 02 00
	00		 je	 $LN94@LoadFloat_@3
  00044	b3 eb		 mov	 bl, -21			; ffffffebH
  00046	32 d3		 xor	 dl, bl
  00048	88 55 da	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 7c 02 00
	00		 je	 $LN93@LoadFloat_@3
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 db	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 65 02 00
	00		 je	 $LN92@LoadFloat_@3
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 dc	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 4f 02 00
	00		 je	 $LN91@LoadFloat_@3
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 dd	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 3a 02 00
	00		 je	 $LN90@LoadFloat_@3
  00088	32 d3		 xor	 dl, bl
  0008a	88 55 de	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 24 02 00
	00		 je	 $LN89@LoadFloat_@3
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 df	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 0d 02 00
	00		 je	 $LN88@LoadFloat_@3
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e0	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 f7 01 00
	00		 je	 $LN87@LoadFloat_@3
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e1	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 e2 01 00
	00		 je	 $LN86@LoadFloat_@3
  000ca	32 d3		 xor	 dl, bl
  000cc	88 55 e2	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 cc 01 00
	00		 je	 $LN85@LoadFloat_@3
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e3	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 b5 01 00
	00		 je	 $LN84@LoadFloat_@3
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e4	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 9f 01 00
	00		 je	 $LN83@LoadFloat_@3
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e5	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 8a 01 00
	00		 je	 $LN82@LoadFloat_@3
  0010c	32 d3		 xor	 dl, bl
  0010e	88 55 e6	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 74 01 00
	00		 je	 $LN81@LoadFloat_@3
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 e7	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 5d 01 00
	00		 je	 $LN80@LoadFloat_@3
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 e8	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 47 01 00
	00		 je	 $LN79@LoadFloat_@3
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 e9	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 32 01 00
	00		 je	 $LN78@LoadFloat_@3
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 ea	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 1c 01 00
	00		 je	 $LN77@LoadFloat_@3
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 eb	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 05 01 00
	00		 je	 $LN76@LoadFloat_@3
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 ec	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 ef 00 00
	00		 je	 $LN75@LoadFloat_@3
  00180	32 d1		 xor	 dl, cl
  00182	88 55 ed	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 da 00 00
	00		 je	 $LN74@LoadFloat_@3
  00190	32 d3		 xor	 dl, bl
  00192	88 55 ee	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 c4 00 00
	00		 je	 $LN73@LoadFloat_@3
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 ef	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 aa 00 00
	00		 je	 $LN72@LoadFloat_@3
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f0	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	0f 84 91 00 00
	00		 je	 $LN71@LoadFloat_@3
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 f1	 mov	 BYTE PTR __k$[ebp+25], dl
  001c7	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001ca	84 d2		 test	 dl, dl
  001cc	74 7d		 je	 SHORT $LN70@LoadFloat_@3
  001ce	32 d3		 xor	 dl, bl
  001d0	88 55 f2	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001d6	84 d2		 test	 dl, dl
  001d8	74 68		 je	 SHORT $LN69@LoadFloat_@3
  001da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001dd	80 78 1c 00	 cmp	 BYTE PTR [eax+28], 0
  001e1	88 55 f3	 mov	 BYTE PTR __k$[ebp+27], dl
  001e4	0f 84 fe 00 00
	00		 je	 $LN1@LoadFloat_@3
  001ea	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001ed	84 d2		 test	 dl, dl
  001ef	74 49		 je	 SHORT $LN67@LoadFloat_@3
  001f1	32 d1		 xor	 dl, cl
  001f3	88 55 f5	 mov	 BYTE PTR __k$[ebp+29], dl
  001f6	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f9	84 d2		 test	 dl, dl
  001fb	74 35		 je	 SHORT $LN66@LoadFloat_@3
  001fd	32 d3		 xor	 dl, bl
  001ff	88 55 f6	 mov	 BYTE PTR __k$[ebp+30], dl
  00202	8a 50 1f	 mov	 dl, BYTE PTR [eax+31]
  00205	84 d2		 test	 dl, dl
  00207	74 20		 je	 SHORT $LN65@LoadFloat_@3
  00209	8a 40 20	 mov	 al, BYTE PTR [eax+32]
  0020c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0020f	88 55 f7	 mov	 BYTE PTR __k$[ebp+31], dl
  00212	84 c0		 test	 al, al
  00214	74 0a		 je	 SHORT $LN64@LoadFloat_@3
  00216	34 ed		 xor	 al, -19			; ffffffedH
  00218	88 45 f8	 mov	 BYTE PTR __k$[ebp+32], al
  0021b	e9 c8 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN64@LoadFloat_@3:
  00220	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+32], -19 ; ffffffedH
  00224	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN65@LoadFloat_@3:
  00229	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  0022d	e9 b6 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN66@LoadFloat_@3:
  00232	88 5d f6	 mov	 BYTE PTR __k$[ebp+30], bl
  00235	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN67@LoadFloat_@3:
  0023a	88 4d f5	 mov	 BYTE PTR __k$[ebp+29], cl
  0023d	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN69@LoadFloat_@3:
  00242	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  00246	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN70@LoadFloat_@3:
  0024b	88 5d f2	 mov	 BYTE PTR __k$[ebp+26], bl
  0024e	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN71@LoadFloat_@3:
  00253	88 4d f1	 mov	 BYTE PTR __k$[ebp+25], cl
  00256	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN72@LoadFloat_@3:
  0025b	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0025f	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@3
$LN73@LoadFloat_@3:
  00264	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  00268	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN74@LoadFloat_@3:
  0026a	88 5d ee	 mov	 BYTE PTR __k$[ebp+22], bl
  0026d	eb 79		 jmp	 SHORT $LN1@LoadFloat_@3
$LN75@LoadFloat_@3:
  0026f	88 4d ed	 mov	 BYTE PTR __k$[ebp+21], cl
  00272	eb 74		 jmp	 SHORT $LN1@LoadFloat_@3
$LN76@LoadFloat_@3:
  00274	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00278	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN77@LoadFloat_@3:
  0027a	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0027e	eb 68		 jmp	 SHORT $LN1@LoadFloat_@3
$LN78@LoadFloat_@3:
  00280	88 5d ea	 mov	 BYTE PTR __k$[ebp+18], bl
  00283	eb 63		 jmp	 SHORT $LN1@LoadFloat_@3
$LN79@LoadFloat_@3:
  00285	88 4d e9	 mov	 BYTE PTR __k$[ebp+17], cl
  00288	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@3
$LN80@LoadFloat_@3:
  0028a	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0028e	eb 58		 jmp	 SHORT $LN1@LoadFloat_@3
$LN81@LoadFloat_@3:
  00290	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00294	eb 52		 jmp	 SHORT $LN1@LoadFloat_@3
$LN82@LoadFloat_@3:
  00296	88 5d e6	 mov	 BYTE PTR __k$[ebp+14], bl
  00299	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@3
$LN83@LoadFloat_@3:
  0029b	88 4d e5	 mov	 BYTE PTR __k$[ebp+13], cl
  0029e	eb 48		 jmp	 SHORT $LN1@LoadFloat_@3
$LN84@LoadFloat_@3:
  002a0	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  002a4	eb 42		 jmp	 SHORT $LN1@LoadFloat_@3
$LN85@LoadFloat_@3:
  002a6	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  002aa	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN86@LoadFloat_@3:
  002ac	88 5d e2	 mov	 BYTE PTR __k$[ebp+10], bl
  002af	eb 37		 jmp	 SHORT $LN1@LoadFloat_@3
$LN87@LoadFloat_@3:
  002b1	88 4d e1	 mov	 BYTE PTR __k$[ebp+9], cl
  002b4	eb 32		 jmp	 SHORT $LN1@LoadFloat_@3
$LN88@LoadFloat_@3:
  002b6	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002ba	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN89@LoadFloat_@3:
  002bc	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002c0	eb 26		 jmp	 SHORT $LN1@LoadFloat_@3
$LN90@LoadFloat_@3:
  002c2	88 5d de	 mov	 BYTE PTR __k$[ebp+6], bl
  002c5	eb 21		 jmp	 SHORT $LN1@LoadFloat_@3
$LN91@LoadFloat_@3:
  002c7	88 4d dd	 mov	 BYTE PTR __k$[ebp+5], cl
  002ca	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@3
$LN92@LoadFloat_@3:
  002cc	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002d0	eb 16		 jmp	 SHORT $LN1@LoadFloat_@3
$LN93@LoadFloat_@3:
  002d2	c6 45 db ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002d6	eb 10		 jmp	 SHORT $LN1@LoadFloat_@3
$LN94@LoadFloat_@3:
  002d8	c6 45 da eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002dc	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@3
$LN95@LoadFloat_@3:
  002de	c6 45 d9 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002e2	eb 04		 jmp	 SHORT $LN1@LoadFloat_@3
$LN96@LoadFloat_@3:
  002e4	c6 45 d8 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@3:
  002e8	6a 07		 push	 7
  002ea	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  002ed	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+28], 0
  002f1	5a		 pop	 edx
$LL104@LoadFloat_@3:
  002f2	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002f8	83 c0 04	 add	 eax, 4
  002fb	4a		 dec	 edx
  002fc	75 f4		 jne	 SHORT $LL104@LoadFloat_@3

; 137  : 		return LoadFloat(_k, f);

  002fe	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00303	51		 push	 ecx
  00304	8d 45 d8	 lea	 eax, DWORD PTR __k$[ebp]
  00307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030c	50		 push	 eax
  0030d	8b ce		 mov	 ecx, esi
  0030f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00315	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00318	5e		 pop	 esi
  00319	33 cd		 xor	 ecx, ebp
  0031b	5b		 pop	 ebx
  0031c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00321	c9		 leave
  00322	c2 08 00	 ret	 8
??$LoadFloat_e@$0BN@@ioINILoader@@QAEMAAY0BN@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<29>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<21>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 21
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<21>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 f7 01 00
	00		 je	 $LN96@LoadString@7
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 e0 01 00
	00		 je	 $LN95@LoadString@7
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 c8 01 00
	00		 je	 $LN94@LoadString@7
  0004c	b3 eb		 mov	 bl, -21			; ffffffebH
  0004e	32 d3		 xor	 dl, bl
  00050	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 b0 01 00
	00		 je	 $LN93@LoadString@7
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 99 01 00
	00		 je	 $LN92@LoadString@7
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 83 01 00
	00		 je	 $LN91@LoadString@7
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 6e 01 00
	00		 je	 $LN90@LoadString@7
  00090	32 d3		 xor	 dl, bl
  00092	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 58 01 00
	00		 je	 $LN89@LoadString@7
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 41 01 00
	00		 je	 $LN88@LoadString@7
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 2b 01 00
	00		 je	 $LN87@LoadString@7
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 16 01 00
	00		 je	 $LN86@LoadString@7
  000d2	32 d3		 xor	 dl, bl
  000d4	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 00 01 00
	00		 je	 $LN85@LoadString@7
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 e9 00 00
	00		 je	 $LN84@LoadString@7
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 d3 00 00
	00		 je	 $LN83@LoadString@7
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 be 00 00
	00		 je	 $LN82@LoadString@7
  00114	32 d3		 xor	 dl, bl
  00116	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 a8 00 00
	00		 je	 $LN81@LoadString@7
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 91 00 00
	00		 je	 $LN80@LoadString@7
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	74 7f		 je	 SHORT $LN79@LoadString@7
  00142	32 d1		 xor	 dl, cl
  00144	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  00147	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014a	84 d2		 test	 dl, dl
  0014c	74 6e		 je	 SHORT $LN78@LoadString@7
  0014e	32 d3		 xor	 dl, bl
  00150	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	74 5c		 je	 SHORT $LN77@LoadString@7
  0015a	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0015d	80 78 14 00	 cmp	 BYTE PTR [eax+20], 0
  00161	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	0f 84 ba 00 00
	00		 je	 $LN111@LoadString@7
  0016a	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0016d	84 d2		 test	 dl, dl
  0016f	74 40		 je	 SHORT $LN75@LoadString@7
  00171	32 d1		 xor	 dl, cl
  00173	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00176	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00179	84 d2		 test	 dl, dl
  0017b	74 2f		 je	 SHORT $LN74@LoadString@7
  0017d	32 d3		 xor	 dl, bl
  0017f	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00182	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00185	84 d2		 test	 dl, dl
  00187	74 1d		 je	 SHORT $LN73@LoadString@7
  00189	8a 40 18	 mov	 al, BYTE PTR [eax+24]
  0018c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0018f	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  00192	84 c0		 test	 al, al
  00194	74 0a		 je	 SHORT $LN72@LoadString@7
  00196	34 ed		 xor	 al, -19			; ffffffedH
  00198	88 45 f8	 mov	 BYTE PTR __k$[ebp+24], al
  0019b	e9 84 00 00 00	 jmp	 $LN111@LoadString@7
$LN72@LoadString@7:
  001a0	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001a4	eb 7e		 jmp	 SHORT $LN111@LoadString@7
$LN73@LoadString@7:
  001a6	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  001aa	eb 78		 jmp	 SHORT $LN111@LoadString@7
$LN74@LoadString@7:
  001ac	88 5d f6	 mov	 BYTE PTR __k$[ebp+22], bl
  001af	eb 73		 jmp	 SHORT $LN111@LoadString@7
$LN75@LoadString@7:
  001b1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001b4	eb 6e		 jmp	 SHORT $LN111@LoadString@7
$LN77@LoadString@7:
  001b6	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  001ba	eb 68		 jmp	 SHORT $LN111@LoadString@7
$LN78@LoadString@7:
  001bc	88 5d f2	 mov	 BYTE PTR __k$[ebp+18], bl
  001bf	eb 63		 jmp	 SHORT $LN111@LoadString@7
$LN79@LoadString@7:
  001c1	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001c4	eb 5e		 jmp	 SHORT $LN111@LoadString@7
$LN80@LoadString@7:
  001c6	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  001ca	eb 58		 jmp	 SHORT $LN111@LoadString@7
$LN81@LoadString@7:
  001cc	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  001d0	eb 52		 jmp	 SHORT $LN111@LoadString@7
$LN82@LoadString@7:
  001d2	88 5d ee	 mov	 BYTE PTR __k$[ebp+14], bl
  001d5	eb 4d		 jmp	 SHORT $LN111@LoadString@7
$LN83@LoadString@7:
  001d7	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  001da	eb 48		 jmp	 SHORT $LN111@LoadString@7
$LN84@LoadString@7:
  001dc	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001e0	eb 42		 jmp	 SHORT $LN111@LoadString@7
$LN85@LoadString@7:
  001e2	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001e6	eb 3c		 jmp	 SHORT $LN111@LoadString@7
$LN86@LoadString@7:
  001e8	88 5d ea	 mov	 BYTE PTR __k$[ebp+10], bl
  001eb	eb 37		 jmp	 SHORT $LN111@LoadString@7
$LN87@LoadString@7:
  001ed	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  001f0	eb 32		 jmp	 SHORT $LN111@LoadString@7
$LN88@LoadString@7:
  001f2	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001f6	eb 2c		 jmp	 SHORT $LN111@LoadString@7
$LN89@LoadString@7:
  001f8	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001fc	eb 26		 jmp	 SHORT $LN111@LoadString@7
$LN90@LoadString@7:
  001fe	88 5d e6	 mov	 BYTE PTR __k$[ebp+6], bl
  00201	eb 21		 jmp	 SHORT $LN111@LoadString@7
$LN91@LoadString@7:
  00203	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  00206	eb 1c		 jmp	 SHORT $LN111@LoadString@7
$LN92@LoadString@7:
  00208	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0020c	eb 16		 jmp	 SHORT $LN111@LoadString@7
$LN93@LoadString@7:
  0020e	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00212	eb 10		 jmp	 SHORT $LN111@LoadString@7
$LN94@LoadString@7:
  00214	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00218	eb 0a		 jmp	 SHORT $LN111@LoadString@7
$LN95@LoadString@7:
  0021a	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0021e	eb 04		 jmp	 SHORT $LN111@LoadString@7
$LN96@LoadString@7:
  00220	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@7:
  00224	6a 05		 push	 5
  00226	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00229	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+20], 0
  0022d	5a		 pop	 edx
$LL104@LoadString@7:
  0022e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00234	83 c0 04	 add	 eax, 4
  00237	4a		 dec	 edx
  00238	75 f4		 jne	 SHORT $LL104@LoadString@7

; 163  : 		LoadString(_k, d, b, i);

  0023a	ff 75 14	 push	 DWORD PTR _i$[ebp]
  0023d	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00240	57		 push	 edi
  00241	56		 push	 esi
  00242	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00245	50		 push	 eax
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  0024c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024f	5f		 pop	 edi
  00250	5e		 pop	 esi
  00251	33 cd		 xor	 ecx, ebp
  00253	5b		 pop	 ebx
  00254	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00259	c9		 leave
  0025a	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BF@@ioINILoader@@QAEXAAY0BF@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<21>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<24>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<24>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 45 02 00
	00		 je	 $LN96@LoadString@8
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 2e 02 00
	00		 je	 $LN95@LoadString@8
  0003a	b3 ec		 mov	 bl, -20			; ffffffecH
  0003c	32 d3		 xor	 dl, bl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 16 02 00
	00		 je	 $LN94@LoadString@8
  0004c	b1 eb		 mov	 cl, -21			; ffffffebH
  0004e	32 d1		 xor	 dl, cl
  00050	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00053	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00056	84 d2		 test	 dl, dl
  00058	0f 84 fe 01 00
	00		 je	 $LN93@LoadString@8
  0005e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 e7 01 00
	00		 je	 $LN92@LoadString@8
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 d1 01 00
	00		 je	 $LN91@LoadString@8
  00080	32 d3		 xor	 dl, bl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 bc 01 00
	00		 je	 $LN90@LoadString@8
  00090	32 d1		 xor	 dl, cl
  00092	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00095	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00098	84 d2		 test	 dl, dl
  0009a	0f 84 a6 01 00
	00		 je	 $LN89@LoadString@8
  000a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 8f 01 00
	00		 je	 $LN88@LoadString@8
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 79 01 00
	00		 je	 $LN87@LoadString@8
  000c2	32 d3		 xor	 dl, bl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 64 01 00
	00		 je	 $LN86@LoadString@8
  000d2	32 d1		 xor	 dl, cl
  000d4	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d7	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000da	84 d2		 test	 dl, dl
  000dc	0f 84 4e 01 00
	00		 je	 $LN85@LoadString@8
  000e2	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 37 01 00
	00		 je	 $LN84@LoadString@8
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 21 01 00
	00		 je	 $LN83@LoadString@8
  00104	32 d3		 xor	 dl, bl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 0c 01 00
	00		 je	 $LN82@LoadString@8
  00114	32 d1		 xor	 dl, cl
  00116	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  00119	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011c	84 d2		 test	 dl, dl
  0011e	0f 84 f6 00 00
	00		 je	 $LN81@LoadString@8
  00124	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 df 00 00
	00		 je	 $LN80@LoadString@8
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 c9 00 00
	00		 je	 $LN79@LoadString@8
  00146	32 d3		 xor	 dl, bl
  00148	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 b4 00 00
	00		 je	 $LN78@LoadString@8
  00156	32 d1		 xor	 dl, cl
  00158	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015b	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015e	84 d2		 test	 dl, dl
  00160	0f 84 9e 00 00
	00		 je	 $LN77@LoadString@8
  00166	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00169	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	0f 84 87 00 00
	00		 je	 $LN76@LoadString@8
  00177	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0017a	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  0017d	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00180	84 d2		 test	 dl, dl
  00182	74 75		 je	 SHORT $LN75@LoadString@8
  00184	32 d3		 xor	 dl, bl
  00186	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00189	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  0018c	84 d2		 test	 dl, dl
  0018e	74 64		 je	 SHORT $LN74@LoadString@8
  00190	32 d1		 xor	 dl, cl
  00192	80 78 17 00	 cmp	 BYTE PTR [eax+23], 0
  00196	88 55 f6	 mov	 BYTE PTR __k$[ebp+22], dl
  00199	0f 84 d3 00 00
	00		 je	 $LN111@LoadString@8
  0019f	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a2	84 d2		 test	 dl, dl
  001a4	74 48		 je	 SHORT $LN72@LoadString@8
  001a6	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a9	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001ac	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001af	84 d2		 test	 dl, dl
  001b1	74 33		 je	 SHORT $LN71@LoadString@8
  001b3	32 d3		 xor	 dl, bl
  001b5	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b8	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001bb	84 d2		 test	 dl, dl
  001bd	74 1f		 je	 SHORT $LN70@LoadString@8
  001bf	8a 40 1b	 mov	 al, BYTE PTR [eax+27]
  001c2	32 d1		 xor	 dl, cl
  001c4	88 55 fa	 mov	 BYTE PTR __k$[ebp+26], dl
  001c7	84 c0		 test	 al, al
  001c9	74 0a		 je	 SHORT $LN69@LoadString@8
  001cb	34 ea		 xor	 al, -22			; ffffffeaH
  001cd	88 45 fb	 mov	 BYTE PTR __k$[ebp+27], al
  001d0	e9 9d 00 00 00	 jmp	 $LN111@LoadString@8
$LN69@LoadString@8:
  001d5	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+27], -22 ; ffffffeaH
  001d9	e9 94 00 00 00	 jmp	 $LN111@LoadString@8
$LN70@LoadString@8:
  001de	88 4d fa	 mov	 BYTE PTR __k$[ebp+26], cl
  001e1	e9 8c 00 00 00	 jmp	 $LN111@LoadString@8
$LN71@LoadString@8:
  001e6	88 5d f9	 mov	 BYTE PTR __k$[ebp+25], bl
  001e9	e9 84 00 00 00	 jmp	 $LN111@LoadString@8
$LN72@LoadString@8:
  001ee	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001f2	eb 7e		 jmp	 SHORT $LN111@LoadString@8
$LN74@LoadString@8:
  001f4	88 4d f6	 mov	 BYTE PTR __k$[ebp+22], cl
  001f7	eb 79		 jmp	 SHORT $LN111@LoadString@8
$LN75@LoadString@8:
  001f9	88 5d f5	 mov	 BYTE PTR __k$[ebp+21], bl
  001fc	eb 74		 jmp	 SHORT $LN111@LoadString@8
$LN76@LoadString@8:
  001fe	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00202	eb 6e		 jmp	 SHORT $LN111@LoadString@8
$LN77@LoadString@8:
  00204	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00208	eb 68		 jmp	 SHORT $LN111@LoadString@8
$LN78@LoadString@8:
  0020a	88 4d f2	 mov	 BYTE PTR __k$[ebp+18], cl
  0020d	eb 63		 jmp	 SHORT $LN111@LoadString@8
$LN79@LoadString@8:
  0020f	88 5d f1	 mov	 BYTE PTR __k$[ebp+17], bl
  00212	eb 5e		 jmp	 SHORT $LN111@LoadString@8
$LN80@LoadString@8:
  00214	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00218	eb 58		 jmp	 SHORT $LN111@LoadString@8
$LN81@LoadString@8:
  0021a	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0021e	eb 52		 jmp	 SHORT $LN111@LoadString@8
$LN82@LoadString@8:
  00220	88 4d ee	 mov	 BYTE PTR __k$[ebp+14], cl
  00223	eb 4d		 jmp	 SHORT $LN111@LoadString@8
$LN83@LoadString@8:
  00225	88 5d ed	 mov	 BYTE PTR __k$[ebp+13], bl
  00228	eb 48		 jmp	 SHORT $LN111@LoadString@8
$LN84@LoadString@8:
  0022a	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0022e	eb 42		 jmp	 SHORT $LN111@LoadString@8
$LN85@LoadString@8:
  00230	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00234	eb 3c		 jmp	 SHORT $LN111@LoadString@8
$LN86@LoadString@8:
  00236	88 4d ea	 mov	 BYTE PTR __k$[ebp+10], cl
  00239	eb 37		 jmp	 SHORT $LN111@LoadString@8
$LN87@LoadString@8:
  0023b	88 5d e9	 mov	 BYTE PTR __k$[ebp+9], bl
  0023e	eb 32		 jmp	 SHORT $LN111@LoadString@8
$LN88@LoadString@8:
  00240	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00244	eb 2c		 jmp	 SHORT $LN111@LoadString@8
$LN89@LoadString@8:
  00246	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  0024a	eb 26		 jmp	 SHORT $LN111@LoadString@8
$LN90@LoadString@8:
  0024c	88 4d e6	 mov	 BYTE PTR __k$[ebp+6], cl
  0024f	eb 21		 jmp	 SHORT $LN111@LoadString@8
$LN91@LoadString@8:
  00251	88 5d e5	 mov	 BYTE PTR __k$[ebp+5], bl
  00254	eb 1c		 jmp	 SHORT $LN111@LoadString@8
$LN92@LoadString@8:
  00256	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0025a	eb 16		 jmp	 SHORT $LN111@LoadString@8
$LN93@LoadString@8:
  0025c	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00260	eb 10		 jmp	 SHORT $LN111@LoadString@8
$LN94@LoadString@8:
  00262	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  00266	eb 0a		 jmp	 SHORT $LN111@LoadString@8
$LN95@LoadString@8:
  00268	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  0026c	eb 04		 jmp	 SHORT $LN111@LoadString@8
$LN96@LoadString@8:
  0026e	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@8:
  00272	6a 05		 push	 5
  00274	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  00277	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+23], 0
  0027b	5a		 pop	 edx
$LL104@LoadString@8:
  0027c	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00282	83 c0 04	 add	 eax, 4
  00285	4a		 dec	 edx
  00286	75 f4		 jne	 SHORT $LL104@LoadString@8
  00288	6a 14		 push	 20			; 00000014H
  0028a	58		 pop	 eax
$LL101@LoadString@8:
  0028b	8b c8		 mov	 ecx, eax
  0028d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00293	79 05		 jns	 SHORT $LN112@LoadString@8
  00295	49		 dec	 ecx
  00296	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00299	41		 inc	 ecx
$LN112@LoadString@8:
  0029a	b2 ed		 mov	 dl, -19			; ffffffedH
  0029c	2a d1		 sub	 dl, cl
  0029e	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  002a2	40		 inc	 eax
  002a3	83 f8 17	 cmp	 eax, 23			; 00000017H
  002a6	7c e3		 jl	 SHORT $LL101@LoadString@8

; 163  : 		LoadString(_k, d, b, i);

  002a8	ff 75 14	 push	 DWORD PTR _i$[ebp]
  002ab	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  002ae	57		 push	 edi
  002af	56		 push	 esi
  002b0	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  002b3	50		 push	 eax
  002b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	33 cd		 xor	 ecx, ebp
  002c1	5b		 pop	 ebx
  002c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c7	c9		 leave
  002c8	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BI@@ioINILoader@@QAEXAAY0BI@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<24>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ; ioINILoader::LoadFloat_e<28>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<28>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 a9 02 00
	00		 je	 $LN96@LoadFloat_@4
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 92 02 00
	00		 je	 $LN95@LoadFloat_@4
  00032	b3 ec		 mov	 bl, -20			; ffffffecH
  00034	32 d3		 xor	 dl, bl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 7a 02 00
	00		 je	 $LN94@LoadFloat_@4
  00044	b1 eb		 mov	 cl, -21			; ffffffebH
  00046	32 d1		 xor	 dl, cl
  00048	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004b	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004e	84 d2		 test	 dl, dl
  00050	0f 84 62 02 00
	00		 je	 $LN93@LoadFloat_@4
  00056	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 4b 02 00
	00		 je	 $LN92@LoadFloat_@4
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 35 02 00
	00		 je	 $LN91@LoadFloat_@4
  00078	32 d3		 xor	 dl, bl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 20 02 00
	00		 je	 $LN90@LoadFloat_@4
  00088	32 d1		 xor	 dl, cl
  0008a	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008d	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00090	84 d2		 test	 dl, dl
  00092	0f 84 0a 02 00
	00		 je	 $LN89@LoadFloat_@4
  00098	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 f3 01 00
	00		 je	 $LN88@LoadFloat_@4
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 dd 01 00
	00		 je	 $LN87@LoadFloat_@4
  000ba	32 d3		 xor	 dl, bl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 c8 01 00
	00		 je	 $LN86@LoadFloat_@4
  000ca	32 d1		 xor	 dl, cl
  000cc	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 b2 01 00
	00		 je	 $LN85@LoadFloat_@4
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 9b 01 00
	00		 je	 $LN84@LoadFloat_@4
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 85 01 00
	00		 je	 $LN83@LoadFloat_@4
  000fc	32 d3		 xor	 dl, bl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 70 01 00
	00		 je	 $LN82@LoadFloat_@4
  0010c	32 d1		 xor	 dl, cl
  0010e	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00111	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00114	84 d2		 test	 dl, dl
  00116	0f 84 5a 01 00
	00		 je	 $LN81@LoadFloat_@4
  0011c	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 43 01 00
	00		 je	 $LN80@LoadFloat_@4
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 2d 01 00
	00		 je	 $LN79@LoadFloat_@4
  0013e	32 d3		 xor	 dl, bl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 18 01 00
	00		 je	 $LN78@LoadFloat_@4
  0014e	32 d1		 xor	 dl, cl
  00150	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00153	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00156	84 d2		 test	 dl, dl
  00158	0f 84 02 01 00
	00		 je	 $LN77@LoadFloat_@4
  0015e	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 eb 00 00
	00		 je	 $LN76@LoadFloat_@4
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 d5 00 00
	00		 je	 $LN75@LoadFloat_@4
  00180	32 d3		 xor	 dl, bl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 c0 00 00
	00		 je	 $LN74@LoadFloat_@4
  00190	32 d1		 xor	 dl, cl
  00192	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00195	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00198	84 d2		 test	 dl, dl
  0019a	0f 84 aa 00 00
	00		 je	 $LN73@LoadFloat_@4
  001a0	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	0f 84 90 00 00
	00		 je	 $LN72@LoadFloat_@4
  001b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b4	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b7	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ba	84 d2		 test	 dl, dl
  001bc	74 7b		 je	 SHORT $LN71@LoadFloat_@4
  001be	32 d3		 xor	 dl, bl
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	8a 50 1a	 mov	 dl, BYTE PTR [eax+26]
  001c6	84 d2		 test	 dl, dl
  001c8	74 67		 je	 SHORT $LN70@LoadFloat_@4
  001ca	32 d1		 xor	 dl, cl
  001cc	80 78 1b 00	 cmp	 BYTE PTR [eax+27], 0
  001d0	88 55 f6	 mov	 BYTE PTR __k$[ebp+26], dl
  001d3	0f 84 f5 00 00
	00		 je	 $LN1@LoadFloat_@4
  001d9	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001dc	84 d2		 test	 dl, dl
  001de	74 48		 je	 SHORT $LN68@LoadFloat_@4
  001e0	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001e3	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e6	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e9	84 d2		 test	 dl, dl
  001eb	74 33		 je	 SHORT $LN67@LoadFloat_@4
  001ed	32 d3		 xor	 dl, bl
  001ef	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f2	8a 50 1e	 mov	 dl, BYTE PTR [eax+30]
  001f5	84 d2		 test	 dl, dl
  001f7	74 1f		 je	 SHORT $LN66@LoadFloat_@4
  001f9	8a 40 1f	 mov	 al, BYTE PTR [eax+31]
  001fc	32 d1		 xor	 dl, cl
  001fe	88 55 fa	 mov	 BYTE PTR __k$[ebp+30], dl
  00201	84 c0		 test	 al, al
  00203	74 0a		 je	 SHORT $LN65@LoadFloat_@4
  00205	34 ea		 xor	 al, -22			; ffffffeaH
  00207	88 45 fb	 mov	 BYTE PTR __k$[ebp+31], al
  0020a	e9 bf 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN65@LoadFloat_@4:
  0020f	c6 45 fb ea	 mov	 BYTE PTR __k$[ebp+31], -22 ; ffffffeaH
  00213	e9 b6 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN66@LoadFloat_@4:
  00218	88 4d fa	 mov	 BYTE PTR __k$[ebp+30], cl
  0021b	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN67@LoadFloat_@4:
  00220	88 5d f9	 mov	 BYTE PTR __k$[ebp+29], bl
  00223	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN68@LoadFloat_@4:
  00228	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  0022c	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN70@LoadFloat_@4:
  00231	88 4d f6	 mov	 BYTE PTR __k$[ebp+26], cl
  00234	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN71@LoadFloat_@4:
  00239	88 5d f5	 mov	 BYTE PTR __k$[ebp+25], bl
  0023c	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN72@LoadFloat_@4:
  00241	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  00245	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@4
$LN73@LoadFloat_@4:
  0024a	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+23], -22 ; ffffffeaH
  0024e	eb 7e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN74@LoadFloat_@4:
  00250	88 4d f2	 mov	 BYTE PTR __k$[ebp+22], cl
  00253	eb 79		 jmp	 SHORT $LN1@LoadFloat_@4
$LN75@LoadFloat_@4:
  00255	88 5d f1	 mov	 BYTE PTR __k$[ebp+21], bl
  00258	eb 74		 jmp	 SHORT $LN1@LoadFloat_@4
$LN76@LoadFloat_@4:
  0025a	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0025e	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN77@LoadFloat_@4:
  00260	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00264	eb 68		 jmp	 SHORT $LN1@LoadFloat_@4
$LN78@LoadFloat_@4:
  00266	88 4d ee	 mov	 BYTE PTR __k$[ebp+18], cl
  00269	eb 63		 jmp	 SHORT $LN1@LoadFloat_@4
$LN79@LoadFloat_@4:
  0026b	88 5d ed	 mov	 BYTE PTR __k$[ebp+17], bl
  0026e	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@4
$LN80@LoadFloat_@4:
  00270	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00274	eb 58		 jmp	 SHORT $LN1@LoadFloat_@4
$LN81@LoadFloat_@4:
  00276	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0027a	eb 52		 jmp	 SHORT $LN1@LoadFloat_@4
$LN82@LoadFloat_@4:
  0027c	88 4d ea	 mov	 BYTE PTR __k$[ebp+14], cl
  0027f	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@4
$LN83@LoadFloat_@4:
  00281	88 5d e9	 mov	 BYTE PTR __k$[ebp+13], bl
  00284	eb 48		 jmp	 SHORT $LN1@LoadFloat_@4
$LN84@LoadFloat_@4:
  00286	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  0028a	eb 42		 jmp	 SHORT $LN1@LoadFloat_@4
$LN85@LoadFloat_@4:
  0028c	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  00290	eb 3c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN86@LoadFloat_@4:
  00292	88 4d e6	 mov	 BYTE PTR __k$[ebp+10], cl
  00295	eb 37		 jmp	 SHORT $LN1@LoadFloat_@4
$LN87@LoadFloat_@4:
  00297	88 5d e5	 mov	 BYTE PTR __k$[ebp+9], bl
  0029a	eb 32		 jmp	 SHORT $LN1@LoadFloat_@4
$LN88@LoadFloat_@4:
  0029c	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  002a0	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN89@LoadFloat_@4:
  002a2	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  002a6	eb 26		 jmp	 SHORT $LN1@LoadFloat_@4
$LN90@LoadFloat_@4:
  002a8	88 4d e2	 mov	 BYTE PTR __k$[ebp+6], cl
  002ab	eb 21		 jmp	 SHORT $LN1@LoadFloat_@4
$LN91@LoadFloat_@4:
  002ad	88 5d e1	 mov	 BYTE PTR __k$[ebp+5], bl
  002b0	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@4
$LN92@LoadFloat_@4:
  002b2	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  002b6	eb 16		 jmp	 SHORT $LN1@LoadFloat_@4
$LN93@LoadFloat_@4:
  002b8	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002bc	eb 10		 jmp	 SHORT $LN1@LoadFloat_@4
$LN94@LoadFloat_@4:
  002be	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002c2	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@4
$LN95@LoadFloat_@4:
  002c4	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002c8	eb 04		 jmp	 SHORT $LN1@LoadFloat_@4
$LN96@LoadFloat_@4:
  002ca	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@4:
  002ce	6a 06		 push	 6
  002d0	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002d3	c6 45 f7 00	 mov	 BYTE PTR __k$[ebp+27], 0
  002d7	5a		 pop	 edx
$LL104@LoadFloat_@4:
  002d8	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002de	83 c0 04	 add	 eax, 4
  002e1	4a		 dec	 edx
  002e2	75 f4		 jne	 SHORT $LL104@LoadFloat_@4
  002e4	6a 18		 push	 24			; 00000018H
  002e6	58		 pop	 eax
$LL101@LoadFloat_@4:
  002e7	8b c8		 mov	 ecx, eax
  002e9	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002ef	79 05		 jns	 SHORT $LN111@LoadFloat_@4
  002f1	49		 dec	 ecx
  002f2	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002f5	41		 inc	 ecx
$LN111@LoadFloat_@4:
  002f6	b2 ed		 mov	 dl, -19			; ffffffedH
  002f8	2a d1		 sub	 dl, cl
  002fa	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002fe	40		 inc	 eax
  002ff	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  00302	7c e3		 jl	 SHORT $LL101@LoadFloat_@4

; 137  : 		return LoadFloat(_k, f);

  00304	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  00309	51		 push	 ecx
  0030a	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	50		 push	 eax
  00313	8b ce		 mov	 ecx, esi
  00315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  0031b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031e	5e		 pop	 esi
  0031f	33 cd		 xor	 ecx, ebp
  00321	5b		 pop	 ebx
  00322	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00327	c9		 leave
  00328	c2 08 00	 ret	 8
??$LoadFloat_e@$0BM@@ioINILoader@@QAEMAAY0BM@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<28>
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ; ioINILoader::LoadString_e<23>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z
_TEXT	SEGMENT
_this$GSCopy$ = -36					; size = 4
__k$ = -32						; size = 23
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_d$ = 12						; size = 4
_b$ = 16						; size = 4
_i$ = 20						; size = 4
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z PROC ; ioINILoader::LoadString_e<23>, COMDAT
; _this$ = ecx

; 161  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 162  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 0c	 mov	 esi, DWORD PTR _d$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 10	 mov	 edi, DWORD PTR _b$[ebp]
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	84 d2		 test	 dl, dl
  00023	0f 84 2d 02 00
	00		 je	 $LN96@LoadString@9
  00029	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0002c	88 55 e0	 mov	 BYTE PTR __k$[ebp], dl
  0002f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00032	84 d2		 test	 dl, dl
  00034	0f 84 16 02 00
	00		 je	 $LN95@LoadString@9
  0003a	b1 ec		 mov	 cl, -20			; ffffffecH
  0003c	32 d1		 xor	 dl, cl
  0003e	88 55 e1	 mov	 BYTE PTR __k$[ebp+1], dl
  00041	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00044	84 d2		 test	 dl, dl
  00046	0f 84 fe 01 00
	00		 je	 $LN94@LoadString@9
  0004c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0004f	88 55 e2	 mov	 BYTE PTR __k$[ebp+2], dl
  00052	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  00055	84 d2		 test	 dl, dl
  00057	0f 84 e7 01 00
	00		 je	 $LN93@LoadString@9
  0005d	b3 ea		 mov	 bl, -22			; ffffffeaH
  0005f	32 d3		 xor	 dl, bl
  00061	88 55 e3	 mov	 BYTE PTR __k$[ebp+3], dl
  00064	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  00067	84 d2		 test	 dl, dl
  00069	0f 84 cf 01 00
	00		 je	 $LN92@LoadString@9
  0006f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00072	88 55 e4	 mov	 BYTE PTR __k$[ebp+4], dl
  00075	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00078	84 d2		 test	 dl, dl
  0007a	0f 84 b9 01 00
	00		 je	 $LN91@LoadString@9
  00080	32 d1		 xor	 dl, cl
  00082	88 55 e5	 mov	 BYTE PTR __k$[ebp+5], dl
  00085	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00088	84 d2		 test	 dl, dl
  0008a	0f 84 a3 01 00
	00		 je	 $LN90@LoadString@9
  00090	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00093	88 55 e6	 mov	 BYTE PTR __k$[ebp+6], dl
  00096	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00099	84 d2		 test	 dl, dl
  0009b	0f 84 8d 01 00
	00		 je	 $LN89@LoadString@9
  000a1	32 d3		 xor	 dl, bl
  000a3	88 55 e7	 mov	 BYTE PTR __k$[ebp+7], dl
  000a6	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a9	84 d2		 test	 dl, dl
  000ab	0f 84 77 01 00
	00		 je	 $LN88@LoadString@9
  000b1	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000b4	88 55 e8	 mov	 BYTE PTR __k$[ebp+8], dl
  000b7	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000ba	84 d2		 test	 dl, dl
  000bc	0f 84 61 01 00
	00		 je	 $LN87@LoadString@9
  000c2	32 d1		 xor	 dl, cl
  000c4	88 55 e9	 mov	 BYTE PTR __k$[ebp+9], dl
  000c7	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000ca	84 d2		 test	 dl, dl
  000cc	0f 84 4b 01 00
	00		 je	 $LN86@LoadString@9
  000d2	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000d5	88 55 ea	 mov	 BYTE PTR __k$[ebp+10], dl
  000d8	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000db	84 d2		 test	 dl, dl
  000dd	0f 84 35 01 00
	00		 je	 $LN85@LoadString@9
  000e3	32 d3		 xor	 dl, bl
  000e5	88 55 eb	 mov	 BYTE PTR __k$[ebp+11], dl
  000e8	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000eb	84 d2		 test	 dl, dl
  000ed	0f 84 1f 01 00
	00		 je	 $LN84@LoadString@9
  000f3	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000f6	88 55 ec	 mov	 BYTE PTR __k$[ebp+12], dl
  000f9	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000fc	84 d2		 test	 dl, dl
  000fe	0f 84 09 01 00
	00		 je	 $LN83@LoadString@9
  00104	32 d1		 xor	 dl, cl
  00106	88 55 ed	 mov	 BYTE PTR __k$[ebp+13], dl
  00109	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  0010c	84 d2		 test	 dl, dl
  0010e	0f 84 f3 00 00
	00		 je	 $LN82@LoadString@9
  00114	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00117	88 55 ee	 mov	 BYTE PTR __k$[ebp+14], dl
  0011a	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  0011d	84 d2		 test	 dl, dl
  0011f	0f 84 dd 00 00
	00		 je	 $LN81@LoadString@9
  00125	32 d3		 xor	 dl, bl
  00127	88 55 ef	 mov	 BYTE PTR __k$[ebp+15], dl
  0012a	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  0012d	84 d2		 test	 dl, dl
  0012f	0f 84 c7 00 00
	00		 je	 $LN80@LoadString@9
  00135	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00138	88 55 f0	 mov	 BYTE PTR __k$[ebp+16], dl
  0013b	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0013e	84 d2		 test	 dl, dl
  00140	0f 84 b1 00 00
	00		 je	 $LN79@LoadString@9
  00146	32 d1		 xor	 dl, cl
  00148	88 55 f1	 mov	 BYTE PTR __k$[ebp+17], dl
  0014b	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  0014e	84 d2		 test	 dl, dl
  00150	0f 84 9b 00 00
	00		 je	 $LN78@LoadString@9
  00156	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00159	88 55 f2	 mov	 BYTE PTR __k$[ebp+18], dl
  0015c	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  0015f	84 d2		 test	 dl, dl
  00161	0f 84 85 00 00
	00		 je	 $LN77@LoadString@9
  00167	32 d3		 xor	 dl, bl
  00169	88 55 f3	 mov	 BYTE PTR __k$[ebp+19], dl
  0016c	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0016f	84 d2		 test	 dl, dl
  00171	74 73		 je	 SHORT $LN76@LoadString@9
  00173	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00176	88 55 f4	 mov	 BYTE PTR __k$[ebp+20], dl
  00179	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0017c	84 d2		 test	 dl, dl
  0017e	74 61		 je	 SHORT $LN75@LoadString@9
  00180	32 d1		 xor	 dl, cl
  00182	80 78 16 00	 cmp	 BYTE PTR [eax+22], 0
  00186	88 55 f5	 mov	 BYTE PTR __k$[ebp+21], dl
  00189	0f 84 cb 00 00
	00		 je	 $LN111@LoadString@9
  0018f	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00192	84 d2		 test	 dl, dl
  00194	74 46		 je	 SHORT $LN73@LoadString@9
  00196	32 d3		 xor	 dl, bl
  00198	88 55 f7	 mov	 BYTE PTR __k$[ebp+23], dl
  0019b	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  0019e	84 d2		 test	 dl, dl
  001a0	74 34		 je	 SHORT $LN72@LoadString@9
  001a2	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001a5	88 55 f8	 mov	 BYTE PTR __k$[ebp+24], dl
  001a8	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001ab	84 d2		 test	 dl, dl
  001ad	74 1f		 je	 SHORT $LN71@LoadString@9
  001af	8a 40 1a	 mov	 al, BYTE PTR [eax+26]
  001b2	32 d1		 xor	 dl, cl
  001b4	88 55 f9	 mov	 BYTE PTR __k$[ebp+25], dl
  001b7	84 c0		 test	 al, al
  001b9	74 0a		 je	 SHORT $LN70@LoadString@9
  001bb	34 eb		 xor	 al, -21			; ffffffebH
  001bd	88 45 fa	 mov	 BYTE PTR __k$[ebp+26], al
  001c0	e9 95 00 00 00	 jmp	 $LN111@LoadString@9
$LN70@LoadString@9:
  001c5	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+26], -21 ; ffffffebH
  001c9	e9 8c 00 00 00	 jmp	 $LN111@LoadString@9
$LN71@LoadString@9:
  001ce	88 4d f9	 mov	 BYTE PTR __k$[ebp+25], cl
  001d1	e9 84 00 00 00	 jmp	 $LN111@LoadString@9
$LN72@LoadString@9:
  001d6	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  001da	eb 7e		 jmp	 SHORT $LN111@LoadString@9
$LN73@LoadString@9:
  001dc	88 5d f7	 mov	 BYTE PTR __k$[ebp+23], bl
  001df	eb 79		 jmp	 SHORT $LN111@LoadString@9
$LN75@LoadString@9:
  001e1	88 4d f5	 mov	 BYTE PTR __k$[ebp+21], cl
  001e4	eb 74		 jmp	 SHORT $LN111@LoadString@9
$LN76@LoadString@9:
  001e6	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  001ea	eb 6e		 jmp	 SHORT $LN111@LoadString@9
$LN77@LoadString@9:
  001ec	88 5d f3	 mov	 BYTE PTR __k$[ebp+19], bl
  001ef	eb 69		 jmp	 SHORT $LN111@LoadString@9
$LN78@LoadString@9:
  001f1	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  001f5	eb 63		 jmp	 SHORT $LN111@LoadString@9
$LN79@LoadString@9:
  001f7	88 4d f1	 mov	 BYTE PTR __k$[ebp+17], cl
  001fa	eb 5e		 jmp	 SHORT $LN111@LoadString@9
$LN80@LoadString@9:
  001fc	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00200	eb 58		 jmp	 SHORT $LN111@LoadString@9
$LN81@LoadString@9:
  00202	88 5d ef	 mov	 BYTE PTR __k$[ebp+15], bl
  00205	eb 53		 jmp	 SHORT $LN111@LoadString@9
$LN82@LoadString@9:
  00207	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0020b	eb 4d		 jmp	 SHORT $LN111@LoadString@9
$LN83@LoadString@9:
  0020d	88 4d ed	 mov	 BYTE PTR __k$[ebp+13], cl
  00210	eb 48		 jmp	 SHORT $LN111@LoadString@9
$LN84@LoadString@9:
  00212	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00216	eb 42		 jmp	 SHORT $LN111@LoadString@9
$LN85@LoadString@9:
  00218	88 5d eb	 mov	 BYTE PTR __k$[ebp+11], bl
  0021b	eb 3d		 jmp	 SHORT $LN111@LoadString@9
$LN86@LoadString@9:
  0021d	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00221	eb 37		 jmp	 SHORT $LN111@LoadString@9
$LN87@LoadString@9:
  00223	88 4d e9	 mov	 BYTE PTR __k$[ebp+9], cl
  00226	eb 32		 jmp	 SHORT $LN111@LoadString@9
$LN88@LoadString@9:
  00228	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0022c	eb 2c		 jmp	 SHORT $LN111@LoadString@9
$LN89@LoadString@9:
  0022e	88 5d e7	 mov	 BYTE PTR __k$[ebp+7], bl
  00231	eb 27		 jmp	 SHORT $LN111@LoadString@9
$LN90@LoadString@9:
  00233	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00237	eb 21		 jmp	 SHORT $LN111@LoadString@9
$LN91@LoadString@9:
  00239	88 4d e5	 mov	 BYTE PTR __k$[ebp+5], cl
  0023c	eb 1c		 jmp	 SHORT $LN111@LoadString@9
$LN92@LoadString@9:
  0023e	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  00242	eb 16		 jmp	 SHORT $LN111@LoadString@9
$LN93@LoadString@9:
  00244	c6 45 e3 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  00248	eb 10		 jmp	 SHORT $LN111@LoadString@9
$LN94@LoadString@9:
  0024a	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  0024e	eb 0a		 jmp	 SHORT $LN111@LoadString@9
$LN95@LoadString@9:
  00250	c6 45 e1 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  00254	eb 04		 jmp	 SHORT $LN111@LoadString@9
$LN96@LoadString@9:
  00256	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN111@LoadString@9:
  0025a	6a 05		 push	 5
  0025c	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0025f	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+22], 0
  00263	5a		 pop	 edx
$LL104@LoadString@9:
  00264	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0026a	83 c0 04	 add	 eax, 4
  0026d	4a		 dec	 edx
  0026e	75 f4		 jne	 SHORT $LL104@LoadString@9
  00270	6a 14		 push	 20			; 00000014H
  00272	58		 pop	 eax
$LL101@LoadString@9:
  00273	8b c8		 mov	 ecx, eax
  00275	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0027b	79 05		 jns	 SHORT $LN112@LoadString@9
  0027d	49		 dec	 ecx
  0027e	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00281	41		 inc	 ecx
$LN112@LoadString@9:
  00282	b2 ed		 mov	 dl, -19			; ffffffedH
  00284	2a d1		 sub	 dl, cl
  00286	30 54 05 e0	 xor	 BYTE PTR __k$[ebp+eax], dl
  0028a	40		 inc	 eax
  0028b	83 f8 16	 cmp	 eax, 22			; 00000016H
  0028e	7c e3		 jl	 SHORT $LL101@LoadString@9

; 163  : 		LoadString(_k, d, b, i);

  00290	ff 75 14	 push	 DWORD PTR _i$[ebp]
  00293	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00296	57		 push	 edi
  00297	56		 push	 esi
  00298	8d 45 e0	 lea	 eax, DWORD PTR __k$[ebp]
  0029b	50		 push	 eax
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z

; 164  : 	}

  002a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a5	5f		 pop	 edi
  002a6	5e		 pop	 esi
  002a7	33 cd		 xor	 ecx, ebp
  002a9	5b		 pop	 ebx
  002aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002af	c9		 leave
  002b0	c2 10 00	 ret	 16			; 00000010H
??$LoadString_e@$0BH@@ioINILoader@@QAEXAAY0BH@$$CBDAAY00$$CBDPADH@Z ENDP ; ioINILoader::LoadString_e<23>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z ; ioINILoader::LoadFloat_e<27>
; Function compile flags: /Ogsp
;	COMDAT ??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -36						; size = 27
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<27>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	84 d2		 test	 dl, dl
  0001b	0f 84 91 02 00
	00		 je	 $LN96@LoadFloat_@5
  00021	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00024	88 55 dc	 mov	 BYTE PTR __k$[ebp], dl
  00027	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0002a	84 d2		 test	 dl, dl
  0002c	0f 84 7a 02 00
	00		 je	 $LN95@LoadFloat_@5
  00032	b1 ec		 mov	 cl, -20			; ffffffecH
  00034	32 d1		 xor	 dl, cl
  00036	88 55 dd	 mov	 BYTE PTR __k$[ebp+1], dl
  00039	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003c	84 d2		 test	 dl, dl
  0003e	0f 84 62 02 00
	00		 je	 $LN94@LoadFloat_@5
  00044	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00047	88 55 de	 mov	 BYTE PTR __k$[ebp+2], dl
  0004a	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004d	84 d2		 test	 dl, dl
  0004f	0f 84 4b 02 00
	00		 je	 $LN93@LoadFloat_@5
  00055	b3 ea		 mov	 bl, -22			; ffffffeaH
  00057	32 d3		 xor	 dl, bl
  00059	88 55 df	 mov	 BYTE PTR __k$[ebp+3], dl
  0005c	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005f	84 d2		 test	 dl, dl
  00061	0f 84 33 02 00
	00		 je	 $LN92@LoadFloat_@5
  00067	80 f2 ed	 xor	 dl, -19			; ffffffedH
  0006a	88 55 e0	 mov	 BYTE PTR __k$[ebp+4], dl
  0006d	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  00070	84 d2		 test	 dl, dl
  00072	0f 84 1d 02 00
	00		 je	 $LN91@LoadFloat_@5
  00078	32 d1		 xor	 dl, cl
  0007a	88 55 e1	 mov	 BYTE PTR __k$[ebp+5], dl
  0007d	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  00080	84 d2		 test	 dl, dl
  00082	0f 84 07 02 00
	00		 je	 $LN90@LoadFloat_@5
  00088	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0008b	88 55 e2	 mov	 BYTE PTR __k$[ebp+6], dl
  0008e	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  00091	84 d2		 test	 dl, dl
  00093	0f 84 f1 01 00
	00		 je	 $LN89@LoadFloat_@5
  00099	32 d3		 xor	 dl, bl
  0009b	88 55 e3	 mov	 BYTE PTR __k$[ebp+7], dl
  0009e	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a1	84 d2		 test	 dl, dl
  000a3	0f 84 db 01 00
	00		 je	 $LN88@LoadFloat_@5
  000a9	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ac	88 55 e4	 mov	 BYTE PTR __k$[ebp+8], dl
  000af	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b2	84 d2		 test	 dl, dl
  000b4	0f 84 c5 01 00
	00		 je	 $LN87@LoadFloat_@5
  000ba	32 d1		 xor	 dl, cl
  000bc	88 55 e5	 mov	 BYTE PTR __k$[ebp+9], dl
  000bf	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c2	84 d2		 test	 dl, dl
  000c4	0f 84 af 01 00
	00		 je	 $LN86@LoadFloat_@5
  000ca	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cd	88 55 e6	 mov	 BYTE PTR __k$[ebp+10], dl
  000d0	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d3	84 d2		 test	 dl, dl
  000d5	0f 84 99 01 00
	00		 je	 $LN85@LoadFloat_@5
  000db	32 d3		 xor	 dl, bl
  000dd	88 55 e7	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 83 01 00
	00		 je	 $LN84@LoadFloat_@5
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 e8	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 6d 01 00
	00		 je	 $LN83@LoadFloat_@5
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 e9	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 57 01 00
	00		 je	 $LN82@LoadFloat_@5
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 ea	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	0f 84 41 01 00
	00		 je	 $LN81@LoadFloat_@5
  0011d	32 d3		 xor	 dl, bl
  0011f	88 55 eb	 mov	 BYTE PTR __k$[ebp+15], dl
  00122	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00125	84 d2		 test	 dl, dl
  00127	0f 84 2b 01 00
	00		 je	 $LN80@LoadFloat_@5
  0012d	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00130	88 55 ec	 mov	 BYTE PTR __k$[ebp+16], dl
  00133	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00136	84 d2		 test	 dl, dl
  00138	0f 84 15 01 00
	00		 je	 $LN79@LoadFloat_@5
  0013e	32 d1		 xor	 dl, cl
  00140	88 55 ed	 mov	 BYTE PTR __k$[ebp+17], dl
  00143	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00146	84 d2		 test	 dl, dl
  00148	0f 84 ff 00 00
	00		 je	 $LN78@LoadFloat_@5
  0014e	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00151	88 55 ee	 mov	 BYTE PTR __k$[ebp+18], dl
  00154	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00157	84 d2		 test	 dl, dl
  00159	0f 84 e9 00 00
	00		 je	 $LN77@LoadFloat_@5
  0015f	32 d3		 xor	 dl, bl
  00161	88 55 ef	 mov	 BYTE PTR __k$[ebp+19], dl
  00164	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00167	84 d2		 test	 dl, dl
  00169	0f 84 d3 00 00
	00		 je	 $LN76@LoadFloat_@5
  0016f	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00172	88 55 f0	 mov	 BYTE PTR __k$[ebp+20], dl
  00175	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00178	84 d2		 test	 dl, dl
  0017a	0f 84 bd 00 00
	00		 je	 $LN75@LoadFloat_@5
  00180	32 d1		 xor	 dl, cl
  00182	88 55 f1	 mov	 BYTE PTR __k$[ebp+21], dl
  00185	8a 50 16	 mov	 dl, BYTE PTR [eax+22]
  00188	84 d2		 test	 dl, dl
  0018a	0f 84 a7 00 00
	00		 je	 $LN74@LoadFloat_@5
  00190	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00193	88 55 f2	 mov	 BYTE PTR __k$[ebp+22], dl
  00196	8a 50 17	 mov	 dl, BYTE PTR [eax+23]
  00199	84 d2		 test	 dl, dl
  0019b	0f 84 91 00 00
	00		 je	 $LN73@LoadFloat_@5
  001a1	32 d3		 xor	 dl, bl
  001a3	88 55 f3	 mov	 BYTE PTR __k$[ebp+23], dl
  001a6	8a 50 18	 mov	 dl, BYTE PTR [eax+24]
  001a9	84 d2		 test	 dl, dl
  001ab	74 7c		 je	 SHORT $LN72@LoadFloat_@5
  001ad	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001b0	88 55 f4	 mov	 BYTE PTR __k$[ebp+24], dl
  001b3	8a 50 19	 mov	 dl, BYTE PTR [eax+25]
  001b6	84 d2		 test	 dl, dl
  001b8	74 67		 je	 SHORT $LN71@LoadFloat_@5
  001ba	32 d1		 xor	 dl, cl
  001bc	80 78 1a 00	 cmp	 BYTE PTR [eax+26], 0
  001c0	88 55 f5	 mov	 BYTE PTR __k$[ebp+25], dl
  001c3	0f 84 ed 00 00
	00		 je	 $LN1@LoadFloat_@5
  001c9	8a 50 1b	 mov	 dl, BYTE PTR [eax+27]
  001cc	84 d2		 test	 dl, dl
  001ce	74 49		 je	 SHORT $LN69@LoadFloat_@5
  001d0	32 d3		 xor	 dl, bl
  001d2	88 55 f7	 mov	 BYTE PTR __k$[ebp+27], dl
  001d5	8a 50 1c	 mov	 dl, BYTE PTR [eax+28]
  001d8	84 d2		 test	 dl, dl
  001da	74 34		 je	 SHORT $LN68@LoadFloat_@5
  001dc	80 f2 ed	 xor	 dl, -19			; ffffffedH
  001df	88 55 f8	 mov	 BYTE PTR __k$[ebp+28], dl
  001e2	8a 50 1d	 mov	 dl, BYTE PTR [eax+29]
  001e5	84 d2		 test	 dl, dl
  001e7	74 1f		 je	 SHORT $LN67@LoadFloat_@5
  001e9	8a 40 1e	 mov	 al, BYTE PTR [eax+30]
  001ec	32 d1		 xor	 dl, cl
  001ee	88 55 f9	 mov	 BYTE PTR __k$[ebp+29], dl
  001f1	84 c0		 test	 al, al
  001f3	74 0a		 je	 SHORT $LN66@LoadFloat_@5
  001f5	34 eb		 xor	 al, -21			; ffffffebH
  001f7	88 45 fa	 mov	 BYTE PTR __k$[ebp+30], al
  001fa	e9 b7 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN66@LoadFloat_@5:
  001ff	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+30], -21 ; ffffffebH
  00203	e9 ae 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN67@LoadFloat_@5:
  00208	88 4d f9	 mov	 BYTE PTR __k$[ebp+29], cl
  0020b	e9 a6 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN68@LoadFloat_@5:
  00210	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+28], -19 ; ffffffedH
  00214	e9 9d 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN69@LoadFloat_@5:
  00219	88 5d f7	 mov	 BYTE PTR __k$[ebp+27], bl
  0021c	e9 95 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN71@LoadFloat_@5:
  00221	88 4d f5	 mov	 BYTE PTR __k$[ebp+25], cl
  00224	e9 8d 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN72@LoadFloat_@5:
  00229	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+24], -19 ; ffffffedH
  0022d	e9 84 00 00 00	 jmp	 $LN1@LoadFloat_@5
$LN73@LoadFloat_@5:
  00232	88 5d f3	 mov	 BYTE PTR __k$[ebp+23], bl
  00235	eb 7f		 jmp	 SHORT $LN1@LoadFloat_@5
$LN74@LoadFloat_@5:
  00237	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0023b	eb 79		 jmp	 SHORT $LN1@LoadFloat_@5
$LN75@LoadFloat_@5:
  0023d	88 4d f1	 mov	 BYTE PTR __k$[ebp+21], cl
  00240	eb 74		 jmp	 SHORT $LN1@LoadFloat_@5
$LN76@LoadFloat_@5:
  00242	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00246	eb 6e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN77@LoadFloat_@5:
  00248	88 5d ef	 mov	 BYTE PTR __k$[ebp+19], bl
  0024b	eb 69		 jmp	 SHORT $LN1@LoadFloat_@5
$LN78@LoadFloat_@5:
  0024d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00251	eb 63		 jmp	 SHORT $LN1@LoadFloat_@5
$LN79@LoadFloat_@5:
  00253	88 4d ed	 mov	 BYTE PTR __k$[ebp+17], cl
  00256	eb 5e		 jmp	 SHORT $LN1@LoadFloat_@5
$LN80@LoadFloat_@5:
  00258	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  0025c	eb 58		 jmp	 SHORT $LN1@LoadFloat_@5
$LN81@LoadFloat_@5:
  0025e	88 5d eb	 mov	 BYTE PTR __k$[ebp+15], bl
  00261	eb 53		 jmp	 SHORT $LN1@LoadFloat_@5
$LN82@LoadFloat_@5:
  00263	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  00267	eb 4d		 jmp	 SHORT $LN1@LoadFloat_@5
$LN83@LoadFloat_@5:
  00269	88 4d e9	 mov	 BYTE PTR __k$[ebp+13], cl
  0026c	eb 48		 jmp	 SHORT $LN1@LoadFloat_@5
$LN84@LoadFloat_@5:
  0026e	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00272	eb 42		 jmp	 SHORT $LN1@LoadFloat_@5
$LN85@LoadFloat_@5:
  00274	88 5d e7	 mov	 BYTE PTR __k$[ebp+11], bl
  00277	eb 3d		 jmp	 SHORT $LN1@LoadFloat_@5
$LN86@LoadFloat_@5:
  00279	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  0027d	eb 37		 jmp	 SHORT $LN1@LoadFloat_@5
$LN87@LoadFloat_@5:
  0027f	88 4d e5	 mov	 BYTE PTR __k$[ebp+9], cl
  00282	eb 32		 jmp	 SHORT $LN1@LoadFloat_@5
$LN88@LoadFloat_@5:
  00284	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  00288	eb 2c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN89@LoadFloat_@5:
  0028a	88 5d e3	 mov	 BYTE PTR __k$[ebp+7], bl
  0028d	eb 27		 jmp	 SHORT $LN1@LoadFloat_@5
$LN90@LoadFloat_@5:
  0028f	c6 45 e2 eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  00293	eb 21		 jmp	 SHORT $LN1@LoadFloat_@5
$LN91@LoadFloat_@5:
  00295	88 4d e1	 mov	 BYTE PTR __k$[ebp+5], cl
  00298	eb 1c		 jmp	 SHORT $LN1@LoadFloat_@5
$LN92@LoadFloat_@5:
  0029a	c6 45 e0 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  0029e	eb 16		 jmp	 SHORT $LN1@LoadFloat_@5
$LN93@LoadFloat_@5:
  002a0	c6 45 df ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  002a4	eb 10		 jmp	 SHORT $LN1@LoadFloat_@5
$LN94@LoadFloat_@5:
  002a6	c6 45 de eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  002aa	eb 0a		 jmp	 SHORT $LN1@LoadFloat_@5
$LN95@LoadFloat_@5:
  002ac	c6 45 dd ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  002b0	eb 04		 jmp	 SHORT $LN1@LoadFloat_@5
$LN96@LoadFloat_@5:
  002b2	c6 45 dc ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_@5:
  002b6	6a 06		 push	 6
  002b8	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002bb	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+26], 0
  002bf	5a		 pop	 edx
$LL104@LoadFloat_@5:
  002c0	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  002c6	83 c0 04	 add	 eax, 4
  002c9	4a		 dec	 edx
  002ca	75 f4		 jne	 SHORT $LL104@LoadFloat_@5
  002cc	6a 18		 push	 24			; 00000018H
  002ce	58		 pop	 eax
$LL101@LoadFloat_@5:
  002cf	8b c8		 mov	 ecx, eax
  002d1	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  002d7	79 05		 jns	 SHORT $LN111@LoadFloat_@5
  002d9	49		 dec	 ecx
  002da	83 c9 fc	 or	 ecx, -4			; fffffffcH
  002dd	41		 inc	 ecx
$LN111@LoadFloat_@5:
  002de	b2 ed		 mov	 dl, -19			; ffffffedH
  002e0	2a d1		 sub	 dl, cl
  002e2	30 54 05 dc	 xor	 BYTE PTR __k$[ebp+eax], dl
  002e6	40		 inc	 eax
  002e7	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  002ea	7c e3		 jl	 SHORT $LL101@LoadFloat_@5

; 137  : 		return LoadFloat(_k, f);

  002ec	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  002f1	51		 push	 ecx
  002f2	8d 45 dc	 lea	 eax, DWORD PTR __k$[ebp]
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	50		 push	 eax
  002fb	8b ce		 mov	 ecx, esi
  002fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  00303	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00306	5e		 pop	 esi
  00307	33 cd		 xor	 ecx, ebp
  00309	5b		 pop	 ebx
  0030a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030f	c9		 leave
  00310	c2 08 00	 ret	 8
??$LoadFloat_e@$0BL@@ioINILoader@@QAEMAAY0BL@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<27>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ; ioINILoader::LoadBool_e<19>
EXTRN	__imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z
_TEXT	SEGMENT
__k$ = -28						; size = 19
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_b$ = 12						; size = 1
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z PROC ; ioINILoader::LoadBool_e<19>, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 102  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 cf 01 00
	00		 je	 $LN96@LoadBool_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 b8 01 00
	00		 je	 $LN95@LoadBool_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 a0 01 00
	00		 je	 $LN94@LoadBool_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 89 01 00
	00		 je	 $LN93@LoadBool_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 72 01 00
	00		 je	 $LN92@LoadBool_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 5c 01 00
	00		 je	 $LN91@LoadBool_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 46 01 00
	00		 je	 $LN90@LoadBool_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 2f 01 00
	00		 je	 $LN89@LoadBool_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 18 01 00
	00		 je	 $LN88@LoadBool_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 02 01 00
	00		 je	 $LN87@LoadBool_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 ec 00 00
	00		 je	 $LN86@LoadBool_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 d5 00 00
	00		 je	 $LN85@LoadBool_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 be 00 00
	00		 je	 $LN84@LoadBool_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 a8 00 00
	00		 je	 $LN83@LoadBool_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	0f 84 92 00 00
	00		 je	 $LN82@LoadBool_e
  0010c	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010f	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  00112	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00115	84 d2		 test	 dl, dl
  00117	74 7f		 je	 SHORT $LN81@LoadBool_e
  00119	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	8a 50 10	 mov	 dl, BYTE PTR [eax+16]
  00122	84 d2		 test	 dl, dl
  00124	74 6c		 je	 SHORT $LN80@LoadBool_e
  00126	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00129	88 55 f4	 mov	 BYTE PTR __k$[ebp+16], dl
  0012c	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  0012f	84 d2		 test	 dl, dl
  00131	74 5a		 je	 SHORT $LN79@LoadBool_e
  00133	32 d1		 xor	 dl, cl
  00135	80 78 12 00	 cmp	 BYTE PTR [eax+18], 0
  00139	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  0013c	0f 84 b1 00 00
	00		 je	 $LN1@LoadBool_e
  00142	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00145	84 d2		 test	 dl, dl
  00147	74 3e		 je	 SHORT $LN77@LoadBool_e
  00149	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014c	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014f	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  00152	84 d2		 test	 dl, dl
  00154	74 2b		 je	 SHORT $LN76@LoadBool_e
  00156	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00159	88 55 f8	 mov	 BYTE PTR __k$[ebp+20], dl
  0015c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0015f	84 d2		 test	 dl, dl
  00161	74 19		 je	 SHORT $LN75@LoadBool_e
  00163	8a 40 16	 mov	 al, BYTE PTR [eax+22]
  00166	32 d1		 xor	 dl, cl
  00168	88 55 f9	 mov	 BYTE PTR __k$[ebp+21], dl
  0016b	84 c0		 test	 al, al
  0016d	74 07		 je	 SHORT $LN74@LoadBool_e
  0016f	34 eb		 xor	 al, -21			; ffffffebH
  00171	88 45 fa	 mov	 BYTE PTR __k$[ebp+22], al
  00174	eb 7d		 jmp	 SHORT $LN1@LoadBool_e
$LN74@LoadBool_e:
  00176	c6 45 fa eb	 mov	 BYTE PTR __k$[ebp+22], -21 ; ffffffebH
  0017a	eb 77		 jmp	 SHORT $LN1@LoadBool_e
$LN75@LoadBool_e:
  0017c	88 4d f9	 mov	 BYTE PTR __k$[ebp+21], cl
  0017f	eb 72		 jmp	 SHORT $LN1@LoadBool_e
$LN76@LoadBool_e:
  00181	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  00185	eb 6c		 jmp	 SHORT $LN1@LoadBool_e
$LN77@LoadBool_e:
  00187	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  0018b	eb 66		 jmp	 SHORT $LN1@LoadBool_e
$LN79@LoadBool_e:
  0018d	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  00190	eb 61		 jmp	 SHORT $LN1@LoadBool_e
$LN80@LoadBool_e:
  00192	c6 45 f4 ed	 mov	 BYTE PTR __k$[ebp+16], -19 ; ffffffedH
  00196	eb 5b		 jmp	 SHORT $LN1@LoadBool_e
$LN81@LoadBool_e:
  00198	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  0019c	eb 55		 jmp	 SHORT $LN1@LoadBool_e
$LN82@LoadBool_e:
  0019e	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  001a2	eb 4f		 jmp	 SHORT $LN1@LoadBool_e
$LN83@LoadBool_e:
  001a4	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  001a7	eb 4a		 jmp	 SHORT $LN1@LoadBool_e
$LN84@LoadBool_e:
  001a9	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  001ad	eb 44		 jmp	 SHORT $LN1@LoadBool_e
$LN85@LoadBool_e:
  001af	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  001b3	eb 3e		 jmp	 SHORT $LN1@LoadBool_e
$LN86@LoadBool_e:
  001b5	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  001b9	eb 38		 jmp	 SHORT $LN1@LoadBool_e
$LN87@LoadBool_e:
  001bb	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  001be	eb 33		 jmp	 SHORT $LN1@LoadBool_e
$LN88@LoadBool_e:
  001c0	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  001c4	eb 2d		 jmp	 SHORT $LN1@LoadBool_e
$LN89@LoadBool_e:
  001c6	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001ca	eb 27		 jmp	 SHORT $LN1@LoadBool_e
$LN90@LoadBool_e:
  001cc	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001d0	eb 21		 jmp	 SHORT $LN1@LoadBool_e
$LN91@LoadBool_e:
  001d2	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001d5	eb 1c		 jmp	 SHORT $LN1@LoadBool_e
$LN92@LoadBool_e:
  001d7	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001db	eb 16		 jmp	 SHORT $LN1@LoadBool_e
$LN93@LoadBool_e:
  001dd	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001e1	eb 10		 jmp	 SHORT $LN1@LoadBool_e
$LN94@LoadBool_e:
  001e3	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001e7	eb 0a		 jmp	 SHORT $LN1@LoadBool_e
$LN95@LoadBool_e:
  001e9	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001ed	eb 04		 jmp	 SHORT $LN1@LoadBool_e
$LN96@LoadBool_e:
  001ef	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadBool_e:
  001f3	6a 04		 push	 4
  001f5	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001f8	c6 45 f6 00	 mov	 BYTE PTR __k$[ebp+18], 0
  001fc	5a		 pop	 edx
$LL104@LoadBool_e:
  001fd	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00203	83 c0 04	 add	 eax, 4
  00206	4a		 dec	 edx
  00207	75 f4		 jne	 SHORT $LL104@LoadBool_e
  00209	6a 10		 push	 16			; 00000010H
  0020b	58		 pop	 eax
$LL101@LoadBool_e:
  0020c	8b c8		 mov	 ecx, eax
  0020e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00214	79 05		 jns	 SHORT $LN111@LoadBool_e
  00216	49		 dec	 ecx
  00217	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0021a	41		 inc	 ecx
$LN111@LoadBool_e:
  0021b	b2 ed		 mov	 dl, -19			; ffffffedH
  0021d	2a d1		 sub	 dl, cl
  0021f	30 54 05 e4	 xor	 BYTE PTR __k$[ebp+eax], dl
  00223	40		 inc	 eax
  00224	83 f8 12	 cmp	 eax, 18			; 00000012H
  00227	7c e3		 jl	 SHORT $LL101@LoadBool_e

; 103  : 		return LoadBool(_k, b);

  00229	ff 75 0c	 push	 DWORD PTR _b$[ebp]
  0022c	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  0022f	50		 push	 eax
  00230	8b ce		 mov	 ecx, esi
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 104  : 	}

  00238	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5e		 pop	 esi
  0023e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00243	c9		 leave
  00244	c2 08 00	 ret	 8
??$LoadBool_e@$0BD@@ioINILoader@@QAE_NAAY0BD@$$CBD_N@Z ENDP ; ioINILoader::LoadBool_e<19>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_rkLoader$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4ioHashString@@QAEAAV0@PBD@Z:PROC
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
EXTRN	_memset:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iofrontbackwoundbuff.cpp
CONST	ENDS
;	COMDAT ?LoadProperty@ioFrontBackWoundBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$GSCopy$ = -308				; size = 4
tv18286 = -304						; size = 4
tv18266 = -304						; size = 4
tv18252 = -304						; size = 4
tv18234 = -304						; size = 4
tv18216 = -304						; size = 4
tv18196 = -304						; size = 4
_i$528971 = -304					; size = 4
_i$528522 = -304					; size = 4
_i$527764 = -304					; size = 4
_i$527385 = -304					; size = 4
_szBuf$ = -300						; size = 260
__k$529277 = -40					; size = 27
__k$528898 = -40					; size = 28
__k$528532 = -40					; size = 28
__k$528212 = -40					; size = 29
__k$529148 = -36					; size = 23
__k$528769 = -36					; size = 24
__k$528395 = -36					; size = 24
__k$528024 = -36					; size = 25
__k$527899 = -36					; size = 22
__k$527774 = -36					; size = 23
__k$527395 = -36					; size = 24
__k$529402 = -32					; size = 19
__k$529076 = -32					; size = 20
__k$528644 = -32					; size = 21
__k$528265 = -32					; size = 21
__k$527645 = -32					; size = 19
__k$527306 = -32					; size = 20
__k$527520 = -28					; size = 16
__k$527141 = -28					; size = 17
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioFrontBackWoundBuff@@UAEXAAVioINILoader@@@Z PROC ; ioFrontBackWoundBuff::LoadProperty, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _rkLoader$[ebp]
  00016	56		 push	 esi

; 26   : 	ioBuff::LoadProperty( rkLoader );

  00017	50		 push	 eax
  00018	8b f1		 mov	 esi, ecx

; 72   : 	rkLoader.LoadString_e( "air_back_attacker_buff", "", szBuf, MAX_PATH );

  0001a	89 85 cc fe ff
	ff		 mov	 DWORD PTR _rkLoader$GSCopy$[ebp], eax
  00020	e8 00 00 00 00	 call	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
  00025	68 03 01 00 00	 push	 259			; 00000103H
  0002a	8d 85 d5 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp+1]
  00030	6a 00		 push	 0
  00032	50		 push	 eax
  00033	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR _szBuf$[ebp], 0
  0003a	e8 00 00 00 00	 call	 _memset
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	6a 04		 push	 4
  00044	c7 45 e4 8b 9e
	84 84		 mov	 DWORD PTR __k$527141[ebp], -2071683445 ; 84849e8bH
  0004b	c7 45 e8 99 b3
	9c 85		 mov	 DWORD PTR __k$527141[ebp+4], -2053327975 ; 859cb399H
  00052	c7 45 ec 98 82
	8f b5		 mov	 DWORD PTR __k$527141[ebp+8], -1248886120 ; b58f8298H
  00059	c7 45 f0 8f 99
	8d 8c		 mov	 DWORD PTR __k$527141[ebp+12], -1936877169 ; 8c8d998fH
  00060	8d 45 e4	 lea	 eax, DWORD PTR __k$527141[ebp]
  00063	c6 45 f4 00	 mov	 BYTE PTR __k$527141[ebp+16], 0
  00067	59		 pop	 ecx
$LL106@LoadProper:

; 27   : 
; 28   : 	char szBuf[MAX_PATH] = "";
; 29   : 
; 30   : 	// Normal
; 31   : 	rkLoader.LoadString_e( "front_wound_buff", "", szBuf, MAX_PATH );

  00068	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0006e	83 c0 04	 add	 eax, 4
  00071	49		 dec	 ecx
  00072	75 f4		 jne	 SHORT $LL106@LoadProper
  00074	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0007a	53		 push	 ebx
  0007b	57		 push	 edi
  0007c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?LoadStringA@ioINILoader@@QAEXPBD0PADH@Z
  00082	68 04 01 00 00	 push	 260			; 00000104H
  00087	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00093	8d 45 e4	 lea	 eax, DWORD PTR __k$527141[ebp]
  00096	50		 push	 eax
  00097	ff d7		 call	 edi

; 32   : 	m_FrontBackWoundInfo.m_FrontBuff = szBuf;

  00099	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??4ioHashString@@QAEAAV0@PBD@Z
  0009f	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000a5	50		 push	 eax
  000a6	8d 8e 7c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2428]
  000ac	ff d3		 call	 ebx
  000ae	6a 04		 push	 4

; 33   : 	rkLoader.LoadString_e( "front_attacker_buff", "", szBuf, MAX_PATH );

  000b0	c7 45 e0 8b 9e
	84 84		 mov	 DWORD PTR __k$527306[ebp], -2071683445 ; 84849e8bH
  000b7	c7 45 e4 99 b3
	8a 9e		 mov	 DWORD PTR __k$527306[ebp+4], -1635077223 ; 9e8ab399H
  000be	c7 45 e8 99 8d
	88 81		 mov	 DWORD PTR __k$527306[ebp+8], -2121757287 ; 81888d99H
  000c5	c7 45 ec 88 9e
	b4 88		 mov	 DWORD PTR __k$527306[ebp+12], -2001428856 ; 88b49e88H
  000cc	8d 45 e0	 lea	 eax, DWORD PTR __k$527306[ebp]
  000cf	c7 45 f0 98 8a
	8d 00		 mov	 DWORD PTR __k$527306[ebp+16], 9276056 ; 008d8a98H
  000d6	59		 pop	 ecx
$LL212@LoadProper:
  000d7	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  000dd	83 c0 04	 add	 eax, 4
  000e0	49		 dec	 ecx
  000e1	75 f4		 jne	 SHORT $LL212@LoadProper
  000e3	6a 10		 push	 16			; 00000010H
  000e5	58		 pop	 eax
$LL209@LoadProper:
  000e6	8b c8		 mov	 ecx, eax
  000e8	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  000ee	79 05		 jns	 SHORT $LN2105@LoadProper
  000f0	49		 dec	 ecx
  000f1	83 c9 fc	 or	 ecx, -4			; fffffffcH
  000f4	41		 inc	 ecx
$LN2105@LoadProper:
  000f5	b2 ed		 mov	 dl, -19			; ffffffedH
  000f7	2a d1		 sub	 dl, cl
  000f9	30 54 05 e0	 xor	 BYTE PTR __k$527306[ebp+eax], dl
  000fd	40		 inc	 eax
  000fe	83 f8 13	 cmp	 eax, 19			; 00000013H
  00101	7c e3		 jl	 SHORT $LL209@LoadProper
  00103	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00109	68 04 01 00 00	 push	 260			; 00000104H
  0010e	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00114	50		 push	 eax
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0011a	8d 45 e0	 lea	 eax, DWORD PTR __k$527306[ebp]
  0011d	50		 push	 eax
  0011e	ff d7		 call	 edi

; 34   : 	m_FrontBackWoundInfo.m_FrontAttackerBuff = szBuf;

  00120	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00126	50		 push	 eax
  00127	8d 8e 8c 09 00
	00		 lea	 ecx, DWORD PTR [esi+2444]
  0012d	ff d3		 call	 ebx

; 35   : 
; 36   : 	m_FrontBackWoundInfo.m_fFrontDamageRate = rkLoader.LoadFloat_e( "front_wound_damage_rate", FLOAT1 );

  0012f	b8 01 00 00 00	 mov	 eax, 1
  00134	6a 05		 push	 5
  00136	c7 45 dc 8b 9e
	84 84		 mov	 DWORD PTR __k$527395[ebp], -2071683445 ; 84849e8bH
  0013d	c7 45 e0 99 b3
	9c 85		 mov	 DWORD PTR __k$527395[ebp+4], -2053327975 ; 859cb399H
  00144	c7 45 e4 98 82
	8f b5		 mov	 DWORD PTR __k$527395[ebp+8], -1248886120 ; b58f8298H
  0014b	c7 45 e8 89 8d
	86 8b		 mov	 DWORD PTR __k$527395[ebp+12], -1954116215 ; 8b868d89H
  00152	c7 45 ec 8a 89
	b4 98		 mov	 DWORD PTR __k$527395[ebp+16], -1732998774 ; 98b4898aH
  00159	8d 4d dc	 lea	 ecx, DWORD PTR __k$527395[ebp]
  0015c	c7 45 f0 8c 98
	8e 00		 mov	 DWORD PTR __k$527395[ebp+20], 9345164 ; 008e988cH
  00163	5a		 pop	 edx
$LL320@LoadProper:
  00164	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  0016a	83 c1 04	 add	 ecx, 4
  0016d	4a		 dec	 edx
  0016e	75 f4		 jne	 SHORT $LL320@LoadProper
  00170	c7 85 d0 fe ff
	ff 14 00 00 00	 mov	 DWORD PTR _i$527385[ebp], 20 ; 00000014H
$LL317@LoadProper:
  0017a	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$527385[ebp]
  00180	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00186	79 05		 jns	 SHORT $LN2106@LoadProper
  00188	49		 dec	 ecx
  00189	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0018c	41		 inc	 ecx
$LN2106@LoadProper:
  0018d	b2 ed		 mov	 dl, -19			; ffffffedH
  0018f	2a d1		 sub	 dl, cl
  00191	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$527385[ebp]
  00197	30 54 0d dc	 xor	 BYTE PTR __k$527395[ebp+ecx], dl
  0019b	ff 85 d0 fe ff
	ff		 inc	 DWORD PTR _i$527385[ebp]
  001a1	83 bd d0 fe ff
	ff 17		 cmp	 DWORD PTR _i$527385[ebp], 23 ; 00000017H
  001a8	7c d0		 jl	 SHORT $LL317@LoadProper
  001aa	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv18286[ebp], eax
  001b0	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv18286[ebp]
  001b6	85 c0		 test	 eax, eax
  001b8	79 06		 jns	 SHORT $LN2107@LoadProper
  001ba	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2107@LoadProper:
  001c0	51		 push	 ecx
  001c1	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  001c7	d9 1c 24	 fstp	 DWORD PTR [esp]
  001ca	8d 45 dc	 lea	 eax, DWORD PTR __k$527395[ebp]
  001cd	50		 push	 eax
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  001d4	d9 9e 9c 09 00
	00		 fstp	 DWORD PTR [esi+2460]
  001da	6a 03		 push	 3

; 37   : 
; 38   : 	rkLoader.LoadString_e( "back_wound_buff", "", szBuf, MAX_PATH );

  001dc	c7 45 e4 8f 8d
	88 81		 mov	 DWORD PTR __k$527520[ebp], -2121757297 ; 81888d8fH
  001e3	c7 45 e8 b2 9b
	84 9f		 mov	 DWORD PTR __k$527520[ebp+4], -1618699342 ; 9f849bb2H
  001ea	c7 45 ec 83 88
	b4 88		 mov	 DWORD PTR __k$527520[ebp+8], -2001434493 ; 88b48883H
  001f1	8d 45 e4	 lea	 eax, DWORD PTR __k$527520[ebp]
  001f4	c7 45 f0 98 8a
	8d 00		 mov	 DWORD PTR __k$527520[ebp+12], 9276056 ; 008d8a98H
  001fb	59		 pop	 ecx
$LL426@LoadProper:
  001fc	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00202	83 c0 04	 add	 eax, 4
  00205	49		 dec	 ecx
  00206	75 f4		 jne	 SHORT $LL426@LoadProper
  00208	6a 0c		 push	 12			; 0000000cH
  0020a	58		 pop	 eax
$LL423@LoadProper:
  0020b	8b c8		 mov	 ecx, eax
  0020d	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00213	79 05		 jns	 SHORT $LN2108@LoadProper
  00215	49		 dec	 ecx
  00216	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00219	41		 inc	 ecx
$LN2108@LoadProper:
  0021a	b2 ed		 mov	 dl, -19			; ffffffedH
  0021c	2a d1		 sub	 dl, cl
  0021e	30 54 05 e4	 xor	 BYTE PTR __k$527520[ebp+eax], dl
  00222	40		 inc	 eax
  00223	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00226	7c e3		 jl	 SHORT $LL423@LoadProper
  00228	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0022e	68 04 01 00 00	 push	 260			; 00000104H
  00233	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00239	50		 push	 eax
  0023a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0023f	8d 45 e4	 lea	 eax, DWORD PTR __k$527520[ebp]
  00242	50		 push	 eax
  00243	ff d7		 call	 edi

; 39   : 	m_FrontBackWoundInfo.m_BackBuff = szBuf;

  00245	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0024b	50		 push	 eax
  0024c	8d 8e a0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2464]
  00252	ff d3		 call	 ebx
  00254	6a 04		 push	 4

; 40   : 	rkLoader.LoadString_e( "back_attacker_buff", "", szBuf, MAX_PATH );

  00256	c7 45 e0 8f 8d
	88 81		 mov	 DWORD PTR __k$527645[ebp], -2121757297 ; 81888d8fH
  0025d	c7 45 e4 b2 8d
	9f 9e		 mov	 DWORD PTR __k$527645[ebp+4], -1633710670 ; 9e9f8db2H
  00264	c7 45 e8 8c 8f
	80 8f		 mov	 DWORD PTR __k$527645[ebp+8], -1887400052 ; 8f808f8cH
  0026b	c7 45 ec 9f b3
	89 9f		 mov	 DWORD PTR __k$527645[ebp+12], -1618365537 ; 9f89b39fH
  00272	66 c7 45 f0 8b
	8a		 mov	 WORD PTR __k$527645[ebp+16], 35467 ; 00008a8bH
  00278	8d 45 e0	 lea	 eax, DWORD PTR __k$527645[ebp]
  0027b	c6 45 f2 00	 mov	 BYTE PTR __k$527645[ebp+18], 0
  0027f	59		 pop	 ecx
$LL532@LoadProper:
  00280	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00286	83 c0 04	 add	 eax, 4
  00289	49		 dec	 ecx
  0028a	75 f4		 jne	 SHORT $LL532@LoadProper
  0028c	6a 10		 push	 16			; 00000010H
  0028e	58		 pop	 eax
$LL529@LoadProper:
  0028f	8b c8		 mov	 ecx, eax
  00291	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00297	79 05		 jns	 SHORT $LN2109@LoadProper
  00299	49		 dec	 ecx
  0029a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0029d	41		 inc	 ecx
$LN2109@LoadProper:
  0029e	b2 ed		 mov	 dl, -19			; ffffffedH
  002a0	2a d1		 sub	 dl, cl
  002a2	30 54 05 e0	 xor	 BYTE PTR __k$527645[ebp+eax], dl
  002a6	40		 inc	 eax
  002a7	83 f8 12	 cmp	 eax, 18			; 00000012H
  002aa	7c e3		 jl	 SHORT $LL529@LoadProper
  002ac	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  002b2	68 04 01 00 00	 push	 260			; 00000104H
  002b7	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002bd	50		 push	 eax
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  002c3	8d 45 e0	 lea	 eax, DWORD PTR __k$527645[ebp]
  002c6	50		 push	 eax
  002c7	ff d7		 call	 edi

; 41   : 	m_FrontBackWoundInfo.m_BackAttackerBuff = szBuf;

  002c9	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  002cf	50		 push	 eax
  002d0	8d 8e b0 09 00
	00		 lea	 ecx, DWORD PTR [esi+2480]
  002d6	ff d3		 call	 ebx

; 42   : 
; 43   : 	m_FrontBackWoundInfo.m_fBackDamageRate = rkLoader.LoadFloat_e( "back_wound_damage_rate", FLOAT1 );

  002d8	b8 01 00 00 00	 mov	 eax, 1
  002dd	6a 05		 push	 5
  002df	c7 45 dc 8f 8d
	88 81		 mov	 DWORD PTR __k$527774[ebp], -2121757297 ; 81888d8fH
  002e6	c7 45 e0 b2 9b
	84 9f		 mov	 DWORD PTR __k$527774[ebp+4], -1618699342 ; 9f849bb2H
  002ed	c7 45 e4 83 88
	b4 8e		 mov	 DWORD PTR __k$527774[ebp+8], -1900771197 ; 8eb48883H
  002f4	c7 45 e8 8c 81
	8a 8d		 mov	 DWORD PTR __k$527774[ebp+12], -1920302708 ; 8d8a818cH
  002fb	c7 45 ec 88 b3
	99 8b		 mov	 DWORD PTR __k$527774[ebp+16], -1952861304 ; 8b99b388H
  00302	66 c7 45 f0 99
	89		 mov	 WORD PTR __k$527774[ebp+20], 35225 ; 00008999H
  00308	8d 4d dc	 lea	 ecx, DWORD PTR __k$527774[ebp]
  0030b	c6 45 f2 00	 mov	 BYTE PTR __k$527774[ebp+22], 0
  0030f	5a		 pop	 edx
$LL640@LoadProper:
  00310	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00316	83 c1 04	 add	 ecx, 4
  00319	4a		 dec	 edx
  0031a	75 f4		 jne	 SHORT $LL640@LoadProper
  0031c	c7 85 d0 fe ff
	ff 14 00 00 00	 mov	 DWORD PTR _i$527764[ebp], 20 ; 00000014H
$LL637@LoadProper:
  00326	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$527764[ebp]
  0032c	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00332	79 05		 jns	 SHORT $LN2110@LoadProper
  00334	49		 dec	 ecx
  00335	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00338	41		 inc	 ecx
$LN2110@LoadProper:
  00339	b2 ed		 mov	 dl, -19			; ffffffedH
  0033b	2a d1		 sub	 dl, cl
  0033d	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$527764[ebp]
  00343	30 54 0d dc	 xor	 BYTE PTR __k$527774[ebp+ecx], dl
  00347	ff 85 d0 fe ff
	ff		 inc	 DWORD PTR _i$527764[ebp]
  0034d	83 bd d0 fe ff
	ff 16		 cmp	 DWORD PTR _i$527764[ebp], 22 ; 00000016H
  00354	7c d0		 jl	 SHORT $LL637@LoadProper
  00356	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv18266[ebp], eax
  0035c	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv18266[ebp]
  00362	85 c0		 test	 eax, eax
  00364	79 06		 jns	 SHORT $LN2111@LoadProper
  00366	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2111@LoadProper:
  0036c	51		 push	 ecx
  0036d	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00373	d9 1c 24	 fstp	 DWORD PTR [esp]
  00376	8d 45 dc	 lea	 eax, DWORD PTR __k$527774[ebp]
  00379	50		 push	 eax
  0037a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00380	d9 9e c0 09 00
	00		 fstp	 DWORD PTR [esi+2496]
  00386	6a 05		 push	 5

; 44   : 
; 45   : 
; 46   : 	// Down
; 47   : 	rkLoader.LoadString_e( "down_front_wound_buff", "", szBuf, MAX_PATH );

  00388	c7 45 dc 89 83
	9c 84		 mov	 DWORD PTR __k$527899[ebp], -2070117495 ; 849c8389H
  0038f	c7 45 e0 b2 8a
	99 85		 mov	 DWORD PTR __k$527899[ebp+4], -2053535054 ; 85998ab2H
  00396	c7 45 e4 83 98
	b4 9d		 mov	 DWORD PTR __k$527899[ebp+8], -1649108861 ; 9db49883H
  0039d	c7 45 e8 82 99
	85 8e		 mov	 DWORD PTR __k$527899[ebp+12], -1903847038 ; 8e859982H
  003a4	c7 45 ec b2 8e
	9e 8c		 mov	 DWORD PTR __k$527899[ebp+16], -1935765838 ; 8c9e8eb2H
  003ab	8d 45 dc	 lea	 eax, DWORD PTR __k$527899[ebp]
  003ae	66 c7 45 f0 8b
	00		 mov	 WORD PTR __k$527899[ebp+20], 139 ; 0000008bH
  003b4	59		 pop	 ecx
$LL746@LoadProper:
  003b5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  003bb	83 c0 04	 add	 eax, 4
  003be	49		 dec	 ecx
  003bf	75 f4		 jne	 SHORT $LL746@LoadProper
  003c1	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  003c7	80 75 f0 ed	 xor	 BYTE PTR __k$527899[ebp+20], -19 ; ffffffedH
  003cb	68 04 01 00 00	 push	 260			; 00000104H
  003d0	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003d6	50		 push	 eax
  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  003dc	8d 45 dc	 lea	 eax, DWORD PTR __k$527899[ebp]
  003df	50		 push	 eax
  003e0	ff d7		 call	 edi

; 48   : 	m_FrontBackWoundInfo.m_DownFrontBuff = szBuf;

  003e2	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  003e8	50		 push	 eax
  003e9	8d 8e c4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2500]
  003ef	ff d3		 call	 ebx
  003f1	6a 06		 push	 6

; 49   : 	rkLoader.LoadString_e( "down_front_attacker_buff", "", szBuf, MAX_PATH );

  003f3	c7 45 dc 89 83
	9c 84		 mov	 DWORD PTR __k$528024[ebp], -2070117495 ; 849c8389H
  003fa	c7 45 e0 b2 8a
	99 85		 mov	 DWORD PTR __k$528024[ebp+4], -2053535054 ; 85998ab2H
  00401	c7 45 e4 83 98
	b4 8b		 mov	 DWORD PTR __k$528024[ebp+8], -1951098749 ; 8bb49883H
  00408	c7 45 e8 99 98
	8a 89		 mov	 DWORD PTR __k$528024[ebp+12], -1987405671 ; 898a9899H
  0040f	c7 45 ec 86 89
	99 b5		 mov	 DWORD PTR __k$528024[ebp+16], -1248228986 ; b5998986H
  00416	c7 45 f0 8f 99
	8d 8c		 mov	 DWORD PTR __k$528024[ebp+20], -1936877169 ; 8c8d998fH
  0041d	8d 45 dc	 lea	 eax, DWORD PTR __k$528024[ebp]
  00420	c6 45 f4 00	 mov	 BYTE PTR __k$528024[ebp+24], 0
  00424	59		 pop	 ecx
$LL852@LoadProper:
  00425	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0042b	83 c0 04	 add	 eax, 4
  0042e	49		 dec	 ecx
  0042f	75 f4		 jne	 SHORT $LL852@LoadProper
  00431	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00437	68 04 01 00 00	 push	 260			; 00000104H
  0043c	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00442	50		 push	 eax
  00443	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00448	8d 45 dc	 lea	 eax, DWORD PTR __k$528024[ebp]
  0044b	50		 push	 eax
  0044c	ff d7		 call	 edi

; 50   : 	m_FrontBackWoundInfo.m_DownFrontAttackerBuff = szBuf;

  0044e	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00454	50		 push	 eax
  00455	8d 8e d4 09 00
	00		 lea	 ecx, DWORD PTR [esi+2516]
  0045b	ff d3		 call	 ebx

; 51   : 
; 52   : 	m_FrontBackWoundInfo.m_fDownFrontDamageRate = rkLoader.LoadFloat_e( "down_front_wound_damage_rate", FLOAT1 );

  0045d	b8 01 00 00 00	 mov	 eax, 1
  00462	6a 07		 push	 7
  00464	c7 45 d8 89 83
	9c 84		 mov	 DWORD PTR __k$528212[ebp], -2070117495 ; 849c8389H
  0046b	c7 45 dc b2 8a
	99 85		 mov	 DWORD PTR __k$528212[ebp+4], -2053535054 ; 85998ab2H
  00472	c7 45 e0 83 98
	b4 9d		 mov	 DWORD PTR __k$528212[ebp+8], -1649108861 ; 9db49883H
  00479	c7 45 e4 82 99
	85 8e		 mov	 DWORD PTR __k$528212[ebp+12], -1903847038 ; 8e859982H
  00480	c7 45 e8 b2 88
	8a 87		 mov	 DWORD PTR __k$528212[ebp+16], -2020964174 ; 878a88b2H
  00487	c7 45 ec 8c 8b
	8e b5		 mov	 DWORD PTR __k$528212[ebp+20], -1248949364 ; b58e8b8cH
  0048e	c7 45 f0 9f 8d
	9f 8f		 mov	 DWORD PTR __k$528212[ebp+24], -1885368929 ; 8f9f8d9fH
  00495	8d 4d d8	 lea	 ecx, DWORD PTR __k$528212[ebp]
  00498	c6 45 f4 00	 mov	 BYTE PTR __k$528212[ebp+28], 0
  0049c	5a		 pop	 edx
$LL960@LoadProper:
  0049d	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  004a3	83 c1 04	 add	 ecx, 4
  004a6	4a		 dec	 edx
  004a7	75 f4		 jne	 SHORT $LL960@LoadProper
  004a9	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv18252[ebp], eax
  004af	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv18252[ebp]
  004b5	85 c0		 test	 eax, eax
  004b7	79 06		 jns	 SHORT $LN2112@LoadProper
  004b9	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2112@LoadProper:
  004bf	51		 push	 ecx
  004c0	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  004c6	d9 1c 24	 fstp	 DWORD PTR [esp]
  004c9	8d 45 d8	 lea	 eax, DWORD PTR __k$528212[ebp]
  004cc	50		 push	 eax
  004cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  004d3	d9 9e e4 09 00
	00		 fstp	 DWORD PTR [esi+2532]
  004d9	6a 05		 push	 5

; 53   : 
; 54   : 	rkLoader.LoadString_e( "down_back_wound_buff", "", szBuf, MAX_PATH );

  004db	c7 45 e0 89 83
	9c 84		 mov	 DWORD PTR __k$528265[ebp], -2070117495 ; 849c8389H
  004e2	c7 45 e4 b2 8e
	8a 89		 mov	 DWORD PTR __k$528265[ebp+4], -1987408206 ; 898a8eb2H
  004e9	c7 45 e8 86 b3
	9c 85		 mov	 DWORD PTR __k$528265[ebp+8], -2053327994 ; 859cb386H
  004f0	c7 45 ec 98 82
	8f b5		 mov	 DWORD PTR __k$528265[ebp+12], -1248886120 ; b58f8298H
  004f7	c7 45 f0 8f 99
	8d 8c		 mov	 DWORD PTR __k$528265[ebp+16], -1936877169 ; 8c8d998fH
  004fe	8d 45 e0	 lea	 eax, DWORD PTR __k$528265[ebp]
  00501	c6 45 f4 00	 mov	 BYTE PTR __k$528265[ebp+20], 0
  00505	59		 pop	 ecx
$LL1066@LoadProper:
  00506	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  0050c	83 c0 04	 add	 eax, 4
  0050f	49		 dec	 ecx
  00510	75 f4		 jne	 SHORT $LL1066@LoadProper
  00512	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00518	68 04 01 00 00	 push	 260			; 00000104H
  0051d	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00523	50		 push	 eax
  00524	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00529	8d 45 e0	 lea	 eax, DWORD PTR __k$528265[ebp]
  0052c	50		 push	 eax
  0052d	ff d7		 call	 edi

; 55   : 	m_FrontBackWoundInfo.m_DownBackBuff = szBuf;

  0052f	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00535	50		 push	 eax
  00536	8d 8e e8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2536]
  0053c	ff d3		 call	 ebx
  0053e	6a 05		 push	 5

; 56   : 	rkLoader.LoadString_e( "down_back_attacker_buff", "", szBuf, MAX_PATH );

  00540	c7 45 dc 89 83
	9c 84		 mov	 DWORD PTR __k$528395[ebp], -2070117495 ; 849c8389H
  00547	c7 45 e0 b2 8e
	8a 89		 mov	 DWORD PTR __k$528395[ebp+4], -1987408206 ; 898a8eb2H
  0054e	c7 45 e4 86 b3
	8a 9e		 mov	 DWORD PTR __k$528395[ebp+8], -1635077242 ; 9e8ab386H
  00555	c7 45 e8 99 8d
	88 81		 mov	 DWORD PTR __k$528395[ebp+12], -2121757287 ; 81888d99H
  0055c	c7 45 ec 88 9e
	b4 88		 mov	 DWORD PTR __k$528395[ebp+16], -2001428856 ; 88b49e88H
  00563	8d 45 dc	 lea	 eax, DWORD PTR __k$528395[ebp]
  00566	c7 45 f0 98 8a
	8d 00		 mov	 DWORD PTR __k$528395[ebp+20], 9276056 ; 008d8a98H
  0056d	59		 pop	 ecx
$LL1172@LoadProper:
  0056e	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00574	83 c0 04	 add	 eax, 4
  00577	49		 dec	 ecx
  00578	75 f4		 jne	 SHORT $LL1172@LoadProper
  0057a	6a 14		 push	 20			; 00000014H
  0057c	58		 pop	 eax
$LL1169@LoadProper:
  0057d	8b c8		 mov	 ecx, eax
  0057f	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00585	79 05		 jns	 SHORT $LN2113@LoadProper
  00587	49		 dec	 ecx
  00588	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0058b	41		 inc	 ecx
$LN2113@LoadProper:
  0058c	b2 ed		 mov	 dl, -19			; ffffffedH
  0058e	2a d1		 sub	 dl, cl
  00590	30 54 05 dc	 xor	 BYTE PTR __k$528395[ebp+eax], dl
  00594	40		 inc	 eax
  00595	83 f8 17	 cmp	 eax, 23			; 00000017H
  00598	7c e3		 jl	 SHORT $LL1169@LoadProper
  0059a	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  005a0	68 04 01 00 00	 push	 260			; 00000104H
  005a5	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  005ab	50		 push	 eax
  005ac	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  005b1	8d 45 dc	 lea	 eax, DWORD PTR __k$528395[ebp]
  005b4	50		 push	 eax
  005b5	ff d7		 call	 edi

; 57   : 	m_FrontBackWoundInfo.m_DownBackAttackerBuff = szBuf;

  005b7	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  005bd	50		 push	 eax
  005be	8d 8e f8 09 00
	00		 lea	 ecx, DWORD PTR [esi+2552]
  005c4	ff d3		 call	 ebx

; 58   : 
; 59   : 	m_FrontBackWoundInfo.m_fDownBackDamageRate = rkLoader.LoadFloat_e( "down_back_wound_damage_rate", FLOAT1 );

  005c6	b8 01 00 00 00	 mov	 eax, 1
  005cb	6a 06		 push	 6
  005cd	c7 45 d8 89 83
	9c 84		 mov	 DWORD PTR __k$528532[ebp], -2070117495 ; 849c8389H
  005d4	c7 45 dc b2 8e
	8a 89		 mov	 DWORD PTR __k$528532[ebp+4], -1987408206 ; 898a8eb2H
  005db	c7 45 e0 86 b3
	9c 85		 mov	 DWORD PTR __k$528532[ebp+8], -2053327994 ; 859cb386H
  005e2	c7 45 e4 98 82
	8f b5		 mov	 DWORD PTR __k$528532[ebp+12], -1248886120 ; b58f8298H
  005e9	c7 45 e8 89 8d
	86 8b		 mov	 DWORD PTR __k$528532[ebp+16], -1954116215 ; 8b868d89H
  005f0	c7 45 ec 8a 89
	b4 98		 mov	 DWORD PTR __k$528532[ebp+20], -1732998774 ; 98b4898aH
  005f7	8d 4d d8	 lea	 ecx, DWORD PTR __k$528532[ebp]
  005fa	c7 45 f0 8c 98
	8e 00		 mov	 DWORD PTR __k$528532[ebp+24], 9345164 ; 008e988cH
  00601	5a		 pop	 edx
$LL1280@LoadProper:
  00602	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  00608	83 c1 04	 add	 ecx, 4
  0060b	4a		 dec	 edx
  0060c	75 f4		 jne	 SHORT $LL1280@LoadProper
  0060e	c7 85 d0 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR _i$528522[ebp], 24 ; 00000018H
$LL1277@LoadProper:
  00618	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$528522[ebp]
  0061e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00624	79 05		 jns	 SHORT $LN2114@LoadProper
  00626	49		 dec	 ecx
  00627	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0062a	41		 inc	 ecx
$LN2114@LoadProper:
  0062b	b2 ed		 mov	 dl, -19			; ffffffedH
  0062d	2a d1		 sub	 dl, cl
  0062f	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$528522[ebp]
  00635	30 54 0d d8	 xor	 BYTE PTR __k$528532[ebp+ecx], dl
  00639	ff 85 d0 fe ff
	ff		 inc	 DWORD PTR _i$528522[ebp]
  0063f	83 bd d0 fe ff
	ff 1b		 cmp	 DWORD PTR _i$528522[ebp], 27 ; 0000001bH
  00646	7c d0		 jl	 SHORT $LL1277@LoadProper
  00648	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv18234[ebp], eax
  0064e	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv18234[ebp]
  00654	85 c0		 test	 eax, eax
  00656	79 06		 jns	 SHORT $LN2115@LoadProper
  00658	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2115@LoadProper:
  0065e	51		 push	 ecx
  0065f	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00665	d9 1c 24	 fstp	 DWORD PTR [esp]
  00668	8d 45 d8	 lea	 eax, DWORD PTR __k$528532[ebp]
  0066b	50		 push	 eax
  0066c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00672	d9 9e 08 0a 00
	00		 fstp	 DWORD PTR [esi+2568]
  00678	6a 05		 push	 5

; 60   : 
; 61   : 
; 62   : 	// Air
; 63   : 	rkLoader.LoadString_e( "air_front_wound_buff", "", szBuf, MAX_PATH );

  0067a	c7 45 e0 8c 85
	99 b5		 mov	 DWORD PTR __k$528644[ebp], -1248230004 ; b599858cH
  00681	c7 45 e4 8b 9e
	84 84		 mov	 DWORD PTR __k$528644[ebp+4], -2071683445 ; 84849e8bH
  00688	c7 45 e8 99 b3
	9c 85		 mov	 DWORD PTR __k$528644[ebp+8], -2053327975 ; 859cb399H
  0068f	c7 45 ec 98 82
	8f b5		 mov	 DWORD PTR __k$528644[ebp+12], -1248886120 ; b58f8298H
  00696	c7 45 f0 8f 99
	8d 8c		 mov	 DWORD PTR __k$528644[ebp+16], -1936877169 ; 8c8d998fH
  0069d	8d 45 e0	 lea	 eax, DWORD PTR __k$528644[ebp]
  006a0	c6 45 f4 00	 mov	 BYTE PTR __k$528644[ebp+20], 0
  006a4	59		 pop	 ecx
$LL1386@LoadProper:
  006a5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  006ab	83 c0 04	 add	 eax, 4
  006ae	49		 dec	 ecx
  006af	75 f4		 jne	 SHORT $LL1386@LoadProper
  006b1	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  006b7	68 04 01 00 00	 push	 260			; 00000104H
  006bc	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  006c2	50		 push	 eax
  006c3	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  006c8	8d 45 e0	 lea	 eax, DWORD PTR __k$528644[ebp]
  006cb	50		 push	 eax
  006cc	ff d7		 call	 edi

; 64   : 	m_FrontBackWoundInfo.m_AirFrontBuff = szBuf;

  006ce	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  006d4	50		 push	 eax
  006d5	8d 8e 0c 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2572]
  006db	ff d3		 call	 ebx
  006dd	6a 05		 push	 5

; 65   : 	rkLoader.LoadString_e( "air_front_attacker_buff", "", szBuf, MAX_PATH );

  006df	c7 45 dc 8c 85
	99 b5		 mov	 DWORD PTR __k$528769[ebp], -1248230004 ; b599858cH
  006e6	c7 45 e0 8b 9e
	84 84		 mov	 DWORD PTR __k$528769[ebp+4], -2071683445 ; 84849e8bH
  006ed	c7 45 e4 99 b3
	8a 9e		 mov	 DWORD PTR __k$528769[ebp+8], -1635077223 ; 9e8ab399H
  006f4	c7 45 e8 99 8d
	88 81		 mov	 DWORD PTR __k$528769[ebp+12], -2121757287 ; 81888d99H
  006fb	c7 45 ec 88 9e
	b4 88		 mov	 DWORD PTR __k$528769[ebp+16], -2001428856 ; 88b49e88H
  00702	8d 45 dc	 lea	 eax, DWORD PTR __k$528769[ebp]
  00705	c7 45 f0 98 8a
	8d 00		 mov	 DWORD PTR __k$528769[ebp+20], 9276056 ; 008d8a98H
  0070c	59		 pop	 ecx
$LL1492@LoadProper:
  0070d	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00713	83 c0 04	 add	 eax, 4
  00716	49		 dec	 ecx
  00717	75 f4		 jne	 SHORT $LL1492@LoadProper
  00719	6a 14		 push	 20			; 00000014H
  0071b	58		 pop	 eax
$LL1489@LoadProper:
  0071c	8b c8		 mov	 ecx, eax
  0071e	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00724	79 05		 jns	 SHORT $LN2116@LoadProper
  00726	49		 dec	 ecx
  00727	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0072a	41		 inc	 ecx
$LN2116@LoadProper:
  0072b	b2 ed		 mov	 dl, -19			; ffffffedH
  0072d	2a d1		 sub	 dl, cl
  0072f	30 54 05 dc	 xor	 BYTE PTR __k$528769[ebp+eax], dl
  00733	40		 inc	 eax
  00734	83 f8 17	 cmp	 eax, 23			; 00000017H
  00737	7c e3		 jl	 SHORT $LL1489@LoadProper
  00739	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  0073f	68 04 01 00 00	 push	 260			; 00000104H
  00744	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0074a	50		 push	 eax
  0074b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00750	8d 45 dc	 lea	 eax, DWORD PTR __k$528769[ebp]
  00753	50		 push	 eax
  00754	ff d7		 call	 edi

; 66   : 	m_FrontBackWoundInfo.m_AirFrontAttackerBuff = szBuf;

  00756	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0075c	50		 push	 eax
  0075d	8d 8e 1c 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2588]
  00763	ff d3		 call	 ebx

; 67   : 
; 68   : 	m_FrontBackWoundInfo.m_fAirFrontDamageRate = rkLoader.LoadFloat_e( "air_front_wound_damage_rate", FLOAT1 );

  00765	b8 01 00 00 00	 mov	 eax, 1
  0076a	6a 06		 push	 6
  0076c	c7 45 d8 8c 85
	99 b5		 mov	 DWORD PTR __k$528898[ebp], -1248230004 ; b599858cH
  00773	c7 45 dc 8b 9e
	84 84		 mov	 DWORD PTR __k$528898[ebp+4], -2071683445 ; 84849e8bH
  0077a	c7 45 e0 99 b3
	9c 85		 mov	 DWORD PTR __k$528898[ebp+8], -2053327975 ; 859cb399H
  00781	c7 45 e4 98 82
	8f b5		 mov	 DWORD PTR __k$528898[ebp+12], -1248886120 ; b58f8298H
  00788	c7 45 e8 89 8d
	86 8b		 mov	 DWORD PTR __k$528898[ebp+16], -1954116215 ; 8b868d89H
  0078f	c7 45 ec 8a 89
	b4 98		 mov	 DWORD PTR __k$528898[ebp+20], -1732998774 ; 98b4898aH
  00796	8d 4d d8	 lea	 ecx, DWORD PTR __k$528898[ebp]
  00799	c7 45 f0 8c 98
	8e 00		 mov	 DWORD PTR __k$528898[ebp+24], 9345164 ; 008e988cH
  007a0	5a		 pop	 edx
$LL1600@LoadProper:
  007a1	81 31 ed ec eb
	ea		 xor	 DWORD PTR [ecx], -353637139 ; eaebecedH
  007a7	83 c1 04	 add	 ecx, 4
  007aa	4a		 dec	 edx
  007ab	75 f4		 jne	 SHORT $LL1600@LoadProper
  007ad	c7 85 d0 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR _i$528971[ebp], 24 ; 00000018H
$LL1597@LoadProper:
  007b7	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$528971[ebp]
  007bd	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  007c3	79 05		 jns	 SHORT $LN2117@LoadProper
  007c5	49		 dec	 ecx
  007c6	83 c9 fc	 or	 ecx, -4			; fffffffcH
  007c9	41		 inc	 ecx
$LN2117@LoadProper:
  007ca	b2 ed		 mov	 dl, -19			; ffffffedH
  007cc	2a d1		 sub	 dl, cl
  007ce	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$528971[ebp]
  007d4	30 54 0d d8	 xor	 BYTE PTR __k$528898[ebp+ecx], dl
  007d8	ff 85 d0 fe ff
	ff		 inc	 DWORD PTR _i$528971[ebp]
  007de	83 bd d0 fe ff
	ff 1b		 cmp	 DWORD PTR _i$528971[ebp], 27 ; 0000001bH
  007e5	7c d0		 jl	 SHORT $LL1597@LoadProper
  007e7	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv18216[ebp], eax
  007ed	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv18216[ebp]
  007f3	85 c0		 test	 eax, eax
  007f5	79 06		 jns	 SHORT $LN2118@LoadProper
  007f7	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2118@LoadProper:
  007fd	51		 push	 ecx
  007fe	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00804	d9 1c 24	 fstp	 DWORD PTR [esp]
  00807	8d 45 d8	 lea	 eax, DWORD PTR __k$528898[ebp]
  0080a	50		 push	 eax
  0080b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00811	d9 9e 2c 0a 00
	00		 fstp	 DWORD PTR [esi+2604]
  00817	6a 04		 push	 4

; 69   : 
; 70   : 	rkLoader.LoadString_e( "air_back_wound_buff", "", szBuf, MAX_PATH );

  00819	c7 45 e0 8c 85
	99 b5		 mov	 DWORD PTR __k$529076[ebp], -1248230004 ; b599858cH
  00820	c7 45 e4 8f 8d
	88 81		 mov	 DWORD PTR __k$529076[ebp+4], -2121757297 ; 81888d8fH
  00827	c7 45 e8 b2 9b
	84 9f		 mov	 DWORD PTR __k$529076[ebp+8], -1618699342 ; 9f849bb2H
  0082e	c7 45 ec 83 88
	b4 88		 mov	 DWORD PTR __k$529076[ebp+12], -2001434493 ; 88b48883H
  00835	8d 45 e0	 lea	 eax, DWORD PTR __k$529076[ebp]
  00838	c7 45 f0 98 8a
	8d 00		 mov	 DWORD PTR __k$529076[ebp+16], 9276056 ; 008d8a98H
  0083f	59		 pop	 ecx
$LL1706@LoadProper:
  00840	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00846	83 c0 04	 add	 eax, 4
  00849	49		 dec	 ecx
  0084a	75 f4		 jne	 SHORT $LL1706@LoadProper
  0084c	6a 10		 push	 16			; 00000010H
  0084e	58		 pop	 eax
$LL1703@LoadProper:
  0084f	8b c8		 mov	 ecx, eax
  00851	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00857	79 05		 jns	 SHORT $LN2119@LoadProper
  00859	49		 dec	 ecx
  0085a	83 c9 fc	 or	 ecx, -4			; fffffffcH
  0085d	41		 inc	 ecx
$LN2119@LoadProper:
  0085e	b2 ed		 mov	 dl, -19			; ffffffedH
  00860	2a d1		 sub	 dl, cl
  00862	30 54 05 e0	 xor	 BYTE PTR __k$529076[ebp+eax], dl
  00866	40		 inc	 eax
  00867	83 f8 13	 cmp	 eax, 19			; 00000013H
  0086a	7c e3		 jl	 SHORT $LL1703@LoadProper
  0086c	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00872	68 04 01 00 00	 push	 260			; 00000104H
  00877	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0087d	50		 push	 eax
  0087e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00883	8d 45 e0	 lea	 eax, DWORD PTR __k$529076[ebp]
  00886	50		 push	 eax
  00887	ff d7		 call	 edi

; 71   : 	m_FrontBackWoundInfo.m_AirBackBuff = szBuf;

  00889	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0088f	50		 push	 eax
  00890	8d 8e 30 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2608]
  00896	ff d3		 call	 ebx
  00898	6a 05		 push	 5

; 72   : 	rkLoader.LoadString_e( "air_back_attacker_buff", "", szBuf, MAX_PATH );

  0089a	c7 45 dc 8c 85
	99 b5		 mov	 DWORD PTR __k$529148[ebp], -1248230004 ; b599858cH
  008a1	c7 45 e0 8f 8d
	88 81		 mov	 DWORD PTR __k$529148[ebp+4], -2121757297 ; 81888d8fH
  008a8	c7 45 e4 b2 8d
	9f 9e		 mov	 DWORD PTR __k$529148[ebp+8], -1633710670 ; 9e9f8db2H
  008af	c7 45 e8 8c 8f
	80 8f		 mov	 DWORD PTR __k$529148[ebp+12], -1887400052 ; 8f808f8cH
  008b6	c7 45 ec 9f b3
	89 9f		 mov	 DWORD PTR __k$529148[ebp+16], -1618365537 ; 9f89b39fH
  008bd	66 c7 45 f0 8b
	8a		 mov	 WORD PTR __k$529148[ebp+20], 35467 ; 00008a8bH
  008c3	8d 45 dc	 lea	 eax, DWORD PTR __k$529148[ebp]
  008c6	c6 45 f2 00	 mov	 BYTE PTR __k$529148[ebp+22], 0
  008ca	59		 pop	 ecx
$LL1812@LoadProper:
  008cb	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  008d1	83 c0 04	 add	 eax, 4
  008d4	49		 dec	 ecx
  008d5	75 f4		 jne	 SHORT $LL1812@LoadProper
  008d7	6a 14		 push	 20			; 00000014H
  008d9	58		 pop	 eax
$LL1809@LoadProper:
  008da	8b c8		 mov	 ecx, eax
  008dc	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  008e2	79 05		 jns	 SHORT $LN2120@LoadProper
  008e4	49		 dec	 ecx
  008e5	83 c9 fc	 or	 ecx, -4			; fffffffcH
  008e8	41		 inc	 ecx
$LN2120@LoadProper:
  008e9	b2 ed		 mov	 dl, -19			; ffffffedH
  008eb	2a d1		 sub	 dl, cl
  008ed	30 54 05 dc	 xor	 BYTE PTR __k$529148[ebp+eax], dl
  008f1	40		 inc	 eax
  008f2	83 f8 16	 cmp	 eax, 22			; 00000016H
  008f5	7c e3		 jl	 SHORT $LL1809@LoadProper
  008f7	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  008fd	68 04 01 00 00	 push	 260			; 00000104H
  00902	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00908	50		 push	 eax
  00909	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0090e	8d 45 dc	 lea	 eax, DWORD PTR __k$529148[ebp]
  00911	50		 push	 eax
  00912	ff d7		 call	 edi

; 73   : 	m_FrontBackWoundInfo.m_AirBackAttackerBuff = szBuf;

  00914	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0091a	50		 push	 eax
  0091b	8d 8e 40 0a 00
	00		 lea	 ecx, DWORD PTR [esi+2624]
  00921	ff d3		 call	 ebx

; 74   : 
; 75   : 	m_FrontBackWoundInfo.m_fAirBackDamageRate = rkLoader.LoadFloat_e( "air_back_wound_damage_rate", FLOAT1 );

  00923	b8 01 00 00 00	 mov	 eax, 1
  00928	6a 06		 push	 6
  0092a	c7 45 d8 8c 85
	99 b5		 mov	 DWORD PTR __k$529277[ebp], -1248230004 ; b599858cH
  00931	c7 45 dc 8f 8d
	88 81		 mov	 DWORD PTR __k$529277[ebp+4], -2121757297 ; 81888d8fH
  00938	c7 45 e0 b2 9b
	84 9f		 mov	 DWORD PTR __k$529277[ebp+8], -1618699342 ; 9f849bb2H
  0093f	c7 45 e4 83 88
	b4 8e		 mov	 DWORD PTR __k$529277[ebp+12], -1900771197 ; 8eb48883H
  00946	c7 45 e8 8c 81
	8a 8d		 mov	 DWORD PTR __k$529277[ebp+16], -1920302708 ; 8d8a818cH
  0094d	c7 45 ec 88 b3
	99 8b		 mov	 DWORD PTR __k$529277[ebp+20], -1952861304 ; 8b99b388H
  00954	66 c7 45 f0 99
	89		 mov	 WORD PTR __k$529277[ebp+24], 35225 ; 00008999H
  0095a	8d 4d d8	 lea	 ecx, DWORD PTR __k$529277[ebp]
  0095d	c6 45 f2 00	 mov	 BYTE PTR __k$529277[ebp+26], 0
  00961	5a		 pop	 edx
  00962	bf ed ec eb ea	 mov	 edi, -353637139		; eaebecedH
$LL1920@LoadProper:
  00967	31 39		 xor	 DWORD PTR [ecx], edi
  00969	83 c1 04	 add	 ecx, 4
  0096c	4a		 dec	 edx
  0096d	75 f8		 jne	 SHORT $LL1920@LoadProper
  0096f	6a 18		 push	 24			; 00000018H
  00971	59		 pop	 ecx
$LL1917@LoadProper:
  00972	8b d1		 mov	 edx, ecx
  00974	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  0097a	79 05		 jns	 SHORT $LN2121@LoadProper
  0097c	4a		 dec	 edx
  0097d	83 ca fc	 or	 edx, -4			; fffffffcH
  00980	42		 inc	 edx
$LN2121@LoadProper:
  00981	b3 ed		 mov	 bl, -19			; ffffffedH
  00983	2a da		 sub	 bl, dl
  00985	30 5c 0d d8	 xor	 BYTE PTR __k$529277[ebp+ecx], bl
  00989	41		 inc	 ecx
  0098a	83 f9 1a	 cmp	 ecx, 26			; 0000001aH
  0098d	7c e3		 jl	 SHORT $LL1917@LoadProper
  0098f	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv18196[ebp], eax
  00995	db 85 d0 fe ff
	ff		 fild	 DWORD PTR tv18196[ebp]
  0099b	85 c0		 test	 eax, eax
  0099d	79 06		 jns	 SHORT $LN2122@LoadProper
  0099f	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN2122@LoadProper:
  009a5	51		 push	 ecx
  009a6	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  009ac	d9 1c 24	 fstp	 DWORD PTR [esp]
  009af	8d 45 d8	 lea	 eax, DWORD PTR __k$529277[ebp]
  009b2	50		 push	 eax
  009b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  009b9	d9 9e 50 0a 00
	00		 fstp	 DWORD PTR [esi+2640]
  009bf	6a 04		 push	 4

; 76   : 
; 77   : 	m_bDisableDownState  = rkLoader.LoadBool_e( "disable_down_state", false );

  009c1	c7 45 e0 89 85
	98 8b		 mov	 DWORD PTR __k$529402[ebp], -1952938615 ; 8b988589H
  009c8	c7 45 e4 8f 80
	8e b5		 mov	 DWORD PTR __k$529402[ebp+4], -1248952177 ; b58e808fH
  009cf	c7 45 e8 89 83
	9c 84		 mov	 DWORD PTR __k$529402[ebp+8], -2070117495 ; 849c8389H
  009d6	c7 45 ec b2 9f
	9f 8b		 mov	 DWORD PTR __k$529402[ebp+12], -1952473166 ; 8b9f9fb2H
  009dd	66 c7 45 f0 99
	89		 mov	 WORD PTR __k$529402[ebp+16], 35225 ; 00008999H
  009e3	8d 45 e0	 lea	 eax, DWORD PTR __k$529402[ebp]
  009e6	c6 45 f2 00	 mov	 BYTE PTR __k$529402[ebp+18], 0
  009ea	59		 pop	 ecx
$LL2026@LoadProper:
  009eb	31 38		 xor	 DWORD PTR [eax], edi
  009ed	83 c0 04	 add	 eax, 4
  009f0	49		 dec	 ecx
  009f1	75 f8		 jne	 SHORT $LL2026@LoadProper
  009f3	6a 10		 push	 16			; 00000010H
  009f5	58		 pop	 eax
  009f6	5f		 pop	 edi
  009f7	5b		 pop	 ebx
$LL2023@LoadProper:
  009f8	8b c8		 mov	 ecx, eax
  009fa	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00a00	79 05		 jns	 SHORT $LN2123@LoadProper
  00a02	49		 dec	 ecx
  00a03	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00a06	41		 inc	 ecx
$LN2123@LoadProper:
  00a07	b2 ed		 mov	 dl, -19			; ffffffedH
  00a09	2a d1		 sub	 dl, cl
  00a0b	30 54 05 e0	 xor	 BYTE PTR __k$529402[ebp+eax], dl
  00a0f	40		 inc	 eax
  00a10	83 f8 12	 cmp	 eax, 18			; 00000012H
  00a13	7c e3		 jl	 SHORT $LL2023@LoadProper
  00a15	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _rkLoader$GSCopy$[ebp]
  00a1b	6a 00		 push	 0
  00a1d	8d 45 e0	 lea	 eax, DWORD PTR __k$529402[ebp]
  00a20	50		 push	 eax
  00a21	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadBool@ioINILoader@@QAE_NPBD_N@Z

; 78   : }

  00a27	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a2a	88 86 54 0a 00
	00		 mov	 BYTE PTR [esi+2644], al
  00a30	33 cd		 xor	 ecx, ebp
  00a32	5e		 pop	 esi
  00a33	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a38	c9		 leave
  00a39	c2 04 00	 ret	 4
?LoadProperty@ioFrontBackWoundBuff@@UAEXAAVioINILoader@@@Z ENDP ; ioFrontBackWoundBuff::LoadProperty
_TEXT	ENDS
END
