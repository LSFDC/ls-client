; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioEnhanceRate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?_Nextnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Nextnode
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z PROC ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Nextnode, COMDAT

; 560  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 		return ((_Nodepref)(*_Pnode)._Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 562  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Prevnode
; Function compile flags: /Ogsp
;	COMDAT ?_Prevnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z PROC ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Prevnode, COMDAT

; 565  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 566  : 		return ((_Nodepref)(*_Pnode)._Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 567  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@@Z ENDP ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Prevnode
_TEXT	ENDS
PUBLIC	??0?$allocator@UEnhanceRate@@@std@@QAE@XZ	; std::allocator<EnhanceRate>::allocator<EnhanceRate>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UEnhanceRate@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UEnhanceRate@@@std@@QAE@XZ PROC		; std::allocator<EnhanceRate>::allocator<EnhanceRate>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@UEnhanceRate@@@std@@QAE@XZ ENDP		; std::allocator<EnhanceRate>::allocator<EnhanceRate>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??8?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator==, COMDAT
; _this$ = ecx

; 281  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 283  : 		if (this->_Getcont() == 0
; 284  : 			|| this->_Getcont() != _Right._Getcont())
; 285  : 			{	// report error
; 286  : 			_DEBUG_ERROR("list iterators incompatible");
; 287  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 288  : 			}
; 289  : 
; 290  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 291  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0
; 292  : 			&& this->_Getcont() == _Right._Getcont());
; 293  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 294  : 
; 295  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 296  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator==
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 36   : 		{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 37   : 		}

  00005	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_Mynode
; Function compile flags: /Ogsp
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 93   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 94   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
PUBLIC	?_Myval@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAUEnhanceRate@@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Myval
; Function compile flags: /Ogsp
;	COMDAT ?_Myval@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAUEnhanceRate@@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAUEnhanceRate@@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z PROC ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Myval, COMDAT

; 570  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 571  : 		return ((reference)(*_Pnode)._Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 572  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@SAAAUEnhanceRate@@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z ENDP ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@UEnhanceRate@@@std@@QAE@ABV01@@Z	; std::allocator<EnhanceRate>::allocator<EnhanceRate>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UEnhanceRate@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UEnhanceRate@@@std@@QAE@ABV01@@Z PROC	; std::allocator<EnhanceRate>::allocator<EnhanceRate>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UEnhanceRate@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<EnhanceRate>::allocator<EnhanceRate>
_TEXT	ENDS
PUBLIC	??D?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEABUEnhanceRate@@XZ ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEABUEnhanceRate@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEABUEnhanceRate@@XZ PROC ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator*, COMDAT
; _this$ = ecx

; 202  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 203  : 		if (this->_Getcont() == 0
; 204  : 			|| this->_Ptr == 0
; 205  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 206  : 			{	// report error
; 207  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 208  : 			_SCL_SECURE_OUT_OF_RANGE;
; 209  : 			}
; 210  : 
; 211  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 212  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 213  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 214  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 215  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 216  : 
; 217  : 		return (_Mylist::_Myval(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 218  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEABUEnhanceRate@@XZ ENDP ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UEnhanceRate@@@std@@QBEIXZ ; std::allocator<EnhanceRate>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UEnhanceRate@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UEnhanceRate@@@std@@QBEIXZ PROC	; std::allocator<EnhanceRate>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UEnhanceRate@@@std@@QBEIXZ ENDP	; std::allocator<EnhanceRate>::max_size
_TEXT	ENDS
PUBLIC	??$addressof@UEnhanceRate@@@std@@YAPAUEnhanceRate@@AAU1@@Z ; std::addressof<EnhanceRate>
; Function compile flags: /Ogsp
;	COMDAT ??$addressof@UEnhanceRate@@@std@@YAPAUEnhanceRate@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UEnhanceRate@@@std@@YAPAUEnhanceRate@@AAU1@@Z PROC ; std::addressof<EnhanceRate>, COMDAT

; 110  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 	return ((_Ty *) &(char&)_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 112  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UEnhanceRate@@@std@@YAPAUEnhanceRate@@AAU1@@Z ENDP ; std::addressof<EnhanceRate>
_TEXT	ENDS
PUBLIC	??$?0UEnhanceRate@@@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@ABV?$allocator@UEnhanceRate@@@1@@Z ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node><EnhanceRate>
; Function compile flags: /Ogsp
;	COMDAT ??$?0UEnhanceRate@@@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@ABV?$allocator@UEnhanceRate@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UEnhanceRate@@@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@ABV?$allocator@UEnhanceRate@@@1@@Z PROC ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node><EnhanceRate>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

  00002	c2 04 00	 ret	 4
??$?0UEnhanceRate@@@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@ABV?$allocator@UEnhanceRate@@@1@@Z ENDP ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node><EnhanceRate>
_TEXT	ENDS
PUBLIC	??$forward@ABUEnhanceRate@@@std@@YAABUEnhanceRate@@ABU1@@Z ; std::forward<EnhanceRate const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABUEnhanceRate@@@std@@YAABUEnhanceRate@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUEnhanceRate@@@std@@YAABUEnhanceRate@@ABU1@@Z PROC ; std::forward<EnhanceRate const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUEnhanceRate@@@std@@YAABUEnhanceRate@@ABU1@@Z ENDP ; std::forward<EnhanceRate const &>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	??0EnhanceRate@@QAE@XZ				; EnhanceRate::EnhanceRate
EXTRN	__fltused:DWORD
;	COMDAT __real@4f800000
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioenhancerate.h
CONST	ENDS
;	COMDAT ??0EnhanceRate@@QAE@XZ
_TEXT	SEGMENT
tv135 = -4						; size = 4
??0EnhanceRate@@QAE@XZ PROC				; EnhanceRate::EnhanceRate, COMDAT
; _this$ = ecx

; 17   : 	EnhanceRate()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 18   : 	{
; 19   : 		m_Type = EOT_PUSH;

  00004	83 21 00	 and	 DWORD PTR [ecx], 0

; 20   : 		m_fEnhanceRate = FLOAT1;

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	89 45 fc	 mov	 DWORD PTR tv135[ebp], eax
  0000f	db 45 fc	 fild	 DWORD PTR tv135[ebp]
  00012	85 c0		 test	 eax, eax
  00014	79 06		 jns	 SHORT $LN5@EnhanceRat
  00016	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN5@EnhanceRat:

; 21   : 		m_dwID = 0;

  0001c	83 61 08 00	 and	 DWORD PTR [ecx+8], 0
  00020	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 22   : 	}

  00023	8b c1		 mov	 eax, ecx
  00025	c9		 leave
  00026	c3		 ret	 0
??0EnhanceRate@@QAE@XZ ENDP				; EnhanceRate::EnhanceRate
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@XZ ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >, COMDAT
; _this$ = ecx

; 179  : 		{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 180  : 		}

  00005	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++, COMDAT
; _this$ = ecx

; 221  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 222  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 223  : 		if (this->_Getcont() == 0
; 224  : 			|| this->_Ptr == 0
; 225  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 226  : 			{	// report error
; 227  : 			_DEBUG_ERROR("list iterator not incrementable");
; 228  : 			_SCL_SECURE_OUT_OF_RANGE;
; 229  : 			}
; 230  : 
; 231  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 232  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 233  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 234  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 235  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 236  : 
; 237  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 238  : 		return (*this);
; 239  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++
_TEXT	ENDS
PUBLIC	??9?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator!=, COMDAT
; _this$ = ecx

; 299  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 301  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator!=
_TEXT	ENDS
PUBLIC	??1?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::~_List_val<EnhanceRate,std::allocator<EnhanceRate> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ PROC ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::~_List_val<EnhanceRate,std::allocator<EnhanceRate> >, COMDAT
; _this$ = ecx

; 502  : 		this->_Alnod.deallocate(this->_Myhead, 1);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx

; 503  : 		}

  00008	c3		 ret	 0
??1?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::~_List_val<EnhanceRate,std::allocator<EnhanceRate> >
_TEXT	ENDS
PUBLIC	??D?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEAAUEnhanceRate@@XZ ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEAAUEnhanceRate@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEAAUEnhanceRate@@XZ PROC ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator*, COMDAT
; _this$ = ecx

; 360  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEAAUEnhanceRate@@XZ ENDP ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator*
_TEXT	ENDS
PUBLIC	??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++, COMDAT
; _this$ = ecx

; 242  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 244  : 		++*this;

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 245  : 		return (_Tmp);
; 246  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++
_TEXT	ENDS
PUBLIC	??D?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUEnhanceRate@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUEnhanceRate@@XZ
_TEXT	SEGMENT
??D?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUEnhanceRate@@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 47   : 		return (_Mylist::_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 48   : 		}

  00005	c3		 ret	 0
??D?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABUEnhanceRate@@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::operator*
_TEXT	ENDS
PUBLIC	??0?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z ; std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z PROC ; std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >, COMDAT
; _this$ = ecx

; 438  : 		{	// construct allocators from _Al

  00000	8b c1		 mov	 eax, ecx

; 439  : 		}

  00002	c2 04 00	 ret	 4
??0?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z ENDP ; std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >
_TEXT	ENDS
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 42   : 		this->_Adopt(_Plist);
; 43   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>
_TEXT	ENDS
PUBLIC	?max_size@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBEIXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBEIXZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::max_size, COMDAT
; _this$ = ecx

; 882  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 883  : 		}

  00005	c3		 ret	 0
?max_size@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBEIXZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::max_size
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T505810 = -12						; size = 12
$T505815 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 cc cc cc
	0c		 cmp	 ecx, 214748364		; 0cccccccH
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 14	 imul	 ecx, 20			; 00000014H
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T505815[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T505815[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T505810[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T505810[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T505810[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::destroy
; Function compile flags: /Ogsp
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??$_Construct@UEnhanceRate@@ABU1@@std@@YAXPAUEnhanceRate@@ABU1@@Z ; std::_Construct<EnhanceRate,EnhanceRate const &>
; Function compile flags: /Ogsp
;	COMDAT ??$_Construct@UEnhanceRate@@ABU1@@std@@YAXPAUEnhanceRate@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UEnhanceRate@@ABU1@@std@@YAXPAUEnhanceRate@@ABU1@@Z PROC ; std::_Construct<EnhanceRate,EnhanceRate const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 47   : 	void _FARQ *_Vptr = _Ptr;
; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN3@Construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN3@Construct:
  00013	5f		 pop	 edi

; 49   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Construct@UEnhanceRate@@ABU1@@std@@YAXPAUEnhanceRate@@ABU1@@Z ENDP ; std::_Construct<EnhanceRate,EnhanceRate const &>
_TEXT	ENDS
PUBLIC	??C?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEPAUEnhanceRate@@XZ ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator->
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??C?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEPAUEnhanceRate@@XZ
_TEXT	SEGMENT
??C?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEPAUEnhanceRate@@XZ PROC ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator->, COMDAT
; _this$ = ecx

; 365  : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 366  : 		}

  00005	c3		 ret	 0
??C?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QBEPAUEnhanceRate@@XZ ENDP ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator->
_TEXT	ENDS
PUBLIC	??E?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++, COMDAT
; _this$ = ecx

; 369  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 370  : 		++(*(_Mybase *)this);

  00002	8b 08		 mov	 ecx, DWORD PTR [eax]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 371  : 		return (*this);
; 372  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::operator++
_TEXT	ENDS
PUBLIC	??C?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUEnhanceRate@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::operator->
; Function compile flags: /Ogsp
;	COMDAT ??C?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUEnhanceRate@@XZ
_TEXT	SEGMENT
??C?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUEnhanceRate@@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::operator->, COMDAT
; _this$ = ecx

; 52   : 		return (&**this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 53   : 		}

  00005	c3		 ret	 0
??C?$_List_unchecked_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPBUEnhanceRate@@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >,std::_Iterator_base0>::operator->
_TEXT	ENDS
PUBLIC	??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >, COMDAT
; _this$ = ecx

; 184  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_const_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >
_TEXT	ENDS
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXI@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Incsize
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
CONST	ENDS
;	COMDAT ?_Incsize@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXI@Z PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Incsize, COMDAT
; _this$ = ecx

; 1519 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 : 		if (max_size() - this->_Mysize - 1 < _Count)

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	be 54 55 55 15	 mov	 esi, 357913940		; 15555554H
  0000f	2b f0		 sub	 esi, eax
  00011	3b f2		 cmp	 esi, edx
  00013	5e		 pop	 esi
  00014	73 0b		 jae	 SHORT $LN1@Incsize

; 1521 : 			_Xlength_error("list<T> too long");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN11@Incsize:
$LN1@Incsize:

; 1522 : 		this->_Mysize += _Count;

  00021	03 c2		 add	 eax, edx
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1523 : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN10@Incsize:
?_Incsize@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXI@Z ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Incsize
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@0@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z ; std::_Dest_val<std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>,std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@0@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@0@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z PROC ; std::_Dest_val<std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>,std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@@std@@YAXAAV?$allocator@U_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@0@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>,std::_List_nod<EnhanceRate,std::allocator<EnhanceRate> >::_Node>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UEnhanceRate@@@std@@QAEXPAUEnhanceRate@@ABU3@@Z ; std::allocator<EnhanceRate>::construct
; Function compile flags: /Ogsp
;	COMDAT ?construct@?$allocator@UEnhanceRate@@@std@@QAEXPAUEnhanceRate@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UEnhanceRate@@@std@@QAEXPAUEnhanceRate@@ABU3@@Z PROC ; std::allocator<EnhanceRate>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 197  : 		_Construct(_Ptr, _Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN5@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN5@construct:
  00013	5f		 pop	 edi

; 198  : 		}

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?construct@?$allocator@UEnhanceRate@@@std@@QAEXPAUEnhanceRate@@ABU3@@Z ENDP ; std::allocator<EnhanceRate>::construct
_TEXT	ENDS
PUBLIC	?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::begin, COMDAT
; _this$ = ecx

; 786  : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 		return (const_iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 788  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::end, COMDAT
; _this$ = ecx

; 796  : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 797  : 		return (const_iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 798  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear
; Function compile flags: /Ogsp
;	COMDAT ?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear, COMDAT
; _this$ = ecx

; 1096 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1097 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1098 : 		this->_Orphan_ptr(*this, 0);
; 1099 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1100 : 
; 1101 : 		_Nodeptr _Pnext;
; 1102 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1103 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 1104 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1105 : 		this->_Mysize = 0;

  0000e	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1106 : 
; 1107 : 		for (; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00012	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00014	74 11		 je	 SHORT $LN1@clear
  00016	57		 push	 edi
$LL3@clear:

; 1108 : 			{	// delete an element
; 1109 : 			_Pnext = this->_Nextnode(_Pnode);

  00017	8b 39		 mov	 edi, DWORD PTR [ecx]

; 1110 : 
; 1111 : 			_Dest_val(this->_Alnod, _Pnode);
; 1112 : 			this->_Alnod.deallocate(_Pnode, 1);

  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	8b cf		 mov	 ecx, edi
  00022	3b 3e		 cmp	 edi, DWORD PTR [esi]
  00024	75 f1		 jne	 SHORT $LL3@clear
  00026	5f		 pop	 edi
$LN1@clear:
  00027	5e		 pop	 esi

; 1113 : 			}
; 1114 : 		}

  00028	c3		 ret	 0
?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Tidy, COMDAT
; _this$ = ecx

; 1497 : 		clear();

  00000	e9 00 00 00 00	 jmp	 ?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear
?_Tidy@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_List_val<EnhanceRate,std::allocator<EnhanceRate> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z
_TEXT	SEGMENT
$T506072 = -16						; size = 12
$T506056 = -4						; size = 4
__Al$ = 8						; size = 1
??0?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z PROC ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_List_val<EnhanceRate,std::allocator<EnhanceRate> >, COMDAT
; _this$ = ecx

; 493  : 		{	// construct base, and allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 494  : 		this->_Mysize = 0;

  00009	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

  0000d	6a 14		 push	 20			; 00000014H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	74 10		 je	 SHORT $LN13@List_val
  00019	89 06		 mov	 DWORD PTR [esi], eax

; 496  : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0001b	89 00		 mov	 DWORD PTR [eax], eax

; 497  : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 498  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c9		 leave
  00026	c2 04 00	 ret	 4

; 495  : 		this->_Myhead = this->_Alnod.allocate(1);

$LN13@List_val:
  00029	83 65 fc 00	 and	 DWORD PTR $T506056[ebp], 0
  0002d	8d 45 fc	 lea	 eax, DWORD PTR $T506056[ebp]
  00030	50		 push	 eax
  00031	8d 4d f0	 lea	 ecx, DWORD PTR $T506072[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0003a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003f	8d 45 f0	 lea	 eax, DWORD PTR $T506072[ebp]
  00042	50		 push	 eax
  00043	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T506072[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0004a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@List_val:
$LN28@List_val:
  0004f	cc		 int	 3
??0?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z ENDP ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_List_val<EnhanceRate,std::allocator<EnhanceRate> >
_TEXT	ENDS
PUBLIC	??0?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >, COMDAT
; _this$ = ecx

; 342  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 343  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@std@@QAE@PAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@PBV?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >::_List_iterator<std::_List_val<EnhanceRate,std::allocator<EnhanceRate> > >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UEnhanceRate@@@std@@UEnhanceRate@@ABU3@@std@@YAXAAV?$allocator@UEnhanceRate@@@0@PAUEnhanceRate@@ABU2@@Z ; std::_Cons_val<std::allocator<EnhanceRate>,EnhanceRate,EnhanceRate const &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UEnhanceRate@@@std@@UEnhanceRate@@ABU3@@std@@YAXAAV?$allocator@UEnhanceRate@@@0@PAUEnhanceRate@@ABU2@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UEnhanceRate@@@std@@UEnhanceRate@@ABU3@@std@@YAXAAV?$allocator@UEnhanceRate@@@0@PAUEnhanceRate@@ABU2@@Z PROC ; std::_Cons_val<std::allocator<EnhanceRate>,EnhanceRate,EnhanceRate const &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Pdest$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 08		 je	 SHORT $LN9@Cons_val
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR __Src$[ebp]
  0000f	a5		 movsd
  00010	a5		 movsd
  00011	a5		 movsd
  00012	5e		 pop	 esi
$LN9@Cons_val:
  00013	5f		 pop	 edi

; 281  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Cons_val@V?$allocator@UEnhanceRate@@@std@@UEnhanceRate@@ABU3@@std@@YAXAAV?$allocator@UEnhanceRate@@@0@PAUEnhanceRate@@ABU2@@Z ENDP ; std::_Cons_val<std::allocator<EnhanceRate>,EnhanceRate,EnhanceRate const &>
_TEXT	ENDS
PUBLIC	?HasEnhanceRate@ioEnhanceRate@@QBE_NW4EnhanceOwnerType@@@Z ; ioEnhanceRate::HasEnhanceRate
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioenhancerate.cpp
;	COMDAT ?HasEnhanceRate@ioEnhanceRate@@QBE_NW4EnhanceOwnerType@@@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
?HasEnhanceRate@ioEnhanceRate@@QBE_NW4EnhanceOwnerType@@@Z PROC ; ioEnhanceRate::HasEnhanceRate, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 	EnhanceRateList::const_iterator iter;
; 54   : 	for( iter=m_EnhanceList.begin() ; iter!=m_EnhanceList.end() ; ++iter )

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 01		 mov	 eax, DWORD PTR [ecx]
  00007	eb 0a		 jmp	 SHORT $LN46@HasEnhance
$LL21@HasEnhance:

; 55   : 	{
; 56   : 		if( iter->m_Type == eType )

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	3b 55 08	 cmp	 edx, DWORD PTR _eType$[ebp]
  0000f	74 0c		 je	 SHORT $LN44@HasEnhance

; 53   : 	EnhanceRateList::const_iterator iter;
; 54   : 	for( iter=m_EnhanceList.begin() ; iter!=m_EnhanceList.end() ; ++iter )

  00011	8b 00		 mov	 eax, DWORD PTR [eax]
$LN46@HasEnhance:
  00013	3b c1		 cmp	 eax, ecx
  00015	75 f2		 jne	 SHORT $LL21@HasEnhance

; 58   : 	}
; 59   : 
; 60   : 	return false;

  00017	32 c0		 xor	 al, al
$LN5@HasEnhance:

; 61   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN44@HasEnhance:

; 57   : 			return true;

  0001d	b0 01		 mov	 al, 1
  0001f	eb f8		 jmp	 SHORT $LN5@HasEnhance
?HasEnhanceRate@ioEnhanceRate@@QBE_NW4EnhanceOwnerType@@@Z ENDP ; ioEnhanceRate::HasEnhanceRate
_TEXT	ENDS
PUBLIC	?GetEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z ; ioEnhanceRate::GetEnhanceRate
; Function compile flags: /Ogsp
;	COMDAT ?GetEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z
_TEXT	SEGMENT
tv244 = -4						; size = 4
_fRate$ = -4						; size = 4
_eType$ = 8						; size = 4
?GetEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z PROC ; ioEnhanceRate::GetEnhanceRate, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 65   : 	float fRate = FLOAT1;

  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	89 45 fc	 mov	 DWORD PTR tv244[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv244[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN53@GetEnhance
  00013	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN53@GetEnhance:

; 66   : 	EnhanceRateList::const_iterator iter;
; 67   : 	for( iter=m_EnhanceList.begin() ; iter!=m_EnhanceList.end() ; ++iter )

  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	d9 5d fc	 fstp	 DWORD PTR _fRate$[ebp]
  0001e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00020	eb 14		 jmp	 SHORT $LN54@GetEnhance
$LL23@GetEnhance:

; 68   : 	{
; 69   : 		if( iter->m_Type == eType )

  00022	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00025	3b 55 08	 cmp	 edx, DWORD PTR _eType$[ebp]
  00028	75 0a		 jne	 SHORT $LN3@GetEnhance

; 70   : 			fRate = iter->m_fEnhanceRate;

  0002a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0002f	f3 0f 11 45 fc	 movss	 DWORD PTR _fRate$[ebp], xmm0
$LN3@GetEnhance:

; 66   : 	EnhanceRateList::const_iterator iter;
; 67   : 	for( iter=m_EnhanceList.begin() ; iter!=m_EnhanceList.end() ; ++iter )

  00034	8b 00		 mov	 eax, DWORD PTR [eax]
$LN54@GetEnhance:
  00036	3b c1		 cmp	 eax, ecx
  00038	75 e8		 jne	 SHORT $LL23@GetEnhance

; 71   : 	}
; 72   : 
; 73   : 	return fRate;

  0003a	d9 45 fc	 fld	 DWORD PTR _fRate$[ebp]

; 74   : }

  0003d	c9		 leave
  0003e	c2 04 00	 ret	 4
?GetEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z ENDP ; ioEnhanceRate::GetEnhanceRate
_TEXT	ENDS
PUBLIC	?GetTotalEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z ; ioEnhanceRate::GetTotalEnhanceRate
; Function compile flags: /Ogsp
;	COMDAT ?GetTotalEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z
_TEXT	SEGMENT
tv277 = -4						; size = 4
_fRate$ = -4						; size = 4
_eType$ = 8						; size = 4
?GetTotalEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z PROC ; ioEnhanceRate::GetTotalEnhanceRate, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 78   : 	float fRate = FLOAT1;

  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	89 45 fc	 mov	 DWORD PTR tv277[ebp], eax
  0000c	db 45 fc	 fild	 DWORD PTR tv277[ebp]
  0000f	85 c0		 test	 eax, eax
  00011	79 06		 jns	 SHORT $LN53@GetTotalEn
  00013	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN53@GetTotalEn:

; 79   : 	EnhanceRateList::const_iterator iter;
; 80   : 	for( iter=m_EnhanceList.begin() ; iter!=m_EnhanceList.end() ; ++iter )

  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	d9 5d fc	 fstp	 DWORD PTR _fRate$[ebp]
  0001e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00020	eb 27		 jmp	 SHORT $LN54@GetTotalEn
$LL23@GetTotalEn:

; 81   : 	{
; 82   : 		if( iter->m_Type == eType )

  00022	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00025	3b 55 08	 cmp	 edx, DWORD PTR _eType$[ebp]
  00028	75 1d		 jne	 SHORT $LN3@GetTotalEn

; 83   : 			fRate *= iter->m_fEnhanceRate;

  0002a	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _fRate$[ebp]
  0002f	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00034	0f 5a c0	 cvtps2pd xmm0, xmm0
  00037	0f 5a c9	 cvtps2pd xmm1, xmm1
  0003a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0003e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00042	f3 0f 11 45 fc	 movss	 DWORD PTR _fRate$[ebp], xmm0
$LN3@GetTotalEn:

; 79   : 	EnhanceRateList::const_iterator iter;
; 80   : 	for( iter=m_EnhanceList.begin() ; iter!=m_EnhanceList.end() ; ++iter )

  00047	8b 00		 mov	 eax, DWORD PTR [eax]
$LN54@GetTotalEn:
  00049	3b c1		 cmp	 eax, ecx
  0004b	75 d5		 jne	 SHORT $LL23@GetTotalEn

; 84   : 	}
; 85   : 
; 86   : 	return fRate;

  0004d	d9 45 fc	 fld	 DWORD PTR _fRate$[ebp]

; 87   : }

  00050	c9		 leave
  00051	c2 04 00	 ret	 4
?GetTotalEnhanceRate@ioEnhanceRate@@QBEMW4EnhanceOwnerType@@@Z ENDP ; ioEnhanceRate::GetTotalEnhanceRate
_TEXT	ENDS
PUBLIC	??0?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::list<EnhanceRate,std::allocator<EnhanceRate> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ??0?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T506506 = -4						; size = 4
$T506501 = -4						; size = 4
??0?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::list<EnhanceRate,std::allocator<EnhanceRate> >, COMDAT
; _this$ = ecx

; 607  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	89 65 fc	 mov	 DWORD PTR $T506501[ebp], esp
  00009	8b f1		 mov	 esi, ecx
  0000b	89 65 fc	 mov	 DWORD PTR $T506506[ebp], esp
  0000e	e8 00 00 00 00	 call	 ??0?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_List_val<EnhanceRate,std::allocator<EnhanceRate> >

; 608  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c9		 leave
  00017	c3		 ret	 0
??0?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::list<EnhanceRate,std::allocator<EnhanceRate> >
_TEXT	ENDS
PUBLIC	??1?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::~list<EnhanceRate,std::allocator<EnhanceRate> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::~list<EnhanceRate,std::allocator<EnhanceRate> >, COMDAT
; _this$ = ecx

; 769  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 770  : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear

; 771  : 		}

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	59		 pop	 ecx
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??1?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@XZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::~list<EnhanceRate,std::allocator<EnhanceRate> >
_TEXT	ENDS
PUBLIC	?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Myhead, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@XZ ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Buynode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@0ABUEnhanceRate@@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Buynode
; Function compile flags: /Ogsp
;	COMDAT ?_Buynode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@0ABUEnhanceRate@@@Z
_TEXT	SEGMENT
$T506642 = -12						; size = 12
$T506619 = 8						; size = 4
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@0ABUEnhanceRate@@@Z PROC ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Buynode, COMDAT
; _this$ = ecx

; 507  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 508  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

  00008	6a 14		 push	 20			; 00000014H
  0000a	8b f9		 mov	 edi, ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	8b f0		 mov	 esi, eax
  00013	59		 pop	 ecx
  00014	85 f6		 test	 esi, esi
  00016	74 26		 je	 SHORT $LN10@Buynode

; 509  : 
; 510  : 		_TRY_BEGIN
; 511  : 		this->_Nextnode(_Pnode) = _Next;

  00018	8b 45 08	 mov	 eax, DWORD PTR __Next$[ebp]

; 512  : 		this->_Prevnode(_Pnode) = _Prev;
; 513  : 		_Cons_val(this->_Alval, _STD addressof(this->_Myval(_Pnode)), _Val);

  0001b	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  0001e	89 06		 mov	 DWORD PTR [esi], eax
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Prev$[ebp]
  00023	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00026	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00029	50		 push	 eax
  0002a	83 c7 09	 add	 edi, 9
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ??$_Cons_val@V?$allocator@UEnhanceRate@@@std@@UEnhanceRate@@ABU3@@std@@YAXAAV?$allocator@UEnhanceRate@@@0@PAUEnhanceRate@@ABU2@@Z ; std::_Cons_val<std::allocator<EnhanceRate>,EnhanceRate,EnhanceRate const &>
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	5f		 pop	 edi

; 514  : 		_CATCH_ALL
; 515  : 		this->_Alnod.deallocate(_Pnode, 1);
; 516  : 		_RERAISE;
; 517  : 		_CATCH_END
; 518  : 
; 519  : 		return (_Pnode);

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi

; 520  : 		}

  0003a	c9		 leave
  0003b	c2 0c 00	 ret	 12			; 0000000cH

; 508  : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

$LN10@Buynode:
  0003e	83 65 08 00	 and	 DWORD PTR $T506619[ebp], 0
  00042	8d 45 08	 lea	 eax, DWORD PTR $T506619[ebp]
  00045	50		 push	 eax
  00046	8d 4d f4	 lea	 ecx, DWORD PTR $T506642[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  0004f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00054	8d 45 f4	 lea	 eax, DWORD PTR $T506642[ebp]
  00057	50		 push	 eax
  00058	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T506642[ebp], OFFSET ??_7bad_alloc@std@@6B@
  0005f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Buynode:
$LN32@Buynode:
  00064	cc		 int	 3
?_Buynode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@0ABUEnhanceRate@@@Z ENDP ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Buynode
_TEXT	ENDS
PUBLIC	??0ioEnhanceRate@@QAE@XZ			; ioEnhanceRate::ioEnhanceRate
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioenhancerate.cpp
;	COMDAT ??0ioEnhanceRate@@QAE@XZ
_TEXT	SEGMENT
$T506678 = -4						; size = 4
$T506681 = -4						; size = 4
??0ioEnhanceRate@@QAE@XZ PROC				; ioEnhanceRate::ioEnhanceRate, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	89 65 fc	 mov	 DWORD PTR $T506681[ebp], esp
  00009	8b f1		 mov	 esi, ecx
  0000b	89 65 fc	 mov	 DWORD PTR $T506678[ebp], esp
  0000e	e8 00 00 00 00	 call	 ??0?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE@V?$allocator@UEnhanceRate@@@1@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_List_val<EnhanceRate,std::allocator<EnhanceRate> >

; 8    : 	m_dwCurID = 0;

  00013	83 66 0c 00	 and	 DWORD PTR [esi+12], 0

; 9    : 	m_EnhanceList.clear();

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear

; 10   : }

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c9		 leave
  00022	c3		 ret	 0
??0ioEnhanceRate@@QAE@XZ ENDP				; ioEnhanceRate::ioEnhanceRate
_TEXT	ENDS
PUBLIC	??1ioEnhanceRate@@QAE@XZ			; ioEnhanceRate::~ioEnhanceRate
; Function compile flags: /Ogsp
;	COMDAT ??1ioEnhanceRate@@QAE@XZ
_TEXT	SEGMENT
??1ioEnhanceRate@@QAE@XZ PROC				; ioEnhanceRate::~ioEnhanceRate, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 14   : 	m_EnhanceList.clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear

; 15   : }

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear
  0000f	ff 36		 push	 DWORD PTR [esi]
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	59		 pop	 ecx
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??1ioEnhanceRate@@QAE@XZ ENDP				; ioEnhanceRate::~ioEnhanceRate
_TEXT	ENDS
PUBLIC	?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase, COMDAT
; _this$ = ecx

; 1054 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1055 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1056 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1057 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1058 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1059 : 		_Orphan_ptr(*this, _Pnode);
; 1060 : 
; 1061 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1062 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d 0c	 mov	 DWORD PTR __Where$[ebp], ecx

; 1063 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1064 : 
; 1065 : 		if (_Pnode != this->_Myhead)

  0000e	3b 06		 cmp	 eax, DWORD PTR [esi]
  00010	74 19		 je	 SHORT $LN1@erase

; 1066 : 			{	// not list head, safe to erase
; 1067 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1068 : 				this->_Nextnode(_Pnode);

  00012	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	89 11		 mov	 DWORD PTR [ecx], edx

; 1069 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1070 : 				this->_Prevnode(_Pnode);

  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1071 : 
; 1072 : 			_Dest_val(this->_Alnod, _Pnode);
; 1073 : 			this->_Alnod.deallocate(_Pnode, 1);

  0001e	50		 push	 eax
  0001f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1074 : 
; 1075 : 			--this->_Mysize;

  00027	ff 4e 04	 dec	 DWORD PTR [esi+4]
  0002a	59		 pop	 ecx
$LN1@erase:

; 1076 : 			}
; 1077 : 		return (_Make_iter(_Where));

  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00031	89 08		 mov	 DWORD PTR [eax], ecx
  00033	5e		 pop	 esi

; 1078 : 		}

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@0@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T506808 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@0@Z PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase, COMDAT
; _this$ = ecx

; 1081 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1082 : 		if (_First == begin() && _Last == end())

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0000e	75 21		 jne	 SHORT $LN60@erase@2
  00010	39 4d 10	 cmp	 DWORD PTR __Last$[ebp], ecx
  00013	75 1c		 jne	 SHORT $LN60@erase@2

; 1083 : 			{	// erase all and return fresh iterator
; 1084 : 			clear();

  00015	8b ce		 mov	 ecx, esi
  00017	e8 00 00 00 00	 call	 ?clear@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXXZ ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::clear

; 1085 : 			return (end());

  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	eb 19		 jmp	 SHORT $LN59@erase@2
$LL2@erase@2:

; 1090 : 				_First = erase(_First);

  00020	50		 push	 eax
  00021	8d 45 fc	 lea	 eax, DWORD PTR $T506808[ebp]
  00024	50		 push	 eax
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
$LN60@erase@2:

; 1086 : 			}
; 1087 : 		else
; 1088 : 			{	// erase subrange
; 1089 : 			while (_First != _Last)

  00031	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00034	75 ea		 jne	 SHORT $LL2@erase@2

; 1091 : 			return (_Make_iter(_Last));

  00036	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
$LN59@erase@2:
  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	89 08		 mov	 DWORD PTR [eax], ecx
  0003e	5e		 pop	 esi

; 1092 : 			}
; 1093 : 		}

  0003f	c9		 leave
  00040	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@0@Z ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase
_TEXT	ENDS
PUBLIC	?_Insert@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@ABUEnhanceRate@@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Insert
; Function compile flags: /Ogsp
;	COMDAT ?_Insert@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@ABUEnhanceRate@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@ABUEnhanceRate@@@Z PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Insert, COMDAT
; _this$ = ecx

; 967  : 		{	// insert _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 968  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 969  : 		if (_Where._Getcont() != this)
; 970  : 			_DEBUG_ERROR("list insert iterator outside range");
; 971  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 972  : 
; 973  : 		_Nodeptr _Pnode = _Where._Mynode();
; 974  : 		_Nodeptr _Newnode =
; 975  : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode), _Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0000c	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  0000f	ff 37		 push	 DWORD PTR [edi]
  00011	8b d9		 mov	 ebx, ecx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?_Buynode@?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEPAU_Node@?$_List_nod@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@2@PAU342@0ABUEnhanceRate@@@Z ; std::_List_val<EnhanceRate,std::allocator<EnhanceRate> >::_Buynode

; 976  : 		_Incsize(1);

  00019	6a 01		 push	 1
  0001b	8b cb		 mov	 ecx, ebx
  0001d	8b f0		 mov	 esi, eax
  0001f	e8 00 00 00 00	 call	 ?_Incsize@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXI@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Incsize

; 977  : 		this->_Prevnode(_Pnode) = _Newnode;

  00024	89 37		 mov	 DWORD PTR [edi], esi

; 978  : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00026	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00029	5f		 pop	 edi
  0002a	89 30		 mov	 DWORD PTR [eax], esi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx

; 979  : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?_Insert@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@ABUEnhanceRate@@@Z ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Insert
_TEXT	ENDS
PUBLIC	?RemoveEnhanceRate@ioEnhanceRate@@QAEXW4EnhanceOwnerType@@K@Z ; ioEnhanceRate::RemoveEnhanceRate
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioenhancerate.cpp
;	COMDAT ?RemoveEnhanceRate@ioEnhanceRate@@QAEXW4EnhanceOwnerType@@K@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
$T506999 = 12						; size = 4
_dwID$ = 12						; size = 4
?RemoveEnhanceRate@ioEnhanceRate@@QAEXW4EnhanceOwnerType@@K@Z PROC ; ioEnhanceRate::RemoveEnhanceRate, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 33   : 	if( dwID == 0 ) return;

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _dwID$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	85 ff		 test	 edi, edi
  0000c	74 1f		 je	 SHORT $LN3@RemoveEnha

; 34   : 
; 35   : 	EnhanceRateList::iterator iter = m_EnhanceList.begin();

  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]

; 36   : 	while( iter != m_EnhanceList.end() )

  00012	3b c1		 cmp	 eax, ecx
  00014	74 17		 je	 SHORT $LN3@RemoveEnha
$LL4@RemoveEnha:

; 37   : 	{
; 38   : 		if( iter->m_dwID == dwID )

  00016	39 78 10	 cmp	 DWORD PTR [eax+16], edi
  00019	75 0c		 jne	 SHORT $LN2@RemoveEnha

; 39   : 			iter = m_EnhanceList.erase( iter );

  0001b	50		 push	 eax
  0001c	8d 45 0c	 lea	 eax, DWORD PTR $T506999[ebp]
  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase
$LN2@RemoveEnha:

; 40   : 		else
; 41   : 			++iter;

  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	3b 06		 cmp	 eax, DWORD PTR [esi]
  0002b	75 e9		 jne	 SHORT $LL4@RemoveEnha
$LN3@RemoveEnha:
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 42   : 	}
; 43   : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?RemoveEnhanceRate@ioEnhanceRate@@QAEXW4EnhanceOwnerType@@K@Z ENDP ; ioEnhanceRate::RemoveEnhanceRate
_TEXT	ENDS
PUBLIC	?ResetEnhanceRateList@ioEnhanceRate@@QAEXXZ	; ioEnhanceRate::ResetEnhanceRateList
; Function compile flags: /Ogsp
;	COMDAT ?ResetEnhanceRateList@ioEnhanceRate@@QAEXXZ
_TEXT	SEGMENT
$T507132 = -4						; size = 4
?ResetEnhanceRateList@ioEnhanceRate@@QAEXXZ PROC	; ioEnhanceRate::ResetEnhanceRateList, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 47   : 	m_EnhanceList.erase( m_EnhanceList.begin(), m_EnhanceList.end() );

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	8d 45 fc	 lea	 eax, DWORD PTR $T507132[ebp]
  00010	50		 push	 eax
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?erase@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@0@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::erase

; 48   : 	m_dwCurID = 1;

  00018	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  0001f	5e		 pop	 esi

; 49   : }

  00020	c9		 leave
  00021	c3		 ret	 0
?ResetEnhanceRateList@ioEnhanceRate@@QAEXXZ ENDP	; ioEnhanceRate::ResetEnhanceRateList
_TEXT	ENDS
PUBLIC	?push_back@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXABUEnhanceRate@@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::push_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\list
;	COMDAT ?push_back@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXABUEnhanceRate@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXABUEnhanceRate@@@Z PROC ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::push_back, COMDAT
; _this$ = ecx

; 926  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 927  : 		_Insert(end(), _Val);

  00003	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ?_Insert@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@ABUEnhanceRate@@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Insert

; 928  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?push_back@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXABUEnhanceRate@@@Z ENDP ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::push_back
_TEXT	ENDS
PUBLIC	?AddEnhanceRate@ioEnhanceRate@@QAEKW4EnhanceOwnerType@@M@Z ; ioEnhanceRate::AddEnhanceRate
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioenhancerate.cpp
;	COMDAT ?AddEnhanceRate@ioEnhanceRate@@QAEKW4EnhanceOwnerType@@M@Z
_TEXT	SEGMENT
_kRate$ = -12						; size = 12
_eType$ = 8						; size = 4
_fRate$ = 12						; size = 4
?AddEnhanceRate@ioEnhanceRate@@QAEKW4EnhanceOwnerType@@M@Z PROC ; ioEnhanceRate::AddEnhanceRate, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 19   : 	m_dwCurID++;

  00009	ff 46 0c	 inc	 DWORD PTR [esi+12]

; 20   : 
; 21   : 	EnhanceRate kRate;

  0000c	8d 4d f4	 lea	 ecx, DWORD PTR _kRate$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0EnhanceRate@@QAE@XZ	; EnhanceRate::EnhanceRate

; 22   : 	kRate.m_dwID = m_dwCurID;

  00014	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 23   : 	kRate.m_Type = eType;
; 24   : 	kRate.m_fEnhanceRate = fRate;

  00017	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fRate$[ebp]
  0001c	89 45 fc	 mov	 DWORD PTR _kRate$[ebp+8], eax
  0001f	8b 45 08	 mov	 eax, DWORD PTR _eType$[ebp]

; 25   : 
; 26   : 	m_EnhanceList.push_back( kRate );

  00022	8d 4d f4	 lea	 ecx, DWORD PTR _kRate$[ebp]
  00025	89 45 f4	 mov	 DWORD PTR _kRate$[ebp], eax
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	8b ce		 mov	 ecx, esi
  0002e	f3 0f 11 45 f8	 movss	 DWORD PTR _kRate$[ebp+4], xmm0
  00033	e8 00 00 00 00	 call	 ?_Insert@?$list@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@QAEXV?$_List_const_iterator@V?$_List_val@UEnhanceRate@@V?$allocator@UEnhanceRate@@@std@@@std@@@2@ABUEnhanceRate@@@Z ; std::list<EnhanceRate,std::allocator<EnhanceRate> >::_Insert

; 27   : 
; 28   : 	return m_dwCurID;

  00038	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003b	5e		 pop	 esi

; 29   : }

  0003c	c9		 leave
  0003d	c2 08 00	 ret	 8
?AddEnhanceRate@ioEnhanceRate@@QAEKW4EnhanceOwnerType@@M@Z ENDP ; ioEnhanceRate::AddEnhanceRate
_TEXT	ENDS
END
