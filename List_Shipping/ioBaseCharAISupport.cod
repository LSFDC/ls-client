; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioBaseCharAISupport.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetAvailableSkillUseType@ioBaseChar@@QAE?AW4SkillUseType@@XZ ; ioBaseChar::GetAvailableSkillUseType
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsJumpingState@ioBaseChar@@QAE_NXZ:PROC	; ioBaseChar::IsJumpingState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasecharaisupport.cpp
;	COMDAT ?GetAvailableSkillUseType@ioBaseChar@@QAE?AW4SkillUseType@@XZ
_TEXT	SEGMENT
?GetAvailableSkillUseType@ioBaseChar@@QAE?AW4SkillUseType@@XZ PROC ; ioBaseChar::GetAvailableSkillUseType, COMDAT
; _this$ = ecx

; 6    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 7    : 	// using AI : which type of skill can I use now?
; 8    : 	if( IsJumpingState() )					return SUT_JUMP;

  00003	e8 00 00 00 00	 call	 ?IsJumpingState@ioBaseChar@@QAE_NXZ ; ioBaseChar::IsJumpingState
  00008	84 c0		 test	 al, al
  0000a	74 05		 je	 SHORT $LN4@GetAvailab
  0000c	33 c0		 xor	 eax, eax
  0000e	40		 inc	 eax
  0000f	5e		 pop	 esi

; 10   : 	else									return SUT_NORMAL;
; 11   : }

  00010	c3		 ret	 0
$LN4@GetAvailab:

; 9    : 	else if( IsApplyDownState( false ) )	return SUT_DOWN;

  00011	6a 00		 push	 0
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	f7 d8		 neg	 eax
  0001f	1b c0		 sbb	 eax, eax
  00021	83 e0 02	 and	 eax, 2
  00024	5e		 pop	 esi

; 10   : 	else									return SUT_NORMAL;
; 11   : }

  00025	c3		 ret	 0
?GetAvailableSkillUseType@ioBaseChar@@QAE?AW4SkillUseType@@XZ ENDP ; ioBaseChar::GetAvailableSkillUseType
_TEXT	ENDS
PUBLIC	?IsCharacterWounded@ioBaseChar@@QAE_NXZ		; ioBaseChar::IsCharacterWounded
; Function compile flags: /Ogsp
;	COMDAT ?IsCharacterWounded@ioBaseChar@@QAE_NXZ
_TEXT	SEGMENT
?IsCharacterWounded@ioBaseChar@@QAE_NXZ PROC		; ioBaseChar::IsCharacterWounded, COMDAT
; _this$ = ecx

; 15   : 	int	x = (int)m_CharState;
; 16   : 
; 17   : 	return ( m_CharState == CS_WOUNDED ||
; 18   : 			 m_CharState == CS_BLOW_WOUNDED ||
; 19   : 			 m_CharState == CS_BOUND_BLOW_WOUNDED ||
; 20   : 			 m_CharState == CS_BLOW_EXTEND_WOUND );

  00000	8d 81 10 03 00
	00		 lea	 eax, DWORD PTR [ecx+784]
  00006	80 38 0b	 cmp	 BYTE PTR [eax], 11	; 0000000bH
  00009	74 11		 je	 SHORT $LN3@IsCharacte
  0000b	8a 00		 mov	 al, BYTE PTR [eax]
  0000d	3c 0c		 cmp	 al, 12			; 0000000cH
  0000f	74 0b		 je	 SHORT $LN3@IsCharacte
  00011	3c 31		 cmp	 al, 49			; 00000031H
  00013	74 07		 je	 SHORT $LN3@IsCharacte
  00015	3c 46		 cmp	 al, 70			; 00000046H
  00017	74 03		 je	 SHORT $LN3@IsCharacte
  00019	33 c0		 xor	 eax, eax

; 21   : }

  0001b	c3		 ret	 0
$LN3@IsCharacte:

; 15   : 	int	x = (int)m_CharState;
; 16   : 
; 17   : 	return ( m_CharState == CS_WOUNDED ||
; 18   : 			 m_CharState == CS_BLOW_WOUNDED ||
; 19   : 			 m_CharState == CS_BOUND_BLOW_WOUNDED ||
; 20   : 			 m_CharState == CS_BLOW_EXTEND_WOUND );

  0001c	33 c0		 xor	 eax, eax
  0001e	40		 inc	 eax

; 21   : }

  0001f	c3		 ret	 0
?IsCharacterWounded@ioBaseChar@@QAE_NXZ ENDP		; ioBaseChar::IsCharacterWounded
_TEXT	ENDS
END
