; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioLongJump.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?return1@@YAIXZ					; return1
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stdafx.h
;	COMDAT ?return1@@YAIXZ
_TEXT	SEGMENT
?return1@@YAIXZ PROC					; return1, COMDAT

; 17   : 	__forceinline unsigned int return1() { __asm mov eax, 1 };

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?return1@@YAIXZ ENDP					; return1
_TEXT	ENDS
PUBLIC	?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ	; ioBaseChar::GetMoveDir
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ PROC	; ioBaseChar::GetMoveDir, COMDAT
; _this$ = ecx

; 2596 : 	inline const D3DXVECTOR3& GetMoveDir() const { return m_vMoveDir; }

  00000	8d 81 b4 06 00
	00		 lea	 eax, DWORD PTR [ecx+1716]
  00006	c3		 ret	 0
?GetMoveDir@ioBaseChar@@QBEABUD3DXVECTOR3@@XZ ENDP	; ioBaseChar::GetMoveDir
_TEXT	ENDS
PUBLIC	_fabsf
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv129 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv129[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv129[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	?fabs@@YAMM@Z					; fabs
; Function compile flags: /Ogsp
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 518  :         {return (fabsf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00006	d9 e1		 fabs
  00008	d9 5d 08	 fstp	 DWORD PTR tv131[ebp]
  0000b	d9 45 08	 fld	 DWORD PTR tv131[ebp]
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
PUBLIC	??_7ioLongJump@@6B@				; ioLongJump::`vftable'
PUBLIC	??0ioLongJump@@QAE@XZ				; ioLongJump::ioLongJump
PUBLIC	??_R4ioLongJump@@6B@				; ioLongJump::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioLongJump@@@8				; ioLongJump `RTTI Type Descriptor'
PUBLIC	??_R3ioLongJump@@8				; ioLongJump::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioLongJump@@8				; ioLongJump::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioLongJump@@8			; ioLongJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioExtendJump@@8			; ioExtendJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioExtendJump@@@8			; ioExtendJump `RTTI Type Descriptor'
PUBLIC	??_R3ioExtendJump@@8				; ioExtendJump::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioExtendJump@@8				; ioExtendJump::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioLongJump@@UAEXAAVioINILoader@@@Z ; ioLongJump::LoadProperty
PUBLIC	?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ	; ioLongJump::Clone
PUBLIC	?GetType@ioLongJump@@UBE?AW4JumpType@@XZ	; ioLongJump::GetType
PUBLIC	?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z ; ioLongJump::SetJumpping
PUBLIC	?GetChargingTime@ioLongJump@@UAEKPAVioBaseChar@@@Z ; ioLongJump::GetChargingTime
EXTRN	??0ioExtendJump@@QAE@XZ:PROC			; ioExtendJump::ioExtendJump
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SetJumpState@ioExtendJump@@UAEXXZ:PROC		; ioExtendJump::SetJumpState
EXTRN	?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::ProcessJumpReady
EXTRN	?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z:PROC ; ioExtendJump::SetJumpAttack
EXTRN	?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z:PROC ; ioExtendJump::ProcessJumpping
EXTRN	?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::ProcessLanding
EXTRN	?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z:PROC ; ioExtendJump::ProcessJumpAttack
EXTRN	?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z:PROC ; ioExtendJump::ProcessAimJump
EXTRN	?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z:PROC ; ioExtendJump::ApplyJump
EXTRN	?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::OnEndExtendJump
EXTRN	?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckComboJumpAttack
EXTRN	?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ:PROC ; ioExtendJump::GetJumpAniDefenseWounded
EXTRN	?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ:PROC ; ioExtendJump::GetJumpAniDefenseCriticalWounded
EXTRN	?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsCanJumpingSkill
EXTRN	?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z:PROC ; ioExtendJump::GetExtraJumpSpeedRate
EXTRN	?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::SetLandingState
EXTRN	?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsCanJumpAttack
EXTRN	?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ:PROC ; ioExtendJump::IsEnableLandAfterState
EXTRN	?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ:PROC ; ioExtendJump::IsEnableJumpLandEndDash
EXTRN	?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsEnableJumpDash
EXTRN	?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z:PROC ; ioExtendJump::GetLandAfterAni
EXTRN	?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z:PROC ; ioExtendJump::GetLandAfterAniRate
EXTRN	?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z:PROC ; ioExtendJump::SetNextJumpItemState
EXTRN	?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::SetExtraJump
EXTRN	?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::ProcessExtraJump
EXTRN	?ClearAirJump@ioExtendJump@@MAEXXZ:PROC		; ioExtendJump::ClearAirJump
EXTRN	?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z:PROC ; ioExtendJump::SetAirJump
EXTRN	?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckAirJump
EXTRN	?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ:PROC ; ioExtendJump::CheckCanUseBuffAirDash
EXTRN	?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z:PROC ; ioExtendJump::CheckKeyReserveTime
EXTRN	?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckKeyReserve
EXTRN	?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::CheckUseExtendJump
EXTRN	?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z:PROC ; ioExtendJump::IsBuffFlyChange
EXTRN	?IsNoProcessMove@ioExtendJump@@UAE_NXZ:PROC	; ioExtendJump::IsNoProcessMove
EXTRN	??_EioLongJump@@UAEPAXI@Z:PROC			; ioLongJump::`vector deleting destructor'
;	COMDAT ??_R2ioExtendJump@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolongjump.cpp
rdata$r	SEGMENT
??_R2ioExtendJump@@8 DD FLAT:??_R1A@?0A@EA@ioExtendJump@@8 ; ioExtendJump::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioExtendJump@@8
rdata$r	SEGMENT
??_R3ioExtendJump@@8 DD 00H				; ioExtendJump::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioExtendJump@@@8
_DATA	SEGMENT
??_R0?AVioExtendJump@@@8 DD FLAT:??_7type_info@@6B@	; ioExtendJump `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioExtendJump@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioExtendJump@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioExtendJump@@8 DD FLAT:??_R0?AVioExtendJump@@@8 ; ioExtendJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioLongJump@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioLongJump@@8 DD FLAT:??_R0?AVioLongJump@@@8 ; ioLongJump::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioLongJump@@8
rdata$r	ENDS
;	COMDAT ??_R2ioLongJump@@8
rdata$r	SEGMENT
??_R2ioLongJump@@8 DD FLAT:??_R1A@?0A@EA@ioLongJump@@8	; ioLongJump::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioExtendJump@@8
rdata$r	ENDS
;	COMDAT ??_R3ioLongJump@@8
rdata$r	SEGMENT
??_R3ioLongJump@@8 DD 00H				; ioLongJump::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioLongJump@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioLongJump@@@8
_DATA	SEGMENT
??_R0?AVioLongJump@@@8 DD FLAT:??_7type_info@@6B@	; ioLongJump `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioLongJump@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioLongJump@@6B@
rdata$r	SEGMENT
??_R4ioLongJump@@6B@ DD 00H				; ioLongJump::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioLongJump@@@8
	DD	FLAT:??_R3ioLongJump@@8
rdata$r	ENDS
;	COMDAT ??_7ioLongJump@@6B@
CONST	SEGMENT
??_7ioLongJump@@6B@ DD FLAT:??_R4ioLongJump@@6B@	; ioLongJump::`vftable'
	DD	FLAT:?LoadProperty@ioLongJump@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ
	DD	FLAT:?GetType@ioLongJump@@UBE?AW4JumpType@@XZ
	DD	FLAT:?SetJumpState@ioExtendJump@@UAEXXZ
	DD	FLAT:?ProcessJumpReady@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z
	DD	FLAT:?SetJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?ProcessJumpping@ioExtendJump@@UAEXPAVioBaseChar@@MM@Z
	DD	FLAT:?ProcessLanding@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@M@Z
	DD	FLAT:?ProcessAimJump@ioExtendJump@@UAE_NPAVioBaseChar@@M@Z
	DD	FLAT:?ApplyJump@ioExtendJump@@UAEXPAVioBaseChar@@AAVSP2Packet@@@Z
	DD	FLAT:?OnEndExtendJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckComboJumpAttack@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?GetChargingTime@ioLongJump@@UAEKPAVioBaseChar@@@Z
	DD	FLAT:?GetJumpAniDefenseWounded@ioExtendJump@@UAE?AVioHashString@@XZ
	DD	FLAT:?GetJumpAniDefenseCriticalWounded@ioExtendJump@@UAE?AVioHashString@@XZ
	DD	FLAT:?IsCanJumpingSkill@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetExtraJumpSpeedRate@ioExtendJump@@UBEMABUD3DXVECTOR3@@ABUD3DXQUATERNION@@@Z
	DD	FLAT:?SetLandingState@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?IsCanJumpAttack@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsEnableLandAfterState@ioExtendJump@@UAE_NXZ
	DD	FLAT:?IsEnableJumpLandEndDash@ioExtendJump@@UAE_NXZ
	DD	FLAT:?IsEnableJumpDash@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?GetLandAfterAni@ioExtendJump@@UAEABVioHashString@@_N@Z
	DD	FLAT:?GetLandAfterAniRate@ioExtendJump@@UAEM_N@Z
	DD	FLAT:?SetNextJumpItemState@ioExtendJump@@UAEXPAVioBaseChar@@0_NW4ChangeNextItemType@@PAVioWeapon@@M@Z
	DD	FLAT:?SetExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ProcessExtraJump@ioExtendJump@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?ClearAirJump@ioExtendJump@@MAEXXZ
	DD	FLAT:?SetAirJump@ioExtendJump@@MAEXPAVioBaseChar@@HM@Z
	DD	FLAT:?CheckAirJump@ioExtendJump@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckCanUseBuffAirDash@ioExtendJump@@UAE_NXZ
	DD	FLAT:?CheckKeyReserveTime@ioExtendJump@@MAEMPAVioBaseChar@@HMK@Z
	DD	FLAT:?CheckKeyReserve@ioExtendJump@@MAEXPAVioBaseChar@@@Z
	DD	FLAT:?CheckUseExtendJump@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsBuffFlyChange@ioExtendJump@@UAE_NPAVioBaseChar@@@Z
	DD	FLAT:?IsNoProcessMove@ioExtendJump@@UAE_NXZ
	DD	FLAT:??_EioLongJump@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioLongJump@@QAE@XZ
_TEXT	SEGMENT
??0ioLongJump@@QAE@XZ PROC				; ioLongJump::ioLongJump, COMDAT
; _this$ = ecx

; 7    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioExtendJump@@QAE@XZ	; ioExtendJump::ioExtendJump
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLongJump@@6B@

; 8    : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0ioLongJump@@QAE@XZ ENDP				; ioLongJump::ioLongJump
_TEXT	ENDS
PUBLIC	??0ioLongJump@@QAE@ABV0@@Z			; ioLongJump::ioLongJump
EXTRN	??0ioExtendJump@@QAE@ABV0@@Z:PROC		; ioExtendJump::ioExtendJump
; Function compile flags: /Ogsp
;	COMDAT ??0ioLongJump@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioLongJump@@QAE@ABV0@@Z PROC				; ioLongJump::ioLongJump, COMDAT
; _this$ = ecx

; 14   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioExtendJump@@QAE@ABV0@@Z ; ioExtendJump::ioExtendJump
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLongJump@@6B@
  00016	d9 87 24 01 00
	00		 fld	 DWORD PTR [edi+292]
  0001c	d9 9e 24 01 00
	00		 fstp	 DWORD PTR [esi+292]
  00022	8b 87 28 01 00
	00		 mov	 eax, DWORD PTR [edi+296]
  00028	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax
  0002e	5f		 pop	 edi

; 15   : }

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??0ioLongJump@@QAE@ABV0@@Z ENDP				; ioLongJump::ioLongJump
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ$0
__ehfuncinfo$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ
_TEXT	SEGMENT
$T524405 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ PROC		; ioLongJump::Clone, COMDAT
; _this$ = ecx

; 18   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 19   : 	return new ioLongJump( *this );

  0000e	68 2c 01 00 00	 push	 300			; 0000012cH
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524405[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioLongJump@@QAE@ABV0@@Z ; ioLongJump::ioLongJump
$LN3@Clone:

; 20   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524405[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioLongJump@@UAEPAVioExtendJump@@XZ ENDP		; ioLongJump::Clone
PUBLIC	??1ioLongJump@@UAE@XZ				; ioLongJump::~ioLongJump
EXTRN	??1ioExtendJump@@UAE@XZ:PROC			; ioExtendJump::~ioExtendJump
; Function compile flags: /Ogsp
;	COMDAT ??1ioLongJump@@UAE@XZ
_TEXT	SEGMENT
??1ioLongJump@@UAE@XZ PROC				; ioLongJump::~ioLongJump, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioLongJump@@6B@

; 24   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioExtendJump@@UAE@XZ	; ioExtendJump::~ioExtendJump
??1ioLongJump@@UAE@XZ ENDP				; ioLongJump::~ioLongJump
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetType@ioLongJump@@UBE?AW4JumpType@@XZ
_TEXT	SEGMENT
?GetType@ioLongJump@@UBE?AW4JumpType@@XZ PROC		; ioLongJump::GetType, COMDAT
; _this$ = ecx

; 28   : 	return JT_LONG_JUMP;

  00000	6a 03		 push	 3
  00002	58		 pop	 eax

; 29   : }

  00003	c3		 ret	 0
?GetType@ioLongJump@@UBE?AW4JumpType@@XZ ENDP		; ioLongJump::GetType
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?GetChargingTime@ioLongJump@@UAEKPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?GetChargingTime@ioLongJump@@UAEKPAVioBaseChar@@@Z PROC	; ioLongJump::GetChargingTime, COMDAT
; _this$ = ecx

; 61   : 	return m_dwJumpChargeTime;

  00000	8b 81 28 01 00
	00		 mov	 eax, DWORD PTR [ecx+296]

; 62   : }

  00006	c2 04 00	 ret	 4
?GetChargingTime@ioLongJump@@UAEKPAVioBaseChar@@@Z ENDP	; ioLongJump::GetChargingTime
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 305  :     y = fy;

  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 306  :     z = fz;

  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 307  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__mask@@NegFloat@
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
;	COMDAT __mask@@NegFloat@
CONST	SEGMENT
__mask@@NegFloat@ DB 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00012	0f 57 c8	 xorps	 xmm1, xmm0
  00015	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00019	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0001e	0f 57 c8	 xorps	 xmm1, xmm0
  00021	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00026	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0002b	0f 57 c8	 xorps	 xmm1, xmm0
  0002e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 374  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	?_DECSTR@@YAXPADH@Z				; _DECSTR
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\stringprotect.h
;	COMDAT ?_DECSTR@@YAXPADH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_l$ = 12						; size = 4
?_DECSTR@@YAXPADH@Z PROC				; _DECSTR, COMDAT

; 40   : __forceinline void _DECSTR(char* s, int l){int i=0,l4=(l-1)/4,*p=(int*)s;s[l-1]=0;for(;i<l4;++i)*(p++)^=0xEAEBECED;for(i=l4*4;i<l-1;++i)s[i]^=0xED-i%4;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _l$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8d 79 ff	 lea	 edi, DWORD PTR [ecx-1]
  0000e	8b c7		 mov	 eax, edi
  00010	99		 cdq
  00011	83 e2 03	 and	 edx, 3
  00014	03 c2		 add	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
  00019	8b d6		 mov	 edx, esi
  0001b	c6 44 0e ff 00	 mov	 BYTE PTR [esi+ecx-1], 0
  00020	85 c0		 test	 eax, eax
  00022	7e 0e		 jle	 SHORT $LN4@DECSTR
  00024	8b c8		 mov	 ecx, eax
$LL6@DECSTR:
  00026	81 32 ed ec eb
	ea		 xor	 DWORD PTR [edx], -353637139 ; eaebecedH
  0002c	83 c2 04	 add	 edx, 4
  0002f	49		 dec	 ecx
  00030	75 f4		 jne	 SHORT $LL6@DECSTR
$LN4@DECSTR:
  00032	c1 e0 02	 shl	 eax, 2
  00035	eb 17		 jmp	 SHORT $LN14@DECSTR
$LL3@DECSTR:
  00037	8b c8		 mov	 ecx, eax
  00039	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  0003f	79 05		 jns	 SHORT $LN13@DECSTR
  00041	49		 dec	 ecx
  00042	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00045	41		 inc	 ecx
$LN13@DECSTR:
  00046	b2 ed		 mov	 dl, -19			; ffffffedH
  00048	2a d1		 sub	 dl, cl
  0004a	30 14 30	 xor	 BYTE PTR [eax+esi], dl
  0004d	40		 inc	 eax
$LN14@DECSTR:
  0004e	3b c7		 cmp	 eax, edi
  00050	7c e5		 jl	 SHORT $LL3@DECSTR
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_DECSTR@@YAXPADH@Z ENDP				; _DECSTR
_TEXT	ENDS
PUBLIC	?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z	; CEncrypt<float>::EncryptValueToPool
EXTRN	?EncryptByte@ccddaabb@@QAEXPBDPADH@Z:PROC	; ccddaabb::EncryptByte
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z PROC	; CEncrypt<float>::EncryptValueToPool, COMDAT
; _this$ = ecx

; 67   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 		m_RC5.EncryptByte( value, m_MemPool, max(m_ValueSize, DEFAULT_ENCRYPT) );

  00003	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00007	83 f8 04	 cmp	 eax, 4
  0000a	77 03		 ja	 SHORT $LN4@EncryptVal
  0000c	6a 04		 push	 4
  0000e	58		 pop	 eax
$LN4@EncryptVal:
  0000f	50		 push	 eax
  00010	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR _value$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ?EncryptByte@ccddaabb@@QAEXPBDPADH@Z ; ccddaabb::EncryptByte

; 69   : 		
; 70   : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ENDP	; CEncrypt<float>::EncryptValueToPool
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioLongJump@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioLongJump@@UAEPAXI@Z PROC				; ioLongJump::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioLongJump@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioExtendJump@@UAE@XZ	; ioExtendJump::~ioExtendJump
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioLongJump@@UAEPAXI@Z ENDP				; ioLongJump::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ; ioINILoader::LoadFloat_e<17>
EXTRN	__imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\io3dengine\ioiniloader.h
;	COMDAT ??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_f$ = 12						; size = 4
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z PROC ; ioINILoader::LoadFloat_e<17>, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 136  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadFloat_
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadFloat_
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadFloat_
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadFloat_
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadFloat_
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadFloat_
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadFloat_
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadFloat_
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadFloat_
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadFloat_
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadFloat_
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadFloat_
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadFloat_
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadFloat_
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadFloat_
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadFloat_
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadFloat_
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadFloat_
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadFloat_
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadFloat_
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadFloat_
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadFloat_
$LN76@LoadFloat_:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadFloat_
$LN77@LoadFloat_:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadFloat_
$LN78@LoadFloat_:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadFloat_
$LN79@LoadFloat_:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadFloat_
$LN81@LoadFloat_:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadFloat_
$LN82@LoadFloat_:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadFloat_
$LN83@LoadFloat_:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadFloat_
$LN84@LoadFloat_:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadFloat_
$LN85@LoadFloat_:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadFloat_
$LN86@LoadFloat_:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadFloat_
$LN87@LoadFloat_:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadFloat_
$LN88@LoadFloat_:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadFloat_
$LN89@LoadFloat_:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadFloat_
$LN90@LoadFloat_:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadFloat_
$LN91@LoadFloat_:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadFloat_
$LN92@LoadFloat_:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadFloat_
$LN93@LoadFloat_:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadFloat_
$LN94@LoadFloat_:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadFloat_
$LN95@LoadFloat_:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadFloat_
$LN96@LoadFloat_:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadFloat_:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadFloat_:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadFloat_

; 137  : 		return LoadFloat(_k, f);

  001e1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$[ebp]
  001e6	51		 push	 ecx
  001e7	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	50		 push	 eax
  001f0	8b ce		 mov	 ecx, esi
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z

; 138  : 	}

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	33 cd		 xor	 ecx, ebp
  001fd	5e		 pop	 esi
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	c9		 leave
  00204	c2 08 00	 ret	 8
??$LoadFloat_e@$0BB@@ioINILoader@@QAEMAAY0BB@$$CBDM@Z ENDP ; ioINILoader::LoadFloat_e<17>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ; ioINILoader::LoadInt_e<17>
EXTRN	__imp_?LoadInt@ioINILoader@@QAEHPBDH@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z
_TEXT	SEGMENT
__k$ = -28						; size = 17
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_i$ = 12						; size = 4
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z PROC ; ioINILoader::LoadInt_e<17>, COMDAT
; _this$ = ecx

; 118  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 119  : 		_ENCSTR(k, _k);

  00013	8a 10		 mov	 dl, BYTE PTR [eax]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	84 d2		 test	 dl, dl
  0001a	0f 84 a7 01 00
	00		 je	 $LN96@LoadInt_e
  00020	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00023	88 55 e4	 mov	 BYTE PTR __k$[ebp], dl
  00026	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00029	84 d2		 test	 dl, dl
  0002b	0f 84 90 01 00
	00		 je	 $LN95@LoadInt_e
  00031	b1 ec		 mov	 cl, -20			; ffffffecH
  00033	32 d1		 xor	 dl, cl
  00035	88 55 e5	 mov	 BYTE PTR __k$[ebp+1], dl
  00038	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0003b	84 d2		 test	 dl, dl
  0003d	0f 84 78 01 00
	00		 je	 $LN94@LoadInt_e
  00043	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00046	88 55 e6	 mov	 BYTE PTR __k$[ebp+2], dl
  00049	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004c	84 d2		 test	 dl, dl
  0004e	0f 84 61 01 00
	00		 je	 $LN93@LoadInt_e
  00054	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00057	88 55 e7	 mov	 BYTE PTR __k$[ebp+3], dl
  0005a	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  0005d	84 d2		 test	 dl, dl
  0005f	0f 84 4a 01 00
	00		 je	 $LN92@LoadInt_e
  00065	80 f2 ed	 xor	 dl, -19			; ffffffedH
  00068	88 55 e8	 mov	 BYTE PTR __k$[ebp+4], dl
  0006b	8a 50 05	 mov	 dl, BYTE PTR [eax+5]
  0006e	84 d2		 test	 dl, dl
  00070	0f 84 34 01 00
	00		 je	 $LN91@LoadInt_e
  00076	32 d1		 xor	 dl, cl
  00078	88 55 e9	 mov	 BYTE PTR __k$[ebp+5], dl
  0007b	8a 50 06	 mov	 dl, BYTE PTR [eax+6]
  0007e	84 d2		 test	 dl, dl
  00080	0f 84 1e 01 00
	00		 je	 $LN90@LoadInt_e
  00086	80 f2 eb	 xor	 dl, -21			; ffffffebH
  00089	88 55 ea	 mov	 BYTE PTR __k$[ebp+6], dl
  0008c	8a 50 07	 mov	 dl, BYTE PTR [eax+7]
  0008f	84 d2		 test	 dl, dl
  00091	0f 84 07 01 00
	00		 je	 $LN89@LoadInt_e
  00097	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0009a	88 55 eb	 mov	 BYTE PTR __k$[ebp+7], dl
  0009d	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  000a0	84 d2		 test	 dl, dl
  000a2	0f 84 f0 00 00
	00		 je	 $LN88@LoadInt_e
  000a8	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ab	88 55 ec	 mov	 BYTE PTR __k$[ebp+8], dl
  000ae	8a 50 09	 mov	 dl, BYTE PTR [eax+9]
  000b1	84 d2		 test	 dl, dl
  000b3	0f 84 da 00 00
	00		 je	 $LN87@LoadInt_e
  000b9	32 d1		 xor	 dl, cl
  000bb	88 55 ed	 mov	 BYTE PTR __k$[ebp+9], dl
  000be	8a 50 0a	 mov	 dl, BYTE PTR [eax+10]
  000c1	84 d2		 test	 dl, dl
  000c3	0f 84 c4 00 00
	00		 je	 $LN86@LoadInt_e
  000c9	80 f2 eb	 xor	 dl, -21			; ffffffebH
  000cc	88 55 ee	 mov	 BYTE PTR __k$[ebp+10], dl
  000cf	8a 50 0b	 mov	 dl, BYTE PTR [eax+11]
  000d2	84 d2		 test	 dl, dl
  000d4	0f 84 ad 00 00
	00		 je	 $LN85@LoadInt_e
  000da	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  000dd	88 55 ef	 mov	 BYTE PTR __k$[ebp+11], dl
  000e0	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000e3	84 d2		 test	 dl, dl
  000e5	0f 84 96 00 00
	00		 je	 $LN84@LoadInt_e
  000eb	80 f2 ed	 xor	 dl, -19			; ffffffedH
  000ee	88 55 f0	 mov	 BYTE PTR __k$[ebp+12], dl
  000f1	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  000f4	84 d2		 test	 dl, dl
  000f6	0f 84 80 00 00
	00		 je	 $LN83@LoadInt_e
  000fc	32 d1		 xor	 dl, cl
  000fe	88 55 f1	 mov	 BYTE PTR __k$[ebp+13], dl
  00101	8a 50 0e	 mov	 dl, BYTE PTR [eax+14]
  00104	84 d2		 test	 dl, dl
  00106	74 6e		 je	 SHORT $LN82@LoadInt_e
  00108	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0010b	88 55 f2	 mov	 BYTE PTR __k$[ebp+14], dl
  0010e	8a 50 0f	 mov	 dl, BYTE PTR [eax+15]
  00111	84 d2		 test	 dl, dl
  00113	74 5b		 je	 SHORT $LN81@LoadInt_e
  00115	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  00118	80 78 10 00	 cmp	 BYTE PTR [eax+16], 0
  0011c	88 55 f3	 mov	 BYTE PTR __k$[ebp+15], dl
  0011f	0f 84 a6 00 00
	00		 je	 $LN1@LoadInt_e
  00125	8a 50 11	 mov	 dl, BYTE PTR [eax+17]
  00128	84 d2		 test	 dl, dl
  0012a	74 3f		 je	 SHORT $LN79@LoadInt_e
  0012c	32 d1		 xor	 dl, cl
  0012e	88 55 f5	 mov	 BYTE PTR __k$[ebp+17], dl
  00131	8a 50 12	 mov	 dl, BYTE PTR [eax+18]
  00134	84 d2		 test	 dl, dl
  00136	74 2d		 je	 SHORT $LN78@LoadInt_e
  00138	80 f2 eb	 xor	 dl, -21			; ffffffebH
  0013b	88 55 f6	 mov	 BYTE PTR __k$[ebp+18], dl
  0013e	8a 50 13	 mov	 dl, BYTE PTR [eax+19]
  00141	84 d2		 test	 dl, dl
  00143	74 1a		 je	 SHORT $LN77@LoadInt_e
  00145	8a 40 14	 mov	 al, BYTE PTR [eax+20]
  00148	80 f2 ea	 xor	 dl, -22			; ffffffeaH
  0014b	88 55 f7	 mov	 BYTE PTR __k$[ebp+19], dl
  0014e	84 c0		 test	 al, al
  00150	74 07		 je	 SHORT $LN76@LoadInt_e
  00152	34 ed		 xor	 al, -19			; ffffffedH
  00154	88 45 f8	 mov	 BYTE PTR __k$[ebp+20], al
  00157	eb 72		 jmp	 SHORT $LN1@LoadInt_e
$LN76@LoadInt_e:
  00159	c6 45 f8 ed	 mov	 BYTE PTR __k$[ebp+20], -19 ; ffffffedH
  0015d	eb 6c		 jmp	 SHORT $LN1@LoadInt_e
$LN77@LoadInt_e:
  0015f	c6 45 f7 ea	 mov	 BYTE PTR __k$[ebp+19], -22 ; ffffffeaH
  00163	eb 66		 jmp	 SHORT $LN1@LoadInt_e
$LN78@LoadInt_e:
  00165	c6 45 f6 eb	 mov	 BYTE PTR __k$[ebp+18], -21 ; ffffffebH
  00169	eb 60		 jmp	 SHORT $LN1@LoadInt_e
$LN79@LoadInt_e:
  0016b	88 4d f5	 mov	 BYTE PTR __k$[ebp+17], cl
  0016e	eb 5b		 jmp	 SHORT $LN1@LoadInt_e
$LN81@LoadInt_e:
  00170	c6 45 f3 ea	 mov	 BYTE PTR __k$[ebp+15], -22 ; ffffffeaH
  00174	eb 55		 jmp	 SHORT $LN1@LoadInt_e
$LN82@LoadInt_e:
  00176	c6 45 f2 eb	 mov	 BYTE PTR __k$[ebp+14], -21 ; ffffffebH
  0017a	eb 4f		 jmp	 SHORT $LN1@LoadInt_e
$LN83@LoadInt_e:
  0017c	88 4d f1	 mov	 BYTE PTR __k$[ebp+13], cl
  0017f	eb 4a		 jmp	 SHORT $LN1@LoadInt_e
$LN84@LoadInt_e:
  00181	c6 45 f0 ed	 mov	 BYTE PTR __k$[ebp+12], -19 ; ffffffedH
  00185	eb 44		 jmp	 SHORT $LN1@LoadInt_e
$LN85@LoadInt_e:
  00187	c6 45 ef ea	 mov	 BYTE PTR __k$[ebp+11], -22 ; ffffffeaH
  0018b	eb 3e		 jmp	 SHORT $LN1@LoadInt_e
$LN86@LoadInt_e:
  0018d	c6 45 ee eb	 mov	 BYTE PTR __k$[ebp+10], -21 ; ffffffebH
  00191	eb 38		 jmp	 SHORT $LN1@LoadInt_e
$LN87@LoadInt_e:
  00193	88 4d ed	 mov	 BYTE PTR __k$[ebp+9], cl
  00196	eb 33		 jmp	 SHORT $LN1@LoadInt_e
$LN88@LoadInt_e:
  00198	c6 45 ec ed	 mov	 BYTE PTR __k$[ebp+8], -19 ; ffffffedH
  0019c	eb 2d		 jmp	 SHORT $LN1@LoadInt_e
$LN89@LoadInt_e:
  0019e	c6 45 eb ea	 mov	 BYTE PTR __k$[ebp+7], -22 ; ffffffeaH
  001a2	eb 27		 jmp	 SHORT $LN1@LoadInt_e
$LN90@LoadInt_e:
  001a4	c6 45 ea eb	 mov	 BYTE PTR __k$[ebp+6], -21 ; ffffffebH
  001a8	eb 21		 jmp	 SHORT $LN1@LoadInt_e
$LN91@LoadInt_e:
  001aa	88 4d e9	 mov	 BYTE PTR __k$[ebp+5], cl
  001ad	eb 1c		 jmp	 SHORT $LN1@LoadInt_e
$LN92@LoadInt_e:
  001af	c6 45 e8 ed	 mov	 BYTE PTR __k$[ebp+4], -19 ; ffffffedH
  001b3	eb 16		 jmp	 SHORT $LN1@LoadInt_e
$LN93@LoadInt_e:
  001b5	c6 45 e7 ea	 mov	 BYTE PTR __k$[ebp+3], -22 ; ffffffeaH
  001b9	eb 10		 jmp	 SHORT $LN1@LoadInt_e
$LN94@LoadInt_e:
  001bb	c6 45 e6 eb	 mov	 BYTE PTR __k$[ebp+2], -21 ; ffffffebH
  001bf	eb 0a		 jmp	 SHORT $LN1@LoadInt_e
$LN95@LoadInt_e:
  001c1	c6 45 e5 ec	 mov	 BYTE PTR __k$[ebp+1], -20 ; ffffffecH
  001c5	eb 04		 jmp	 SHORT $LN1@LoadInt_e
$LN96@LoadInt_e:
  001c7	c6 45 e4 ed	 mov	 BYTE PTR __k$[ebp], -19	; ffffffedH
$LN1@LoadInt_e:
  001cb	6a 04		 push	 4
  001cd	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001d0	c6 45 f4 00	 mov	 BYTE PTR __k$[ebp+16], 0
  001d4	5a		 pop	 edx
$LL104@LoadInt_e:
  001d5	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  001db	83 c0 04	 add	 eax, 4
  001de	4a		 dec	 edx
  001df	75 f4		 jne	 SHORT $LL104@LoadInt_e

; 120  : 		return LoadInt(_k, i);

  001e1	ff 75 0c	 push	 DWORD PTR _i$[ebp]
  001e4	8d 45 e4	 lea	 eax, DWORD PTR __k$[ebp]
  001e7	50		 push	 eax
  001e8	8b ce		 mov	 ecx, esi
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 121  : 	}

  001f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f3	33 cd		 xor	 ecx, ebp
  001f5	5e		 pop	 esi
  001f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fb	c9		 leave
  001fc	c2 08 00	 ret	 8
??$LoadInt_e@$0BB@@ioINILoader@@QAEHAAY0BB@$$CBDH@Z ENDP ; ioINILoader::LoadInt_e<17>
_TEXT	ENDS
PUBLIC	??4?$CEncrypt@M@@QAEMM@Z			; CEncrypt<float>::operator=
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\encryptvalue.h
;	COMDAT ??4?$CEncrypt@M@@QAEMM@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_inValue$ = 8						; size = 4
??4?$CEncrypt@M@@QAEMM@Z PROC				; CEncrypt<float>::operator=, COMDAT
; _this$ = ecx

; 1654 : 	{	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1655 : 		type value = inValue;

  00003	d9 45 08	 fld	 DWORD PTR _inValue$[ebp]

; 1656 : 		EncryptValueToPool((char*)&value);

  00006	8d 45 08	 lea	 eax, DWORD PTR _value$[ebp]
  00009	50		 push	 eax
  0000a	d9 5d 08	 fstp	 DWORD PTR _value$[ebp]
  0000d	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 1657 : #ifdef _NOTUSE
; 1658 : 		m_value = inValue;
; 1659 : 		Debug();
; 1660 : #endif
; 1661 : 		return value;

  00012	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 1662 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4?$CEncrypt@M@@QAEMM@Z ENDP				; CEncrypt<float>::operator=
_TEXT	ENDS
PUBLIC	?SetForcePowerAmt@ioBaseChar@@QAEXM@Z		; ioBaseChar::SetForcePowerAmt
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?SetForcePowerAmt@ioBaseChar@@QAEXM@Z
_TEXT	SEGMENT
_value$524513 = 8					; size = 4
_fAmt$ = 8						; size = 4
?SetForcePowerAmt@ioBaseChar@@QAEXM@Z PROC		; ioBaseChar::SetForcePowerAmt, COMDAT
; _this$ = ecx

; 2641 : 	inline void SetForcePowerAmt( float fAmt ) { m_fForceAmt = fAmt; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fAmt$[ebp]
  00008	8d 45 08	 lea	 eax, DWORD PTR _value$524513[ebp]
  0000b	50		 push	 eax
  0000c	81 c1 88 0b 00
	00		 add	 ecx, 2952		; 00000b88H
  00012	f3 0f 11 45 08	 movss	 DWORD PTR _value$524513[ebp], xmm0
  00017	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetForcePowerAmt@ioBaseChar@@QAEXM@Z ENDP		; ioBaseChar::SetForcePowerAmt
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z:PROC ; ioExtendJump::LoadProperty
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolongjump.cpp
;	COMDAT ?LoadProperty@ioLongJump@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
__k$524669 = -28					; size = 17
__k$524544 = -28					; size = 17
__$ArrayPad$ = -4					; size = 4
_rkLoader$ = 8						; size = 4
?LoadProperty@ioLongJump@@UAEXAAVioINILoader@@@Z PROC	; ioLongJump::LoadProperty, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _rkLoader$[ebp]

; 33   : 	ioExtendJump::LoadProperty( rkLoader );

  00015	57		 push	 edi
  00016	8b f1		 mov	 esi, ecx
  00018	e8 00 00 00 00	 call	 ?LoadProperty@ioExtendJump@@UAEXAAVioINILoader@@@Z ; ioExtendJump::LoadProperty

; 34   : 	m_fExtraForce = rkLoader.LoadFloat_e( "jump_extra_force", 0.0f );

  0001d	6a 04		 push	 4
  0001f	c7 45 e4 87 99
	86 9a		 mov	 DWORD PTR __k$524544[ebp], -1702454905 ; 9a869987H
  00026	c7 45 e8 b2 89
	93 9e		 mov	 DWORD PTR __k$524544[ebp+4], -1634498126 ; 9e9389b2H
  0002d	c7 45 ec 9f 8d
	b4 8c		 mov	 DWORD PTR __k$524544[ebp+8], -1934324321 ; 8cb48d9fH
  00034	c7 45 f0 82 9e
	88 8f		 mov	 DWORD PTR __k$524544[ebp+12], -1886871934 ; 8f889e82H
  0003b	8d 45 e4	 lea	 eax, DWORD PTR __k$524544[ebp]
  0003e	c6 45 f4 00	 mov	 BYTE PTR __k$524544[ebp+16], 0
  00042	59		 pop	 ecx
$LL106@LoadProper:
  00043	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00049	83 c0 04	 add	 eax, 4
  0004c	49		 dec	 ecx
  0004d	75 f4		 jne	 SHORT $LL106@LoadProper
  0004f	0f 57 c0	 xorps	 xmm0, xmm0
  00052	51		 push	 ecx
  00053	8d 45 e4	 lea	 eax, DWORD PTR __k$524544[ebp]
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	50		 push	 eax
  0005c	8b cf		 mov	 ecx, edi
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFloat@ioINILoader@@QAEMPBDM@Z
  00064	d9 9e 24 01 00
	00		 fstp	 DWORD PTR [esi+292]
  0006a	6a 04		 push	 4

; 35   : 	m_dwJumpChargeTime = rkLoader.LoadInt_e( "jump_charge_time", 0 );

  0006c	c7 45 e4 87 99
	86 9a		 mov	 DWORD PTR __k$524669[ebp], -1702454905 ; 9a869987H
  00073	c7 45 e8 b2 8f
	83 8b		 mov	 DWORD PTR __k$524669[ebp+4], -1954312270 ; 8b838fb2H
  0007a	c7 45 ec 9f 8b
	8e b5		 mov	 DWORD PTR __k$524669[ebp+8], -1248949345 ; b58e8b9fH
  00081	c7 45 f0 99 85
	86 8f		 mov	 DWORD PTR __k$524669[ebp+12], -1887009383 ; 8f868599H
  00088	8d 45 e4	 lea	 eax, DWORD PTR __k$524669[ebp]
  0008b	c6 45 f4 00	 mov	 BYTE PTR __k$524669[ebp+16], 0
  0008f	59		 pop	 ecx
$LL212@LoadProper:
  00090	81 30 ed ec eb
	ea		 xor	 DWORD PTR [eax], -353637139 ; eaebecedH
  00096	83 c0 04	 add	 eax, 4
  00099	49		 dec	 ecx
  0009a	75 f4		 jne	 SHORT $LL212@LoadProper
  0009c	51		 push	 ecx
  0009d	8d 45 e4	 lea	 eax, DWORD PTR __k$524669[ebp]
  000a0	50		 push	 eax
  000a1	8b cf		 mov	 ecx, edi
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadInt@ioINILoader@@QAEHPBDH@Z

; 36   : }

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	5f		 pop	 edi
  000ad	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax
  000b3	33 cd		 xor	 ecx, ebp
  000b5	5e		 pop	 esi
  000b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bb	c9		 leave
  000bc	c2 04 00	 ret	 4
?LoadProperty@ioLongJump@@UAEXAAVioINILoader@@@Z ENDP	; ioLongJump::LoadProperty
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__mask@@AbsDouble@
PUBLIC	__real@4f800000
PUBLIC	__real@00000000
PUBLIC	_pOwner$GSCopy$
EXTRN	__imp_??1ioHashString@@QAE@XZ:PROC
EXTRN	?SetChangeJumpMotion@ioBaseChar@@QAEX_NABVioHashString@@11M@Z:PROC ; ioBaseChar::SetChangeJumpMotion
EXTRN	?SetEnableChangeTeam@ioBaseChar@@QAEX_N@Z:PROC	; ioBaseChar::SetEnableChangeTeam
EXTRN	?SetEnableHide@ioBaseChar@@QAEX_NVioHashString@@1@Z:PROC ; ioBaseChar::SetEnableHide
EXTRN	__imp_??0ioHashString@@QAE@PBD@Z:PROC
EXTRN	?SetForcePower@ioBaseChar@@QAEXABUD3DXVECTOR3@@MM_N@Z:PROC ; ioBaseChar::SetForcePower
EXTRN	?SetCurMoveSpeed@ioBaseChar@@QAEXM@Z:PROC	; ioBaseChar::SetCurMoveSpeed
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __mask@@AbsDouble@
CONST	SEGMENT
__mask@@AbsDouble@ DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$4
__ehfuncinfo$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iolongjump.cpp
xdata$x	ENDS
;	COMDAT ?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z
_TEXT	SEGMENT
$T524783 = -100						; size = 16
$T524784 = -84						; size = 16
$T524785 = -68						; size = 16
$T524782 = -52						; size = 4
tv278 = -48						; size = 4
tv259 = -48						; size = 4
_value$524800 = -48					; size = 4
$T524781 = -48						; size = 4
_pOwner$GSCopy$ = -44					; size = 4
$T523773 = -40						; size = 12
_vJumpDir$523769 = -28					; size = 12
__$EHRec$ = -12						; size = 12
_pOwner$ = 8						; size = 4
_bFullTime$ = 12					; size = 1
?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z PROC	; ioLongJump::SetJumpping, COMDAT
; _this$ = ecx

; 39   : {

  00000	6a 58		 push	 88			; 00000058H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 40   : 	if( bFullTime )

  0000c	80 7d 0c 00	 cmp	 BYTE PTR _bFullTime$[ebp], 0
  00010	8b 75 08	 mov	 esi, DWORD PTR _pOwner$[ebp]
  00013	8b d9		 mov	 ebx, ecx

; 50   : 
; 51   : 		pOwner->SetEnableHide( false );

  00015	89 75 d4	 mov	 DWORD PTR _pOwner$GSCopy$[ebp], esi
  00018	0f 84 9b 01 00
	00		 je	 $LN3@SetJumppin

; 41   : 	{
; 42   : 		pOwner->SetCurMoveSpeed( 0.0f );

  0001e	0f 57 c0	 xorps	 xmm0, xmm0
  00021	51		 push	 ecx
  00022	8b ce		 mov	 ecx, esi
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	e8 00 00 00 00	 call	 ?SetCurMoveSpeed@ioBaseChar@@QAEXM@Z ; ioBaseChar::SetCurMoveSpeed

; 43   : 		pOwner->SetForcePowerAmt( 0.0f );

  0002e	0f 57 c0	 xorps	 xmm0, xmm0
  00031	8d 45 d0	 lea	 eax, DWORD PTR _value$524800[ebp]
  00034	50		 push	 eax
  00035	8d 8e 88 0b 00
	00		 lea	 ecx, DWORD PTR [esi+2952]
  0003b	f3 0f 11 45 d0	 movss	 DWORD PTR _value$524800[ebp], xmm0
  00040	e8 00 00 00 00	 call	 ?EncryptValueToPool@?$CEncrypt@M@@AAEXPBD@Z ; CEncrypt<float>::EncryptValueToPool

; 44   : 
; 45   : 		D3DXVECTOR3 vJumpDir = pOwner->GetMoveDir();
; 46   : 		if( m_fExtraForce > 0.0f )

  00045	f3 0f 10 83 24
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+292]
  0004d	81 c6 b4 06 00
	00		 add	 esi, 1716		; 000006b4H
  00053	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0005a	8d 7d e4	 lea	 edi, DWORD PTR _vJumpDir$523769[ebp]
  0005d	a5		 movsd
  0005e	a5		 movsd
  0005f	a5		 movsd
  00060	76 3e		 jbe	 SHORT $LN2@SetJumppin

; 47   : 			pOwner->SetForcePower( vJumpDir, fabs(m_fExtraForce), FLOAT1, true );

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	f3 0f 10 83 24
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+292]
  0006f	89 45 d0	 mov	 DWORD PTR tv278[ebp], eax
  00072	db 45 d0	 fild	 DWORD PTR tv278[ebp]
  00075	6a 01		 push	 1
  00077	85 c0		 test	 eax, eax
  00079	79 06		 jns	 SHORT $LN34@SetJumppin
  0007b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN34@SetJumppin:
  00081	51		 push	 ecx
  00082	51		 push	 ecx
  00083	0f 5a c0	 cvtps2pd xmm0, xmm0
  00086	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  0008a	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __mask@@AbsDouble@
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	8d 45 e4	 lea	 eax, DWORD PTR _vJumpDir$523769[ebp]

; 48   : 		else

  0009e	eb 6e		 jmp	 SHORT $LN36@SetJumppin
$LN2@SetJumppin:

; 49   : 			pOwner->SetForcePower( -vJumpDir, fabs(m_fExtraForce), FLOAT1, true );

  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	f3 0f 10 83 24
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+292]
  000ad	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _vJumpDir$523769[ebp]
  000b2	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _vJumpDir$523769[ebp+4]
  000b7	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _vJumpDir$523769[ebp+8]
  000bc	0f 5a c0	 cvtps2pd xmm0, xmm0
  000bf	66 0f 54 05 00
	00 00 00	 andpd	 xmm0, QWORD PTR __mask@@AbsDouble@
  000c7	0f 57 e4	 xorps	 xmm4, xmm4
  000ca	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
  000ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __mask@@NegFloat@
  000d6	0f 57 c8	 xorps	 xmm1, xmm0
  000d9	0f 57 d0	 xorps	 xmm2, xmm0
  000dc	0f 57 d8	 xorps	 xmm3, xmm0
  000df	89 45 d0	 mov	 DWORD PTR tv259[ebp], eax
  000e2	db 45 d0	 fild	 DWORD PTR tv259[ebp]
  000e5	f3 0f 11 4d d8	 movss	 DWORD PTR $T523773[ebp], xmm1
  000ea	f3 0f 11 55 dc	 movss	 DWORD PTR $T523773[ebp+4], xmm2
  000ef	f3 0f 11 5d e0	 movss	 DWORD PTR $T523773[ebp+8], xmm3
  000f4	6a 01		 push	 1
  000f6	85 c0		 test	 eax, eax
  000f8	79 06		 jns	 SHORT $LN35@SetJumppin
  000fa	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$LN35@SetJumppin:
  00100	51		 push	 ecx
  00101	51		 push	 ecx
  00102	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  00106	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  0010b	8d 45 d8	 lea	 eax, DWORD PTR $T523773[ebp]
$LN36@SetJumppin:
  0010e	8b 4d d4	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?SetForcePower@ioBaseChar@@QAEXABUD3DXVECTOR3@@MM_N@Z ; ioBaseChar::SetForcePower

; 50   : 
; 51   : 		pOwner->SetEnableHide( false );

  00117	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0ioHashString@@QAE@PBD@Z
  0011d	83 ec 10	 sub	 esp, 16			; 00000010H
  00120	8b cc		 mov	 ecx, esp
  00122	89 65 d0	 mov	 DWORD PTR $T524781[ebp], esp
  00125	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0012a	57		 push	 edi
  0012b	ff d6		 call	 esi
  0012d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00131	83 ec 10	 sub	 esp, 16			; 00000010H
  00134	8b cc		 mov	 ecx, esp
  00136	89 65 cc	 mov	 DWORD PTR $T524782[ebp], esp
  00139	57		 push	 edi
  0013a	ff d6		 call	 esi
  0013c	8b 4d d4	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0013f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00143	6a 00		 push	 0
  00145	e8 00 00 00 00	 call	 ?SetEnableHide@ioBaseChar@@QAEX_NVioHashString@@1@Z ; ioBaseChar::SetEnableHide

; 52   : 		pOwner->SetEnableChangeTeam( false );

  0014a	8b 4d d4	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  0014d	6a 00		 push	 0
  0014f	e8 00 00 00 00	 call	 ?SetEnableChangeTeam@ioBaseChar@@QAEX_N@Z ; ioBaseChar::SetEnableChangeTeam

; 53   : 		pOwner->SetChangeJumpMotion( false, "", "", "", 0.0f );

  00154	57		 push	 edi
  00155	8d 4d 9c	 lea	 ecx, DWORD PTR $T524783[ebp]
  00158	ff d6		 call	 esi
  0015a	57		 push	 edi
  0015b	8d 4d ac	 lea	 ecx, DWORD PTR $T524784[ebp]
  0015e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00165	ff d6		 call	 esi
  00167	57		 push	 edi
  00168	8d 4d bc	 lea	 ecx, DWORD PTR $T524785[ebp]
  0016b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0016f	ff d6		 call	 esi
  00171	0f 57 c0	 xorps	 xmm0, xmm0
  00174	51		 push	 ecx
  00175	8b 4d d4	 mov	 ecx, DWORD PTR _pOwner$GSCopy$[ebp]
  00178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017d	8d 45 9c	 lea	 eax, DWORD PTR $T524783[ebp]
  00180	50		 push	 eax
  00181	8d 45 ac	 lea	 eax, DWORD PTR $T524784[ebp]
  00184	50		 push	 eax
  00185	8d 45 bc	 lea	 eax, DWORD PTR $T524785[ebp]
  00188	50		 push	 eax
  00189	6a 00		 push	 0
  0018b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0018f	e8 00 00 00 00	 call	 ?SetChangeJumpMotion@ioBaseChar@@QAEX_NABVioHashString@@11M@Z ; ioBaseChar::SetChangeJumpMotion
  00194	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1ioHashString@@QAE@XZ
  0019a	8d 4d bc	 lea	 ecx, DWORD PTR $T524785[ebp]
  0019d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001a1	ff d6		 call	 esi
  001a3	8d 4d ac	 lea	 ecx, DWORD PTR $T524784[ebp]
  001a6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001aa	ff d6		 call	 esi
  001ac	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  001b0	8d 4d 9c	 lea	 ecx, DWORD PTR $T524783[ebp]
  001b3	ff d6		 call	 esi

; 54   : 
; 55   : 		m_bUseExtendJump = true;

  001b5	c6 43 10 01	 mov	 BYTE PTR [ebx+16], 1
$LN3@SetJumppin:

; 56   : 	}
; 57   : }

  001b9	e8 00 00 00 00	 call	 __EH_epilog3_GS
  001be	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$0:
  00000	8b 4d d0	 mov	 ecx, DWORD PTR $T524781[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$2:
  00009	8d 4d 9c	 lea	 ecx, DWORD PTR $T524783[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$3:
  00012	8d 4d ac	 lea	 ecx, DWORD PTR $T524784[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__unwindfunclet$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z$4:
  0001b	8d 4d bc	 lea	 ecx, DWORD PTR $T524785[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioHashString@@QAE@XZ
__ehhandler$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetJumpping@ioLongJump@@UAEXPAVioBaseChar@@_N@Z ENDP	; ioLongJump::SetJumpping
END
