; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAIXMLDoc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_13CIFDLIMG@?$AAw?$AA?$AA@			; `string'
PUBLIC	??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_13KHDBCPJB@?$AAs?$AA?$AA@			; `string'
PUBLIC	??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_13GKPPEALH@?$AAd?$AA?$AA@			; `string'
PUBLIC	??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_06BAPHGFFK@xdigit?$AA@			; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
PUBLIC	??_C@_05OLNILLAB@space?$AA@			; `string'
PUBLIC	??_C@_05KOBGHFJJ@punct?$AA@			; `string'
PUBLIC	??_C@_05IJDJACGD@print?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_05KCJBMLII@graph?$AA@			; `string'
PUBLIC	??_C@_05ODNOIFML@digit?$AA@			; `string'
PUBLIC	??_C@_01LPLHEDKD@d?$AA@				; `string'
PUBLIC	??_C@_05JMDPEFNK@cntrl?$AA@			; `string'
PUBLIC	??_C@_05BABJKOGB@blank?$AA@			; `string'
PUBLIC	??_C@_05IAEKHIAN@alpha?$AA@			; `string'
PUBLIC	??_C@_05IIMHCHIO@alnum?$AA@			; `string'
PUBLIC	?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B ; std::tr1::_Regex_traits<char>::_Names
PUBLIC	?_Names@?$_Regex_traits@_W@tr1@std@@0QBU?$_Cl_names@_W@23@B ; std::tr1::_Regex_traits<wchar_t>::_Names
PUBLIC	?icase@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::icase
PUBLIC	?nosubs@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::nosubs
PUBLIC	?optimize@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::optimize
PUBLIC	?collate@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::collate
PUBLIC	?ECMAScript@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::ECMAScript
PUBLIC	?basic@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::basic
PUBLIC	?extended@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::extended
PUBLIC	?awk@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::awk
PUBLIC	?grep@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::grep
PUBLIC	?egrep@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::egrep
;	COMDAT ?egrep@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?egrep@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 020H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::egrep
CONST	ENDS
;	COMDAT ?grep@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?grep@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 010H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::grep
CONST	ENDS
;	COMDAT ?awk@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?awk@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 08H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::awk
CONST	ENDS
;	COMDAT ?extended@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?extended@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 04H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::extended
CONST	ENDS
;	COMDAT ?basic@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?basic@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 02H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::basic
CONST	ENDS
;	COMDAT ?ECMAScript@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?ECMAScript@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 01H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::ECMAScript
CONST	ENDS
;	COMDAT ?collate@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?collate@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 0800H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::collate
CONST	ENDS
;	COMDAT ?optimize@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?optimize@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 0400H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::optimize
CONST	ENDS
;	COMDAT ?nosubs@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?nosubs@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 0200H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::nosubs
CONST	ENDS
;	COMDAT ?icase@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B
CONST	SEGMENT
?icase@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@2W4syntax_option_type@regex_constants@23@B DD 0100H ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::icase
CONST	ENDS
CONST	SEGMENT
__Meta_map DB	028H
	DB	029H
	DB	024H
	DB	05eH
	DB	02eH
	DB	02aH
	DB	02bH
	DB	03fH
	DB	05bH
	DB	05dH
	DB	07cH
	DB	05cH
	DB	02dH
	DB	07bH
	DB	07dH
	DB	02cH
	DB	03aH
	DB	03dH
	DB	021H
	DB	0aH
	DB	0dH
	DB	08H
	DB	00H
CONST	ENDS
;	COMDAT ?_Names@?$_Regex_traits@_W@tr1@std@@0QBU?$_Cl_names@_W@23@B
CONST	SEGMENT
?_Names@?$_Regex_traits@_W@tr1@std@@0QBU?$_Cl_names@_W@23@B DD FLAT:??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@ ; std::tr1::_Regex_traits<wchar_t>::_Names
	DD	05H
	DW	0107H
	ORG $+2
	DD	FLAT:??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@
	DD	05H
	DW	0103H
	ORG $+2
	DD	FLAT:??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@
	DD	05H
	DW	020H
	ORG $+2
	DD	FLAT:??_C@_13GKPPEALH@?$AAd?$AA?$AA@
	DD	01H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
	DD	05H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@
	DD	05H
	DW	0117H
	ORG $+2
	DD	FLAT:??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@
	DD	05H
	DW	02H
	ORG $+2
	DD	FLAT:??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@
	DD	05H
	DW	01d7H
	ORG $+2
	DD	FLAT:??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@
	DD	05H
	DW	010H
	ORG $+2
	DD	FLAT:??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
	DD	01H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@
	DD	05H
	DW	01H
	ORG $+2
	DD	FLAT:??_C@_13CIFDLIMG@?$AAw?$AA?$AA@
	DD	01H
	DW	0ffffH
	ORG $+2
	DD	FLAT:??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
	DD	06H
	DW	080H
	ORG $+2
	DD	00H
	DD	00H
	DW	00H
	ORG $+2
CONST	ENDS
;	COMDAT ??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ DB 'x', 00H, 'd'
	DB	00H, 'i', 00H, 'g', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13CIFDLIMG@?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_13CIFDLIMG@?$AAw?$AA?$AA@ DB 'w', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr?$AA?$AA@ DB 'u', 00H, 'p', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_13KHDBCPJB@?$AAs?$AA?$AA@ DB 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?$AA@ DB 's', 00H, 'p', 00H
	DB	'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt?$AA?$AA@ DB 'p', 00H, 'u', 00H
	DB	'n', 00H, 'c', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt?$AA?$AA@ DB 'p', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr?$AA?$AA@ DB 'l', 00H, 'o', 00H
	DB	'w', 00H, 'e', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh?$AA?$AA@ DB 'g', 00H, 'r', 00H
	DB	'a', 00H, 'p', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt?$AA?$AA@ DB 'd', 00H, 'i', 00H
	DB	'g', 00H, 'i', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13GKPPEALH@?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_13GKPPEALH@?$AAd?$AA?$AA@ DB 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl?$AA?$AA@ DB 'c', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?$AA@ DB 'b', 00H, 'l', 00H
	DB	'a', 00H, 'n', 00H, 'k', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa?$AA?$AA@ DB 'a', 00H, 'l', 00H
	DB	'p', 00H, 'h', 00H, 'a', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm?$AA?$AA@ DB 'a', 00H, 'l', 00H
	DB	'n', 00H, 'u', 00H, 'm', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B
CONST	SEGMENT
?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B DD FLAT:??_C@_05IIMHCHIO@alnum?$AA@ ; std::tr1::_Regex_traits<char>::_Names
	DD	05H
	DW	0107H
	ORG $+2
	DD	FLAT:??_C@_05IAEKHIAN@alpha?$AA@
	DD	05H
	DW	0103H
	ORG $+2
	DD	FLAT:??_C@_05BABJKOGB@blank?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_05JMDPEFNK@cntrl?$AA@
	DD	05H
	DW	020H
	ORG $+2
	DD	FLAT:??_C@_01LPLHEDKD@d?$AA@
	DD	01H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_05ODNOIFML@digit?$AA@
	DD	05H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_05KCJBMLII@graph?$AA@
	DD	05H
	DW	0117H
	ORG $+2
	DD	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DD	05H
	DW	02H
	ORG $+2
	DD	FLAT:??_C@_05IJDJACGD@print?$AA@
	DD	05H
	DW	01d7H
	ORG $+2
	DD	FLAT:??_C@_05KOBGHFJJ@punct?$AA@
	DD	05H
	DW	010H
	ORG $+2
	DD	FLAT:??_C@_05OLNILLAB@space?$AA@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_01LKDEMHDF@s?$AA@
	DD	01H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DD	05H
	DW	01H
	ORG $+2
	DD	FLAT:??_C@_01NOFIACDB@w?$AA@
	DD	01H
	DW	0ffffH
	ORG $+2
	DD	FLAT:??_C@_06BAPHGFFK@xdigit?$AA@
	DD	06H
	DW	080H
	ORG $+2
	DD	00H
	DD	00H
	DW	00H
	ORG $+2
CONST	ENDS
;	COMDAT ??_C@_06BAPHGFFK@xdigit?$AA@
CONST	SEGMENT
??_C@_06BAPHGFFK@xdigit?$AA@ DB 'xdigit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLNILLAB@space?$AA@
CONST	SEGMENT
??_C@_05OLNILLAB@space?$AA@ DB 'space', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOBGHFJJ@punct?$AA@
CONST	SEGMENT
??_C@_05KOBGHFJJ@punct?$AA@ DB 'punct', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print?$AA@
CONST	SEGMENT
??_C@_05IJDJACGD@print?$AA@ DB 'print', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCJBMLII@graph?$AA@
CONST	SEGMENT
??_C@_05KCJBMLII@graph?$AA@ DB 'graph', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODNOIFML@digit?$AA@
CONST	SEGMENT
??_C@_05ODNOIFML@digit?$AA@ DB 'digit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LPLHEDKD@d?$AA@
CONST	SEGMENT
??_C@_01LPLHEDKD@d?$AA@ DB 'd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMDPEFNK@cntrl?$AA@
CONST	SEGMENT
??_C@_05JMDPEFNK@cntrl?$AA@ DB 'cntrl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BABJKOGB@blank?$AA@
CONST	SEGMENT
??_C@_05BABJKOGB@blank?$AA@ DB 'blank', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAEKHIAN@alpha?$AA@
CONST	SEGMENT
??_C@_05IAEKHIAN@alpha?$AA@ DB 'alpha', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IIMHCHIO@alnum?$AA@
CONST	SEGMENT
??_C@_05IIMHCHIO@alnum?$AA@ DB 'alnum', 00H		; `string'
CONST	ENDS
PUBLIC	??Iregex_constants@tr1@std@@YA?AW4syntax_option_type@012@W43012@0@Z ; std::tr1::regex_constants::operator&
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??Iregex_constants@tr1@std@@YA?AW4syntax_option_type@012@W43012@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??Iregex_constants@tr1@std@@YA?AW4syntax_option_type@012@W43012@0@Z PROC ; std::tr1::regex_constants::operator&, COMDAT

; 152  : _REGEX_BITMASK_OPS(syntax_option_type)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	23 45 0c	 and	 eax, DWORD PTR __Right$[ebp]
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??Iregex_constants@tr1@std@@YA?AW4syntax_option_type@012@W43012@0@Z ENDP ; std::tr1::regex_constants::operator&
_TEXT	ENDS
PUBLIC	??Iregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z ; std::tr1::regex_constants::operator&
; Function compile flags: /Ogsp
;	COMDAT ??Iregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??Iregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z PROC ; std::tr1::regex_constants::operator&, COMDAT

; 173  : _REGEX_BITMASK_OPS(match_flag_type)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	23 45 0c	 and	 eax, DWORD PTR __Right$[ebp]
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??Iregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z ENDP ; std::tr1::regex_constants::operator&
_TEXT	ENDS
PUBLIC	??Uregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z ; std::tr1::regex_constants::operator|
; Function compile flags: /Ogsp
;	COMDAT ??Uregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??Uregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z PROC ; std::tr1::regex_constants::operator|, COMDAT

; 173  : _REGEX_BITMASK_OPS(match_flag_type)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	0b 45 0c	 or	 eax, DWORD PTR __Right$[ebp]
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??Uregex_constants@tr1@std@@YA?AW4match_flag_type@012@W43012@0@Z ENDP ; std::tr1::regex_constants::operator|
_TEXT	ENDS
PUBLIC	?value@?$regex_traits@D@tr1@std@@QBEHDH@Z	; std::tr1::regex_traits<char>::value
; Function compile flags: /Ogsp
;	COMDAT ?value@?$regex_traits@D@tr1@std@@QBEHDH@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 1
_base$ = 12						; size = 4
?value@?$regex_traits@D@tr1@std@@QBEHDH@Z PROC		; std::tr1::regex_traits<char>::value, COMDAT
; _this$ = ecx

; 486  : 		{	// map character value to numeric value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 487  : 		if (base != 8 && '0' <= ch && ch <= '9'
; 488  : 			|| base == 8 && '0' <= ch && ch <= '7')

  00003	83 7d 0c 08	 cmp	 DWORD PTR _base$[ebp], 8
  00007	8a 45 08	 mov	 al, BYTE PTR _ch$[ebp]
  0000a	74 1e		 je	 SHORT $LN12@value
  0000c	3c 30		 cmp	 al, 48			; 00000030H
  0000e	7c 04		 jl	 SHORT $LN9@value
  00010	3c 39		 cmp	 al, 57			; 00000039H
  00012	7e 1e		 jle	 SHORT $LN8@value
$LN9@value:

; 490  : 		else if (base != 16)

  00014	83 7d 0c 10	 cmp	 DWORD PTR _base$[ebp], 16 ; 00000010H
  00018	75 30		 jne	 SHORT $LN1@value

; 491  : 			;
; 492  : 		else if ('a' <= ch && ch <= 'f')

  0001a	8d 48 9f	 lea	 ecx, DWORD PTR [eax-97]
  0001d	80 f9 05	 cmp	 cl, 5
  00020	77 18		 ja	 SHORT $LN3@value

; 493  : 			return (ch - 'a' + 10);

  00022	0f be c0	 movsx	 eax, al
  00025	83 e8 57	 sub	 eax, 87			; 00000057H
  00028	eb 23		 jmp	 SHORT $LN10@value
$LN12@value:

; 487  : 		if (base != 8 && '0' <= ch && ch <= '9'
; 488  : 			|| base == 8 && '0' <= ch && ch <= '7')

  0002a	8d 48 d0	 lea	 ecx, DWORD PTR [eax-48]
  0002d	80 f9 07	 cmp	 cl, 7
  00030	77 18		 ja	 SHORT $LN1@value
$LN8@value:

; 489  : 			return (ch - '0');

  00032	0f be c0	 movsx	 eax, al
  00035	83 e8 30	 sub	 eax, 48			; 00000030H
  00038	eb 13		 jmp	 SHORT $LN10@value
$LN3@value:

; 494  : 		else if ('A' <= ch && ch <= 'F')

  0003a	8d 48 bf	 lea	 ecx, DWORD PTR [eax-65]
  0003d	80 f9 05	 cmp	 cl, 5
  00040	77 08		 ja	 SHORT $LN1@value

; 495  : 			return (ch - 'A' + 10);

  00042	0f be c0	 movsx	 eax, al
  00045	83 e8 37	 sub	 eax, 55			; 00000037H
  00048	eb 03		 jmp	 SHORT $LN10@value
$LN1@value:

; 496  : 		return (-1);

  0004a	83 c8 ff	 or	 eax, -1
$LN10@value:

; 497  : 		}

  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?value@?$regex_traits@D@tr1@std@@QBEHDH@Z ENDP		; std::tr1::regex_traits<char>::value
_TEXT	ENDS
PUBLIC	??_5tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z ; std::tr1::operator|=
; Function compile flags: /Ogsp
;	COMDAT ??_5tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??_5tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z PROC	; std::tr1::operator|=, COMDAT

; 1247 : 	{	// bitwise or

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1248 : 	return (_Left = _Node_flags((int)_Left | _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	09 08		 or	 DWORD PTR [eax], ecx
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]

; 1249 : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??_5tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z ENDP	; std::tr1::operator|=
_TEXT	ENDS
PUBLIC	??_6tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z ; std::tr1::operator^=
; Function compile flags: /Ogsp
;	COMDAT ??_6tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??_6tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z PROC	; std::tr1::operator^=, COMDAT

; 1252 : 	{	// bitwise xor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1253 : 	return (_Left = _Node_flags((int)_Left ^ _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	31 08		 xor	 DWORD PTR [eax], ecx
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]

; 1254 : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??_6tr1@std@@YA?AW4_Node_flags@01@AAW4201@W4201@@Z ENDP	; std::tr1::operator^=
_TEXT	ENDS
PUBLIC	??0_Bitmap@tr1@std@@QAE@XZ			; std::tr1::_Bitmap::_Bitmap
; Function compile flags: /Ogsp
;	COMDAT ??0_Bitmap@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bitmap@tr1@std@@QAE@XZ PROC				; std::tr1::_Bitmap::_Bitmap, COMDAT
; _this$ = ecx

; 1356 : 	_Bitmap()

  00000	57		 push	 edi
  00001	8b d1		 mov	 edx, ecx

; 1357 : 		{	// construct
; 1358 : 		memset(_Chrs, '\0', _Bmp_size);

  00003	6a 08		 push	 8
  00005	59		 pop	 ecx
  00006	33 c0		 xor	 eax, eax
  00008	8b fa		 mov	 edi, edx
  0000a	f3 ab		 rep stosd

; 1359 : 		}

  0000c	8b c2		 mov	 eax, edx
  0000e	5f		 pop	 edi
  0000f	c3		 ret	 0
??0_Bitmap@tr1@std@@QAE@XZ ENDP				; std::tr1::_Bitmap::_Bitmap
_TEXT	ENDS
PUBLIC	?_Mark@_Bitmap@tr1@std@@QAEXI@Z			; std::tr1::_Bitmap::_Mark
; Function compile flags: /Ogsp
;	COMDAT ?_Mark@_Bitmap@tr1@std@@QAEXI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?_Mark@_Bitmap@tr1@std@@QAEXI@Z PROC			; std::tr1::_Bitmap::_Mark, COMDAT
; _this$ = ecx

; 1362 : 		{	// mark character _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1363 : 		_Chrs[_Ch >> _Bmp_shift] |= (1 << (_Ch & _Bmp_mask));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	c1 e8 03	 shr	 eax, 3
  00009	03 c1		 add	 eax, ecx
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Ch$[ebp]
  0000e	83 e1 07	 and	 ecx, 7
  00011	b2 01		 mov	 dl, 1
  00013	d2 e2		 shl	 dl, cl
  00015	08 10		 or	 BYTE PTR [eax], dl

; 1364 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Mark@_Bitmap@tr1@std@@QAEXI@Z ENDP			; std::tr1::_Bitmap::_Mark
_TEXT	ENDS
PUBLIC	?_Find@_Bitmap@tr1@std@@QBE_NI@Z		; std::tr1::_Bitmap::_Find
; Function compile flags: /Ogsp
;	COMDAT ?_Find@_Bitmap@tr1@std@@QBE_NI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?_Find@_Bitmap@tr1@std@@QBE_NI@Z PROC			; std::tr1::_Bitmap::_Find, COMDAT
; _this$ = ecx

; 1367 : 		{	// return true if _Ch is marked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1368 : 		return ((_Chrs[_Ch >> _Bmp_shift] & (1 << (_Ch & _Bmp_mask))) != 0);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b c8		 mov	 ecx, eax
  0000b	33 d2		 xor	 edx, edx
  0000d	83 e1 07	 and	 ecx, 7
  00010	42		 inc	 edx
  00011	c1 e8 03	 shr	 eax, 3
  00014	8a 04 30	 mov	 al, BYTE PTR [eax+esi]
  00017	d3 e2		 shl	 edx, cl
  00019	6a 00		 push	 0
  0001b	84 d0		 test	 dl, al
  0001d	58		 pop	 eax
  0001e	0f 95 c0	 setne	 al
  00021	5e		 pop	 esi

; 1369 : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?_Find@_Bitmap@tr1@std@@QBE_NI@Z ENDP			; std::tr1::_Bitmap::_Find
_TEXT	ENDS
PUBLIC	??_7_Node_base@tr1@std@@6B@			; std::tr1::_Node_base::`vftable'
PUBLIC	??0_Node_base@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z ; std::tr1::_Node_base::_Node_base
PUBLIC	??_R4_Node_base@tr1@std@@6B@			; std::tr1::_Node_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_base@tr1@std@@@8			; std::tr1::_Node_base `RTTI Type Descriptor'
PUBLIC	??_R3_Node_base@tr1@std@@8			; std::tr1::_Node_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_base@tr1@std@@8			; std::tr1::_Node_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_base@tr1@std@@8		; std::tr1::_Node_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E_Node_base@tr1@std@@UAEPAXI@Z:PROC		; std::tr1::_Node_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_base@tr1@std@@8 DD FLAT:??_R0?AV_Node_base@tr1@std@@@8 ; std::tr1::_Node_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_base@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_base@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8 ; std::tr1::_Node_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Node_base@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_base@tr1@std@@8 DD 00H			; std::tr1::_Node_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_base@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_base@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_base@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_base@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_base@tr1@std@@6B@ DD 00H			; std::tr1::_Node_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_base@tr1@std@@@8
	DD	FLAT:??_R3_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_base@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_base@tr1@std@@6B@ DD FLAT:??_R4_Node_base@tr1@std@@6B@ ; std::tr1::_Node_base::`vftable'
	DD	FLAT:??_E_Node_base@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_base@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z
_TEXT	SEGMENT
__Ty$ = 8						; size = 4
__Fl$ = 12						; size = 4
??0_Node_base@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z PROC ; std::tr1::_Node_base::_Node_base, COMDAT
; _this$ = ecx

; 1395 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Ty$[ebp]
  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00010	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Fl$[ebp]
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_base@tr1@std@@6B@
  0001c	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1396 : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??0_Node_base@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z ENDP ; std::tr1::_Node_base::_Node_base
_TEXT	ENDS
PUBLIC	??1_Node_base@tr1@std@@UAE@XZ			; std::tr1::_Node_base::~_Node_base
; Function compile flags: /Ogsp
;	COMDAT ??1_Node_base@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_base@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_base::~_Node_base, COMDAT
; _this$ = ecx

; 1404 : 		{	// destroy

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@

; 1405 : 		}

  00006	c3		 ret	 0
??1_Node_base@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_base::~_Node_base
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??_G_Node_base@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_base@tr1@std@@UAEPAXI@Z PROC			; std::tr1::_Node_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Node_base@tr1@std@@UAEPAXI@Z ENDP			; std::tr1::_Node_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z	; std::tr1::_Destroy_node
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
__Ne$ = 12						; size = 4
?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z PROC	; std::tr1::_Destroy_node, COMDAT

; 1411 : 	{	// destroy sublist of nodes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1412 : 	while (_Nx != _Ne && _Nx != 0)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Nx$[ebp]
  00007	eb 14		 jmp	 SHORT $LN8@Destroy_no
$LL2@Destroy_no:
  00009	85 f6		 test	 esi, esi
  0000b	74 15		 je	 SHORT $LN1@Destroy_no

; 1413 : 		{	// destroy node
; 1414 : 		_Node_base *_Tmp = _Nx;
; 1415 : 		_Nx = _Nx->_Next;

  0000d	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00010	8b ce		 mov	 ecx, esi
  00012	8b 30		 mov	 esi, DWORD PTR [eax]

; 1416 : 		_Tmp->_Next = 0;

  00014	83 20 00	 and	 DWORD PTR [eax], 0

; 1417 : 		delete _Tmp;

  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	6a 01		 push	 1
  0001b	ff 10		 call	 DWORD PTR [eax]
$LN8@Destroy_no:

; 1412 : 	while (_Nx != _Ne && _Nx != 0)

  0001d	3b 75 0c	 cmp	 esi, DWORD PTR __Ne$[ebp]
  00020	75 e7		 jne	 SHORT $LL2@Destroy_no
$LN1@Destroy_no:
  00022	5e		 pop	 esi

; 1418 : 		}
; 1419 : 	}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z ENDP	; std::tr1::_Destroy_node
_TEXT	ENDS
PUBLIC	??_7_Root_node@tr1@std@@6B@			; std::tr1::_Root_node::`vftable'
PUBLIC	??0_Root_node@tr1@std@@QAE@XZ			; std::tr1::_Root_node::_Root_node
PUBLIC	??_R4_Root_node@tr1@std@@6B@			; std::tr1::_Root_node::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Root_node@tr1@std@@@8			; std::tr1::_Root_node `RTTI Type Descriptor'
PUBLIC	??_R3_Root_node@tr1@std@@8			; std::tr1::_Root_node::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Root_node@tr1@std@@8			; std::tr1::_Root_node::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Root_node@tr1@std@@8		; std::tr1::_Root_node::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Root_node@tr1@std@@UAEPAXI@Z:PROC		; std::tr1::_Root_node::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Root_node@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Root_node@tr1@std@@8 DD FLAT:??_R0?AV_Root_node@tr1@std@@@8 ; std::tr1::_Root_node::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Root_node@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Root_node@tr1@std@@8
rdata$r	SEGMENT
??_R2_Root_node@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Root_node@tr1@std@@8 ; std::tr1::_Root_node::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Root_node@tr1@std@@8
rdata$r	SEGMENT
??_R3_Root_node@tr1@std@@8 DD 00H			; std::tr1::_Root_node::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Root_node@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Root_node@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Root_node@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Root_node `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Root_node@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Root_node@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Root_node@tr1@std@@6B@ DD 00H			; std::tr1::_Root_node::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Root_node@tr1@std@@@8
	DD	FLAT:??_R3_Root_node@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Root_node@tr1@std@@6B@
CONST	SEGMENT
??_7_Root_node@tr1@std@@6B@ DD FLAT:??_R4_Root_node@tr1@std@@6B@ ; std::tr1::_Root_node::`vftable'
	DD	FLAT:??_E_Root_node@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Root_node@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0_Root_node@tr1@std@@QAE@XZ PROC			; std::tr1::_Root_node::_Root_node, COMDAT
; _this$ = ecx

; 1428 : 		{	// construct

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 04 14 00
	00 00		 mov	 DWORD PTR [eax+4], 20	; 00000014H
  0000b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00011	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Root_node@tr1@std@@6B@
  0001a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1429 : 		}

  0001d	c3		 ret	 0
??0_Root_node@tr1@std@@QAE@XZ ENDP			; std::tr1::_Root_node::_Root_node
_TEXT	ENDS
PUBLIC	??1_Root_node@tr1@std@@UAE@XZ			; std::tr1::_Root_node::~_Root_node
; Function compile flags: /Ogsp
;	COMDAT ??1_Root_node@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Root_node@tr1@std@@UAE@XZ PROC			; std::tr1::_Root_node::~_Root_node, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@
  00006	c3		 ret	 0
??1_Root_node@tr1@std@@UAE@XZ ENDP			; std::tr1::_Root_node::~_Root_node
_TEXT	ENDS
PUBLIC	??_7_Node_end_group@tr1@std@@6B@		; std::tr1::_Node_end_group::`vftable'
PUBLIC	??0_Node_end_group@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@PAV_Node_base@12@@Z ; std::tr1::_Node_end_group::_Node_end_group
PUBLIC	??_R4_Node_end_group@tr1@std@@6B@		; std::tr1::_Node_end_group::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_end_group@tr1@std@@@8		; std::tr1::_Node_end_group `RTTI Type Descriptor'
PUBLIC	??_R3_Node_end_group@tr1@std@@8			; std::tr1::_Node_end_group::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_end_group@tr1@std@@8			; std::tr1::_Node_end_group::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_end_group@tr1@std@@8	; std::tr1::_Node_end_group::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_end_group@tr1@std@@UAEPAXI@Z:PROC	; std::tr1::_Node_end_group::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_end_group@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_end_group@tr1@std@@8 DD FLAT:??_R0?AV_Node_end_group@tr1@std@@@8 ; std::tr1::_Node_end_group::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_end_group@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_end_group@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_end_group@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_end_group@tr1@std@@8 ; std::tr1::_Node_end_group::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_end_group@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_end_group@tr1@std@@8 DD 00H			; std::tr1::_Node_end_group::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_end_group@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_end_group@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_end_group@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_end_group `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_end_group@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_end_group@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_end_group@tr1@std@@6B@ DD 00H		; std::tr1::_Node_end_group::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_end_group@tr1@std@@@8
	DD	FLAT:??_R3_Node_end_group@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_end_group@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_end_group@tr1@std@@6B@ DD FLAT:??_R4_Node_end_group@tr1@std@@6B@ ; std::tr1::_Node_end_group::`vftable'
	DD	FLAT:??_E_Node_end_group@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_end_group@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@PAV_Node_base@12@@Z
_TEXT	SEGMENT
__Ty$ = 8						; size = 4
__Fl$ = 12						; size = 4
__Bx$ = 16						; size = 4
??0_Node_end_group@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@PAV_Node_base@12@@Z PROC ; std::tr1::_Node_end_group::_Node_end_group, COMDAT
; _this$ = ecx

; 1443 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Ty$[ebp]
  00008	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  0000c	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00010	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Fl$[ebp]
  00016	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00019	8b 4d 10	 mov	 ecx, DWORD PTR __Bx$[ebp]
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_end_group@tr1@std@@6B@
  00022	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1444 : 		}

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
??0_Node_end_group@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@PAV_Node_base@12@@Z ENDP ; std::tr1::_Node_end_group::_Node_end_group
_TEXT	ENDS
PUBLIC	??1_Node_end_group@tr1@std@@UAE@XZ		; std::tr1::_Node_end_group::~_Node_end_group
; Function compile flags: /Ogsp
;	COMDAT ??1_Node_end_group@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_end_group@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_end_group::~_Node_end_group, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@
  00006	c3		 ret	 0
??1_Node_end_group@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_end_group::~_Node_end_group
_TEXT	ENDS
PUBLIC	??_7_Node_assert@tr1@std@@6B@			; std::tr1::_Node_assert::`vftable'
PUBLIC	??0_Node_assert@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z ; std::tr1::_Node_assert::_Node_assert
PUBLIC	??_R4_Node_assert@tr1@std@@6B@			; std::tr1::_Node_assert::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_assert@tr1@std@@@8		; std::tr1::_Node_assert `RTTI Type Descriptor'
PUBLIC	??_R3_Node_assert@tr1@std@@8			; std::tr1::_Node_assert::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_assert@tr1@std@@8			; std::tr1::_Node_assert::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_assert@tr1@std@@8		; std::tr1::_Node_assert::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_assert@tr1@std@@UAEPAXI@Z:PROC	; std::tr1::_Node_assert::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_assert@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_assert@tr1@std@@8 DD FLAT:??_R0?AV_Node_assert@tr1@std@@@8 ; std::tr1::_Node_assert::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_assert@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_assert@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_assert@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_assert@tr1@std@@8 ; std::tr1::_Node_assert::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_assert@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_assert@tr1@std@@8 DD 00H			; std::tr1::_Node_assert::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_assert@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_assert@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_assert@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_assert `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_assert@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_assert@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_assert@tr1@std@@6B@ DD 00H			; std::tr1::_Node_assert::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_assert@tr1@std@@@8
	DD	FLAT:??_R3_Node_assert@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_assert@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_assert@tr1@std@@6B@ DD FLAT:??_R4_Node_assert@tr1@std@@6B@ ; std::tr1::_Node_assert::`vftable'
	DD	FLAT:??_E_Node_assert@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_assert@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z
_TEXT	SEGMENT
__Ty$ = 8						; size = 4
__Fl$ = 12						; size = 4
??0_Node_assert@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z PROC ; std::tr1::_Node_assert::_Node_assert, COMDAT
; _this$ = ecx

; 1456 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Ty$[ebp]
  00008	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Fl$[ebp]
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	33 c9		 xor	 ecx, ecx
  00013	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00016	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_assert@tr1@std@@6B@
  0001f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1457 : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0_Node_assert@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z ENDP ; std::tr1::_Node_assert::_Node_assert
_TEXT	ENDS
PUBLIC	??1_Node_assert@tr1@std@@UAE@XZ			; std::tr1::_Node_assert::~_Node_assert
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Node_assert@tr1@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Node_assert@tr1@std@@UAE@XZ$0
__ehfuncinfo$??1_Node_assert@tr1@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Node_assert@tr1@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1_Node_assert@tr1@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Node_assert@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_assert::~_Node_assert, COMDAT
; _this$ = ecx

; 1460 : 		{	// destroy branch

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1_Node_assert@tr1@std@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_assert@tr1@std@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 1461 : 		_Destroy_node(_Child);

  0001b	6a 00		 push	 0
  0001d	ff 76 14	 push	 DWORD PTR [esi+20]
  00020	e8 00 00 00 00	 call	 ?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z ; std::tr1::_Destroy_node
  00025	59		 pop	 ecx
  00026	59		 pop	 ecx

; 1462 : 		}

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Node_assert@tr1@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Node_base@tr1@std@@UAE@XZ ; std::tr1::_Node_base::~_Node_base
__ehhandler$??1_Node_assert@tr1@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Node_assert@tr1@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Node_assert@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_assert::~_Node_assert
; Function compile flags: /Ogsp
;	COMDAT ??_G_Node_assert@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_assert@tr1@std@@UAEPAXI@Z PROC		; std::tr1::_Node_assert::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1_Node_assert@tr1@std@@UAE@XZ ; std::tr1::_Node_assert::~_Node_assert
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@2
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G_Node_assert@tr1@std@@UAEPAXI@Z ENDP		; std::tr1::_Node_assert::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7_Node_capture@tr1@std@@6B@			; std::tr1::_Node_capture::`vftable'
PUBLIC	??0_Node_capture@tr1@std@@QAE@I@Z		; std::tr1::_Node_capture::_Node_capture
PUBLIC	??_R4_Node_capture@tr1@std@@6B@			; std::tr1::_Node_capture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_capture@tr1@std@@@8		; std::tr1::_Node_capture `RTTI Type Descriptor'
PUBLIC	??_R3_Node_capture@tr1@std@@8			; std::tr1::_Node_capture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_capture@tr1@std@@8			; std::tr1::_Node_capture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_capture@tr1@std@@8		; std::tr1::_Node_capture::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_capture@tr1@std@@UAEPAXI@Z:PROC	; std::tr1::_Node_capture::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_capture@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_capture@tr1@std@@8 DD FLAT:??_R0?AV_Node_capture@tr1@std@@@8 ; std::tr1::_Node_capture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_capture@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_capture@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_capture@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_capture@tr1@std@@8 ; std::tr1::_Node_capture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_capture@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_capture@tr1@std@@8 DD 00H			; std::tr1::_Node_capture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_capture@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_capture@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_capture@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_capture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_capture@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_capture@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_capture@tr1@std@@6B@ DD 00H			; std::tr1::_Node_capture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_capture@tr1@std@@@8
	DD	FLAT:??_R3_Node_capture@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_capture@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_capture@tr1@std@@6B@ DD FLAT:??_R4_Node_capture@tr1@std@@6B@ ; std::tr1::_Node_capture::`vftable'
	DD	FLAT:??_E_Node_capture@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_capture@tr1@std@@QAE@I@Z
_TEXT	SEGMENT
__Ix$ = 8						; size = 4
??0_Node_capture@tr1@std@@QAE@I@Z PROC			; std::tr1::_Node_capture::_Node_capture, COMDAT
; _this$ = ecx

; 1474 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	33 c9		 xor	 ecx, ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ix$[ebp]
  00013	c7 40 04 0d 00
	00 00		 mov	 DWORD PTR [eax+4], 13	; 0000000dH
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_capture@tr1@std@@6B@
  00020	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1475 : 		}

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0_Node_capture@tr1@std@@QAE@I@Z ENDP			; std::tr1::_Node_capture::_Node_capture
_TEXT	ENDS
PUBLIC	??1_Node_capture@tr1@std@@UAE@XZ		; std::tr1::_Node_capture::~_Node_capture
; Function compile flags: /Ogsp
;	COMDAT ??1_Node_capture@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_capture@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_capture::~_Node_capture, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@
  00006	c3		 ret	 0
??1_Node_capture@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_capture::~_Node_capture
_TEXT	ENDS
PUBLIC	??_7_Node_back@tr1@std@@6B@			; std::tr1::_Node_back::`vftable'
PUBLIC	??0_Node_back@tr1@std@@QAE@I@Z			; std::tr1::_Node_back::_Node_back
PUBLIC	??_R4_Node_back@tr1@std@@6B@			; std::tr1::_Node_back::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_back@tr1@std@@@8			; std::tr1::_Node_back `RTTI Type Descriptor'
PUBLIC	??_R3_Node_back@tr1@std@@8			; std::tr1::_Node_back::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_back@tr1@std@@8			; std::tr1::_Node_back::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_back@tr1@std@@8		; std::tr1::_Node_back::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_back@tr1@std@@UAEPAXI@Z:PROC		; std::tr1::_Node_back::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_back@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_back@tr1@std@@8 DD FLAT:??_R0?AV_Node_back@tr1@std@@@8 ; std::tr1::_Node_back::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_back@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_back@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_back@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_back@tr1@std@@8 ; std::tr1::_Node_back::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_back@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_back@tr1@std@@8 DD 00H			; std::tr1::_Node_back::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_back@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_back@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_back@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_back `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_back@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_back@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_back@tr1@std@@6B@ DD 00H			; std::tr1::_Node_back::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_back@tr1@std@@@8
	DD	FLAT:??_R3_Node_back@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_back@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_back@tr1@std@@6B@ DD FLAT:??_R4_Node_back@tr1@std@@6B@ ; std::tr1::_Node_back::`vftable'
	DD	FLAT:??_E_Node_back@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_back@tr1@std@@QAE@I@Z
_TEXT	SEGMENT
__Ix$ = 8						; size = 4
??0_Node_back@tr1@std@@QAE@I@Z PROC			; std::tr1::_Node_back::_Node_back, COMDAT
; _this$ = ecx

; 1487 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	33 c9		 xor	 ecx, ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Ix$[ebp]
  00013	c7 40 04 0f 00
	00 00		 mov	 DWORD PTR [eax+4], 15	; 0000000fH
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_back@tr1@std@@6B@
  00020	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1488 : 		}

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0_Node_back@tr1@std@@QAE@I@Z ENDP			; std::tr1::_Node_back::_Node_back
_TEXT	ENDS
PUBLIC	??1_Node_back@tr1@std@@UAE@XZ			; std::tr1::_Node_back::~_Node_back
; Function compile flags: /Ogsp
;	COMDAT ??1_Node_back@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_back@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_back::~_Node_back, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@
  00006	c3		 ret	 0
??1_Node_back@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_back::~_Node_back
_TEXT	ENDS
PUBLIC	??_7_Node_endif@tr1@std@@6B@			; std::tr1::_Node_endif::`vftable'
PUBLIC	??0_Node_endif@tr1@std@@QAE@XZ			; std::tr1::_Node_endif::_Node_endif
PUBLIC	??_R4_Node_endif@tr1@std@@6B@			; std::tr1::_Node_endif::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_endif@tr1@std@@@8			; std::tr1::_Node_endif `RTTI Type Descriptor'
PUBLIC	??_R3_Node_endif@tr1@std@@8			; std::tr1::_Node_endif::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_endif@tr1@std@@8			; std::tr1::_Node_endif::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_endif@tr1@std@@8		; std::tr1::_Node_endif::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_endif@tr1@std@@UAEPAXI@Z:PROC		; std::tr1::_Node_endif::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_endif@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_endif@tr1@std@@8 DD FLAT:??_R0?AV_Node_endif@tr1@std@@@8 ; std::tr1::_Node_endif::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_endif@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_endif@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_endif@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_endif@tr1@std@@8 ; std::tr1::_Node_endif::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_endif@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_endif@tr1@std@@8 DD 00H			; std::tr1::_Node_endif::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_endif@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_endif@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_endif@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_endif `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_endif@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_endif@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_endif@tr1@std@@6B@ DD 00H			; std::tr1::_Node_endif::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_endif@tr1@std@@@8
	DD	FLAT:??_R3_Node_endif@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_endif@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_endif@tr1@std@@6B@ DD FLAT:??_R4_Node_endif@tr1@std@@6B@ ; std::tr1::_Node_endif::`vftable'
	DD	FLAT:??_E_Node_endif@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_endif@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0_Node_endif@tr1@std@@QAE@XZ PROC			; std::tr1::_Node_endif::_Node_endif, COMDAT
; _this$ = ecx

; 1553 : 		{	// construct

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	c7 40 04 11 00
	00 00		 mov	 DWORD PTR [eax+4], 17	; 00000011H
  0000b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00011	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_endif@tr1@std@@6B@

; 1554 : 		}

  0001a	c3		 ret	 0
??0_Node_endif@tr1@std@@QAE@XZ ENDP			; std::tr1::_Node_endif::_Node_endif
_TEXT	ENDS
PUBLIC	??1_Node_endif@tr1@std@@UAE@XZ			; std::tr1::_Node_endif::~_Node_endif
; Function compile flags: /Ogsp
;	COMDAT ??1_Node_endif@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_endif@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_endif::~_Node_endif, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@
  00006	c3		 ret	 0
??1_Node_endif@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_endif::~_Node_endif
_TEXT	ENDS
PUBLIC	??_7_Node_if@tr1@std@@6B@			; std::tr1::_Node_if::`vftable'
PUBLIC	??0_Node_if@tr1@std@@QAE@PAV_Node_base@12@@Z	; std::tr1::_Node_if::_Node_if
PUBLIC	??_R4_Node_if@tr1@std@@6B@			; std::tr1::_Node_if::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_if@tr1@std@@@8			; std::tr1::_Node_if `RTTI Type Descriptor'
PUBLIC	??_R3_Node_if@tr1@std@@8			; std::tr1::_Node_if::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_if@tr1@std@@8			; std::tr1::_Node_if::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_if@tr1@std@@8		; std::tr1::_Node_if::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_if@tr1@std@@UAEPAXI@Z:PROC		; std::tr1::_Node_if::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_if@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_if@tr1@std@@8 DD FLAT:??_R0?AV_Node_if@tr1@std@@@8 ; std::tr1::_Node_if::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_if@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_if@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_if@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_if@tr1@std@@8 ; std::tr1::_Node_if::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_if@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_if@tr1@std@@8 DD 00H				; std::tr1::_Node_if::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_if@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_if@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_if@tr1@std@@@8 DD FLAT:??_7type_info@@6B@	; std::tr1::_Node_if `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_if@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_if@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_if@tr1@std@@6B@ DD 00H			; std::tr1::_Node_if::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_if@tr1@std@@@8
	DD	FLAT:??_R3_Node_if@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_if@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_if@tr1@std@@6B@ DD FLAT:??_R4_Node_if@tr1@std@@6B@ ; std::tr1::_Node_if::`vftable'
	DD	FLAT:??_E_Node_if@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_if@tr1@std@@QAE@PAV_Node_base@12@@Z
_TEXT	SEGMENT
__End$ = 8						; size = 4
??0_Node_if@tr1@std@@QAE@PAV_Node_base@12@@Z PROC	; std::tr1::_Node_if::_Node_if, COMDAT
; _this$ = ecx

; 1564 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __End$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	33 c9		 xor	 ecx, ecx
  0000a	c7 40 04 10 00
	00 00		 mov	 DWORD PTR [eax+4], 16	; 00000010H
  00011	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00014	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00017	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_if@tr1@std@@6B@
  00020	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00023	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1565 : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0_Node_if@tr1@std@@QAE@PAV_Node_base@12@@Z ENDP	; std::tr1::_Node_if::_Node_if
_TEXT	ENDS
PUBLIC	??1_Node_if@tr1@std@@UAE@XZ			; std::tr1::_Node_if::~_Node_if
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Node_if@tr1@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Node_if@tr1@std@@UAE@XZ$0
__ehfuncinfo$??1_Node_if@tr1@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Node_if@tr1@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1_Node_if@tr1@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Node_if@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_if::~_Node_if, COMDAT
; _this$ = ecx

; 1568 : 		{	// destroy branches of if node

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1_Node_if@tr1@std@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Node_if@tr1@std@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 1569 : 		_Node_if *_Cur = _Child;

  0001b	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  0001e	eb 15		 jmp	 SHORT $LN11@Node_if
$LL2@Node_if:

; 1571 : 			{	// destroy branch
; 1572 : 			_Node_if *_Tmp = _Cur;
; 1573 : 			_Cur = _Cur->_Child;

  00020	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00023	8b ce		 mov	 ecx, esi
  00025	8b 30		 mov	 esi, DWORD PTR [eax]

; 1574 : 			_Tmp->_Child = 0;

  00027	83 20 00	 and	 DWORD PTR [eax], 0

; 1575 : 			_Destroy_node(_Tmp, _Endif);

  0002a	ff 77 14	 push	 DWORD PTR [edi+20]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z ; std::tr1::_Destroy_node
  00033	59		 pop	 ecx
  00034	59		 pop	 ecx
$LN11@Node_if:

; 1570 : 		while (_Cur)

  00035	85 f6		 test	 esi, esi
  00037	75 e7		 jne	 SHORT $LL2@Node_if

; 1576 : 			}
; 1577 : 		}

  00039	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Node_base@tr1@std@@6B@
  0003f	e8 00 00 00 00	 call	 __EH_epilog3
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Node_if@tr1@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Node_base@tr1@std@@UAE@XZ ; std::tr1::_Node_base::~_Node_base
__ehhandler$??1_Node_if@tr1@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Node_if@tr1@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Node_if@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_if::~_Node_if
; Function compile flags: /Ogsp
;	COMDAT ??_G_Node_if@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_if@tr1@std@@UAEPAXI@Z PROC			; std::tr1::_Node_if::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1_Node_if@tr1@std@@UAE@XZ ; std::tr1::_Node_if::~_Node_if
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@3
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G_Node_if@tr1@std@@UAEPAXI@Z ENDP			; std::tr1::_Node_if::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7_Node_end_rep@tr1@std@@6B@			; std::tr1::_Node_end_rep::`vftable'
PUBLIC	??0_Node_end_rep@tr1@std@@QAE@H@Z		; std::tr1::_Node_end_rep::_Node_end_rep
PUBLIC	??_R4_Node_end_rep@tr1@std@@6B@			; std::tr1::_Node_end_rep::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_end_rep@tr1@std@@@8		; std::tr1::_Node_end_rep `RTTI Type Descriptor'
PUBLIC	??_R3_Node_end_rep@tr1@std@@8			; std::tr1::_Node_end_rep::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_end_rep@tr1@std@@8			; std::tr1::_Node_end_rep::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_end_rep@tr1@std@@8		; std::tr1::_Node_end_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_end_rep@tr1@std@@UAEPAXI@Z:PROC	; std::tr1::_Node_end_rep::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_end_rep@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_end_rep@tr1@std@@8 DD FLAT:??_R0?AV_Node_end_rep@tr1@std@@@8 ; std::tr1::_Node_end_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_end_rep@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_end_rep@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_end_rep@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_end_rep@tr1@std@@8 ; std::tr1::_Node_end_rep::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_end_rep@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_end_rep@tr1@std@@8 DD 00H			; std::tr1::_Node_end_rep::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_end_rep@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_end_rep@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_end_rep@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_end_rep `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_end_rep@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_end_rep@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_end_rep@tr1@std@@6B@ DD 00H			; std::tr1::_Node_end_rep::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_end_rep@tr1@std@@@8
	DD	FLAT:??_R3_Node_end_rep@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_end_rep@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_end_rep@tr1@std@@6B@ DD FLAT:??_R4_Node_end_rep@tr1@std@@6B@ ; std::tr1::_Node_end_rep::`vftable'
	DD	FLAT:??_E_Node_end_rep@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_end_rep@tr1@std@@QAE@H@Z
_TEXT	SEGMENT
__New_idx$ = 8						; size = 4
??0_Node_end_rep@tr1@std@@QAE@H@Z PROC			; std::tr1::_Node_end_rep::_Node_end_rep, COMDAT
; _this$ = ecx

; 1590 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	33 c9		 xor	 ecx, ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __New_idx$[ebp]
  00013	c7 40 04 13 00
	00 00		 mov	 DWORD PTR [eax+4], 19	; 00000013H
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_end_rep@tr1@std@@6B@
  00020	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1591 : 		}

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0_Node_end_rep@tr1@std@@QAE@H@Z ENDP			; std::tr1::_Node_end_rep::_Node_end_rep
_TEXT	ENDS
PUBLIC	??1_Node_end_rep@tr1@std@@UAE@XZ		; std::tr1::_Node_end_rep::~_Node_end_rep
; Function compile flags: /Ogsp
;	COMDAT ??1_Node_end_rep@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_end_rep@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_end_rep::~_Node_end_rep, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@
  00006	c3		 ret	 0
??1_Node_end_rep@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_end_rep::~_Node_end_rep
_TEXT	ENDS
PUBLIC	??_7_Node_rep@tr1@std@@6B@			; std::tr1::_Node_rep::`vftable'
PUBLIC	??0_Node_rep@tr1@std@@QAE@_NHHPAV_Node_end_rep@12@@Z ; std::tr1::_Node_rep::_Node_rep
PUBLIC	??_R4_Node_rep@tr1@std@@6B@			; std::tr1::_Node_rep::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_rep@tr1@std@@@8			; std::tr1::_Node_rep `RTTI Type Descriptor'
PUBLIC	??_R3_Node_rep@tr1@std@@8			; std::tr1::_Node_rep::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_rep@tr1@std@@8			; std::tr1::_Node_rep::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_rep@tr1@std@@8		; std::tr1::_Node_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E_Node_rep@tr1@std@@UAEPAXI@Z:PROC		; std::tr1::_Node_rep::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_Node_rep@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_rep@tr1@std@@8 DD FLAT:??_R0?AV_Node_rep@tr1@std@@@8 ; std::tr1::_Node_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_rep@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_rep@tr1@std@@8
rdata$r	SEGMENT
??_R2_Node_rep@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_rep@tr1@std@@8 ; std::tr1::_Node_rep::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_rep@tr1@std@@8
rdata$r	SEGMENT
??_R3_Node_rep@tr1@std@@8 DD 00H			; std::tr1::_Node_rep::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_rep@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_rep@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV_Node_rep@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_rep `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_rep@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Node_rep@tr1@std@@6B@
rdata$r	SEGMENT
??_R4_Node_rep@tr1@std@@6B@ DD 00H			; std::tr1::_Node_rep::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_rep@tr1@std@@@8
	DD	FLAT:??_R3_Node_rep@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Node_rep@tr1@std@@6B@
CONST	SEGMENT
??_7_Node_rep@tr1@std@@6B@ DD FLAT:??_R4_Node_rep@tr1@std@@6B@ ; std::tr1::_Node_rep::`vftable'
	DD	FLAT:??_E_Node_rep@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0_Node_rep@tr1@std@@QAE@_NHHPAV_Node_end_rep@12@@Z
_TEXT	SEGMENT
__Greedy$ = 8						; size = 1
__Mn$ = 12						; size = 4
__Mx$ = 16						; size = 4
__End$ = 20						; size = 4
??0_Node_rep@tr1@std@@QAE@_NHHPAV_Node_end_rep@12@@Z PROC ; std::tr1::_Node_rep::_Node_rep, COMDAT
; _this$ = ecx

; 1607 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Greedy$[ebp]
  00009	f7 d9		 neg	 ecx
  0000b	1b c9		 sbb	 ecx, ecx
  0000d	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  00011	83 e1 02	 and	 ecx, 2
  00014	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00018	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __End$[ebp]
  0001e	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Mn$[ebp]
  00024	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Mx$[ebp]
  0002a	c7 40 04 12 00
	00 00		 mov	 DWORD PTR [eax+4], 18	; 00000012H
  00031	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_rep@tr1@std@@6B@
  00037	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1608 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 10 00	 ret	 16			; 00000010H
??0_Node_rep@tr1@std@@QAE@_NHHPAV_Node_end_rep@12@@Z ENDP ; std::tr1::_Node_rep::_Node_rep
_TEXT	ENDS
PUBLIC	??1_Node_rep@tr1@std@@UAE@XZ			; std::tr1::_Node_rep::~_Node_rep
; Function compile flags: /Ogsp
;	COMDAT ??1_Node_rep@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_rep@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_rep::~_Node_rep, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@tr1@std@@6B@
  00006	c3		 ret	 0
??1_Node_rep@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_rep::~_Node_rep
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1551 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1552 : 		}

  00008	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar@4
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar@4:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return (_Where);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 58   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogsp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 62   : 	}

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 485  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 486  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __First1$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __First2$[ebp]
  0000e	33 c0		 xor	 eax, eax
  00010	f3 a6		 repe cmpsb
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	74 05		 je	 SHORT $LN3@compare
  00016	1b c0		 sbb	 eax, eax
  00018	83 d8 ff	 sbb	 eax, -1
$LN3@compare:

; 487  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogsp
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 491  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00009	8a 08		 mov	 cl, BYTE PTR [eax]
  0000b	40		 inc	 eax
  0000c	84 c9		 test	 cl, cl
  0000e	75 f9		 jne	 SHORT $LL3@length
  00010	2b c2		 sub	 eax, edx

; 492  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogsp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 496  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		}

  00003	5d		 pop	 ebp

; 497  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogsp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 516  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 518  : 		}

  00003	5d		 pop	 ebp

; 517  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 521  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 523  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 526  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000b	88 01		 mov	 BYTE PTR [ecx], al

; 528  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
; Function compile flags: /Ogsp
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 541  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 542  : 		return ((_Elem)_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 543  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
; Function compile flags: /Ogsp
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 546  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 548  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
; Function compile flags: /Ogsp
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000d	f7 d8		 neg	 eax
  0000f	1b c0		 sbb	 eax, eax
  00011	40		 inc	 eax

; 554  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
; Function compile flags: /Ogsp
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 563  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 564  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	?length@?$_Regex_traits@D@tr1@std@@SAIPBD@Z	; std::tr1::_Regex_traits<char>::length
EXTRN	__imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?length@?$_Regex_traits@D@tr1@std@@SAIPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
?length@?$_Regex_traits@D@tr1@std@@SAIPBD@Z PROC	; std::tr1::_Regex_traits<char>::length, COMDAT

; 307  : 		{	// return length of _Str

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 		if (_Str != 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Str$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 0e		 je	 SHORT $LN1@length@2

; 309  : 			return (char_traits<_Elem>::length(_Str));

  0000a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL6@length@2:
  0000d	8a 08		 mov	 cl, BYTE PTR [eax]
  0000f	40		 inc	 eax
  00010	84 c9		 test	 cl, cl
  00012	75 f9		 jne	 SHORT $LL6@length@2
  00014	2b c2		 sub	 eax, edx

; 312  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN1@length@2:

; 310  : 		_Xbad(regex_constants::error_parse);	// to quiet diagnostics

  00018	6a 0d		 push	 13			; 0000000dH
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00020	59		 pop	 ecx

; 311  : 		return (0);

  00021	33 c0		 xor	 eax, eax

; 312  : 		}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?length@?$_Regex_traits@D@tr1@std@@SAIPBD@Z ENDP	; std::tr1::_Regex_traits<char>::length
_TEXT	ENDS
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ:PROC
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\streambuf
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA DD 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
_BSS	ENDS
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 555  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 556  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 557  : 
; 558  : 		_Closef = _Which == _Openfl;

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	0f 94 c0	 sete	 al
  0000d	88 46 50	 mov	 BYTE PTR [esi+80], al

; 559  : 		_Wrotesome = false;

  00010	c6 46 49 00	 mov	 BYTE PTR [esi+73], 0

; 560  : 
; 561  : 		_Mysb::_Init();	// initialize stream buffer base object

  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ

; 562  : 
; 563  :  #ifndef _IORCNT
; 564  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 565  :   #define _IOWCNT _IOCNT
; 566  :  #endif /* _IORCNT */
; 567  : 
; 568  :   #pragma warning(push)
; 569  :   #pragma warning(disable: 6240)	/* prefast noise VSW 489858 */
; 570  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0001a	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	74 18		 je	 SHORT $LN10@Init

; 571  :   #pragma warning(pop)
; 572  : 
; 573  : 			{	// point inside C stream with [first, first + count) buffer
; 574  : 			_Elem **_Pb = (_Elem **)&_File->_IOBASE;

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]

; 575  : 			_Elem **_Pn = (_Elem **)&_File->_IOPTR;
; 576  : 			int *_Nr = (int *)&_File->_IORCNT;
; 577  : 			int *_Nw = (int *)&_File->_IOWCNT;
; 578  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  00024	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00027	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0002a	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0002d	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00030	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00033	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  00036	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
$LN10@Init:

; 579  : 			}
; 580  : 
; 581  : 		_Myfile = _File;

  00039	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 582  : 		_State = _Stinit;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit

; 583  : 		_Pcvt = 0;	// pointer to codecvt facet

  00041	83 66 44 00	 and	 DWORD PTR [esi+68], 0
  00045	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00048	5e		 pop	 esi

; 584  : 		}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
EXTRN	__imp_?always_noconv@codecvt_base@std@@QBE_NXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z
_TEXT	SEGMENT
__Newpcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 628  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 629  : 		if (_Newpcvt->always_noconv())

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Newpcvt$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b cf		 mov	 ecx, edi
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?always_noconv@codecvt_base@std@@QBE_NXZ
  00012	84 c0		 test	 al, al
  00014	74 06		 je	 SHORT $LN2@Initcvt

; 630  : 			_Pcvt = 0;	// nothing to do

  00016	83 66 44 00	 and	 DWORD PTR [esi+68], 0

; 631  : 		else

  0001a	eb 0b		 jmp	 SHORT $LN1@Initcvt
$LN2@Initcvt:

; 632  : 			{	// set up for nontrivial codecvt facet
; 633  : 			_Pcvt = _Newpcvt;
; 634  : 			_Mysb::_Init();	// reset any buffering

  0001c	8b ce		 mov	 ecx, esi
  0001e	89 7e 44	 mov	 DWORD PTR [esi+68], edi
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
$LN1@Initcvt:
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi

; 635  : 			}
; 636  : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; Function compile flags: /Ogsp
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 641  : 		if (_Mysb::eback() == &_Mychar)

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
  00006	39 02		 cmp	 DWORD PTR [edx], eax
  00008	75 16		 jne	 SHORT $LN6@Reset_back

; 642  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  0000a	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  0000d	56		 push	 esi
  0000e	8b 71 3c	 mov	 esi, DWORD PTR [ecx+60]
  00011	89 32		 mov	 DWORD PTR [edx], esi
  00013	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00016	89 02		 mov	 DWORD PTR [edx], eax
  00018	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  0001b	2b c0		 sub	 eax, eax
  0001d	89 01		 mov	 DWORD PTR [ecx], eax
  0001f	5e		 pop	 esi
$LN6@Reset_back:

; 643  : 		}

  00020	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2208 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2209 : 		if (_Rep && --_Rep->_Refs == 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 10		 je	 SHORT $LN1@Tidy
  00009	ff 48 1c	 dec	 DWORD PTR [eax+28]
  0000c	75 0b		 jne	 SHORT $LN1@Tidy

; 2210 : 			_Destroy_node(_Rep);

  0000e	6a 00		 push	 0
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z ; std::tr1::_Destroy_node
  00017	59		 pop	 ecx
  00018	59		 pop	 ecx
$LN1@Tidy:

; 2211 : 		_Rep = 0;

  00019	83 26 00	 and	 DWORD PTR [esi], 0
  0001c	5e		 pop	 esi

; 2212 : 		}

  0001d	c3		 ret	 0
?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 49   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 880  : 		}

  0000b	c3		 ret	 0
?size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::size
_TEXT	ENDS
PUBLIC	??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; Function compile flags: /Ogsp
;	COMDAT ??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[], COMDAT
; _this$ = ecx

; 912  : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 914  : 		if (size() <= _Pos)
; 915  : 			{	// report error
; 916  : 			_DEBUG_ERROR("vector subscript out of range");
; 917  : 			_SCL_SECURE_OUT_OF_RANGE;
; 918  : 			}
; 919  : 
; 920  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 921  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 922  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 923  : 
; 924  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 925  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ ; std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ PROC ; std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ ENDP ; std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??$_Destroy@D@std@@YAXPAD@Z			; std::_Destroy<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@D@std@@YAXPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Destroy@D@std@@YAXPAD@Z PROC			; std::_Destroy<char>, COMDAT

; 69   : 	}

  00000	c3		 ret	 0
??$_Destroy@D@std@@YAXPAD@Z ENDP			; std::_Destroy<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@XZ ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@XZ PROC ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@XZ ENDP ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::deallocate
; Function compile flags: /Ogsp
;	COMDAT ?deallocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z PROC ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z ENDP ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?_Reset@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV_Root_node@23@@Z ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Reset
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Reset@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV_Root_node@23@@Z
_TEXT	SEGMENT
__Rx$ = 8						; size = 4
?_Reset@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV_Root_node@23@@Z PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Reset, COMDAT
; _this$ = ecx

; 2239 : 		{	// build regular expression holding root node _Rx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2240 : 		if (_Rx != 0)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Rx$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 03		 je	 SHORT $LN1@Reset

; 2241 : 			++_Rx->_Refs;

  0000e	ff 46 1c	 inc	 DWORD PTR [esi+28]
$LN1@Reset:

; 2242 : 		_Tidy();

  00011	e8 00 00 00 00	 call	 ?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy

; 2243 : 		_Rep = _Rx;

  00016	89 37		 mov	 DWORD PTR [edi], esi
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 2244 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Reset@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV_Root_node@23@@Z ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Reset
_TEXT	ENDS
PUBLIC	??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::move<std::basic_istream<char,std::char_traits<char> > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::move<std::basic_istream<char,std::char_traits<char> > &>
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
; Function compile flags: /Ogsp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1exception@std@@UAE@XZ
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0@Z ; std::_Ptr_cat<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0@Z PROC ; std::_Ptr_cat<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0@Z ENDP ; std::_Ptr_cat<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?mark_count@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::mark_count
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?mark_count@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ
_TEXT	SEGMENT
?mark_count@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::mark_count, COMDAT
; _this$ = ecx

; 2117 : 		return (_Rep ? _Rep->_Marks - 1 : 0);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 05		 je	 SHORT $LN3@mark_count
  00006	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00009	48		 dec	 eax

; 2118 : 		}

  0000a	c3		 ret	 0
$LN3@mark_count:

; 2117 : 		return (_Rep ? _Rep->_Marks - 1 : 0);

  0000b	33 c0		 xor	 eax, eax

; 2118 : 		}

  0000d	c3		 ret	 0
?mark_count@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::mark_count
_TEXT	ENDS
PUBLIC	?flags@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE?AW4syntax_option_type@regex_constants@23@XZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::flags
; Function compile flags: /Ogsp
;	COMDAT ?flags@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE?AW4syntax_option_type@regex_constants@23@XZ
_TEXT	SEGMENT
?flags@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE?AW4syntax_option_type@regex_constants@23@XZ PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::flags, COMDAT
; _this$ = ecx

; 2166 : 		return (_Rep ? _Rep->_Fl : (flag_type)0);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	74 04		 je	 SHORT $LN3@flags
  00006	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 2167 : 		}

  00009	c3		 ret	 0
$LN3@flags:

; 2166 : 		return (_Rep ? _Rep->_Fl : (flag_type)0);

  0000a	33 c0		 xor	 eax, eax

; 2167 : 		}

  0000c	c3		 ret	 0
?flags@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE?AW4syntax_option_type@regex_constants@23@XZ ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::flags
_TEXT	ENDS
PUBLIC	?_Get@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Root_node@23@XZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Get
; Function compile flags: /Ogsp
;	COMDAT ?_Get@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Root_node@23@XZ
_TEXT	SEGMENT
?_Get@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Root_node@23@XZ PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Get, COMDAT
; _this$ = ecx

; 2191 : 		return (_Rep);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2192 : 		}

  00002	c3		 ret	 0
?_Get@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Root_node@23@XZ ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Get
_TEXT	ENDS
PUBLIC	?_Empty@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Empty
; Function compile flags: /Ogsp
;	COMDAT ?_Empty@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ
_TEXT	SEGMENT
?_Empty@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Empty, COMDAT
; _this$ = ecx

; 2196 : 		return (_Rep == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 01		 cmp	 DWORD PTR [ecx], eax
  00004	0f 94 c0	 sete	 al

; 2197 : 		}

  00007	c3		 ret	 0
?_Empty@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Empty
_TEXT	ENDS
PUBLIC	?_Mark_count@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Mark_count
; Function compile flags: /Ogsp
;	COMDAT ?_Mark_count@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ
_TEXT	SEGMENT
?_Mark_count@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Mark_count, COMDAT
; _this$ = ecx

; 1858 : 		return (_Grp_idx + 1);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	40		 inc	 eax

; 1859 : 		}

  00004	c3		 ret	 0
?_Mark_count@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEIXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Mark_count
_TEXT	ENDS
PUBLIC	?_Error@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4error_type@regex_constants@23@@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Error
; Function compile flags: /Ogsp
;	COMDAT ?_Error@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4error_type@regex_constants@23@@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
?_Error@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4error_type@regex_constants@23@@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Error, COMDAT
; _this$ = ecx

; 4297 : 	{	// handle error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4298 : 	_Xbad(_Code);

  00003	ff 75 08	 push	 DWORD PTR __Code$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  0000c	59		 pop	 ecx

; 4299 : 	}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?_Error@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4error_type@regex_constants@23@@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Error
_TEXT	ENDS
PUBLIC	??0?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@W4syntax_option_type@regex_constants@12@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Builder<char const *,char,std::tr1::regex_traits<char> >
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@W4syntax_option_type@regex_constants@12@@Z
_TEXT	SEGMENT
__Tr$ = 8						; size = 4
__Fx$ = 12						; size = 4
??0?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@W4syntax_option_type@regex_constants@12@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Builder<char const *,char,std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 3129 : 	{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	6a 20		 push	 32			; 00000020H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	59		 pop	 ecx
  0000e	33 c9		 xor	 ecx, ecx
  00010	3b c1		 cmp	 eax, ecx
  00012	74 1b		 je	 SHORT $LN3@Builder
  00014	c7 40 04 14 00
	00 00		 mov	 DWORD PTR [eax+4], 20	; 00000014H
  0001b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00021	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Root_node@tr1@std@@6B@
  0002a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0002d	eb 02		 jmp	 SHORT $LN4@Builder
$LN3@Builder:
  0002f	33 c0		 xor	 eax, eax
$LN4@Builder:
  00031	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Tr$[ebp]
  00037	89 06		 mov	 DWORD PTR [esi], eax
  00039	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0003c	8b 45 0c	 mov	 eax, DWORD PTR __Fx$[ebp]
  0003f	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00042	8b c8		 mov	 ecx, eax
  00044	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00047	c1 e9 03	 shr	 ecx, 3
  0004a	c1 e8 09	 shr	 eax, 9
  0004d	f7 d1		 not	 ecx
  0004f	f7 d0		 not	 eax
  00051	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00057	83 e0 04	 and	 eax, 4
  0005a	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0005d	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 3130 : 	}

  00060	8b c6		 mov	 eax, esi
  00062	5e		 pop	 esi
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
??0?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@W4syntax_option_type@regex_constants@12@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Builder<char const *,char,std::tr1::regex_traits<char> >
_TEXT	ENDS
PUBLIC	?_Setlong@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Setlong
; Function compile flags: /Ogsp
;	COMDAT ?_Setlong@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Setlong@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Setlong, COMDAT
; _this$ = ecx

; 3137 : 	_Root->_Flags |= _Fl_longest;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 48 08 08	 or	 DWORD PTR [eax+8], 8

; 3138 : 	}

  00006	c3		 ret	 0
?_Setlong@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Setlong
_TEXT	ENDS
PUBLIC	?_Discard_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Discard_pattern
; Function compile flags: /Ogsp
;	COMDAT ?_Discard_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Discard_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Discard_pattern, COMDAT
; _this$ = ecx

; 3602 : 	{	// free memory

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3603 : 	_Destroy_node(_Root);

  00003	6a 00		 push	 0
  00005	ff 36		 push	 DWORD PTR [esi]
  00007	e8 00 00 00 00	 call	 ?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z ; std::tr1::_Destroy_node

; 3604 : 	_Root = 0;

  0000c	83 26 00	 and	 DWORD PTR [esi], 0
  0000f	59		 pop	 ecx
  00010	59		 pop	 ecx
  00011	5e		 pop	 esi

; 3605 : 	}

  00012	c3		 ret	 0
?_Discard_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Discard_pattern
_TEXT	ENDS
PUBLIC	?_Pfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Pfx
; Function compile flags: /Ogsp
;	COMDAT ?_Pfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ
_TEXT	SEGMENT
?_Pfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Pfx, COMDAT
; _this$ = ecx

; 1169 : 		return (_Prefix);

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 1170 : 		}

  00003	c3		 ret	 0
?_Pfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Pfx
_TEXT	ENDS
PUBLIC	?_Sfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Sfx
; Function compile flags: /Ogsp
;	COMDAT ?_Sfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ
_TEXT	SEGMENT
?_Sfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Sfx, COMDAT
; _this$ = ecx

; 1174 : 		return (_Suffix);

  00000	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]

; 1175 : 		}

  00003	c3		 ret	 0
?_Sfx@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Sfx
_TEXT	ENDS
PUBLIC	?_Null@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Null
; Function compile flags: /Ogsp
;	COMDAT ?_Null@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ
_TEXT	SEGMENT
?_Null@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Null, COMDAT
; _this$ = ecx

; 1179 : 		return (_Null_elem);

  00000	8d 41 2c	 lea	 eax, DWORD PTR [ecx+44]

; 1180 : 		}

  00003	c3		 ret	 0
?_Null@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@XZ ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Null
_TEXT	ENDS
PUBLIC	??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)
; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");
; 933  : 			_SCL_SECURE_OUT_OF_RANGE;
; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 941  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@I@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
_TEXT	ENDS
PUBLIC	?_Register@facet@locale@std@@QAEXXZ		; std::locale::facet::_Register
EXTRN	?_Facet_Register@facet@locale@std@@CAXPAV123@@Z:PROC ; std::locale::facet::_Facet_Register
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ?_Register@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT
?_Register@facet@locale@std@@QAEXXZ PROC		; std::locale::facet::_Register, COMDAT
; _this$ = ecx

; 129  :  #if defined(_M_CEE)
; 130  : 			_Facet_Register_m(this);
; 131  : 
; 132  :  #else /* defined(_M_CEE) */
; 133  : 			_Facet_Register(this);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  00006	59		 pop	 ecx

; 134  :  #endif /* defined(_M_CEE) */
; 135  : 			}

  00007	c3		 ret	 0
?_Register@facet@locale@std@@QAEXXZ ENDP		; std::locale::facet::_Register
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
EXTRN	__imp_?_Incref@facet@locale@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 309  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 0e		 mov	 DWORD PTR [esi], ecx

; 310  : 		_Ptr->_Incref();

  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ

; 311  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
EXTRN	__imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC
EXTRN	__imp_?_Init@locale@std@@CAPAV_Locimp@12@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 315  : 		{	// construct from current locale

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@locale@std@@CAPAV_Locimp@12@XZ
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 316  : 		_Getgloballocale()->_Incref();

  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ
  00011	8b c8		 mov	 ecx, eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ

; 317  : 		}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
PUBLIC	?capacity@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	6a 0c		 push	 12			; 0000000cH
  00007	99		 cdq
  00008	59		 pop	 ecx
  00009	f7 f9		 idiv	 ecx

; 778  : 		}

  0000b	c3		 ret	 0
?capacity@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::capacity
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEXXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEXXZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
  0000b	cc		 int	 3
?_Xlen@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEXXZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Xlen
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QBEIXZ ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QBEIXZ PROC ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 220  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QBEIXZ ENDP ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+=, COMDAT
; _this$ = ecx

; 151  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 152  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 153  : 		if (this->_Getcont() == 0
; 154  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 155  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 156  : 			{	// report error
; 157  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 158  : 			_SCL_SECURE_OUT_OF_RANGE;
; 159  : 			}
; 160  : 
; 161  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 162  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 163  : 		_SCL_SECURE_VALIDATE_RANGE(
; 164  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 165  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 167  : 
; 168  : 		_Ptr += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0000b	01 08		 add	 DWORD PTR [eax], ecx

; 169  : 		return (*this);
; 170  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+=
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Compat
; Function compile flags: /Ogsp
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Compat
_TEXT	ENDS
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
EXTRN	__imp_?_Decref@facet@locale@std@@QAEPAV123@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 410  : 		if (_Ptr != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 12		 je	 SHORT $LN4@locale

; 411  : 			_DELETE_CRT(_Ptr->_Decref());

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Decref@facet@locale@std@@QAEPAV123@XZ
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	6a 01		 push	 1
  00014	8b c8		 mov	 ecx, eax
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 412  : 		}

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
; Function compile flags: /Ogsp
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 436  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 437  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 438  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  00009	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000c	73 08		 jae	 SHORT $LN6@Getfacet
  0000e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00011	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00014	eb 02		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00016	33 c0		 xor	 eax, eax
$LN7@Getfacet:

; 439  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00018	85 c0		 test	 eax, eax
  0001a	75 1a		 jne	 SHORT $LN1@Getfacet
  0001c	38 41 14	 cmp	 BYTE PTR [ecx+20], al
  0001f	74 15		 je	 SHORT $LN1@Getfacet

; 440  : 			return (_Facptr);	// found facet or not transparent
; 441  : 		else
; 442  : 			{	// look in current locale
; 443  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ

; 444  : 			return (_Id < _Ptr->_Facetcount
; 445  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 446  : 				: 0);	// no entry in current locale

  00027	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002a	73 08		 jae	 SHORT $LN8@Getfacet
  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00032	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN8@Getfacet:
  00034	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00036	5e		 pop	 esi

; 447  : 			}
; 448  : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
PUBLIC	?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Is_esc
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NXZ
_TEXT	SEGMENT
?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Is_esc, COMDAT
; _this$ = ecx

; 4306 : 	_FwdIt _Ch0 = _Pat;
; 4307 : 	return (++_Ch0 != _End
; 4308 : 		&& (!(_L_flags & _L_nex_grp)
; 4309 : 			&& (*_Ch0 == _Meta_lpar || *_Ch0 == _Meta_rpar))
; 4310 : 		|| (!(_L_flags & _L_nex_rep)
; 4311 : 			&& (*_Ch0 == _Meta_lbr || *_Ch0 == _Meta_rbr)));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	40		 inc	 eax
  00003	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00006	74 12		 je	 SHORT $LN4@Is_esc
  00008	f6 41 44 08	 test	 BYTE PTR [ecx+68], 8
  0000c	75 0c		 jne	 SHORT $LN4@Is_esc
  0000e	8a 10		 mov	 dl, BYTE PTR [eax]
  00010	80 fa 28	 cmp	 dl, 40			; 00000028H
  00013	74 15		 je	 SHORT $LN3@Is_esc
  00015	80 fa 29	 cmp	 dl, 41			; 00000029H
  00018	74 10		 je	 SHORT $LN3@Is_esc
$LN4@Is_esc:
  0001a	f6 41 44 10	 test	 BYTE PTR [ecx+68], 16	; 00000010H
  0001e	75 0e		 jne	 SHORT $LN6@Is_esc
  00020	8a 00		 mov	 al, BYTE PTR [eax]
  00022	3c 7b		 cmp	 al, 123			; 0000007bH
  00024	74 04		 je	 SHORT $LN3@Is_esc
  00026	3c 7d		 cmp	 al, 125			; 0000007dH
  00028	75 04		 jne	 SHORT $LN6@Is_esc
$LN3@Is_esc:
  0002a	33 c0		 xor	 eax, eax
  0002c	40		 inc	 eax

; 4312 : 	}

  0002d	c3		 ret	 0
$LN6@Is_esc:

; 4306 : 	_FwdIt _Ch0 = _Pat;
; 4307 : 	return (++_Ch0 != _End
; 4308 : 		&& (!(_L_flags & _L_nex_grp)
; 4309 : 			&& (*_Ch0 == _Meta_lpar || *_Ch0 == _Meta_rpar))
; 4310 : 		|| (!(_L_flags & _L_nex_rep)
; 4311 : 			&& (*_Ch0 == _Meta_lbr || *_Ch0 == _Meta_rbr)));

  0002e	33 c0		 xor	 eax, eax

; 4312 : 	}

  00030	c3		 ret	 0
?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Is_esc
_TEXT	ENDS
PUBLIC	?_Getmark@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Node_base@23@XZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Getmark
; Function compile flags: /Ogsp
;	COMDAT ?_Getmark@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Node_base@23@XZ
_TEXT	SEGMENT
?_Getmark@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Node_base@23@XZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Getmark, COMDAT
; _this$ = ecx

; 3161 : 	return (_Current);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3162 : 	}

  00003	c3		 ret	 0
?_Getmark@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBEPAV_Node_base@23@XZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Getmark
_TEXT	ENDS
PUBLIC	?_Else_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@0@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Else_if
; Function compile flags: /Ogsp
;	COMDAT ?_Else_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Start$ = 8						; size = 4
__End$ = 12						; size = 4
?_Else_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@0@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Else_if, COMDAT
; _this$ = ecx

; 3549 : 	{	// add else node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3550 : 	_Node_if *_Parent = (_Node_if *)_Start->_Next;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Start$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 3551 : 	_Node_base *_First = _End->_Next;

  00008	8b 75 0c	 mov	 esi, DWORD PTR __End$[ebp]
  0000b	57		 push	 edi
  0000c	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  0000f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 3552 : 	_End->_Next = 0;

  00012	33 db		 xor	 ebx, ebx
  00014	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00017	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 3553 : 	_Node_base *_Last = _Current;

  0001a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3554 : 	_Current = _End;

  0001d	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 3555 : 	_End->_Next = 0;

  00020	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx

; 3556 : 	_Last->_Next = _End;

  00023	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  00026	eb 03		 jmp	 SHORT $LN14@Else_if
$LL2@Else_if:

; 3558 : 		_Parent = _Parent->_Child;

  00028	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
$LN14@Else_if:

; 3557 : 	while (_Parent->_Child)

  0002b	39 5f 18	 cmp	 DWORD PTR [edi+24], ebx
  0002e	75 f8		 jne	 SHORT $LL2@Else_if

; 3559 : 	_Parent->_Child = new _Node_if(_End);

  00030	6a 1c		 push	 28			; 0000001cH
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	59		 pop	 ecx
  00038	3b c3		 cmp	 eax, ebx
  0003a	74 1e		 je	 SHORT $LN5@Else_if
  0003c	c7 40 04 10 00
	00 00		 mov	 DWORD PTR [eax+4], 16	; 00000010H
  00043	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00046	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  00049	89 58 10	 mov	 DWORD PTR [eax+16], ebx
  0004c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_if@tr1@std@@6B@
  00052	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00055	89 58 18	 mov	 DWORD PTR [eax+24], ebx
  00058	eb 02		 jmp	 SHORT $LN6@Else_if
$LN5@Else_if:
  0005a	33 c0		 xor	 eax, eax
$LN6@Else_if:

; 3560 : 	_Parent->_Child->_Next = _First;

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0005f	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00062	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 3561 : 	_First->_Prev = _Parent->_Child;

  00065	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0006d	5b		 pop	 ebx

; 3562 : 	}

  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
?_Else_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@0@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Else_if
_TEXT	ENDS
PUBLIC	?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
; Function compile flags: /Ogsp
;	COMDAT ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node, COMDAT
; _this$ = ecx

; 3189 : 	{	// insert _Nx at current location

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3190 : 	_Nx->_Prev = _Current;

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
  00009	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 3191 : 	if (_Current->_Next)

  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00012	85 d2		 test	 edx, edx
  00014	74 0c		 je	 SHORT $LN1@Link_node

; 3192 : 		{	// set back pointer
; 3193 : 		_Nx->_Next = _Current->_Next;

  00016	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 3194 : 		_Current->_Next->_Prev = _Nx;

  00019	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001c	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0001f	89 42 10	 mov	 DWORD PTR [edx+16], eax
$LN1@Link_node:

; 3195 : 		}
; 3196 : 	_Current->_Next = _Nx;

  00022	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00025	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 3197 : 	_Current = _Nx;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 3198 : 	return (_Nx);
; 3199 : 	}

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
_TEXT	ENDS
PUBLIC	?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node
; Function compile flags: /Ogsp
;	COMDAT ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z
_TEXT	SEGMENT
__Type$ = 8						; size = 4
?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node, COMDAT
; _this$ = ecx

; 3206 : 	{	// allocate and link simple node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3207 : 	return (_Link_node(new _Node_base(_Type)));

  00004	6a 14		 push	 20			; 00000014H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	59		 pop	 ecx
  0000e	33 c9		 xor	 ecx, ecx
  00010	3b c1		 cmp	 eax, ecx
  00012	74 17		 je	 SHORT $LN3@New_node
  00014	8b 55 08	 mov	 edx, DWORD PTR __Type$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_base@tr1@std@@6B@
  0001d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00020	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00023	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00026	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00029	eb 02		 jmp	 SHORT $LN4@New_node
$LN3@New_node:
  0002b	33 c0		 xor	 eax, eax
$LN4@New_node:
  0002d	50		 push	 eax
  0002e	8b ce		 mov	 ecx, esi
  00030	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
  00035	5e		 pop	 esi

; 3208 : 	}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node
_TEXT	ENDS
PUBLIC	??$_Destroy@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z ; std::_Destroy<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z PROC ; std::_Destroy<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

  00000	c3		 ret	 0
??$_Destroy@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z ENDP ; std::_Destroy<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPAV120@@Z ; std::_Allocate<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPAV120@@Z
_TEXT	SEGMENT
$T517319 = -12						; size = 12
$T517324 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPAV120@@Z PROC ; std::_Allocate<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;
; 32   : 
; 33   : 	if (_Count <= 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	33 c0		 xor	 eax, eax
  0000b	85 c9		 test	 ecx, ecx

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000d	74 3c		 je	 SHORT $LN5@Allocate

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000f	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00015	77 0e		 ja	 SHORT $LN1@Allocate
  00017	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00020	59		 pop	 ecx
  00021	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  00023	75 26		 jne	 SHORT $LN5@Allocate
$LN1@Allocate:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00025	83 65 08 00	 and	 DWORD PTR $T517324[ebp], 0
  00029	8d 45 08	 lea	 eax, DWORD PTR $T517324[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d f4	 lea	 ecx, DWORD PTR $T517319[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  0003b	8d 45 f4	 lea	 eax, DWORD PTR $T517319[ebp]
  0003e	50		 push	 eax
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T517319[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate:
$LN5@Allocate:

; 40   : 	}

  0004b	c9		 leave
  0004c	c3		 ret	 0
$LN9@Allocate:
??$_Allocate@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPAV120@@Z ENDP ; std::_Allocate<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--, COMDAT
; _this$ = ecx

; 131  : 		{	// predecrement

  00000	8b c1		 mov	 eax, ecx

; 132  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 133  : 		if (this->_Getcont() == 0
; 134  : 			|| this->_Ptr == 0
; 135  : 			|| this->_Ptr <= ((_Mystr *)this->_Getcont())->_Myptr())
; 136  : 			{	// report error
; 137  : 			_DEBUG_ERROR("string iterator not decrementable");
; 138  : 			_SCL_SECURE_OUT_OF_RANGE;
; 139  : 			}
; 140  : 
; 141  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 142  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 143  : 		_SCL_SECURE_VALIDATE_RANGE(
; 144  : 			((_Mystr *)this->_Getcont())->_Myptr() < this->_Ptr);
; 145  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 146  : 
; 147  : 		--this->_Ptr;

  00002	ff 08		 dec	 DWORD PTR [eax]

; 148  : 		return (*this);
; 149  : 		}

  00004	c3		 ret	 0
??F?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator--
_TEXT	ENDS
PUBLIC	??4?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEXABV?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@@Z ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??4?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEXABV?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??4?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEXABV?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@@Z PROC ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=, COMDAT
; _this$ = ecx

; 1704 : 		{	// assign from object of type _Bt_state_t<_BidIt>

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 : 		*(_Bt_state_t<_BidIt>*)this = _Other;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	89 11		 mov	 DWORD PTR [ecx], edx
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1706 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??4?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEXABV?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@@Z ENDP ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=
_TEXT	ENDS
PUBLIC	?_Size@?$_Buf@D@tr1@std@@QBEHXZ			; std::tr1::_Buf<char>::_Size
; Function compile flags: /Ogsp
;	COMDAT ?_Size@?$_Buf@D@tr1@std@@QBEHXZ
_TEXT	SEGMENT
?_Size@?$_Buf@D@tr1@std@@QBEHXZ PROC			; std::tr1::_Buf<char>::_Size, COMDAT
; _this$ = ecx

; 1298 : 		return (_Nchrs);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1299 : 		}

  00003	c3		 ret	 0
?_Size@?$_Buf@D@tr1@std@@QBEHXZ ENDP			; std::tr1::_Buf<char>::_Size
_TEXT	ENDS
PUBLIC	?_Str@?$_Buf@D@tr1@std@@QBEPBDXZ		; std::tr1::_Buf<char>::_Str
; Function compile flags: /Ogsp
;	COMDAT ?_Str@?$_Buf@D@tr1@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Str@?$_Buf@D@tr1@std@@QBEPBDXZ PROC			; std::tr1::_Buf<char>::_Str, COMDAT
; _this$ = ecx

; 1316 : 		return (_Chrs);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1317 : 		}

  00003	c3		 ret	 0
?_Str@?$_Buf@D@tr1@std@@QBEPBDXZ ENDP			; std::tr1::_Buf<char>::_Str
_TEXT	ENDS
PUBLIC	?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
; Function compile flags: /Ogsp
;	COMDAT ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NPAV_Node_base@23@@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NPAV_Node_base@23@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr, COMDAT
; _this$ = ecx

; 3169 : 	{	// test for beginning of expression or subexpression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3170 : 	return (_Nx->_Type == _N_begin
; 3171 : 		|| _Nx->_Type == _N_group
; 3172 : 		|| _Nx->_Type == _N_capture);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00009	83 f8 14	 cmp	 eax, 20			; 00000014H
  0000c	74 0e		 je	 SHORT $LN3@Beg_expr
  0000e	83 f8 08	 cmp	 eax, 8
  00011	74 09		 je	 SHORT $LN3@Beg_expr
  00013	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00016	74 04		 je	 SHORT $LN3@Beg_expr
  00018	33 c0		 xor	 eax, eax
  0001a	eb 03		 jmp	 SHORT $LN4@Beg_expr
$LN3@Beg_expr:
  0001c	33 c0		 xor	 eax, eax
  0001e	40		 inc	 eax
$LN4@Beg_expr:

; 3173 : 	}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NPAV_Node_base@23@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
_TEXT	ENDS
PUBLIC	?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_bol
; Function compile flags: /Ogsp
;	COMDAT ?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_bol, COMDAT
; _this$ = ecx

; 3223 : 	_New_node(_N_bol);

  00000	6a 02		 push	 2
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 3224 : 	}

  00007	c3		 ret	 0
?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_bol
_TEXT	ENDS
PUBLIC	?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_eol
; Function compile flags: /Ogsp
;	COMDAT ?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_eol, COMDAT
; _this$ = ecx

; 3231 : 	_New_node(_N_eol);

  00000	6a 03		 push	 3
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 3232 : 	}

  00007	c3		 ret	 0
?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_eol
_TEXT	ENDS
PUBLIC	?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_wbound
; Function compile flags: /Ogsp
;	COMDAT ?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_wbound, COMDAT
; _this$ = ecx

; 3239 : 	_New_node(_N_wbound);

  00000	6a 04		 push	 4
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 3240 : 	}

  00007	c3		 ret	 0
?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_wbound
_TEXT	ENDS
PUBLIC	?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_dot
; Function compile flags: /Ogsp
;	COMDAT ?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_dot, COMDAT
; _this$ = ecx

; 3247 : 	_New_node(_N_dot);

  00000	6a 05		 push	 5
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 3248 : 	}

  00007	c3		 ret	 0
?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_dot
_TEXT	ENDS
PUBLIC	?_Negate@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Negate
; Function compile flags: /Ogsp
;	COMDAT ?_Negate@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Negate@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Negate, COMDAT
; _this$ = ecx

; 3145 : 	_Current->_Flags ^= _Fl_negate;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 70 08 01	 xor	 DWORD PTR [eax+8], 1

; 3146 : 	}

  00007	c3		 ret	 0
?_Negate@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Negate
_TEXT	ENDS
PUBLIC	??$_Val_type@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@@Z ; std::_Val_type<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@@Z PROC ; std::_Val_type<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@@Z ENDP ; std::_Val_type<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
_TEXT	ENDS
PUBLIC	??4?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAEAAU01@ABU01@@Z ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??4?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAEAAU01@ABU01@@Z PROC ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=, COMDAT
; _this$ = ecx

; 215  : 		{	// assign from copied pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 216  : 		this->first = _Right.first;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx

; 217  : 		this->second = _Right.second;

  0000c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 218  : 		return (*this);
; 219  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??4?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAEAAU01@ABU01@@Z ENDP ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::_Cmp_collate<std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??0?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z
_TEXT	SEGMENT
__Tr$ = 8						; size = 4
??0?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z PROC ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::_Cmp_collate<std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 249  : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Tr$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 250  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z ENDP ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::_Cmp_collate<std::tr1::regex_traits<char> >
_TEXT	ENDS
PUBLIC	??0?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::_Cmp_icase<std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z
_TEXT	SEGMENT
__Tr$ = 8						; size = 4
??0?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z PROC ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::_Cmp_icase<std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 227  : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Tr$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 228  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@@Z ENDP ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::_Cmp_icase<std::tr1::regex_traits<char> >
_TEXT	ENDS
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 1507 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1508 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
PUBLIC	??1?$_Buf@D@tr1@std@@QAE@XZ			; std::tr1::_Buf<char>::~_Buf<char>
EXTRN	__imp__free:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??1?$_Buf@D@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Buf@D@tr1@std@@QAE@XZ PROC			; std::tr1::_Buf<char>::~_Buf<char>, COMDAT
; _this$ = ecx

; 1293 : 		free(_Chrs);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00009	59		 pop	 ecx

; 1294 : 		}

  0000a	c3		 ret	 0
??1?$_Buf@D@tr1@std@@QAE@XZ ENDP			; std::tr1::_Buf<char>::~_Buf<char>
_TEXT	ENDS
PUBLIC	?_Expand@?$_Buf@D@tr1@std@@AAEXH@Z		; std::tr1::_Buf<char>::_Expand
EXTRN	__imp_?_Xmem@tr1@std@@YAXXZ:PROC
EXTRN	__imp__realloc:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Expand@?$_Buf@D@tr1@std@@AAEXH@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
?_Expand@?$_Buf@D@tr1@std@@AAEXH@Z PROC			; std::tr1::_Buf<char>::_Expand, COMDAT
; _this$ = ecx

; 1340 : 		{	// expand buffer to hold _Len characters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1341 : 		_Elem *_Tmp = (_Elem *)realloc(_Chrs, _Len * sizeof(_Elem));

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Len$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	53		 push	 ebx
  0000c	ff 76 08	 push	 DWORD PTR [esi+8]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  00015	8b f8		 mov	 edi, eax
  00017	59		 pop	 ecx
  00018	59		 pop	 ecx

; 1342 : 		if (!_Tmp)

  00019	85 ff		 test	 edi, edi
  0001b	75 06		 jne	 SHORT $LN1@Expand

; 1343 : 			_Xmem();

  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xmem@tr1@std@@YAXXZ
$LN1@Expand:

; 1344 : 		_Chrs = _Tmp;

  00023	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00026	5f		 pop	 edi

; 1345 : 		_Sz = _Len;

  00027	89 1e		 mov	 DWORD PTR [esi], ebx
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 1346 : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Expand@?$_Buf@D@tr1@std@@AAEXH@Z ENDP			; std::tr1::_Buf<char>::_Expand
_TEXT	ENDS
PUBLIC	?getloc@?$_Regex_traits@D@tr1@std@@QBE?AVlocale@3@XZ ; std::tr1::_Regex_traits<char>::getloc
; Function compile flags: /Ogsp
;	COMDAT ?getloc@?$_Regex_traits@D@tr1@std@@QBE?AVlocale@3@XZ
_TEXT	SEGMENT
$T517381 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@?$_Regex_traits@D@tr1@std@@QBE?AVlocale@3@XZ PROC ; std::tr1::_Regex_traits<char>::getloc, COMDAT
; _this$ = ecx

; 406  : 		{	// return locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 407  : 		return (_Loc);

  00004	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00007	83 65 fc 00	 and	 DWORD PTR $T517381[ebp], 0
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	89 0e		 mov	 DWORD PTR [esi], ecx
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi

; 408  : 		}

  0001a	c9		 leave
  0001b	c2 04 00	 ret	 4
?getloc@?$_Regex_traits@D@tr1@std@@QBE?AVlocale@3@XZ ENDP ; std::tr1::_Regex_traits<char>::getloc
_TEXT	ENDS
PUBLIC	?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXI@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_backreference
; Function compile flags: /Ogsp
;	COMDAT ?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXI@Z
_TEXT	SEGMENT
__Idx$ = 8						; size = 4
?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXI@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_backreference, COMDAT
; _this$ = ecx

; 3520 : 	{	// add back reference node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3521 : 	_Link_node(new _Node_back(_Idx));

  00004	6a 18		 push	 24			; 00000018H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	59		 pop	 ecx
  0000e	33 c9		 xor	 ecx, ecx
  00010	3b c1		 cmp	 eax, ecx
  00012	74 1e		 je	 SHORT $LN3@Add_backre
  00014	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00017	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0001a	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Idx$[ebp]
  00020	c7 40 04 0f 00
	00 00		 mov	 DWORD PTR [eax+4], 15	; 0000000fH
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_back@tr1@std@@6B@
  0002d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00030	eb 02		 jmp	 SHORT $LN4@Add_backre
$LN3@Add_backre:
  00032	33 c0		 xor	 eax, eax
$LN4@Add_backre:
  00034	50		 push	 eax
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
  0003c	5e		 pop	 esi

; 3522 : 	}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXI@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_backreference
_TEXT	ENDS
PUBLIC	?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Mark_final
; Function compile flags: /Ogsp
;	COMDAT ?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Mark_final, COMDAT
; _this$ = ecx

; 3153 : 	_Current->_Flags |= _Fl_final;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 48 08 04	 or	 DWORD PTR [eax+8], 4

; 3154 : 	}

  00007	c3		 ret	 0
?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Mark_final
_TEXT	ENDS
PUBLIC	??$move@AAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z ; std::move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$move@AAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z PROC ; std::move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z ENDP ; std::move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
PUBLIC	?_At@?$_Buf@D@tr1@std@@QBEDI@Z			; std::tr1::_Buf<char>::_At
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_At@?$_Buf@D@tr1@std@@QBEDI@Z
_TEXT	SEGMENT
__Idx$ = 8						; size = 4
?_At@?$_Buf@D@tr1@std@@QBEDI@Z PROC			; std::tr1::_Buf<char>::_At, COMDAT
; _this$ = ecx

; 1302 : 		{	// return character at _Idx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1303 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1304 : 		if (_Nchrs <= _Idx)
; 1305 : 			_DEBUG_ERROR("regex buffer subscript out of range");
; 1306 : 
; 1307 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1308 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Nchrs);
; 1309 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 
; 1311 : 		return (_Chrs[_Idx]);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Idx$[ebp]
  00009	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]

; 1312 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?_At@?$_Buf@D@tr1@std@@QBEDI@Z ENDP			; std::tr1::_Buf<char>::_At
_TEXT	ENDS
PUBLIC	?_Del@?$_Buf@D@tr1@std@@QAEDXZ			; std::tr1::_Buf<char>::_Del
; Function compile flags: /Ogsp
;	COMDAT ?_Del@?$_Buf@D@tr1@std@@QAEDXZ
_TEXT	SEGMENT
?_Del@?$_Buf@D@tr1@std@@QAEDXZ PROC			; std::tr1::_Buf<char>::_Del, COMDAT
; _this$ = ecx

; 1328 : 		return (_Chrs[--_Nchrs]);

  00000	ff 49 04	 dec	 DWORD PTR [ecx+4]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00009	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]

; 1329 : 		}

  0000c	c3		 ret	 0
?_Del@?$_Buf@D@tr1@std@@QAEDXZ ENDP			; std::tr1::_Buf<char>::_Del
_TEXT	ENDS
PUBLIC	??_7?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@ ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`vftable'
PUBLIC	??0?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Node_class<char,std::tr1::regex_traits<char> >
PUBLIC	??_R4?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@ ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@@8 ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8 ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8 ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8 ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAEPAXI@Z:PROC ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8 DD FLAT:??_R0?AV?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@@8 ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8
rdata$r	SEGMENT
??_R2?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8 ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8
rdata$r	SEGMENT
??_R3?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8 DD 00H ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@'
	DB	00H
_DATA	ENDS
;	COMDAT ??_R4?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@
rdata$r	SEGMENT
??_R4?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@ DD 00H ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@@8
	DD	FLAT:??_R3?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@
CONST	SEGMENT
??_7?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@ DD FLAT:??_R4?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@ ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`vftable'
	DD	FLAT:??_E?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z
_TEXT	SEGMENT
__Ty$ = 8						; size = 4
__Fl$ = 12						; size = 4
??0?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z PROC ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Node_class<char,std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 1516 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Ty$[ebp]
  00008	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Fl$[ebp]
  0000e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00011	33 c9		 xor	 ecx, ecx
  00013	33 d2		 xor	 edx, edx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00018	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@
  00021	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00024	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00027	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0002a	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0002d	66 89 50 24	 mov	 WORD PTR [eax+36], dx
  00031	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 1517 : 		}

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
??0?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z ENDP ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Node_class<char,std::tr1::regex_traits<char> >
_TEXT	ENDS
PUBLIC	??1?$_Sequence@D@tr1@std@@QAE@XZ		; std::tr1::_Sequence<char>::~_Sequence<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Sequence@D@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Sequence@D@tr1@std@@QAE@XZ PROC			; std::tr1::_Sequence<char>::~_Sequence<char>, COMDAT
; _this$ = ecx
  00000	ff 71 0c	 push	 DWORD PTR [ecx+12]
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
??1?$_Sequence@D@tr1@std@@QAE@XZ ENDP			; std::tr1::_Sequence<char>::~_Sequence<char>
_TEXT	ENDS
PUBLIC	??R?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_cs<std::tr1::regex_traits<char> >::operator()
; Function compile flags: /Ogsp
;	COMDAT ??R?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z
_TEXT	SEGMENT
__E1$ = 8						; size = 1
__E2$ = 12						; size = 1
??R?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z PROC ; std::tr1::_Cmp_cs<std::tr1::regex_traits<char> >::operator(), COMDAT
; _this$ = ecx

; 215  : 		{	// return true if equal

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  : 		return (_E1 == _E2);

  00003	8a 4d 08	 mov	 cl, BYTE PTR __E1$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	3a 4d 0c	 cmp	 cl, BYTE PTR __E2$[ebp]
  0000b	0f 94 c0	 sete	 al

; 217  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??R?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ENDP ; std::tr1::_Cmp_cs<std::tr1::regex_traits<char> >::operator()
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z ; std::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z PROC ; std::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 131  : 		{	// construct by copying _Pair_base

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 132  : 		}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z ENDP ; std::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$_Buf@D@tr1@std@@QAE@XZ			; std::tr1::_Buf<char>::_Buf<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??0?$_Buf@D@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Buf@D@tr1@std@@QAE@XZ PROC			; std::tr1::_Buf<char>::_Buf<char>, COMDAT
; _this$ = ecx

; 1288 : 		{	// construct

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1289 : 		}

  0000c	c3		 ret	 0
??0?$_Buf@D@tr1@std@@QAE@XZ ENDP			; std::tr1::_Buf<char>::_Buf<char>
_TEXT	ENDS
PUBLIC	?_Init@?$collate@D@std@@IAEXABV_Locinfo@2@@Z	; std::collate<char>::_Init
EXTRN	__imp_?_Getcoll@_Locinfo@std@@QBE?AU_Collvec@@XZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\locale
;	COMDAT ?_Init@?$collate@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T517437 = -8						; size = 8
__Lobj$ = 8						; size = 4
?_Init@?$collate@D@std@@IAEXABV_Locinfo@2@@Z PROC	; std::collate<char>::_Init, COMDAT
; _this$ = ecx

; 88   : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi

; 89   : 		_Coll = _Lobj._Getcoll();

  00006	8d 45 f8	 lea	 eax, DWORD PTR $T517437[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcoll@_Locinfo@std@@QBE?AU_Collvec@@XZ
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00020	5e		 pop	 esi

; 90   : 		}

  00021	c9		 leave
  00022	c2 04 00	 ret	 4
?_Init@?$collate@D@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::collate<char>::_Init
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Iter_cat<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Iter_cat<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 476  : 	{	// return category from iterator argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Iter_cat@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Iter_cat<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Unchecked@PBD@std@@YAPBDPBD@Z		; std::_Unchecked<char const *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@PBD@std@@YAPBDPBD@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PBD@std@@YAPBDPBD@Z PROC			; std::_Unchecked<char const *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PBD@std@@YAPBDPBD@Z ENDP			; std::_Unchecked<char const *>
_TEXT	ENDS
PUBLIC	??$_Find@PBDD@std@@YAPBDPBD0ABD@Z		; std::_Find<char const *,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$_Find@PBDD@std@@YAPBDPBD0ABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Find@PBDD@std@@YAPBDPBD0ABD@Z PROC			; std::_Find<char const *,char>, COMDAT

; 39   : 	{	// find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	for (; _First != _Last; ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 0f		 je	 SHORT $LN8@Find
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000e	8a 09		 mov	 cl, BYTE PTR [ecx]
$LL4@Find:

; 41   : 		if (*_First == _Val)

  00010	38 08		 cmp	 BYTE PTR [eax], cl
  00012	74 06		 je	 SHORT $LN8@Find

; 40   : 	for (; _First != _Last; ++_First)

  00014	40		 inc	 eax
  00015	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00018	75 f6		 jne	 SHORT $LL4@Find
$LN8@Find:

; 42   : 			break;
; 43   : 	return (_First);
; 44   : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Find@PBDD@std@@YAPBDPBD0ABD@Z ENDP			; std::_Find<char const *,char>
_TEXT	ENDS
PUBLIC	??$_Rechecked@PBDPBD@std@@YAAAPBDAAPBDPBD@Z	; std::_Rechecked<char const *,char const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PBDPBD@std@@YAAAPBDAAPBDPBD@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PBDPBD@std@@YAAAPBDAAPBDPBD@Z PROC	; std::_Rechecked<char const *,char const *>, COMDAT

; 274  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 275  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 276  : 	return (_Dest);
; 277  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PBDPBD@std@@YAAAPBDAAPBDPBD@Z ENDP	; std::_Rechecked<char const *,char const *>
_TEXT	ENDS
PUBLIC	?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffn
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffn, COMDAT
; _this$ = ecx

; 4772 : 	{	// check for limited file format escape character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4773 : 	if (_Ch == _Esc_ctrl_f)

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00006	3c 66		 cmp	 al, 102			; 00000066H
  00008	75 04		 jne	 SHORT $LN10@Do_ffn

; 4774 : 		_Val = '\f';

  0000a	6a 0c		 push	 12			; 0000000cH
  0000c	eb 1e		 jmp	 SHORT $LN13@Do_ffn
$LN10@Do_ffn:

; 4775 : 	else if (_Ch == _Esc_ctrl_n)

  0000e	3c 6e		 cmp	 al, 110			; 0000006eH
  00010	75 04		 jne	 SHORT $LN8@Do_ffn

; 4776 : 		_Val = '\n';

  00012	6a 0a		 push	 10			; 0000000aH
  00014	eb 16		 jmp	 SHORT $LN13@Do_ffn
$LN8@Do_ffn:

; 4777 : 	else if (_Ch == _Esc_ctrl_r)

  00016	3c 72		 cmp	 al, 114			; 00000072H
  00018	75 04		 jne	 SHORT $LN6@Do_ffn

; 4778 : 		_Val = '\r';

  0001a	6a 0d		 push	 13			; 0000000dH
  0001c	eb 0e		 jmp	 SHORT $LN13@Do_ffn
$LN6@Do_ffn:

; 4779 : 	else if (_Ch == _Esc_ctrl_t)

  0001e	3c 74		 cmp	 al, 116			; 00000074H
  00020	75 04		 jne	 SHORT $LN4@Do_ffn

; 4780 : 		_Val = '\t';

  00022	6a 09		 push	 9
  00024	eb 06		 jmp	 SHORT $LN13@Do_ffn
$LN4@Do_ffn:

; 4781 : 	else if (_Ch == _Esc_ctrl_v)

  00026	3c 76		 cmp	 al, 118			; 00000076H
  00028	75 0b		 jne	 SHORT $LN2@Do_ffn

; 4782 : 		_Val = '\v';

  0002a	6a 0b		 push	 11			; 0000000bH
$LN13@Do_ffn:
  0002c	58		 pop	 eax
  0002d	66 89 41 3c	 mov	 WORD PTR [ecx+60], ax

; 4785 : 	return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN11@Do_ffn
$LN2@Do_ffn:

; 4783 : 	else
; 4784 : 		return (false);

  00035	32 c0		 xor	 al, al
$LN11@Do_ffn:

; 4786 : 	}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffn
_TEXT	ENDS
PUBLIC	?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffnx
; Function compile flags: /Ogsp
;	COMDAT ?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffnx, COMDAT
; _this$ = ecx

; 4792 : 	{	// check for the rest of the file format escape characters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4793 : 	if (_Ch == _Esc_ctrl_a)

  00003	80 7d 08 61	 cmp	 BYTE PTR __Ch$[ebp], 97	; 00000061H
  00007	75 04		 jne	 SHORT $LN4@Do_ffnx

; 4794 : 		_Val = '\a';

  00009	6a 07		 push	 7
  0000b	eb 08		 jmp	 SHORT $LN7@Do_ffnx
$LN4@Do_ffnx:

; 4795 : 	else if (_Ch == _Esc_ctrl_b)

  0000d	80 7d 08 62	 cmp	 BYTE PTR __Ch$[ebp], 98	; 00000062H
  00011	75 0b		 jne	 SHORT $LN2@Do_ffnx

; 4796 : 		_Val = '\b';

  00013	6a 08		 push	 8
$LN7@Do_ffnx:
  00015	58		 pop	 eax
  00016	66 89 41 3c	 mov	 WORD PTR [ecx+60], ax

; 4799 : 	return (true);

  0001a	b0 01		 mov	 al, 1
  0001c	eb 02		 jmp	 SHORT $LN5@Do_ffnx
$LN2@Do_ffnx:

; 4797 : 	else
; 4798 : 		return (false);

  0001e	32 c0		 xor	 al, al
$LN5@Do_ffnx:

; 4800 : 	}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffnx
_TEXT	ENDS
PUBLIC	?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_assert_group
EXTRN	__EH_prolog3_catch:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z$0
__unwindtable$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z$4
__ehfuncinfo$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T517457 = 8						; size = 4
__Neg$ = 8						; size = 1
?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_assert_group, COMDAT
; _this$ = ecx

; 3477 : 	{	// add assert node

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3478 : 	_Node_assert *_Node1 = new _Node_assert(_Neg
; 3479 : 		? _N_neg_assert : _N_assert);

  0000f	6a 18		 push	 24			; 00000018H
  00011	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00016	33 db		 xor	 ebx, ebx
  00018	59		 pop	 ecx
  00019	3b c3		 cmp	 eax, ebx
  0001b	74 27		 je	 SHORT $LN4@Begin_asse
  0001d	33 c9		 xor	 ecx, ecx
  0001f	38 5d 08	 cmp	 BYTE PTR __Neg$[ebp], bl
  00022	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00025	0f 95 c1	 setne	 cl
  00028	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  0002b	89 58 10	 mov	 DWORD PTR [eax+16], ebx
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_assert@tr1@std@@6B@
  00034	89 58 14	 mov	 DWORD PTR [eax+20], ebx
  00037	8b f8		 mov	 edi, eax
  00039	89 45 08	 mov	 DWORD PTR $T517457[ebp], eax
  0003c	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0003f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00042	eb 05		 jmp	 SHORT $LN5@Begin_asse
$LN4@Begin_asse:
  00044	33 ff		 xor	 edi, edi
  00046	89 7d 08	 mov	 DWORD PTR $T517457[ebp], edi
$LN5@Begin_asse:

; 3480 : 
; 3481 : 	_Node_base *_Node2;
; 3482 : 	_TRY_BEGIN
; 3483 : 	_Node2 = new _Node_base(_N_nop);

  00049	6a 14		 push	 20			; 00000014H
  0004b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0004e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00053	59		 pop	 ecx
  00054	3b c3		 cmp	 eax, ebx
  00056	74 1a		 je	 SHORT $LN6@Begin_asse
  00058	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_base@tr1@std@@6B@
  0005e	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1
  00065	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00068	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  0006b	89 58 10	 mov	 DWORD PTR [eax+16], ebx
  0006e	8b f0		 mov	 esi, eax
  00070	eb 02		 jmp	 SHORT $LN7@Begin_asse
$LN6@Begin_asse:
  00072	33 f6		 xor	 esi, esi
$LN7@Begin_asse:

; 3487 : 	_CATCH_END
; 3488 : 
; 3489 : 	_Link_node(_Node1);

  00074	8b 5d ec	 mov	 ebx, DWORD PTR _this$[ebp]
  00077	57		 push	 edi
  00078	8b cb		 mov	 ecx, ebx
  0007a	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node

; 3490 : 	_Node1->_Child = _Node2;

  0007f	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 3491 : 	_Node2->_Prev = _Node1;

  00082	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 3492 : 	_Current = _Node2;

  00085	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 3493 : 	return (_Node1);

  00088	8b c7		 mov	 eax, edi

; 3494 : 	}

  0008a	e8 00 00 00 00	 call	 __EH_epilog3
  0008f	c2 04 00	 ret	 4
__catch$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z$0:

; 3484 : 	_CATCH_ALL
; 3485 : 	delete _Node1;

  00092	8b 4d 08	 mov	 ecx, DWORD PTR $T517457[ebp]
  00095	33 db		 xor	 ebx, ebx
  00097	3b cb		 cmp	 ecx, ebx
  00099	74 06		 je	 SHORT $LN8@Begin_asse
  0009b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009d	6a 01		 push	 1
  0009f	ff 10		 call	 DWORD PTR [eax]
$LN8@Begin_asse:

; 3486 : 	_RERAISE;

  000a1	53		 push	 ebx
  000a2	53		 push	 ebx
  000a3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN25@Begin_asse:
$LN24@Begin_asse:
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_assert_group
PUBLIC	??$forward@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z ; std::forward<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z PROC ; std::forward<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YA$$QAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@AAV120@@Z ENDP ; std::forward<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC	; std::vector<char,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 880  : 		}

  00005	c3		 ret	 0
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP	; std::vector<char,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	??0?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$_Regex_traits@D@12@@Z ; std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> >::_Cmp_icase<std::tr1::_Regex_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??0?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$_Regex_traits@D@12@@Z
_TEXT	SEGMENT
__Tr$ = 8						; size = 4
??0?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$_Regex_traits@D@12@@Z PROC ; std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> >::_Cmp_icase<std::tr1::_Regex_traits<char> >, COMDAT
; _this$ = ecx

; 227  : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Tr$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 228  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$_Regex_traits@D@12@@Z ENDP ; std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> >::_Cmp_icase<std::tr1::_Regex_traits<char> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_Vector_val<char,std::allocator<char> >::~_Vector_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Vector_val<char,std::allocator<char> >::~_Vector_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 434  : 		}

  00000	c3		 ret	 0
??1?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<char,std::allocator<char> >::~_Vector_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >::operator*, COMDAT
; _this$ = ecx

; 64   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 65   : 		if (this->_Getcont() == 0
; 66   : 			|| this->_Ptr == 0
; 67   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 68   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 69   : 			{	// report error
; 70   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 71   : 			_SCL_SECURE_OUT_OF_RANGE;
; 72   : 			}
; 73   : 
; 74   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 75   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(
; 77   : 			this->_Ptr != 0
; 78   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 79   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 80   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 81   : 
; 82   : 		__analysis_assume(this->_Ptr != 0);
; 83   : 
; 84   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 85   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 46   : 		this->_Adopt(_Pvector);
; 47   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >::_Vector_const_iterator<std::_Vector_val<char,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::_Iter_cat<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::_Iter_cat<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 476  : 	{	// return category from iterator argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Iter_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::_Iter_cat<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z ; std::_Ptr_cat<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z PROC ; std::_Ptr_cat<char,char>, COMDAT

; 516  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 517  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 518  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 519  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z ENDP ; std::_Ptr_cat<char,char>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 105  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Sequence@D@tr1@std@@QAE@I@Z		; std::tr1::_Sequence<char>::_Sequence<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??0?$_Sequence@D@tr1@std@@QAE@I@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??0?$_Sequence@D@tr1@std@@QAE@I@Z PROC			; std::tr1::_Sequence<char>::_Sequence<char>, COMDAT
; _this$ = ecx

; 1381 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Len$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	33 c9		 xor	 ecx, ecx
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00012	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1382 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??0?$_Sequence@D@tr1@std@@QAE@I@Z ENDP			; std::tr1::_Sequence<char>::_Sequence<char>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::capacity, COMDAT
; _this$ = ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 778  : 		}

  00005	c3		 ret	 0
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::capacity
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ ; std::vector<char,std::allocator<char> >::_Xlen
; Function compile flags: /Ogsp
;	COMDAT ?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ PROC	; std::vector<char,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 1427 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@2:
$LN3@Xlen@2:
  0000b	cc		 int	 3
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@DV?$allocator@D@std@@@std@@IBEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Orphan_range
; Function compile flags: /Ogsp
;	COMDAT ?_Orphan_range@?$vector@DV?$allocator@D@std@@@std@@IBEXPAD0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@DV?$allocator@D@std@@@std@@IBEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1454 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@DV?$allocator@D@std@@@std@@IBEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z ; std::_Iter_cat<char const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z PROC ; std::_Iter_cat<char const *>, COMDAT

; 476  : 	{	// return category from iterator argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z ENDP ; std::_Iter_cat<char const *>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z ; std::_Iter_cat<char *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z PROC ; std::_Iter_cat<char *>, COMDAT

; 476  : 	{	// return category from iterator argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 477  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 478  : 	return (_Cat);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z ENDP ; std::_Iter_cat<char *>
_TEXT	ENDS
PUBLIC	??$_Unchecked@PAD@std@@YAPADPAD@Z		; std::_Unchecked<char *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Unchecked@PAD@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAD@std@@YAPADPAD@Z PROC			; std::_Unchecked<char *>, COMDAT

; 266  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 268  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAD@std@@YAPADPAD@Z ENDP			; std::_Unchecked<char *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAD@std@@YAPADPAD@Z		; std::_Val_type<char *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Val_type@PAD@std@@YAPADPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAD@std@@YAPADPAD@Z PROC			; std::_Val_type<char *>, COMDAT

; 790  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 791  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAD@std@@YAPADPAD@Z ENDP			; std::_Val_type<char *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@DDD@std@@YAPADPAD00AAV?$allocator@D@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<char,char,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@DDD@std@@YAPADPAD00AAV?$allocator@D@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@DDD@std@@YAPADPAD00AAV?$allocator@D@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<char,char,char>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  : 	_DEBUG_RANGE(_First, _Last);
; 458  : 	_DEBUG_POINTER(_Dest);
; 459  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000a	56		 push	 esi
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	03 c6		 add	 eax, esi
  0001c	5e		 pop	 esi

; 462  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Uninit_move@DDD@std@@YAPADPAD00AAV?$allocator@D@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<char,char,char>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAD@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAD@Z ; std::_Ptr_cat<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAD@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAD@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAD@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAD@Z PROC ; std::_Ptr_cat<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *>, COMDAT

; 485  : 	{	// return pointer category from arbitrary arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 486  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 487  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 488  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAD@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAD@Z ENDP ; std::_Ptr_cat<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAD@std@@YAPAHPAD@Z		; std::_Dist_type<char *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dist_type@PAD@std@@YAPAHPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAD@std@@YAPAHPAD@Z PROC			; std::_Dist_type<char *>, COMDAT

; 850  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 851  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAD@std@@YAPAHPAD@Z ENDP			; std::_Dist_type<char *>
_TEXT	ENDS
PUBLIC	??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<char *,int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<char *,int>, COMDAT

; 885  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 887  : 	if (_First != _Last)
; 888  : 		{	// check for null pointers
; 889  : 		_DEBUG_POINTER(_First);
; 890  : 		_DEBUG_POINTER(_Last);
; 891  : 		}
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : 	_Off += _Last - _First;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 895  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<char *,int>
_TEXT	ENDS
PUBLIC	??$_Advance@PADH@std@@YAXAAPADHUrandom_access_iterator_tag@0@@Z ; std::_Advance<char *,int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Advance@PADH@std@@YAXAAPADHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@PADH@std@@YAXAAPADHUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<char *,int>, COMDAT

; 840  : 	{	// increment iterator by offset, random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 841  : 	_Where += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	01 08		 add	 DWORD PTR [eax], ecx

; 842  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Advance@PADH@std@@YAXAAPADHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<char *,int>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@D@std@@QAEXPAD@Z		; std::allocator<char>::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@D@std@@QAEXPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@D@std@@QAEXPAD@Z PROC		; std::allocator<char>::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@D@std@@QAEXPAD@Z ENDP		; std::allocator<char>::destroy
_TEXT	ENDS
PUBLIC	??$forward@AAD@std@@YAAADAAD@Z			; std::forward<char &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@AAD@std@@YAAADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAD@std@@YAAADAAD@Z PROC			; std::forward<char &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAD@std@@YAAADAAD@Z ENDP			; std::forward<char &>
_TEXT	ENDS
PUBLIC	??$construct@AAD@?$allocator@D@std@@QAEXPADAAD@Z ; std::allocator<char>::construct<char &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$construct@AAD@?$allocator@D@std@@QAEXPADAAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAD@?$allocator@D@std@@QAEXPADAAD@Z PROC	; std::allocator<char>::construct<char &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8a 09		 mov	 cl, BYTE PTR [ecx]
  0000f	88 08		 mov	 BYTE PTR [eax], cl
$LN3@construct:

; 209  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@AAD@?$allocator@D@std@@QAEXPADAAD@Z ENDP	; std::allocator<char>::construct<char &>
_TEXT	ENDS
PUBLIC	??$_Distance2@PBDI@std@@YAXPBD0AAIUrandom_access_iterator_tag@0@@Z ; std::_Distance2<char const *,unsigned int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance2@PBDI@std@@YAXPBD0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@PBDI@std@@YAXPBD0AAIUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<char const *,unsigned int>, COMDAT

; 885  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 887  : 	if (_First != _Last)
; 888  : 		{	// check for null pointers
; 889  : 		_DEBUG_POINTER(_First);
; 890  : 		_DEBUG_POINTER(_Last);
; 891  : 		}
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : 	_Off += _Last - _First;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 895  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance2@PBDI@std@@YAXPBD0AAIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<char const *,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Distance2@PADI@std@@YAXPAD0AAIUrandom_access_iterator_tag@0@@Z ; std::_Distance2<char *,unsigned int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Distance2@PADI@std@@YAXPAD0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@PADI@std@@YAXPAD0AAIUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<char *,unsigned int>, COMDAT

; 885  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 887  : 	if (_First != _Last)
; 888  : 		{	// check for null pointers
; 889  : 		_DEBUG_POINTER(_First);
; 890  : 		_DEBUG_POINTER(_Last);
; 891  : 		}
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : 	_Off += _Last - _First;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 895  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance2@PADI@std@@YAXPAD0AAIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<char *,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PBDPAD@Z ; std::_Ptr_cat<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PBDPAD@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PBDPAD@Z PROC ; std::_Ptr_cat<char,char>, COMDAT

; 525  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 526  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 527  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 528  : 	}

  00007	c9		 leave
  00008	c3		 ret	 0
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PBDPAD@Z ENDP ; std::_Ptr_cat<char,char>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@$$CBDD@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<char const ,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@$$CBDD@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@$$CBDD@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<char const ,char>, COMDAT

; 399  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 400  : 	_DEBUG_RANGE(_First, _Last);
; 401  : 	_DEBUG_POINTER(_Dest);
; 402  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]

; 403  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 404  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000a	56		 push	 esi
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	03 c6		 add	 eax, esi
  0001c	5e		 pop	 esi

; 405  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Uninit_copy@$$CBDD@std@@YAPADPBD0PADAAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<char const ,char>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@DD@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninit_copy@DD@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@DD@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<char,char>, COMDAT

; 399  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 400  : 	_DEBUG_RANGE(_First, _Last);
; 401  : 	_DEBUG_POINTER(_Dest);
; 402  : 	size_t _Count = (size_t)(_Last - _First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]

; 403  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 404  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000a	56		 push	 esi
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	03 c6		 add	 eax, esi
  0001c	5e		 pop	 esi

; 405  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Uninit_copy@DD@std@@YAPADPAD00AAV?$allocator@D@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<char,char>
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogsp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 4d 10	 dec	 DWORD PTR ___n$[ebp]
  00006	78 12		 js	 SHORT $LN1@vector
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR ___t$[ebp]
$LL2@vector:
  0000c	8b ce		 mov	 ecx, esi
  0000e	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00011	03 75 0c	 add	 esi, DWORD PTR ___s$[ebp]
  00014	ff 4d 10	 dec	 DWORD PTR ___n$[ebp]
  00017	79 f3		 jns	 SHORT $LL2@vector
  00019	5e		 pop	 esi
$LN1@vector:
  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1512 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1513 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 105  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00000	33 c0		 xor	 eax, eax
  00002	38 41 04	 cmp	 BYTE PTR [ecx+4], al
  00005	0f 95 c0	 setne	 al
  00008	48		 dec	 eax

; 106  : 			}

  00009	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			{	// destroy after unlocking

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 83   : 			if (_Myistr.rdbuf() != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000a	03 c8		 add	 ecx, eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00012	85 c0		 test	 eax, eax
  00014	74 17		 je	 SHORT $LN1@Sentry_bas

; 84   : 				_Myistr.rdbuf()->_Unlock();

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	03 c8		 add	 ecx, eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	8b c8		 mov	 ecx, eax
  00029	5e		 pop	 esi
  0002a	ff 62 08	 jmp	 DWORD PTR [edx+8]
$LN1@Sentry_bas:
  0002d	5e		 pop	 esi

; 85   : 			}

  0002e	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2012 : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 2010 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2011 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2012 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 459  : 		}

  00000	c3		 ret	 0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

  00000	8b c1		 mov	 eax, ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 76   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 77   : 			if (_Myistr.rdbuf() != 0)

  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	03 c8		 add	 ecx, eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00018	85 c0		 test	 eax, eax
  0001a	74 16		 je	 SHORT $LN1@Sentry_bas@2

; 78   : 				_Myistr.rdbuf()->_Lock();

  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	03 c8		 add	 ecx, eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	8b c8		 mov	 ecx, eax
  0002f	ff 52 04	 call	 DWORD PTR [edx+4]
$LN1@Sentry_bas@2:

; 79   : 			}

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
PUBLIC	??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 71   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 72   : 		if (this->_Getcont() == 0
; 73   : 			|| this->_Ptr == 0
; 74   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 75   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 77   : 			{	// report error
; 78   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 79   : 			_SCL_SECURE_OUT_OF_RANGE;
; 80   : 			}
; 81   : 
; 82   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 83   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 84   : 		_SCL_SECURE_VALIDATE_RANGE(
; 85   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 86   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 87   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 88   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 89   : 
; 90   : 		__analysis_assume(this->_Ptr != 0);
; 91   : 
; 92   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 93   : 		}

  00002	c3		 ret	 0
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++
; Function compile flags: /Ogsp
;	COMDAT ??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++, COMDAT
; _this$ = ecx

; 101  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 102  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 103  : 		if (this->_Getcont() == 0
; 104  : 			|| this->_Ptr == 0
; 105  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 106  : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 107  : 			{	// report error
; 108  : 			_DEBUG_ERROR("string iterator not incrementable");
; 109  : 			_SCL_SECURE_OUT_OF_RANGE;
; 110  : 			}
; 111  : 
; 112  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 113  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 114  : 		_SCL_SECURE_VALIDATE_RANGE(
; 115  : 			this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 116  : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 117  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 118  : 
; 119  : 		++this->_Ptr;

  00002	ff 00		 inc	 DWORD PTR [eax]

; 120  : 		return (*this);
; 121  : 		}

  00004	c3		 ret	 0
??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogsp
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 1906 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1907 : 		return (this->_Alval);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1908 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogsp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr@2
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2006 : 		}

  00008	c3		 ret	 0
$LN3@Myptr@2:

; 2004 : 		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
; 2005 : 			: this->_Bx._Buf);

  00009	8b c1		 mov	 eax, ecx

; 2006 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2016 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen@3:
$LN3@Xlen@3:
  0000b	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2021 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
  0000b	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 183  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 45   : 	_String_const_iterator()

  00000	8b c1		 mov	 eax, ecx

; 46   : 		{	// construct with null pointer
; 47   : 		this->_Ptr = 0;

  00002	83 20 00	 and	 DWORD PTR [eax], 0

; 48   : 		}

  00005	c3		 ret	 0
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogsp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1973 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1974 : 		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)

  00003	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00007	74 2c		 je	 SHORT $LN2@Inside
  00009	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0000f	72 04		 jb	 SHORT $LN8@Inside
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	eb 02		 jmp	 SHORT $LN9@Inside
$LN8@Inside:
  00015	8b c1		 mov	 eax, ecx
$LN9@Inside:
  00017	39 45 08	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0001a	72 19		 jb	 SHORT $LN2@Inside
  0001c	83 fa 10	 cmp	 edx, 16			; 00000010H
  0001f	72 04		 jb	 SHORT $LN12@Inside
  00021	8b 01		 mov	 eax, DWORD PTR [ecx]
  00023	eb 02		 jmp	 SHORT $LN13@Inside
$LN12@Inside:
  00025	8b c1		 mov	 eax, ecx
$LN13@Inside:
  00027	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002a	03 c8		 add	 ecx, eax
  0002c	3b 4d 08	 cmp	 ecx, DWORD PTR __Ptr$[ebp]
  0002f	76 04		 jbe	 SHORT $LN2@Inside

; 1976 : 		else
; 1977 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	eb 02		 jmp	 SHORT $LN1@Inside
$LN2@Inside:

; 1975 : 			return (false);	// don't ask

  00035	32 c0		 xor	 al, al
$LN1@Inside:

; 1978 : 		}

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 50   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 51   : 		{	// construct with pointer _Parg
; 52   : 		this->_Adopt(_Pstring);
; 53   : 		this->_Ptr = _Parg;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 54   : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 219  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 220  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat, COMDAT
; _this$ = ecx

; 264  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
_TEXT	ENDS
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0bad_cast@std@@QAE@PBD@Z:PROC
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T517684 = -32						; size = 12
__Lock$487934 = -20					; size = 4
__Psave$487935 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$487934[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	89 45 f0	 mov	 DWORD PTR __Psave$487935[ebp], eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00038	8b f0		 mov	 esi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  0003a	85 f6		 test	 esi, esi
  0003c	75 51		 jne	 SHORT $LN10@use_facet

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003e	8b 75 f0	 mov	 esi, DWORD PTR __Psave$487935[ebp]
  00041	85 f6		 test	 esi, esi

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00043	75 4a		 jne	 SHORT $LN10@use_facet

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00045	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00048	8d 45 f0	 lea	 eax, DWORD PTR __Psave$487935[ebp]
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
  00054	83 f8 ff	 cmp	 eax, -1
  00057	75 1c		 jne	 SHORT $LN2@use_facet

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005e	8d 4d e0	 lea	 ecx, DWORD PTR $T517684[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@std@@QAE@PBD@Z
  00067	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  0006c	8d 45 e0	 lea	 eax, DWORD PTR $T517684[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet:
$LN2@use_facet:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00075	8b 4d f0	 mov	 ecx, DWORD PTR __Psave$487935[ebp]
  00078	8b f1		 mov	 esi, ecx

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;

  0007a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::ctype<char> >::_Psave

; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  00080	8b f9		 mov	 edi, ecx

; 532  : 			_Pfmod->_Incref();

  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ

; 533  : 			_Pfmod->_Register();

  00088	57		 push	 edi
  00089	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  0008e	59		 pop	 ecx
$LN10@use_facet:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  0008f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$487934[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0009c	8b c6		 mov	 eax, esi

; 537  : 	_END_LOCK()
; 538  : 	}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c3		 ret	 0
$LN13@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$487934[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	return ((_Ty&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T517705 = -12						; size = 12
$T517709 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	void *_Ptr = 0;

  00003	33 c0		 xor	 eax, eax
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	if (_Count <= 0)

  00008	39 45 08	 cmp	 DWORD PTR __Count$[ebp], eax

; 34   : 		_Count = 0;
; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

  0000b	76 39		 jbe	 SHORT $LN5@Allocate@2

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000d	83 7d 08 ff	 cmp	 DWORD PTR __Count$[ebp], -1
  00011	77 0d		 ja	 SHORT $LN1@Allocate@2
  00013	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00016	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001b	59		 pop	 ecx
  0001c	85 c0		 test	 eax, eax

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

  0001e	75 26		 jne	 SHORT $LN5@Allocate@2
$LN1@Allocate@2:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

  00020	83 65 08 00	 and	 DWORD PTR $T517709[ebp], 0
  00024	8d 45 08	 lea	 eax, DWORD PTR $T517709[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR $T517705[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00031	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_alloc@std@@
  00036	8d 45 f4	 lea	 eax, DWORD PTR $T517705[ebp]
  00039	50		 push	 eax
  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T517705[ebp], OFFSET ??_7bad_alloc@std@@6B@
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@Allocate@2:
$LN5@Allocate@2:

; 40   : 	}

  00046	c9		 leave
  00047	c3		 ret	 0
$LN9@Allocate@2:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 263  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 264  : 	}

  00002	c3		 ret	 0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	??$_Move@AAD@std@@YA$$QADAAD@Z			; std::_Move<char &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 94   : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 96   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G_Root_node@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Root_node@tr1@std@@UAEPAXI@Z PROC			; std::tr1::_Root_node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@5
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@5:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Root_node@tr1@std@@UAEPAXI@Z ENDP			; std::tr1::_Root_node::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G_Node_end_group@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_end_group@tr1@std@@UAEPAXI@Z PROC		; std::tr1::_Node_end_group::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@6
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@6:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Node_end_group@tr1@std@@UAEPAXI@Z ENDP		; std::tr1::_Node_end_group::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G_Node_capture@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_capture@tr1@std@@UAEPAXI@Z PROC		; std::tr1::_Node_capture::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@7
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@7:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Node_capture@tr1@std@@UAEPAXI@Z ENDP		; std::tr1::_Node_capture::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G_Node_back@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_back@tr1@std@@UAEPAXI@Z PROC			; std::tr1::_Node_back::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@8
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@8:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Node_back@tr1@std@@UAEPAXI@Z ENDP			; std::tr1::_Node_back::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G_Node_endif@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_endif@tr1@std@@UAEPAXI@Z PROC			; std::tr1::_Node_endif::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@9
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@9:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Node_endif@tr1@std@@UAEPAXI@Z ENDP			; std::tr1::_Node_endif::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G_Node_end_rep@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_end_rep@tr1@std@@UAEPAXI@Z PROC		; std::tr1::_Node_end_rep::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@10
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@10:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Node_end_rep@tr1@std@@UAEPAXI@Z ENDP		; std::tr1::_Node_end_rep::`scalar deleting destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G_Node_rep@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_rep@tr1@std@@UAEPAXI@Z PROC			; std::tr1::_Node_rep::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00010	74 07		 je	 SHORT $LN1@scalar@11
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@11:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_G_Node_rep@tr1@std@@UAEPAXI@Z ENDP			; std::tr1::_Node_rep::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??A?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@I@Z ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??A?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@I@Z
_TEXT	SEGMENT
__Sub$ = 8						; size = 4
??A?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@I@Z PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[], COMDAT
; _this$ = ecx

; 1056 : 		{	// return submatch _Sub

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1057 : 		return (_Matches.size() <= _Sub ? _Null_elem : _Matches[_Sub]);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00009	56		 push	 esi
  0000a	6a 0c		 push	 12			; 0000000cH
  0000c	99		 cdq
  0000d	5e		 pop	 esi
  0000e	f7 fe		 idiv	 esi
  00010	8b 55 08	 mov	 edx, DWORD PTR __Sub$[ebp]
  00013	5e		 pop	 esi
  00014	3b c2		 cmp	 eax, edx
  00016	77 05		 ja	 SHORT $LN3@operator
  00018	8d 41 2c	 lea	 eax, DWORD PTR [ecx+44]
  0001b	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0001d	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00020	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00023	8b c2		 mov	 eax, edx
$LN4@operator:

; 1058 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??A?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@I@Z ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Regex_traits@D@tr1@std@@QAE@XZ		; std::tr1::_Regex_traits<char>::~_Regex_traits<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Regex_traits@D@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Regex_traits@D@tr1@std@@QAE@XZ PROC		; std::tr1::_Regex_traits<char>::~_Regex_traits<char>, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
??1?$_Regex_traits@D@tr1@std@@QAE@XZ ENDP		; std::tr1::_Regex_traits<char>::~_Regex_traits<char>
_TEXT	ENDS
PUBLIC	??0?$_Regex_traits@D@tr1@std@@QAE@XZ		; std::tr1::_Regex_traits<char>::_Regex_traits<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Regex_traits@D@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Regex_traits@D@tr1@std@@QAE@XZ PROC		; std::tr1::_Regex_traits<char>::_Regex_traits<char>, COMDAT
; _this$ = ecx

; 316  : 		{	// default construct

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 26 00	 and	 DWORD PTR [esi], 0
  00006	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  0000a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000d	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale

; 317  : 		}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0?$_Regex_traits@D@tr1@std@@QAE@XZ ENDP		; std::tr1::_Regex_traits<char>::_Regex_traits<char>
_TEXT	ENDS
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__File$ = 8						; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 152  : 		{	// construct from pointer to C stream

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  : 		_Init(_File, _Newfl);

  0001b	6a 00		 push	 0
  0001d	ff 75 08	 push	 DWORD PTR __File$[ebp]
  00020	8b ce		 mov	 ecx, esi
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00028	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 154  : 		}

  0002d	8b c6		 mov	 eax, esi
  0002f	e8 00 00 00 00	 call	 __EH_epilog3
  00034	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
EXTRN	__imp___lock_file:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 309  : 		if (_Myfile)

  00000	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00003	85 c0		 test	 eax, eax
  00005	74 08		 je	 SHORT $LN1@Lock

; 310  : 			_CSTD _lock_file(_Myfile);

  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lock_file
  0000e	59		 pop	 ecx
$LN1@Lock:

; 311  : 		}

  0000f	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
EXTRN	__imp___unlock_file:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 315  : 		if (_Myfile)

  00000	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00003	85 c0		 test	 eax, eax
  00005	74 08		 je	 SHORT $LN1@Unlock

; 316  : 			_CSTD _unlock_file(_Myfile);

  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlock_file
  0000e	59		 pop	 ecx
$LN1@Unlock:

; 317  : 		}

  0000f	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
EXTRN	__imp__fflush:PROC
; Function compile flags: /Ogsp
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 543  : 		{	// synchronize C stream with external file

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 544  : 		return (_Myfile == 0
; 545  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 546  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00003	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  00007	74 1f		 je	 SHORT $LN3@sync
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	6a ff		 push	 -1
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	83 f8 ff	 cmp	 eax, -1
  00013	74 13		 je	 SHORT $LN3@sync
  00015	ff 76 54	 push	 DWORD PTR [esi+84]
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  0001e	59		 pop	 ecx
  0001f	85 c0		 test	 eax, eax
  00021	79 05		 jns	 SHORT $LN3@sync
  00023	83 c8 ff	 or	 eax, -1
  00026	5e		 pop	 esi

; 547  : 		}

  00027	c3		 ret	 0
$LN3@sync:

; 544  : 		return (_Myfile == 0
; 545  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 546  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00028	33 c0		 xor	 eax, eax
  0002a	5e		 pop	 esi

; 547  : 		}

  0002b	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@H_J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@H_J@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Fileposition$ = 12					; size = 8
??0?$fpos@H@std@@QAE@H_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 45   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00008	83 20 00	 and	 DWORD PTR [eax], 0
  0000b	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0000f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00012	8b 4d 10	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  0001b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 46   : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
??0?$fpos@H@std@@QAE@H_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
PUBLIC	?state@?$fpos@H@std@@QBEHXZ			; std::fpos<int>::state
; Function compile flags: /Ogsp
;	COMDAT ?state@?$fpos@H@std@@QBEHXZ
_TEXT	SEGMENT
?state@?$fpos@H@std@@QBEHXZ PROC			; std::fpos<int>::state, COMDAT
; _this$ = ecx

; 50   : 		return (_Mystate);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 51   : 		}

  00003	c3		 ret	 0
?state@?$fpos@H@std@@QBEHXZ ENDP			; std::fpos<int>::state
_TEXT	ENDS
PUBLIC	?seekpos@?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::seekpos
; Function compile flags: /Ogsp
;	COMDAT ?seekpos@?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
?seekpos@?$fpos@H@std@@QBE_JXZ PROC			; std::fpos<int>::seekpos, COMDAT
; _this$ = ecx

; 60   : 		return (_Fpos);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 61   : 		}

  00006	c3		 ret	 0
?seekpos@?$fpos@H@std@@QBE_JXZ ENDP			; std::fpos<int>::seekpos
_TEXT	ENDS
PUBLIC	??B?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::operator __int64
; Function compile flags: /Ogsp
;	COMDAT ??B?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBE_JXZ PROC				; std::fpos<int>::operator __int64, COMDAT
; _this$ = ecx

; 65   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	99		 cdq
  00004	03 01		 add	 eax, DWORD PTR [ecx]
  00006	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 66   : 		}

  00009	c3		 ret	 0
??B?$fpos@H@std@@QBE_JXZ ENDP				; std::fpos<int>::operator __int64
_TEXT	ENDS
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 647  : 		if (_Mysb::eback() != &_Mychar)

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	56		 push	 esi
  00004	8b 32		 mov	 esi, DWORD PTR [edx]
  00006	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
  00009	3b f0		 cmp	 esi, eax
  0000b	74 12		 je	 SHORT $LN1@Set_back

; 648  : 			{	// save current get buffer
; 649  : 			_Set_eback = _Mysb::eback();

  0000d	89 71 3c	 mov	 DWORD PTR [ecx+60], esi

; 650  : 			_Set_egptr = _Mysb::egptr();

  00010	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
  00013	8b 36		 mov	 esi, DWORD PTR [esi]
  00015	57		 push	 edi
  00016	8b 79 20	 mov	 edi, DWORD PTR [ecx+32]
  00019	03 37		 add	 esi, DWORD PTR [edi]
  0001b	5f		 pop	 edi
  0001c	89 71 40	 mov	 DWORD PTR [ecx+64], esi
$LN1@Set_back:

; 651  : 			}
; 652  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  0001f	89 02		 mov	 DWORD PTR [edx], eax
  00021	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00024	89 02		 mov	 DWORD PTR [edx], eax
  00026	8b d1		 mov	 edx, ecx
  00028	2b d0		 sub	 edx, eax
  0002a	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0002d	83 c2 49	 add	 edx, 73			; 00000049H
  00030	89 10		 mov	 DWORD PTR [eax], edx
  00032	5e		 pop	 esi

; 653  : 		}

  00033	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
EXTRN	__imp__fgetc:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 35   : 	{	// get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 	int _Meta;
; 37   : 	if ((_Meta = fgetc(_File)) == EOF)

  00003	ff 75 0c	 push	 DWORD PTR __File$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0000c	59		 pop	 ecx
  0000d	83 f8 ff	 cmp	 eax, -1
  00010	75 04		 jne	 SHORT $LN2@Fgetc

; 38   : 		return (false);

  00012	32 c0		 xor	 al, al

; 43   : 		}
; 44   : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@Fgetc:

; 39   : 	else
; 40   : 		{	// got one, convert to char
; 41   : 		_Byte = (char)_Meta;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00019	88 01		 mov	 BYTE PTR [ecx], al

; 42   : 		return (true);

  0001b	b0 01		 mov	 al, 1

; 43   : 		}
; 44   : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
EXTRN	__imp__fputc:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 80   : 	{	// put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	return (fputc(_Byte, _File) != EOF);

  00003	0f be 45 08	 movsx	 eax, BYTE PTR __Byte$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __File$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  00011	59		 pop	 ecx
  00012	59		 pop	 ecx
  00013	33 c9		 xor	 ecx, ecx
  00015	83 f8 ff	 cmp	 eax, -1
  00018	0f 95 c0	 setne	 al

; 82   : 	}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
EXTRN	__imp__ungetc:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 104  : 	{	// put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Byte$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00009	ff 75 0c	 push	 DWORD PTR __File$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00013	59		 pop	 ecx
  00014	59		 pop	 ecx
  00015	33 c9		 xor	 ecx, ecx
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	0f 95 c0	 setne	 al

; 106  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
PUBLIC	??0?$fpos@H@std@@QAE@_J@Z			; std::fpos<int>::fpos<int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 8
??0?$fpos@H@std@@QAE@_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 40   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	33 c9		 xor	 ecx, ecx
  00012	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00015	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00018	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 41   : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??0?$fpos@H@std@@QAE@_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 408  : 		{	// get an element from stream, but don't point past it

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 409  : 		int_type _Meta;
; 410  : 		if (_Mysb::gptr() != 0
; 411  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0000a	85 c0		 test	 eax, eax
  0000c	74 23		 je	 SHORT $LN4@underflow
  0000e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00011	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00014	8b 38		 mov	 edi, DWORD PTR [eax]
  00016	03 39		 add	 edi, DWORD PTR [ecx]
  00018	8b ce		 mov	 ecx, esi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00020	3b c7		 cmp	 eax, edi
  00022	73 0d		 jae	 SHORT $LN4@underflow

; 412  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00024	8b ce		 mov	 ecx, esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0002f	eb 1a		 jmp	 SHORT $LN1@underflow
$LN4@underflow:

; 413  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b ce		 mov	 ecx, esi
  00035	ff 50 1c	 call	 DWORD PTR [eax+28]
  00038	8b f8		 mov	 edi, eax
  0003a	83 c8 ff	 or	 eax, -1
  0003d	3b f8		 cmp	 edi, eax

; 414  : 			return (_Meta);	// uflow failed, return EOF

  0003f	74 0a		 je	 SHORT $LN1@underflow

; 415  : 		else
; 416  : 			{	// get a char, don't point past it
; 417  : 			pbackfail(_Meta);

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	57		 push	 edi
  00044	8b ce		 mov	 ecx, esi
  00046	ff 50 10	 call	 DWORD PTR [eax+16]

; 418  : 			return (_Meta);

  00049	8b c7		 mov	 eax, edi
$LN1@underflow:

; 419  : 			}
; 420  : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 557  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 558  : 		return (_Meta != eof() ? _Meta : !eof());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0000b	f7 d8		 neg	 eax
  0000d	1b c0		 sbb	 eax, eax
  0000f	23 c1		 and	 eax, ecx

; 559  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
EXTRN	__imp__setvbuf:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 530  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 531  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 532  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 533  : 			(size_t)_Count * sizeof (_Elem)) != 0)

  00006	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c1		 cmp	 eax, ecx
  0000d	74 35		 je	 SHORT $LN2@setbuf
  0000f	39 4d 08	 cmp	 DWORD PTR __Buffer$[ebp], ecx
  00012	75 0b		 jne	 SHORT $LN6@setbuf
  00014	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00017	0b 55 10	 or	 edx, DWORD PTR __Count$[ebp+4]
  0001a	75 03		 jne	 SHORT $LN6@setbuf
  0001c	6a 04		 push	 4
  0001e	59		 pop	 ecx
$LN6@setbuf:
  0001f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00022	51		 push	 ecx
  00023	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00026	50		 push	 eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setvbuf
  0002d	83 c4 10	 add	 esp, 16			; 00000010H
  00030	85 c0		 test	 eax, eax
  00032	75 10		 jne	 SHORT $LN2@setbuf

; 535  : 		else
; 536  : 			{	// new buffer, reinitialize pointers
; 537  : 			_Init(_Myfile, _Openfl);

  00034	6a 01		 push	 1
  00036	ff 76 54	 push	 DWORD PTR [esi+84]
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 538  : 			return (this);

  00040	8b c6		 mov	 eax, esi
  00042	eb 02		 jmp	 SHORT $LN1@setbuf
$LN2@setbuf:

; 534  : 			return (0);	// failed

  00044	33 c0		 xor	 eax, eax
$LN1@setbuf:
  00046	5e		 pop	 esi

; 539  : 			}
; 540  : 		}

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@1@@Z ; std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@1@@Z PROC ; std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@1@@Z ENDP ; std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ; std::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ PROC ; std::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 126  : 		{	// construct from defaults

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 127  : 		}

  00009	c3		 ret	 0
??0?$_Pair_base@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ENDP ; std::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Pair_base<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
PUBLIC	??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
EXTRN	__imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_?id@?$codecvt@DDH@std@@2V0locale@2@A:DWORD
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T517928 = -32						; size = 12
__Lock$510699 = -20					; size = 4
__Psave$510700 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,int> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$510699[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$codecvt@DDH@std@@2V0locale@2@A
  00022	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00026	89 45 f0	 mov	 DWORD PTR __Psave$510700[ebp], eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00038	8b f0		 mov	 esi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  0003a	85 f6		 test	 esi, esi
  0003c	75 51		 jne	 SHORT $LN10@use_facet@2

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003e	8b 75 f0	 mov	 esi, DWORD PTR __Psave$510700[ebp]
  00041	85 f6		 test	 esi, esi

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00043	75 4a		 jne	 SHORT $LN10@use_facet@2

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00045	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00048	8d 45 f0	 lea	 eax, DWORD PTR __Psave$510700[ebp]
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
  00054	83 f8 ff	 cmp	 eax, -1
  00057	75 1c		 jne	 SHORT $LN2@use_facet@2

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005e	8d 4d e0	 lea	 ecx, DWORD PTR $T517928[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@std@@QAE@PBD@Z
  00067	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  0006c	8d 45 e0	 lea	 eax, DWORD PTR $T517928[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet@2:
$LN2@use_facet@2:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00075	8b 4d f0	 mov	 ecx, DWORD PTR __Psave$510700[ebp]
  00078	8b f1		 mov	 esi, ecx

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;

  0007a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave

; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  00080	8b f9		 mov	 edi, ecx

; 532  : 			_Pfmod->_Incref();

  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ

; 533  : 			_Pfmod->_Register();

  00088	57		 push	 edi
  00089	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  0008e	59		 pop	 ecx
$LN10@use_facet@2:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  0008f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$510699[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0009c	8b c6		 mov	 eax, esi

; 537  : 	_END_LOCK()
; 538  : 	}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c3		 ret	 0
$LN13@use_facet@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$510699[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,int> >
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1356 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1357 : 		return (_STRING_CONST_ITERATOR(_Myptr()));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 02		 jb	 SHORT $LN5@begin
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@begin:
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1358 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1366 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1367 : 		return (_STRING_CONST_ITERATOR(_Myptr() + this->_Mysize));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 04		 jb	 SHORT $LN5@end
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	eb 02		 jmp	 SHORT $LN6@end
$LN5@end:
  0000d	8b c1		 mov	 eax, ecx
$LN6@end:
  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	03 c8		 add	 ecx, eax
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00017	89 08		 mov	 DWORD PTR [eax], ecx

; 1368 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1exception@std@@UAE@XZ
  0000c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00010	74 07		 je	 SHORT $LN1@scalar@12
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	59		 pop	 ecx
$LN1@scalar@12:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ; std::tr1::_Bt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Bt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ PROC ; std::tr1::_Bt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Bt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	c3		 ret	 0
??0?$_Bt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ENDP ; std::tr1::_Bt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Bt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0_Grp_t@?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Grp_t::_Grp_t
; Function compile flags: /Ogsp
;	COMDAT ??0_Grp_t@?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0_Grp_t@?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ PROC ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Grp_t::_Grp_t, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00009	c3		 ret	 0
??0_Grp_t@?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ENDP ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Grp_t::_Grp_t
_TEXT	ENDS
PUBLIC	?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z
_TEXT	SEGMENT
__Back$ = 8						; size = 4
?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group, COMDAT
; _this$ = ecx

; 3464 : 	{	// add end of group node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 3465 : 	_Node_type _Elt = _Back->_Type == _N_group ? _N_end_group
; 3466 : 		: _Back->_Type == _N_assert ? _N_end_assert
; 3467 : 		: _Back->_Type == _N_neg_assert ? _N_end_assert
; 3468 : 		: _N_end_capture;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Back$[ebp]
  00009	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	83 f8 08	 cmp	 eax, 8
  00011	75 04		 jne	 SHORT $LN5@End_group
  00013	6a 09		 push	 9
  00015	eb 07		 jmp	 SHORT $LN14@End_group
$LN5@End_group:
  00017	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0001a	75 05		 jne	 SHORT $LN3@End_group
  0001c	6a 0c		 push	 12			; 0000000cH
$LN14@End_group:
  0001e	5e		 pop	 esi
  0001f	eb 0c		 jmp	 SHORT $LN4@End_group
$LN3@End_group:
  00021	33 c9		 xor	 ecx, ecx
  00023	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00026	0f 95 c1	 setne	 cl
  00029	8d 74 09 0c	 lea	 esi, DWORD PTR [ecx+ecx+12]
$LN4@End_group:

; 3469 : 	_Link_node(new _Node_end_group(_Elt, _Fl_none, _Back));

  0002d	6a 18		 push	 24			; 00000018H
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	59		 pop	 ecx
  00035	33 c9		 xor	 ecx, ecx
  00037	3b c1		 cmp	 eax, ecx
  00039	74 17		 je	 SHORT $LN7@End_group
  0003b	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0003e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00041	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00044	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_end_group@tr1@std@@6B@
  0004d	89 78 14	 mov	 DWORD PTR [eax+20], edi
  00050	eb 02		 jmp	 SHORT $LN8@End_group
$LN7@End_group:
  00052	33 c0		 xor	 eax, eax
$LN8@End_group:
  00054	50		 push	 eax
  00055	8b cb		 mov	 ecx, ebx
  00057	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx

; 3470 : 	}

  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group
_TEXT	ENDS
PUBLIC	?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@I@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_capture_group
; Function compile flags: /Ogsp
;	COMDAT ?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@I@Z
_TEXT	SEGMENT
__Idx$ = 8						; size = 4
?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@I@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_capture_group, COMDAT
; _this$ = ecx

; 3511 : 	{	// add capture group node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3512 : 	return (_Link_node(new _Node_capture(_Idx)));

  00004	6a 18		 push	 24			; 00000018H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	59		 pop	 ecx
  0000e	33 c9		 xor	 ecx, ecx
  00010	3b c1		 cmp	 eax, ecx
  00012	74 1e		 je	 SHORT $LN3@Begin_capt
  00014	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00017	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0001a	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Idx$[ebp]
  00020	c7 40 04 0d 00
	00 00		 mov	 DWORD PTR [eax+4], 13	; 0000000dH
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_capture@tr1@std@@6B@
  0002d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00030	eb 02		 jmp	 SHORT $LN4@Begin_capt
$LN3@Begin_capt:
  00032	33 c0		 xor	 eax, eax
$LN4@Begin_capt:
  00034	50		 push	 eax
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
  0003c	5e		 pop	 esi

; 3513 : 	}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@I@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_capture_group
_TEXT	ENDS
PUBLIC	?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_pattern
; Function compile flags: /Ogsp
;	COMDAT ?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ
_TEXT	SEGMENT
?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_pattern, COMDAT
; _this$ = ecx

; 3593 : 	{	// wrap up

  00000	56		 push	 esi

; 3594 : 	_New_node(_N_end);

  00001	6a 15		 push	 21			; 00000015H
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 3595 : 	return (_Root);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	5e		 pop	 esi

; 3596 : 	}

  0000d	c3		 ret	 0
?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_pattern
_TEXT	ENDS
PUBLIC	?_At@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@I@Z ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_At
; Function compile flags: /Ogsp
;	COMDAT ?_At@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@I@Z
_TEXT	SEGMENT
__Sub$ = 8						; size = 4
?_At@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@I@Z PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_At, COMDAT
; _this$ = ecx

; 1183 : 		{	// unchecked access to element at _Sub

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1184 : 		return (_Matches[_Sub]);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Sub$[ebp]
  00006	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00009	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 1185 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?_At@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEAAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@23@I@Z ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_At
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@Z PROC ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::destroy, COMDAT
; _this$ = ecx

; 213  : 		_Destroy(_Ptr);
; 214  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@Z ENDP ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 885  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBEIXZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEII@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEII@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	99		 cdq
  0000b	59		 pop	 ecx
  0000c	f7 f9		 idiv	 ecx

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0000e	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00013	8b c8		 mov	 ecx, eax
  00015	d1 e9		 shr	 ecx, 1
  00017	2b d1		 sub	 edx, ecx
  00019	3b d0		 cmp	 edx, eax
  0001b	73 04		 jae	 SHORT $LN4@Grow_to
  0001d	33 c0		 xor	 eax, eax
  0001f	eb 02		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00021	03 c1		 add	 eax, ecx
$LN5@Grow_to:

; 1279 : 		if (_Capacity < _Count)

  00023	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  00026	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Grow_to@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEII@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Grow_to
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAE@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+=, COMDAT
; _this$ = ecx

; 357  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 358  : 		*(_Mybase *)this += _Off;

  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00008	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0000b	01 08		 add	 DWORD PTR [eax], ecx

; 359  : 		return (*this);
; 360  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+=
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z PROC ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPAV120@@Z ; std::_Allocate<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@I@Z ENDP ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::allocate
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==, COMDAT
; _this$ = ecx

; 201  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 204  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
_TEXT	ENDS
PUBLIC	?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ
_TEXT	SEGMENT
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr, COMDAT
; _this$ = ecx

; 3179 : 	{	// test for beginning of expression or subexpression

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 3180 : 	return (_Beg_expr(_Current)
; 3181 : 		|| _Current->_Type == _N_bol && _Beg_expr(_Current->_Prev));

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
  0000d	84 c0		 test	 al, al
  0000f	75 18		 jne	 SHORT $LN4@Beg_expr@2
  00011	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00015	75 0e		 jne	 SHORT $LN3@Beg_expr@2
  00017	ff 76 10	 push	 DWORD PTR [esi+16]
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
  00021	84 c0		 test	 al, al
  00023	75 04		 jne	 SHORT $LN4@Beg_expr@2
$LN3@Beg_expr@2:
  00025	33 c0		 xor	 eax, eax
  00027	eb 03		 jmp	 SHORT $LN5@Beg_expr@2
$LN4@Beg_expr@2:
  00029	33 c0		 xor	 eax, eax
  0002b	40		 inc	 eax
$LN5@Beg_expr@2:

; 3182 : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
_TEXT	ENDS
PUBLIC	?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@XZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_group
; Function compile flags: /Ogsp
;	COMDAT ?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@XZ
_TEXT	SEGMENT
?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@XZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_group, COMDAT
; _this$ = ecx

; 3456 : 	return (_New_node(_N_group));

  00000	6a 08		 push	 8
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 3457 : 	}

  00007	c3		 ret	 0
?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@XZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_group
_TEXT	ENDS
PUBLIC	?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_if
; Function compile flags: /Ogsp
;	COMDAT ?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@PAV423@@Z
_TEXT	SEGMENT
__Start$ = 8						; size = 4
?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@PAV423@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_if, COMDAT
; _this$ = ecx

; 3529 : 	{	// add if node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 3530 : 	/* append endif node */
; 3531 : 	_Node_base *_Res = new _Node_endif;

  00006	6a 14		 push	 20			; 00000014H
  00008	8b d9		 mov	 ebx, ecx
  0000a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000f	33 f6		 xor	 esi, esi
  00011	59		 pop	 ecx
  00012	3b c6		 cmp	 eax, esi
  00014	74 1a		 je	 SHORT $LN3@Begin_if
  00016	c7 40 04 11 00
	00 00		 mov	 DWORD PTR [eax+4], 17	; 00000011H
  0001d	89 70 08	 mov	 DWORD PTR [eax+8], esi
  00020	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  00023	89 70 10	 mov	 DWORD PTR [eax+16], esi
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_endif@tr1@std@@6B@
  0002c	8b f8		 mov	 edi, eax
  0002e	eb 02		 jmp	 SHORT $LN4@Begin_if
$LN3@Begin_if:
  00030	33 ff		 xor	 edi, edi
$LN4@Begin_if:

; 3532 : 	_Link_node(_Res);

  00032	57		 push	 edi
  00033	8b cb		 mov	 ecx, ebx
  00035	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node

; 3533 : 
; 3534 : 	/* insert if_node */
; 3535 : 	_Node_if *_Node1 = new _Node_if(_Res);

  0003a	6a 1c		 push	 28			; 0000001cH
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	59		 pop	 ecx
  00042	3b c6		 cmp	 eax, esi
  00044	74 1e		 je	 SHORT $LN5@Begin_if
  00046	c7 40 04 10 00
	00 00		 mov	 DWORD PTR [eax+4], 16	; 00000010H
  0004d	89 70 08	 mov	 DWORD PTR [eax+8], esi
  00050	89 70 0c	 mov	 DWORD PTR [eax+12], esi
  00053	89 70 10	 mov	 DWORD PTR [eax+16], esi
  00056	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_if@tr1@std@@6B@
  0005c	89 78 14	 mov	 DWORD PTR [eax+20], edi
  0005f	89 70 18	 mov	 DWORD PTR [eax+24], esi
  00062	eb 02		 jmp	 SHORT $LN6@Begin_if
$LN5@Begin_if:
  00064	33 c0		 xor	 eax, eax
$LN6@Begin_if:

; 3536 : 	_Node_base *_Pos = _Start->_Next;

  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Start$[ebp]
  00069	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]

; 3537 : 	_Node1->_Prev = _Pos->_Prev;

  0006c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0006f	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 3538 : 	_Pos->_Prev->_Next = _Node1;

  00072	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00075	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 3539 : 	_Node1->_Next = _Pos;

  00078	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 3540 : 	_Pos->_Prev = _Node1;

  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 3541 : 	return (_Res);

  0007e	8b c7		 mov	 eax, edi
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx

; 3542 : 	}

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@PAV423@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_if
_TEXT	ENDS
PUBLIC	??4?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEAAV012@ABV012@@Z ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEAAV012@ABV012@@Z PROC ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00012	8a 49 08	 mov	 cl, BYTE PTR [ecx+8]
  00015	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??4?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAEAAV012@ABV012@@Z ENDP ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator=
_TEXT	ENDS
PUBLIC	?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z		; std::tr1::_Buf<char>::_Insert
; Function compile flags: /Ogsp
;	COMDAT ?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z PROC			; std::tr1::_Buf<char>::_Insert, COMDAT
; _this$ = ecx

; 1320 : 		{	// append _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1321 : 		if (_Sz <= _Nchrs)

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	39 06		 cmp	 DWORD PTR [esi], eax
  0000b	77 09		 ja	 SHORT $LN1@Insert

; 1322 : 			_Expand(_Nchrs + _Buf_incr);

  0000d	83 c0 10	 add	 eax, 16			; 00000010H
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?_Expand@?$_Buf@D@tr1@std@@AAEXH@Z ; std::tr1::_Buf<char>::_Expand
$LN1@Insert:

; 1323 : 		_Chrs[_Nchrs++] = _Ch;

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00019	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001c	8a 55 08	 mov	 dl, BYTE PTR __Ch$[ebp]
  0001f	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00022	ff 46 04	 inc	 DWORD PTR [esi+4]
  00025	5e		 pop	 esi

; 1324 : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z ENDP			; std::tr1::_Buf<char>::_Insert
_TEXT	ENDS
PUBLIC	??_G?$_Buf@D@tr1@std@@QAEPAXI@Z			; std::tr1::_Buf<char>::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$_Buf@D@tr1@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$_Buf@D@tr1@std@@QAEPAXI@Z PROC			; std::tr1::_Buf<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 76 08	 push	 DWORD PTR [esi+8]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	59		 pop	 ecx
  00014	74 07		 je	 SHORT $LN1@scalar@13
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	59		 pop	 ecx
$LN1@scalar@13:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$_Buf@D@tr1@std@@QAEPAXI@Z ENDP			; std::tr1::_Buf<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ$0
__ehfuncinfo$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ
_TEXT	SEGMENT
$T518157 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ PROC ; std::tr1::_Regex_traits<char>::_Getctype, COMDAT
; _this$ = ecx

; 419  : 		{	// get ctype facet pointer

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 420  : 		if (_Pctype == 0)

  0000e	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00012	75 1f		 jne	 SHORT $LN1@Getctype

; 421  : 			*((const _STD ctype<_Elem> **)&_Pctype) =
; 422  : 				&_USE(getloc(), _STD ctype<_Elem>);

  00014	8d 45 f0	 lea	 eax, DWORD PTR $T518157[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?getloc@?$_Regex_traits@D@tr1@std@@QBE?AVlocale@3@XZ ; std::tr1::_Regex_traits<char>::getloc
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00027	59		 pop	 ecx
  00028	8d 4d f0	 lea	 ecx, DWORD PTR $T518157[ebp]
  0002b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0002e	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN1@Getctype:

; 423  : 		return (_Pctype);

  00033	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 424  : 		}

  00036	e8 00 00 00 00	 call	 __EH_epilog3
  0003b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T518157[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ENDP ; std::tr1::_Regex_traits<char>::_Getctype
PUBLIC	??_G?$_Sequence@D@tr1@std@@QAEPAXI@Z		; std::tr1::_Sequence<char>::`scalar deleting destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_G?$_Sequence@D@tr1@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$_Sequence@D@tr1@std@@QAEPAXI@Z PROC		; std::tr1::_Sequence<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 76 0c	 push	 DWORD PTR [esi+12]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	59		 pop	 ecx
  00014	74 07		 je	 SHORT $LN1@scalar@14
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	59		 pop	 ecx
$LN1@scalar@14:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$_Sequence@D@tr1@std@@QAEPAXI@Z ENDP		; std::tr1::_Sequence<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Lookup_range@D@tr1@std@@YA_NDPBU?$_Buf@D@01@@Z ; std::tr1::_Lookup_range<char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Lookup_range@D@tr1@std@@YA_NDPBU?$_Buf@D@01@@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Bufptr$ = 12						; size = 4
??$_Lookup_range@D@tr1@std@@YA_NDPBU?$_Buf@D@01@@Z PROC	; std::tr1::_Lookup_range<char>, COMDAT

; 3769 : 	{	// check whether _Ch is in _Buf

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3770 : 	for (int _Ix = 0; _Ix < _Bufptr->_Size(); _Ix += 2)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bufptr$[ebp]
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	85 f6		 test	 esi, esi
  0000e	7e 18		 jle	 SHORT $LN2@Lookup_ran
  00010	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00013	8a 55 08	 mov	 dl, BYTE PTR __Ch$[ebp]
$LL4@Lookup_ran:

; 3771 : 		{	// check current position
; 3772 : 		if (_Bufptr->_At(_Ix) <= _Ch
; 3773 : 			&& _Ch <= _Bufptr->_At(_Ix + 1))

  00016	38 14 01	 cmp	 BYTE PTR [ecx+eax], dl
  00019	7f 06		 jg	 SHORT $LN3@Lookup_ran
  0001b	3a 54 01 01	 cmp	 dl, BYTE PTR [ecx+eax+1]
  0001f	7e 0c		 jle	 SHORT $LN14@Lookup_ran
$LN3@Lookup_ran:

; 3770 : 	for (int _Ix = 0; _Ix < _Bufptr->_Size(); _Ix += 2)

  00021	83 c0 02	 add	 eax, 2
  00024	3b c6		 cmp	 eax, esi
  00026	7c ee		 jl	 SHORT $LL4@Lookup_ran
$LN2@Lookup_ran:

; 3775 : 		}
; 3776 : 	return (false);

  00028	32 c0		 xor	 al, al
$LN5@Lookup_ran:
  0002a	5e		 pop	 esi

; 3777 : 	}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
$LN14@Lookup_ran:

; 3774 : 				return (true);

  0002d	b0 01		 mov	 al, 1
  0002f	eb f9		 jmp	 SHORT $LN5@Lookup_ran
??$_Lookup_range@D@tr1@std@@YA_NDPBU?$_Buf@D@01@@Z ENDP	; std::tr1::_Lookup_range<char>
_TEXT	ENDS
PUBLIC	??$find@PBDD@std@@YAPBDPBD0ABD@Z		; std::find<char const *,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm
;	COMDAT ??$find@PBDD@std@@YAPBDPBD0ABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$find@PBDD@std@@YAPBDPBD0ABD@Z PROC			; std::find<char const *,char>, COMDAT

; 71   : 	{	// find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   : 	}

  00003	5d		 pop	 ebp

; 72   : 	_DEBUG_RANGE(_First, _Last);
; 73   : 	return (_Rechecked(_First,
; 74   : 		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));

  00004	e9 00 00 00 00	 jmp	 ??$_Find@PBDD@std@@YAPBDPBD0ABD@Z ; std::_Find<char const *,char>
??$find@PBDD@std@@YAPBDPBD0ABD@Z ENDP			; std::find<char const *,char>
_TEXT	ENDS
PUBLIC	?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Disjunction
PUBLIC	?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_capture_group
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_capture_group, COMDAT
; _this$ = ecx

; 4660 : 	{	// add capture group

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 4661 : 	if (_MAX_GRP <= ++_Grp_idx)

  00004	ff 46 0c	 inc	 DWORD PTR [esi+12]
  00007	83 7e 0c 20	 cmp	 DWORD PTR [esi+12], 32	; 00000020H
  0000b	57		 push	 edi
  0000c	72 09		 jb	 SHORT $LN4@Do_capture

; 4662 : 		_Error(regex_constants::error_complexity);

  0000e	6a 0b		 push	 11			; 0000000bH
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00016	59		 pop	 ecx
$LN4@Do_capture:

; 4663 : 	_Node_base *_Pos1 = _Nfa._Begin_capture_group(_Grp_idx);

  00017	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001a	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001d	e8 00 00 00 00	 call	 ?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@I@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_capture_group

; 4664 : 	_Disjunction();

  00022	8b ce		 mov	 ecx, esi
  00024	8b d8		 mov	 ebx, eax
  00026	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Disjunction

; 4665 : 	_Nfa._End_group(_Pos1);

  0002b	53		 push	 ebx
  0002c	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0002f	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group

; 4666 : 	_Finished_grps |= (_Grps(1)

  00034	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00037	33 c0		 xor	 eax, eax
  00039	40		 inc	 eax
  0003a	d3 e0		 shl	 eax, cl
  0003c	5f		 pop	 edi
  0003d	09 46 14	 or	 DWORD PTR [esi+20], eax
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx

; 4667 : 		<< ((_Node_capture *)_Pos1)->_Idx);
; 4668 : 	}

  00042	c3		 ret	 0
?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_capture_group
_TEXT	ENDS
PUBLIC	?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_noncapture_group
; Function compile flags: /Ogsp
;	COMDAT ?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_noncapture_group, COMDAT
; _this$ = ecx

; 4674 : 	{	// add non-capture group

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 4675 : 	_Node_base *_Pos1 = _Nfa._Begin_group();

  00005	6a 08		 push	 8
  00007	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0000a	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 4676 : 	_Disjunction();

  0000f	8b ce		 mov	 ecx, esi
  00011	8b d8		 mov	 ebx, eax
  00013	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Disjunction

; 4677 : 	_Nfa._End_group(_Pos1);

  00018	53		 push	 ebx
  00019	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001c	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx

; 4678 : 	}

  00024	c3		 ret	 0
?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_noncapture_group
_TEXT	ENDS
PUBLIC	?_Add_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_class
; Function compile flags: /Ogsp
;	COMDAT ?_Add_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_class, COMDAT
; _this$ = ecx

; 3277 : 	{	// add bracket expression node

  00000	56		 push	 esi

; 3278 : 	_Link_node(new _Node_class<_Elem, _RxTraits>);

  00001	6a 2c		 push	 44			; 0000002cH
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	59		 pop	 ecx
  0000b	85 c0		 test	 eax, eax
  0000d	74 0d		 je	 SHORT $LN3@Add_class
  0000f	6a 00		 push	 0
  00011	6a 07		 push	 7
  00013	8b c8		 mov	 ecx, eax
  00015	e8 00 00 00 00	 call	 ??0?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@W4_Node_type@12@W4_Node_flags@12@@Z ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Node_class<char,std::tr1::regex_traits<char> >
  0001a	eb 02		 jmp	 SHORT $LN4@Add_class
$LN3@Add_class:
  0001c	33 c0		 xor	 eax, eax
$LN4@Add_class:
  0001e	50		 push	 eax
  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
  00026	5e		 pop	 esi

; 3279 : 	}

  00027	c3		 ret	 0
?_Add_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_class
_TEXT	ENDS
PUBLIC	??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV01@H@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++, COMDAT
; _this$ = ecx

; 124  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 126  : 		++*this;

  0000a	42		 inc	 edx
  0000b	89 11		 mov	 DWORD PTR [ecx], edx

; 127  : 		return (_Tmp);
; 128  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
??E?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV01@H@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++
_TEXT	ENDS
PUBLIC	??_7?$_Node_str@D@tr1@std@@6B@			; std::tr1::_Node_str<char>::`vftable'
PUBLIC	??0?$_Node_str@D@tr1@std@@QAE@W4_Node_flags@12@@Z ; std::tr1::_Node_str<char>::_Node_str<char>
PUBLIC	??_R4?$_Node_str@D@tr1@std@@6B@			; std::tr1::_Node_str<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$_Node_str@D@tr1@std@@@8		; std::tr1::_Node_str<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Node_str@D@tr1@std@@8			; std::tr1::_Node_str<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Node_str@D@tr1@std@@8			; std::tr1::_Node_str<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Node_str@D@tr1@std@@8		; std::tr1::_Node_str<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$_Node_str@D@tr1@std@@UAEPAXI@Z:PROC	; std::tr1::_Node_str<char>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$_Node_str@D@tr1@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Node_str@D@tr1@std@@8 DD FLAT:??_R0?AV?$_Node_str@D@tr1@std@@@8 ; std::tr1::_Node_str<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Node_str@D@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Node_str@D@tr1@std@@8
rdata$r	SEGMENT
??_R2?$_Node_str@D@tr1@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Node_str@D@tr1@std@@8 ; std::tr1::_Node_str<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Node_str@D@tr1@std@@8
rdata$r	SEGMENT
??_R3?$_Node_str@D@tr1@std@@8 DD 00H			; std::tr1::_Node_str<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$_Node_str@D@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Node_str@D@tr1@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Node_str@D@tr1@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::tr1::_Node_str<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Node_str@D@tr1@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$_Node_str@D@tr1@std@@6B@
rdata$r	SEGMENT
??_R4?$_Node_str@D@tr1@std@@6B@ DD 00H			; std::tr1::_Node_str<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$_Node_str@D@tr1@std@@@8
	DD	FLAT:??_R3?$_Node_str@D@tr1@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$_Node_str@D@tr1@std@@6B@
CONST	SEGMENT
??_7?$_Node_str@D@tr1@std@@6B@ DD FLAT:??_R4?$_Node_str@D@tr1@std@@6B@ ; std::tr1::_Node_str<char>::`vftable'
	DD	FLAT:??_E?$_Node_str@D@tr1@std@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0?$_Node_str@D@tr1@std@@QAE@W4_Node_flags@12@@Z
_TEXT	SEGMENT
__Fl$ = 8						; size = 4
??0?$_Node_str@D@tr1@std@@QAE@W4_Node_flags@12@@Z PROC	; std::tr1::_Node_str<char>::_Node_str<char>, COMDAT
; _this$ = ecx

; 1501 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Fl$[ebp]
  00008	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000b	33 c9		 xor	 ecx, ecx
  0000d	c7 40 04 06 00
	00 00		 mov	 DWORD PTR [eax+4], 6
  00014	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00017	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$_Node_str@D@tr1@std@@6B@
  00020	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00023	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00026	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1502 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0?$_Node_str@D@tr1@std@@QAE@W4_Node_flags@12@@Z ENDP	; std::tr1::_Node_str<char>::_Node_str<char>
_TEXT	ENDS
PUBLIC	??1?$_Node_str@D@tr1@std@@UAE@XZ		; std::tr1::_Node_str<char>::~_Node_str<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Node_str@D@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1?$_Node_str@D@tr1@std@@UAE@XZ PROC			; std::tr1::_Node_str<char>::~_Node_str<char>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 76 1c	 push	 DWORD PTR [esi+28]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0000c	59		 pop	 ecx
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  00013	5e		 pop	 esi
  00014	c3		 ret	 0
??1?$_Node_str@D@tr1@std@@UAE@XZ ENDP			; std::tr1::_Node_str<char>::~_Node_str<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$_Node_str@D@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$_Node_str@D@tr1@std@@UAEPAXI@Z PROC		; std::tr1::_Node_str<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 76 1c	 push	 DWORD PTR [esi+28]
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0000f	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00013	59		 pop	 ecx
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  0001a	74 07		 je	 SHORT $LN1@scalar@15
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	59		 pop	 ecx
$LN1@scalar@15:
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??_G?$_Node_str@D@tr1@std@@UAEPAXI@Z ENDP		; std::tr1::_Node_str<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z PROC ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@ABU01@@Z ENDP ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??_7?$collate@D@std@@6B@			; std::collate<char>::`vftable'
PUBLIC	??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z	; std::collate<char>::collate<char>
PUBLIC	??_R4?$collate@D@std@@6B@			; std::collate<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$collate@D@std@@@8			; std::collate<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$collate@D@std@@8				; std::collate<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$collate@D@std@@8				; std::collate<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$collate@D@std@@8		; std::collate<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	?do_compare@?$collate@D@std@@MBEHPBD000@Z	; std::collate<char>::do_compare
PUBLIC	?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::collate<char>::do_transform
PUBLIC	?do_hash@?$collate@D@std@@MBEJPBD0@Z		; std::collate<char>::do_hash
EXTRN	__imp_??1facet@locale@std@@UAE@XZ:PROC
EXTRN	__imp_??0facet@locale@std@@IAE@I@Z:PROC
EXTRN	??_E?$collate@D@std@@MAEPAXI@Z:PROC		; std::collate<char>::`vector deleting destructor'
;	COMDAT ??_R2facet@locale@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\locale
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$collate@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$collate@D@std@@8 DD FLAT:??_R0?AV?$collate@D@std@@@8 ; std::collate<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$collate@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$collate@D@std@@8
rdata$r	SEGMENT
??_R2?$collate@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$collate@D@std@@8 ; std::collate<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$collate@D@std@@8
rdata$r	SEGMENT
??_R3?$collate@D@std@@8 DD 00H				; std::collate<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$collate@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$collate@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$collate@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::collate<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$collate@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$collate@D@std@@6B@
rdata$r	SEGMENT
??_R4?$collate@D@std@@6B@ DD 00H			; std::collate<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$collate@D@std@@@8
	DD	FLAT:??_R3?$collate@D@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$collate@D@std@@6B@
CONST	SEGMENT
??_7?$collate@D@std@@6B@ DD FLAT:??_R4?$collate@D@std@@6B@ ; std::collate<char>::`vftable'
	DD	FLAT:??_E?$collate@D@std@@MAEPAXI@Z
	DD	FLAT:?do_compare@?$collate@D@std@@MBEHPBD000@Z
	DD	FLAT:?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
	DD	FLAT:?do_hash@?$collate@D@std@@MBEJPBD0@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::collate<char>::collate<char>, COMDAT
; _this$ = ecx

; 60   : 		{	// construct from specified locale

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 0c	 push	 DWORD PTR __Refs$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0facet@locale@std@@IAE@I@Z

; 61   : 		_Init(_Lobj);

  0001a	ff 75 08	 push	 DWORD PTR __Lobj$[ebp]
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00021	8b ce		 mov	 ecx, esi
  00023	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$collate@D@std@@6B@
  00029	e8 00 00 00 00	 call	 ?_Init@?$collate@D@std@@IAEXABV_Locinfo@2@@Z ; std::collate<char>::_Init

; 62   : 		}

  0002e	8b c6		 mov	 eax, esi
  00030	e8 00 00 00 00	 call	 __EH_epilog3
  00035	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1facet@locale@std@@UAE@XZ
__ehhandler$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::collate<char>::collate<char>
PUBLIC	??1?$collate@D@std@@MAE@XZ			; std::collate<char>::~collate<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$collate@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$collate@D@std@@MAE@XZ PROC				; std::collate<char>::~collate<char>, COMDAT
; _this$ = ecx

; 75   : 		{	// destroy the object

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$collate@D@std@@6B@

; 76   : 		}

  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1facet@locale@std@@UAE@XZ
??1?$collate@D@std@@MAE@XZ ENDP				; std::collate<char>::~collate<char>
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?do_hash@?$collate@D@std@@MBEJPBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_hash@?$collate@D@std@@MBEJPBD0@Z PROC		; std::collate<char>::do_hash, COMDAT
; _this$ = ecx

; 121  : 		{	// compute hash code for [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 122  : 		_DEBUG_RANGE(_First, _Last);
; 123  : 		unsigned long _Val = 0;
; 124  : 		for (; _First != _Last; ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	eb 09		 jmp	 SHORT $LN8@do_hash
$LL3@do_hash:

; 125  : 			_Val = (_Val << 8 | _Val >> 24) + *_First;

  0000a	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0000d	c1 c0 08	 rol	 eax, 8
  00010	03 c2		 add	 eax, edx
  00012	41		 inc	 ecx
$LN8@do_hash:

; 122  : 		_DEBUG_RANGE(_First, _Last);
; 123  : 		unsigned long _Val = 0;
; 124  : 		for (; _First != _Last; ++_First)

  00013	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00016	75 f2		 jne	 SHORT $LL3@do_hash

; 126  : 		return ((long)_Val);
; 127  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?do_hash@?$collate@D@std@@MBEJPBD0@Z ENDP		; std::collate<char>::do_hash
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$collate@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$collate@D@std@@MAEPAXI@Z PROC			; std::collate<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$collate@D@std@@6B@
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1facet@locale@std@@UAE@XZ
  00012	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00016	74 07		 je	 SHORT $LN1@scalar@16
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	59		 pop	 ecx
$LN1@scalar@16:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G?$collate@D@std@@MAEPAXI@Z ENDP			; std::collate<char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_LStrcoll@D@std@@YAHPBD000PBU_Collvec@@@Z	; std::_LStrcoll<char>
EXTRN	__imp___Strcoll:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocinfo
;	COMDAT ??$_LStrcoll@D@std@@YAHPBD000PBU_Collvec@@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Vector$ = 24						; size = 4
??$_LStrcoll@D@std@@YAHPBD000PBU_Collvec@@@Z PROC	; std::_LStrcoll<char>, COMDAT

; 217  : 	{	// perform locale-specific comparison of char sequences

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  : 	}

  00003	5d		 pop	 ebp

; 218  : 	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___Strcoll
??$_LStrcoll@D@std@@YAHPBD000PBU_Collvec@@@Z ENDP	; std::_LStrcoll<char>
_TEXT	ENDS
PUBLIC	??$_LStrxfrm@D@std@@YAIPAD0PBD1PBU_Collvec@@@Z	; std::_LStrxfrm<char>
EXTRN	__imp___Strxfrm:PROC
; Function compile flags: /Ogsp
;	COMDAT ??$_LStrxfrm@D@std@@YAIPAD0PBD1PBU_Collvec@@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Vector$ = 24						; size = 4
??$_LStrxfrm@D@std@@YAIPAD0PBD1PBU_Collvec@@@Z PROC	; std::_LStrxfrm<char>, COMDAT

; 248  : 	{	// perform locale-specific transform of chars [_First1, _Last1)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 250  : 	}

  00003	5d		 pop	 ebp

; 249  : 	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___Strxfrm
??$_LStrxfrm@D@std@@YAIPAD0PBD1PBU_Collvec@@@Z ENDP	; std::_LStrxfrm<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\locale
_TEXT	ENDS
;	COMDAT ?do_compare@?$collate@D@std@@MBEHPBD000@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
?do_compare@?$collate@D@std@@MBEHPBD000@Z PROC		; std::collate<char>::do_compare, COMDAT
; _this$ = ecx

; 94   : 		{	// compare [_First1, _Last1) to [_First2, _Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 		_DEBUG_RANGE(_First1, _Last1);
; 96   : 		_DEBUG_RANGE(_First2, _Last2);
; 97   : 		return (_LStrcoll(_First1, _Last1, _First2, _Last2, &_Coll));

  00003	83 c1 08	 add	 ecx, 8
  00006	51		 push	 ecx
  00007	ff 75 14	 push	 DWORD PTR __Last2$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __First2$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last1$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First1$[ebp]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___Strcoll
  00019	83 c4 14	 add	 esp, 20			; 00000014H

; 98   : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
?do_compare@?$collate@D@std@@MBEHPBD000@Z ENDP		; std::collate<char>::do_compare
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogsp
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_assert_group
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_assert_group, COMDAT
; _this$ = ecx

; 3501 : 	{	// add end of assert node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 3502 : 	_End_group(_Nx);

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Nx$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group

; 3503 : 	_Current = _Nx;

  00010	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi

; 3504 : 	}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_assert_group
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEAADXZ ; std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >::operator*
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 323  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 305  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >::_Vector_iterator<std::_Vector_val<char,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPAD0AAV?$allocator@D@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_Vector_val<char,std::allocator<char> >::_Vector_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_Vector_val<char,std::allocator<char> >::_Vector_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 426  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 427  : 		_Myfirst = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 		_Mylast = 0;

  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 429  : 		_Myend = 0;

  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 430  : 		}

  0000c	c2 04 00	 ret	 4
??0?$_Vector_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_Vector_val<char,std::allocator<char> >::_Vector_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Insert@PBD@?$_Buf@D@tr1@std@@QAEXPBD0@Z	; std::tr1::_Buf<char>::_Insert<char const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??$_Insert@PBD@?$_Buf@D@tr1@std@@QAEXPBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insert@PBD@?$_Buf@D@tr1@std@@QAEXPBD0@Z PROC	; std::tr1::_Buf<char>::_Insert<char const *>, COMDAT
; _this$ = ecx

; 1332 : 		void _Insert(_FwdIt _First, _FwdIt _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1333 : 		{	// append multiple characters
; 1334 : 		while (_First != _Last)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	eb 0c		 jmp	 SHORT $LN7@Insert@2
$LL2@Insert@2:

; 1335 : 			_Insert(*_First++);

  0000c	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0000f	50		 push	 eax
  00010	8b cf		 mov	 ecx, edi
  00012	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z ; std::tr1::_Buf<char>::_Insert
  00017	46		 inc	 esi
$LN7@Insert@2:

; 1333 : 		{	// append multiple characters
; 1334 : 		while (_First != _Last)

  00018	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001b	75 ef		 jne	 SHORT $LL2@Insert@2
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 1336 : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$_Insert@PBD@?$_Buf@D@tr1@std@@QAEXPBD0@Z ENDP	; std::tr1::_Buf<char>::_Insert<char const *>
_TEXT	ENDS
PUBLIC	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 884  : 		return (this->_Alval.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 885  : 		}

  00003	c3		 ret	 0
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ; std::vector<char,std::allocator<char> >::_Grow_to
; Function compile flags: /Ogsp
;	COMDAT ?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z PROC ; std::vector<char,std::allocator<char> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		size_type _Capacity = capacity();

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	83 ca ff	 or	 edx, -1
  0000b	8b c8		 mov	 ecx, eax
  0000d	d1 e9		 shr	 ecx, 1
  0000f	2b d1		 sub	 edx, ecx
  00011	3b d0		 cmp	 edx, eax
  00013	73 04		 jae	 SHORT $LN4@Grow_to@2
  00015	33 c0		 xor	 eax, eax
  00017	eb 02		 jmp	 SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
  00019	03 c1		 add	 eax, ecx
$LN5@Grow_to@2:

; 1279 : 		if (_Capacity < _Count)

  0001b	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]

; 1280 : 			_Capacity = _Count;

  0001e	0f 42 45 08	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 1281 : 		return (_Capacity);
; 1282 : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ENDP ; std::vector<char,std::allocator<char> >::_Grow_to
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z PROC ; std::_Uninitialized_move<char *,char *,std::allocator<char> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	03 c6		 add	 eax, esi
  0001c	5e		 pop	 esi

; 472  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ENDP ; std::_Uninitialized_move<char *,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$distance@PAD@std@@YAHPAD0@Z			; std::distance<char *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$distance@PAD@std@@YAHPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PAD@std@@YAHPAD0@Z PROC			; std::distance<char *>, COMDAT

; 900  : 	{	// return distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 901  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 902  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]

; 903  : 	return (_Off);
; 904  : 	}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$distance@PAD@std@@YAHPAD0@Z ENDP			; std::distance<char *>
_TEXT	ENDS
PUBLIC	??$advance@PADH@std@@YAXAAPADH@Z		; std::advance<char *,int>
; Function compile flags: /Ogsp
;	COMDAT ??$advance@PADH@std@@YAXAAPADH@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@PADH@std@@YAXAAPADH@Z PROC			; std::advance<char *,int>, COMDAT

; 797  : 	{	// increment iterator by offset, arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 798  : 	_Advance(_Where, _Off, _Iter_cat(_Where));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	01 08		 add	 DWORD PTR [eax], ecx

; 799  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$advance@PADH@std@@YAXAAPADH@Z ENDP			; std::advance<char *,int>
_TEXT	ENDS
PUBLIC	??E?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??E?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++, COMDAT
; _this$ = ecx

; 352  : 		{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 353  : 		++*(_Mybase *)this;

  00002	ff 00		 inc	 DWORD PTR [eax]

; 354  : 		return (*this);
; 355  : 		}

  00004	c3		 ret	 0
??E?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@XZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator++
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@D@std@@DAAD@std@@YAXAAV?$allocator@D@0@PADAAD@Z ; std::_Cons_val<std::allocator<char>,char,char &>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@D@std@@DAAD@std@@YAXAAV?$allocator@D@0@PADAAD@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@D@std@@DAAD@std@@YAXAAV?$allocator@D@0@PADAAD@Z PROC ; std::_Cons_val<std::allocator<char>,char,char &>, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdest$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 07		 je	 SHORT $LN7@Cons_val
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Src$[ebp]
  0000d	8a 09		 mov	 cl, BYTE PTR [ecx]
  0000f	88 08		 mov	 BYTE PTR [eax], cl
$LN7@Cons_val:

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@D@std@@DAAD@std@@YAXAAV?$allocator@D@0@PADAAD@Z ENDP ; std::_Cons_val<std::allocator<char>,char,char &>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@D@std@@D@std@@YAXAAV?$allocator@D@0@PAD@Z ; std::_Dest_val<std::allocator<char>,char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Dest_val@V?$allocator@D@std@@D@std@@YAXAAV?$allocator@D@0@PAD@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@D@std@@D@std@@YAXAAV?$allocator@D@0@PAD@Z PROC ; std::_Dest_val<std::allocator<char>,char>, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@D@std@@D@std@@YAXAAV?$allocator@D@0@PAD@Z ENDP ; std::_Dest_val<std::allocator<char>,char>
_TEXT	ENDS
PUBLIC	??$_Distance@PBDI@std@@YAXPBD0AAI@Z		; std::_Distance<char const *,unsigned int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance@PBDI@std@@YAXPBD0AAI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@PBDI@std@@YAXPBD0AAI@Z PROC		; std::_Distance<char const *,unsigned int>, COMDAT

; 909  : 	{	// add to _Off distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 911  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance@PBDI@std@@YAXPBD0AAI@Z ENDP		; std::_Distance<char const *,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Distance@PADI@std@@YAXPAD0AAI@Z		; std::_Distance<char *,unsigned int>
; Function compile flags: /Ogsp
;	COMDAT ??$_Distance@PADI@std@@YAXPAD0AAI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@PADI@std@@YAXPAD0AAI@Z PROC		; std::_Distance<char *,unsigned int>, COMDAT

; 909  : 	{	// add to _Off distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 911  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance@PADI@std@@YAXPAD0AAI@Z ENDP		; std::_Distance<char *,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char const *,char *,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@@Z PROC ; std::_Uninitialized_copy<char const *,char *,std::allocator<char> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	03 c6		 add	 eax, esi
  0001c	5e		 pop	 esi

; 415  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Uninitialized_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@@Z ENDP ; std::_Uninitialized_copy<char const *,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char *,char *,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z PROC ; std::_Uninitialized_copy<char *,char *,std::allocator<char> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	2b 75 08	 sub	 esi, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	03 c6		 add	 eax, esi
  0001c	5e		 pop	 esi

; 415  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Uninitialized_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ENDP ; std::_Uninitialized_copy<char *,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1497 : 		return (_Myptr());

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1498 : 		}

  00008	c3		 ret	 0

; 1497 : 		return (_Myptr());

$LN5@c_str:
  00009	8b c1		 mov	 eax, ecx

; 1498 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\istream
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 99   : 			{	// construct locking and calling _Ipfx

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	ff 75 08	 push	 DWORD PTR __Istr$[ebp]
  00014	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base

; 100  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00019	ff 75 0c	 push	 DWORD PTR __Noskip$[ebp]
  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00028	88 46 04	 mov	 BYTE PTR [esi+4], al

; 101  : 			}

  0002b	8b c6		 mov	 eax, esi
  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1436 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 1437 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1438 : 
; 1439 : 		if (this->_Mysize <= _Off)
; 1440 : 
; 1441 : 			_DEBUG_ERROR("string subscript out of range");
; 1442 : 
; 1443 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1444 : 		_SCL_SECURE_VALIDATE_RANGE(_Off < this->_Mysize);
; 1445 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1446 : 
; 1447 : 		return (_Myptr()[_Off]);

  00005	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00009	72 02		 jb	 SHORT $LN5@operator@2
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@operator@2:
  0000d	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 1448 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogsp
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 1888 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b c1		 mov	 eax, ecx

; 1889 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1890 : 		if (_Count != 0)
; 1891 : 			_DEBUG_POINTER(_Ptr);
; 1892 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1893 : 
; 1894 : 		if (this->_Mysize < _Off)

  00006	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR __Off$[ebp]
  0000d	3b d6		 cmp	 edx, esi
  0000f	73 0b		 jae	 SHORT $LN2@compare@2

; 1895 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN22@compare@2:
$LN2@compare@2:

; 1896 : 		if (this->_Mysize - _Off < _N0)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __N0$[ebp]
  0001f	2b d6		 sub	 edx, esi
  00021	3b d3		 cmp	 edx, ebx

; 1897 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size

  00023	0f 42 da	 cmovb	 ebx, edx

; 1898 : 
; 1899 : 		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
; 1900 : 			_N0 < _Count ? _N0 : _Count);

  00026	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  00029	3b da		 cmp	 ebx, edx
  0002b	8b cb		 mov	 ecx, ebx
  0002d	0f 43 ca	 cmovae	 ecx, edx
  00030	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00034	72 02		 jb	 SHORT $LN16@compare@2
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@compare@2:
  00038	57		 push	 edi
  00039	8b 7d 10	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0003c	03 f0		 add	 esi, eax
  0003e	33 c0		 xor	 eax, eax
  00040	f3 a6		 repe cmpsb
  00042	5f		 pop	 edi
  00043	74 05		 je	 SHORT $LN20@compare@2
  00045	1b c0		 sbb	 eax, eax
  00047	83 d8 ff	 sbb	 eax, -1
$LN20@compare@2:

; 1901 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 1902 : 			: _N0 == _Count ? 0 : +1);

  0004a	85 c0		 test	 eax, eax
  0004c	75 10		 jne	 SHORT $LN8@compare@2
  0004e	3b da		 cmp	 ebx, edx
  00050	73 05		 jae	 SHORT $LN7@compare@2
  00052	83 c8 ff	 or	 eax, -1
  00055	eb 07		 jmp	 SHORT $LN8@compare@2
$LN7@compare@2:
  00057	33 c0		 xor	 eax, eax
  00059	3b da		 cmp	 ebx, edx
  0005b	0f 95 c0	 setne	 al
$LN8@compare@2:
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 1903 : 		}

  00060	5d		 pop	 ebp
  00061	c2 10 00	 ret	 16			; 00000010H
$LN21@compare@2:
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 454  : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 455  : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogsp
;	COMDAT ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx

; 343  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 344  : 		}

  00002	c3		 ret	 0
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogsp
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 1911 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1912 : 		if (_Count == 1)

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00007	75 13		 jne	 SHORT $LN2@Chassign

; 1913 : 			_Traits::assign(*(_Myptr() + _Off), _Ch);

  00009	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0000d	72 02		 jb	 SHORT $LN7@Chassign
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN7@Chassign:
  00011	8a 45 10	 mov	 al, BYTE PTR __Ch$[ebp]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00017	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 1914 : 		else

  0001a	eb 1c		 jmp	 SHORT $LN15@Chassign
$LN2@Chassign:

; 1915 : 			_Traits::assign(_Myptr() + _Off, _Count, _Ch);

  0001c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00020	72 02		 jb	 SHORT $LN13@Chassign
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN13@Chassign:
  00024	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@Chassign:

; 1916 : 		}

  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogsp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1953 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1954 : 		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0000a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000d	72 02		 jb	 SHORT $LN5@Eos
  0000f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@Eos:
  00011	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1955 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 325  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 326  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogsp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1517 : 		size_type _Num = this->_Alval.max_size();
; 1518 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	6a fe		 push	 -2			; fffffffeH
  00002	58		 pop	 eax

; 1519 : 		}

  00003	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogsp
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx

; 201  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		_Compat(_Right);
; 203  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]

; 204  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==
; Function compile flags: /Ogsp
;	COMDAT ??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==, COMDAT
; _this$ = ecx

; 212  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 		_Compat(_Right);
; 214  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	f7 d8		 neg	 eax
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 215  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  : 		return (_Allocate(_Count, (pointer)0));

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx

; 188  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogsp
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 271  : 	return (!(_Left == _Right));

  00000	32 c0		 xor	 al, al

; 272  : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 101  : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  : 	_Ty _Tmp = _Move(_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	56		 push	 esi

; 103  : 	_Left = _Move(_Right);

  00009	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	88 10		 mov	 BYTE PTR [eax], dl

; 104  : 	_Right = _Move(_Tmp);

  00010	88 0e		 mov	 BYTE PTR [esi], cl
  00012	5e		 pop	 esi

; 105  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
$T518673 = 11						; size = 1
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 383  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 384  : 		if (_Mysb::gptr() != 0
; 385  : 			&& _Mysb::eback() < _Mysb::gptr()
; 386  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
; 387  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 388  : 				_Meta)))

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  00011	85 c0		 test	 eax, eax
  00013	74 39		 je	 SHORT $LN45@pbackfail
  00015	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00018	8b 38		 mov	 edi, DWORD PTR [eax]
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00022	3b f8		 cmp	 edi, eax
  00024	73 28		 jae	 SHORT $LN45@pbackfail
  00026	83 fb ff	 cmp	 ebx, -1
  00029	74 10		 je	 SHORT $LN9@pbackfail
  0002b	8b ce		 mov	 ecx, esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00033	0f b6 40 ff	 movzx	 eax, BYTE PTR [eax-1]
  00037	3b c3		 cmp	 eax, ebx
  00039	75 13		 jne	 SHORT $LN45@pbackfail
$LN9@pbackfail:

; 389  : 			{	// just back up position
; 390  : 			_Mysb::_Gndec();

  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ

; 391  : 			return (_Traits::not_eof(_Meta));

  00043	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	23 c3		 and	 eax, ebx
  0004c	eb 46		 jmp	 SHORT $LN1@pbackfail
$LN45@pbackfail:

; 392  : 			}
; 393  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  0004e	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00051	85 c0		 test	 eax, eax
  00053	74 3c		 je	 SHORT $LN46@pbackfail
  00055	83 fb ff	 cmp	 ebx, -1
  00058	74 37		 je	 SHORT $LN46@pbackfail

; 395  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  0005a	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  0005e	75 17		 jne	 SHORT $LN4@pbackfail
  00060	50		 push	 eax
  00061	8d 45 0b	 lea	 eax, DWORD PTR $T518673[ebp]
  00064	50		 push	 eax
  00065	88 5d 0b	 mov	 BYTE PTR $T518673[ebp], bl
  00068	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  0006d	59		 pop	 ecx
  0006e	59		 pop	 ecx
  0006f	84 c0		 test	 al, al
  00071	74 04		 je	 SHORT $LN4@pbackfail
$LN47@pbackfail:

; 396  : 			return (_Meta);	// no facet and unget succeeded, return

  00073	8b c3		 mov	 eax, ebx
  00075	eb 1d		 jmp	 SHORT $LN1@pbackfail
$LN4@pbackfail:

; 397  : 		else if (_Mysb::gptr() != &_Mychar)

  00077	8b ce		 mov	 ecx, esi
  00079	8d 7e 48	 lea	 edi, DWORD PTR [esi+72]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00082	3b c7		 cmp	 eax, edi
  00084	74 0b		 je	 SHORT $LN46@pbackfail

; 398  : 			{	// putback to _Mychar
; 399  : 			_Mychar = _Traits::to_char_type(_Meta);
; 400  : 			_Set_back();	// switch to _Mychar buffer

  00086	8b ce		 mov	 ecx, esi
  00088	88 1f		 mov	 BYTE PTR [edi], bl
  0008a	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 401  : 			return (_Meta);

  0008f	eb e2		 jmp	 SHORT $LN47@pbackfail
$LN46@pbackfail:

; 394  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  00091	83 c8 ff	 or	 eax, -1
$LN1@pbackfail:
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 402  : 			}
; 403  : 		else
; 404  : 			return (_Traits::eof());	// nowhere to put back
; 405  : 		}

  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 550  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 551  : 		_Initcvt(&_USE(_Loc, _Cvt));

  00004	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  0000e	59		 pop	 ecx
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00017	5e		 pop	 esi

; 552  : 		}

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
PUBLIC	??0?$regex_traits@D@tr1@std@@QAE@XZ		; std::tr1::regex_traits<char>::regex_traits<char>
; Function compile flags: /Ogsp
;	COMDAT ??0?$regex_traits@D@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0?$regex_traits@D@tr1@std@@QAE@XZ PROC		; std::tr1::regex_traits<char>::regex_traits<char>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	83 26 00	 and	 DWORD PTR [esi], 0
  00006	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  0000a	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000d	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale
  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??0?$regex_traits@D@tr1@std@@QAE@XZ ENDP		; std::tr1::regex_traits<char>::regex_traits<char>
_TEXT	ENDS
PUBLIC	??1?$regex_traits@D@tr1@std@@QAE@XZ		; std::tr1::regex_traits<char>::~regex_traits<char>
; Function compile flags: /Ogsp
;	COMDAT ??1?$regex_traits@D@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??1?$regex_traits@D@tr1@std@@QAE@XZ PROC		; std::tr1::regex_traits<char>::~regex_traits<char>, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
??1?$regex_traits@D@tr1@std@@QAE@XZ ENDP		; std::tr1::regex_traits<char>::~regex_traits<char>
_TEXT	ENDS
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
$T518748 = 16						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 218  : 		{	// open a C stream with specified mode

  00000	6a 00		 push	 0
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 219  : 		_Filet *_File;
; 220  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  0000e	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  00012	75 4b		 jne	 SHORT $LN1@open
  00014	ff 75 10	 push	 DWORD PTR __Prot$[ebp]
  00017	ff 75 0c	 push	 DWORD PTR __Mode$[ebp]
  0001a	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	85 c0		 test	 eax, eax
  00028	74 35		 je	 SHORT $LN1@open

; 222  : 
; 223  : 		_Init(_File, _Openfl);

  0002a	6a 01		 push	 1
  0002c	50		 push	 eax
  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 224  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  00034	8d 45 10	 lea	 eax, DWORD PTR $T518748[ebp]
  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
  00040	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  0004a	59		 pop	 ecx
  0004b	50		 push	 eax
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00053	8d 4d 10	 lea	 ecx, DWORD PTR $T518748[ebp]
  00056	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 225  : 		return (this);	// open succeeded

  0005b	8b c6		 mov	 eax, esi
  0005d	eb 02		 jmp	 SHORT $LN3@open
$LN1@open:

; 221  : 			return (0);	// open failed

  0005f	33 c0		 xor	 eax, eax
$LN3@open:

; 226  : 		}

  00061	e8 00 00 00 00	 call	 __EH_epilog3
  00066	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 4d 10	 lea	 ecx, DWORD PTR $T518748[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	??0?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 508  : 		}

  0000c	c3		 ret	 0
??0?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ PROC ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 183  : 		{	// construct from defaults

  00000	8b c1		 mov	 eax, ecx
  00002	83 20 00	 and	 DWORD PTR [eax], 0
  00005	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 184  : 		}

  00009	c3		 ret	 0
??0?$pair@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ENDP ; std::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::pair<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??1?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@XZ ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::~_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@XZ PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::~_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	81 c1 34 02 00
	00		 add	 ecx, 564		; 00000234H
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
??1?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@XZ ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::~_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ PROC ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b c1		 mov	 eax, ecx
  00003	33 c9		 xor	 ecx, ecx
  00005	6a 1f		 push	 31			; 0000001fH
  00007	89 08		 mov	 DWORD PTR [eax], ecx
  00009	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
  0000c	5e		 pop	 esi
$LL8@Tgt_state_:
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx
  0000f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00012	83 c2 08	 add	 edx, 8
  00015	4e		 dec	 esi
  00016	79 f5		 jns	 SHORT $LL8@Tgt_state_
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??0?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ENDP ; std::tr1::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Tgt_state_t<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	?_Trans@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Trans
EXTRN	__imp__strchr:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Trans@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_Trans@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Trans, COMDAT
; _this$ = ecx

; 4327 : 	{	// map character to meta-character

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4328 : 	if (_Pat == _End)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	57		 push	 edi
  00006	33 ff		 xor	 edi, edi
  00008	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0000b	75 0a		 jne	 SHORT $LN22@Trans

; 4329 : 		_Mchar = _Meta_type(_Char = (_Elem)_Meta_eos);

  0000d	83 4e 40 ff	 or	 DWORD PTR [esi+64], -1
  00011	c6 46 3e ff	 mov	 BYTE PTR [esi+62], -1

; 4330 : 	else

  00015	eb 2e		 jmp	 SHORT $LN21@Trans
$LN22@Trans:

; 4331 : 		{	// map current character
; 4332 : 		_Char = *_Pat;

  00017	8a 00		 mov	 al, BYTE PTR [eax]
  00019	88 46 3e	 mov	 BYTE PTR [esi+62], al

; 4333 : 		_Mchar = _Char == (_Elem)_Meta_eos ? _Meta_eos
; 4334 : 			: _CSTD strchr(_Meta_map, _Char) != 0 ? (_Meta_type)_Char
; 4335 : 			: _Meta_chr;

  0001c	3c ff		 cmp	 al, -1
  0001e	75 05		 jne	 SHORT $LN27@Trans
  00020	83 c8 ff	 or	 eax, -1
  00023	eb 1d		 jmp	 SHORT $LN26@Trans
$LN27@Trans:
  00025	0f be c0	 movsx	 eax, al
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET __Meta_map
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00034	59		 pop	 ecx
  00035	59		 pop	 ecx
  00036	85 c0		 test	 eax, eax
  00038	74 06		 je	 SHORT $LN25@Trans
  0003a	0f be 46 3e	 movsx	 eax, BYTE PTR [esi+62]
  0003e	eb 02		 jmp	 SHORT $LN26@Trans
$LN25@Trans:
  00040	33 c0		 xor	 eax, eax
$LN26@Trans:
  00042	89 46 40	 mov	 DWORD PTR [esi+64], eax
$LN21@Trans:

; 4336 : 		}
; 4337 : 		switch (_Char)

  00045	0f be 46 3e	 movsx	 eax, BYTE PTR [esi+62]
  00049	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  0004c	0f 8f 82 00 00
	00		 jg	 $LN29@Trans
  00052	74 26		 je	 SHORT $LN4@Trans
  00054	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00057	74 67		 je	 SHORT $LN16@Trans
  00059	83 f8 24	 cmp	 eax, 36			; 00000024H
  0005c	74 4c		 je	 SHORT $LN6@Trans
  0005e	83 f8 27	 cmp	 eax, 39			; 00000027H
  00061	0f 8e bb 00 00
	00		 jle	 $LN17@Trans
  00067	83 f8 29	 cmp	 eax, 41			; 00000029H
  0006a	7e 33		 jle	 SHORT $LN14@Trans
  0006c	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  0006f	74 0f		 je	 SHORT $LN10@Trans
  00071	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00074	0f 85 a8 00 00
	00		 jne	 $LN17@Trans
$LN4@Trans:

; 4383 : 				}
; 4384 : 
; 4385 : 			case _Meta_plus:
; 4386 : 			case _Meta_query:
; 4387 : 				if (!(_L_flags & _L_ext_rep))

  0007a	f6 46 44 01	 test	 BYTE PTR [esi+68], 1

; 4388 : 					_Mchar = _Meta_chr;
; 4389 : 				break;

  0007e	eb 23		 jmp	 SHORT $LN30@Trans
$LN10@Trans:

; 4363 : 
; 4364 : 			case _Meta_star:
; 4365 : 				if ((_L_flags & _L_star_beg)
; 4366 : 					&& _Nfa._Beg_expr())

  00080	f7 46 44 00 00
	00 04		 test	 DWORD PTR [esi+68], 67108864 ; 04000000H
  00087	0f 84 95 00 00
	00		 je	 $LN17@Trans
  0008d	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00090	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
  00095	84 c0		 test	 al, al
$LN32@Trans:
  00097	0f 84 85 00 00
	00		 je	 $LN17@Trans

; 4367 : 					_Mchar = _Meta_chr;
; 4368 : 				break;

  0009d	eb 06		 jmp	 SHORT $LN31@Trans
$LN14@Trans:

; 4351 : 
; 4352 : 			case _Meta_lpar:
; 4353 : 			case _Meta_rpar:
; 4354 : 				if (!(_L_flags & _L_nex_grp))

  0009f	f6 46 44 08	 test	 BYTE PTR [esi+68], 8
$LN30@Trans:
  000a3	75 7d		 jne	 SHORT $LN17@Trans
$LN31@Trans:

; 4355 : 					_Mchar = _Meta_chr;

  000a5	89 7e 40	 mov	 DWORD PTR [esi+64], edi

; 4356 : 				break;

  000a8	eb 78		 jmp	 SHORT $LN17@Trans
$LN6@Trans:

; 4375 : 
; 4376 : 			case _Meta_dlr:
; 4377 : 				{	// check if $ is special
; 4378 : 				_FwdIt _Ch0 = _Pat;
; 4379 : 				if ((_L_flags & _L_anch_rstr)
; 4380 : 					&& ++_Ch0 != _End && *_Ch0 != _Meta_nl)

  000aa	f7 46 44 00 00
	00 02		 test	 DWORD PTR [esi+68], 33554432 ; 02000000H
  000b1	74 6f		 je	 SHORT $LN17@Trans
  000b3	8b 06		 mov	 eax, DWORD PTR [esi]
  000b5	40		 inc	 eax
  000b6	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000b9	74 67		 je	 SHORT $LN17@Trans
  000bb	80 38 0a	 cmp	 BYTE PTR [eax], 10	; 0000000aH

; 4381 : 					_Mchar = _Meta_chr;
; 4382 : 				break;

  000be	eb d7		 jmp	 SHORT $LN32@Trans
$LN16@Trans:

; 4344 : 					}
; 4345 : 				break;
; 4346 : 
; 4347 : 			case _Meta_nl:
; 4348 : 				if ((_L_flags & _L_alt_nl) && _Disj_count == 0)

  000c0	f6 46 44 04	 test	 BYTE PTR [esi+68], 4
  000c4	74 5c		 je	 SHORT $LN17@Trans
  000c6	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  000c9	75 57		 jne	 SHORT $LN17@Trans

; 4349 : 					_Mchar = _Meta_bar;

  000cb	c7 46 40 7c 00
	00 00		 mov	 DWORD PTR [esi+64], 124	; 0000007cH

; 4350 : 				break;

  000d2	eb 4e		 jmp	 SHORT $LN17@Trans
$LN29@Trans:

; 4336 : 		}
; 4337 : 		switch (_Char)

  000d4	83 e8 5c	 sub	 eax, 92			; 0000005cH
  000d7	74 30		 je	 SHORT $LN18@Trans
  000d9	48		 dec	 eax
  000da	48		 dec	 eax
  000db	74 17		 je	 SHORT $LN8@Trans
  000dd	83 e8 1d	 sub	 eax, 29			; 0000001dH
  000e0	74 06		 je	 SHORT $LN12@Trans
  000e2	48		 dec	 eax
  000e3	74 09		 je	 SHORT $LN2@Trans
  000e5	48		 dec	 eax
  000e6	75 3a		 jne	 SHORT $LN17@Trans
$LN12@Trans:

; 4357 : 
; 4358 : 			case _Meta_lbr:
; 4359 : 			case _Meta_rbr:
; 4360 : 				if (!(_L_flags & _L_nex_rep))

  000e8	f6 46 44 10	 test	 BYTE PTR [esi+68], 16	; 00000010H

; 4361 : 					_Mchar = _Meta_chr;
; 4362 : 				break;

  000ec	eb b5		 jmp	 SHORT $LN30@Trans
$LN2@Trans:

; 4390 : 
; 4391 : 			case _Meta_bar:
; 4392 : 				if (!(_L_flags & _L_alt_pipe))

  000ee	f6 46 44 02	 test	 BYTE PTR [esi+68], 2

; 4393 : 					_Mchar = _Meta_chr;
; 4394 : 				break;

  000f2	eb af		 jmp	 SHORT $LN30@Trans
$LN8@Trans:

; 4369 : 
; 4370 : 			case _Meta_caret:
; 4371 : 				if ((_L_flags & _L_anch_rstr)
; 4372 : 					&& !_Nfa._Beg_expr())

  000f4	f7 46 44 00 00
	00 02		 test	 DWORD PTR [esi+68], 33554432 ; 02000000H
  000fb	74 25		 je	 SHORT $LN17@Trans
  000fd	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00100	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QBE_NXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Beg_expr
  00105	84 c0		 test	 al, al

; 4373 : 				_Mchar = _Meta_chr;
; 4374 : 				break;

  00107	eb 9a		 jmp	 SHORT $LN30@Trans
$LN18@Trans:

; 4338 : 			{	// handle special cases
; 4339 : 			case _Meta_esc:
; 4340 : 				if (_Is_esc())

  00109	8b ce		 mov	 ecx, esi
  0010b	e8 00 00 00 00	 call	 ?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Is_esc
  00110	84 c0		 test	 al, al
  00112	74 0e		 je	 SHORT $LN17@Trans

; 4341 : 					{	// replace escape sequence
; 4342 : 					_FwdIt _Ch0 = _Pat;
; 4343 : 					_Mchar = _Meta_type(_Char = *++_Ch0);

  00114	8b 06		 mov	 eax, DWORD PTR [esi]
  00116	8a 40 01	 mov	 al, BYTE PTR [eax+1]
  00119	88 46 3e	 mov	 BYTE PTR [esi+62], al
  0011c	0f be c0	 movsx	 eax, al
  0011f	89 46 40	 mov	 DWORD PTR [esi+64], eax
$LN17@Trans:

; 4395 : 			}
; 4396 : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	c3		 ret	 0
?_Trans@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Trans
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z ; std::_Dest_val<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z PROC ; std::_Dest_val<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 287  : 	_Alval.destroy(_Pdest);
; 288  : 	}

  00000	c3		 ret	 0
??$_Dest_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@@Z ENDP ; std::_Dest_val<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	?begin@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::end, COMDAT
; _this$ = ecx

; 791  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  : 		return (iterator(this->_Mylast, this));

  00003	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 793  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@XZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::end
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+
; Function compile flags: /Ogsp
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+, COMDAT
; _this$ = ecx

; 363  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 364  : 		_Myiter _Tmp = *this;
; 365  : 		return (_Tmp += _Off);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00009	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0000c	03 11		 add	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx

; 366  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??H?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator+
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Make_iter
; Function compile flags: /Ogsp
;	COMDAT ?_Make_iter@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Make_iter, COMDAT
; _this$ = ecx

; 801  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : 		return (iterator(_Where._Ptr, this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 803  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Make_iter
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator!=, COMDAT
; _this$ = ecx

; 207  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 208  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 209  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > > >::operator!=
_TEXT	ENDS
PUBLIC	?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next, COMDAT
; _this$ = ecx

; 4402 : 	{	// advance to next input character

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 4403 : 	if (_Pat != _End)

  00004	8b 3e		 mov	 edi, DWORD PTR [esi]
  00006	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  00009	74 13		 je	 SHORT $LN2@Next

; 4404 : 		{	// advance
; 4405 : 		if (*_Pat == _Meta_esc && _Is_esc())

  0000b	80 3f 5c	 cmp	 BYTE PTR [edi], 92	; 0000005cH
  0000e	75 0c		 jne	 SHORT $LN1@Next
  00010	e8 00 00 00 00	 call	 ?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@ABE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Is_esc
  00015	84 c0		 test	 al, al
  00017	74 03		 je	 SHORT $LN1@Next

; 4406 : 			++_Pat;

  00019	47		 inc	 edi
  0001a	89 3e		 mov	 DWORD PTR [esi], edi
$LN1@Next:

; 4407 : 		++_Pat;

  0001c	ff 06		 inc	 DWORD PTR [esi]
$LN2@Next:
  0001e	5f		 pop	 edi

; 4408 : 		}
; 4409 : 	_Trans();

  0001f	8b ce		 mov	 ecx, esi
  00021	5e		 pop	 esi
  00022	e9 00 00 00 00	 jmp	 ?_Trans@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Trans
?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
_TEXT	ENDS
PUBLIC	??_C@_0EA@CEKIBNPA@abcdefghijklmnopqrstuvwxyzABCDEF@ ; `string'
PUBLIC	?_Is_wc@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Is_wc
;	COMDAT ??_C@_0EA@CEKIBNPA@abcdefghijklmnopqrstuvwxyzABCDEF@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0EA@CEKIBNPA@abcdefghijklmnopqrstuvwxyzABCDEF@ DB 'abcdefghijklmnop'
	DB	'qrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_', 00H ; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
CONST	ENDS
;	COMDAT ?_Is_wc@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z
_TEXT	SEGMENT
__Ch0$ = 8						; size = 4
__Offset$ = 12						; size = 4
?_Is_wc@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Is_wc, COMDAT
; _this$ = ecx

; 3714 : 	{	// check for word boundary

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3715 : 	if (_Offset == -1
; 3716 : 		&& _Ch0 == _Begin
; 3717 : 		&& !(_Mflags & regex_constants::match_prev_avail)
; 3718 : 			|| _Offset == 0 && _Ch0 == _End)

  00003	83 7d 0c ff	 cmp	 DWORD PTR __Offset$[ebp], -1
  00007	8b 45 08	 mov	 eax, DWORD PTR __Ch0$[ebp]
  0000a	75 14		 jne	 SHORT $LN2@Is_wc
  0000c	3b 81 10 02 00
	00		 cmp	 eax, DWORD PTR [ecx+528]
  00012	75 1e		 jne	 SHORT $LN27@Is_wc
  00014	f7 81 24 02 00
	00 00 01 00 00	 test	 DWORD PTR [ecx+548], 256 ; 00000100H
  0001e	74 0e		 je	 SHORT $LN3@Is_wc
$LN2@Is_wc:
  00020	83 7d 0c 00	 cmp	 DWORD PTR __Offset$[ebp], 0
  00024	75 0c		 jne	 SHORT $LN27@Is_wc
  00026	3b 81 14 02 00
	00		 cmp	 eax, DWORD PTR [ecx+532]
  0002c	75 08		 jne	 SHORT $LN7@Is_wc
$LN3@Is_wc:

; 3719 : 		return (false);

  0002e	32 c0		 xor	 al, al
  00030	eb 1d		 jmp	 SHORT $LN1@Is_wc
$LN27@Is_wc:

; 3720 : 	else
; 3721 : 		{	// test for word char
; 3722 : 		_Elem _Ch = (_Offset ? *--_Ch0 : *_Ch0);

  00032	48		 dec	 eax
  00033	89 45 08	 mov	 DWORD PTR __Ch0$[ebp], eax
$LN7@Is_wc:
  00036	8a 00		 mov	 al, BYTE PTR [eax]

; 3723 : 
; 3724 : 		return (_Ch == (char)_Ch	// assume L'x' == 'x'
; 3725 : 			&& strchr("abcdefghijklmnopqrstuvwxyz"
; 3726 : 				"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
; 3727 : 				"0123456789_", _Ch) != 0);

  00038	0f be c0	 movsx	 eax, al
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@CEKIBNPA@abcdefghijklmnopqrstuvwxyzABCDEF@
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strchr
  00047	f7 d8		 neg	 eax
  00049	59		 pop	 ecx
  0004a	1b c0		 sbb	 eax, eax
  0004c	59		 pop	 ecx
  0004d	f7 d8		 neg	 eax
$LN1@Is_wc:

; 3728 : 		}
; 3729 : 	}

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
?_Is_wc@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Is_wc
_TEXT	ENDS
PUBLIC	?_Expect@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@W4error_type@regex_constants@23@@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Expect
; Function compile flags: /Ogsp
;	COMDAT ?_Expect@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@W4error_type@regex_constants@23@@Z
_TEXT	SEGMENT
__St$ = 8						; size = 4
__Code$ = 12						; size = 4
?_Expect@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@W4error_type@regex_constants@23@@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Expect, COMDAT
; _this$ = ecx

; 4417 : 	{	// check whether current meta-character is _St

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 4418 : 	if (_Mchar != _St)

  00006	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00009	3b 45 08	 cmp	 eax, DWORD PTR __St$[ebp]
  0000c	74 0a		 je	 SHORT $LN4@Expect

; 4419 : 		_Error(_Code);

  0000e	ff 75 0c	 push	 DWORD PTR __Code$[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00017	59		 pop	 ecx
$LN4@Expect:

; 4420 : 	_Next();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
  0001f	5e		 pop	 esi

; 4421 : 	}

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?_Expect@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@W4error_type@regex_constants@23@@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Expect
_TEXT	ENDS
PUBLIC	?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEX_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_assert_group
PUBLIC	?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Wrapped_disjunction
; Function compile flags: /Ogsp
;	COMDAT ?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ
_TEXT	SEGMENT
?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Wrapped_disjunction, COMDAT
; _this$ = ecx

; 4694 : 	{	// add disjunction inside group

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4695 : 	++_Disj_count;
; 4696 : 	if (!(_L_flags & _L_empty_grp) && _Mchar == _Meta_rpar)

  00003	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00006	ff 46 10	 inc	 DWORD PTR [esi+16]
  00009	57		 push	 edi
  0000a	a9 00 00 00 08	 test	 eax, 134217728		; 08000000H
  0000f	75 0a		 jne	 SHORT $LN12@Wrapped_di
  00011	83 7e 40 29	 cmp	 DWORD PTR [esi+64], 41	; 00000029H
  00015	75 04		 jne	 SHORT $LN12@Wrapped_di

; 4697 : 		_Error(regex_constants::error_paren);

  00017	6a 05		 push	 5
  00019	eb 4f		 jmp	 SHORT $LN31@Wrapped_di
$LN12@Wrapped_di:

; 4698 : 	else if ((_L_flags & _L_nc_grp) && _Mchar == _Meta_query)

  0001b	a8 20		 test	 al, 32			; 00000020H
  0001d	74 54		 je	 SHORT $LN10@Wrapped_di
  0001f	83 7e 40 3f	 cmp	 DWORD PTR [esi+64], 63	; 0000003fH
  00023	75 4e		 jne	 SHORT $LN10@Wrapped_di

; 4699 : 		{	// check for valid ECMAScript (?x ... ) group
; 4700 : 		_Next();

  00025	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4701 : 		_Meta_type _Ch =_Mchar;

  0002a	8b 7e 40	 mov	 edi, DWORD PTR [esi+64]

; 4702 : 		_Next();

  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4703 : 		if (_Ch == _Meta_colon)

  00034	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  00037	75 04		 jne	 SHORT $LN9@Wrapped_di

; 4704 : 			_Do_noncapture_group();

  00039	8b ce		 mov	 ecx, esi
  0003b	eb 3f		 jmp	 SHORT $LN30@Wrapped_di
$LN9@Wrapped_di:

; 4705 : 		else if (_Ch == _Meta_exc)

  0003d	83 ff 21	 cmp	 edi, 33			; 00000021H
  00040	75 11		 jne	 SHORT $LN7@Wrapped_di

; 4706 : 			{
; 4707 : 			_Do_assert_group(true);

  00042	6a 01		 push	 1
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEX_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_assert_group

; 4708 : 			--_Disj_count;

  0004b	ff 4e 10	 dec	 DWORD PTR [esi+16]

; 4709 : 			return (false);

  0004e	32 c0		 xor	 al, al
$LN13@Wrapped_di:

; 4724 : 		--_Disj_count;
; 4725 : 	return (true);
; 4726 : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
$LN7@Wrapped_di:

; 4710 : 			}
; 4711 : 		else if (_Ch == _Meta_equal)

  00053	83 ff 3d	 cmp	 edi, 61			; 0000003dH
  00056	75 10		 jne	 SHORT $LN5@Wrapped_di

; 4712 : 			{
; 4713 : 			_Do_assert_group(false);

  00058	6a 00		 push	 0
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEX_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_assert_group
  00061	32 c0		 xor	 al, al
$LN29@Wrapped_di:

; 4714 : 			--_Disj_count;

  00063	ff 4e 10	 dec	 DWORD PTR [esi+16]

; 4715 : 			return (false);

  00066	eb e8		 jmp	 SHORT $LN13@Wrapped_di
$LN5@Wrapped_di:

; 4716 : 			}
; 4717 : 		else
; 4718 : 			_Error(regex_constants::error_syntax);

  00068	6a 0e		 push	 14			; 0000000eH
$LN31@Wrapped_di:
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00070	59		 pop	 ecx

; 4719 : 		}
; 4720 : 	else if (_Flags & regex_constants::nosubs)

  00071	eb 15		 jmp	 SHORT $LN1@Wrapped_di
$LN10@Wrapped_di:
  00073	f7 46 38 00 02
	00 00		 test	 DWORD PTR [esi+56], 512	; 00000200H
  0007a	74 07		 je	 SHORT $LN2@Wrapped_di
$LN30@Wrapped_di:

; 4721 : 		_Do_noncapture_group();

  0007c	e8 00 00 00 00	 call	 ?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_noncapture_group

; 4722 : 	else

  00081	eb 05		 jmp	 SHORT $LN1@Wrapped_di
$LN2@Wrapped_di:

; 4723 : 		_Do_capture_group();

  00083	e8 00 00 00 00	 call	 ?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_capture_group
$LN1@Wrapped_di:
  00088	b0 01		 mov	 al, 1
  0008a	eb d7		 jmp	 SHORT $LN29@Wrapped_di
?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Wrapped_disjunction
_TEXT	ENDS
PUBLIC	??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>, COMDAT

; 2512 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2513 : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN15@Move:
  00009	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0000c	74 18		 je	 SHORT $LN1@Move

; 2514 : 		*_Dest = _STD move(*_First);

  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  0001b	88 50 08	 mov	 BYTE PTR [eax+8], dl
  0001e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00021	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00024	eb e3		 jmp	 SHORT $LN15@Move
$LN1@Move:

; 2515 : 	return (_Dest);
; 2516 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
_TEXT	ENDS
PUBLIC	?translate_nocase@?$_Regex_traits@D@tr1@std@@QBEDD@Z ; std::tr1::_Regex_traits<char>::translate_nocase
EXTRN	__imp_?tolower@?$ctype@D@std@@QBEDD@Z:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?translate_nocase@?$_Regex_traits@D@tr1@std@@QBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?translate_nocase@?$_Regex_traits@D@tr1@std@@QBEDD@Z PROC ; std::tr1::_Regex_traits<char>::translate_nocase, COMDAT
; _this$ = ecx

; 336  : 		{	// provide case-insensitive mapping

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 337  : 		return (_Getctype()->tolower(_Ch));

  00003	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00006	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  0000b	8b c8		 mov	 ecx, eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z

; 338  : 		}

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?translate_nocase@?$_Regex_traits@D@tr1@std@@QBEDD@Z ENDP ; std::tr1::_Regex_traits<char>::translate_nocase
_TEXT	ENDS
PUBLIC	?isctype@?$_Regex_traits@D@tr1@std@@QBE_NDF@Z	; std::tr1::_Regex_traits<char>::isctype
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:PROC
; Function compile flags: /Ogsp
;	COMDAT ?isctype@?$_Regex_traits@D@tr1@std@@QBE_NDF@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Fx$ = 12						; size = 2
?isctype@?$_Regex_traits@D@tr1@std@@QBE_NDF@Z PROC	; std::tr1::_Regex_traits<char>::isctype, COMDAT
; _this$ = ecx

; 364  : 		{	// return true if _Ch is in character class _Fx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 365  : 		if (_Fx != (char_class_type)(-1))

  00003	66 83 7d 0c ff	 cmp	 WORD PTR __Fx$[ebp], -1
  00008	74 15		 je	 SHORT $LN2@isctype

; 366  : 			return (_Getctype()->is(_Fx, _Ch));

  0000a	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Fx$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00015	8b c8		 mov	 ecx, eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  0001d	eb 26		 jmp	 SHORT $LN1@isctype
$LN2@isctype:

; 367  : 		else
; 368  : 			return (_Ch == '_'	// assumes L'_' == '_'
; 369  : 			|| _Getctype()->is(_Ch_alnum, _Ch));

  0001f	80 7d 08 5f	 cmp	 BYTE PTR __Ch$[ebp], 95	; 0000005fH
  00023	74 1d		 je	 SHORT $LN5@isctype
  00025	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00028	68 07 01 00 00	 push	 263			; 00000107H
  0002d	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00032	8b c8		 mov	 ecx, eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  0003a	84 c0		 test	 al, al
  0003c	75 04		 jne	 SHORT $LN5@isctype
  0003e	33 c0		 xor	 eax, eax
  00040	eb 03		 jmp	 SHORT $LN1@isctype
$LN5@isctype:
  00042	33 c0		 xor	 eax, eax
  00044	40		 inc	 eax
$LN1@isctype:

; 370  : 		}

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?isctype@?$_Regex_traits@D@tr1@std@@QBE_NDF@Z ENDP	; std::tr1::_Regex_traits<char>::isctype
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAU?$_Sequence@D@23@@Z ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAU?$_Sequence@D@23@@Z
_TEXT	SEGMENT
__Head$ = 8						; size = 4
?_Tidy@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAU?$_Sequence@D@23@@Z PROC ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1529 : 		{	// clean up a list of sequences

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1530 : 		while (_Head)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 1c		 je	 SHORT $LN1@Tidy@2
  0000b	57		 push	 edi
$LL2@Tidy@2:

; 1531 : 			{	// delete the head of the list
; 1532 : 			_Sequence<_Elem> *_Temp = _Head;

  0000c	8b fe		 mov	 edi, esi

; 1533 : 			_Head = _Head->_Next;
; 1534 : 			delete _Temp;

  0000e	ff 77 0c	 push	 DWORD PTR [edi+12]
  00011	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
  00022	85 f6		 test	 esi, esi
  00024	75 e6		 jne	 SHORT $LL2@Tidy@2
  00026	5f		 pop	 edi
$LN1@Tidy@2:
  00027	5e		 pop	 esi

; 1535 : 			}
; 1536 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Tidy@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAU?$_Sequence@D@23@@Z ENDP ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Lookup_coll@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@D@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBU?$_Sequence@D@01@@Z ; std::tr1::_Lookup_coll<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char>
; Function compile flags: /Ogsp
;	COMDAT ??$_Lookup_coll@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@D@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBU?$_Sequence@D@01@@Z
_TEXT	SEGMENT
__Jx$513030 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Ix$513025 = 20					; size = 4
__Eq$ = 20						; size = 4
??$_Lookup_coll@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@D@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBU?$_Sequence@D@01@@Z PROC ; std::tr1::_Lookup_coll<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char>, COMDAT

; 3805 : 	{	// look for collation element [_First, _Last) in _Eq

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3806 : 	while (_Eq)

  00004	8b 4d 14	 mov	 ecx, DWORD PTR __Eq$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	eb 42		 jmp	 SHORT $LN37@Lookup_col
$LL10@Lookup_col:

; 3807 : 		{	// look for sequence of elements that are the right size
; 3808 : 		for (int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz)

  0000c	83 65 14 00	 and	 DWORD PTR __Ix$513025[ebp], 0
  00010	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00014	7e 35		 jle	 SHORT $LN6@Lookup_col
  00016	8b 39		 mov	 edi, DWORD PTR [ecx]
$LL36@Lookup_col:

; 3811 : 			for (size_t _Jx = 0; _Jx < _Eq->_Sz; ++_Jx)

  00018	83 65 fc 00	 and	 DWORD PTR __Jx$513030[ebp], 0
  0001c	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0001f	85 ff		 test	 edi, edi
  00021	74 16		 je	 SHORT $LN35@Lookup_col

; 3809 : 			{	// look for character range
; 3810 : 			_BidIt _Res = _First;

  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	03 45 14	 add	 eax, DWORD PTR __Ix$513025[ebp]
$LL5@Lookup_col:

; 3812 : 				{	// check current character
; 3813 : 				if (*_Res++ != *(_Eq->_Data._Str() + _Ix + _Jx))

  00029	8a 1a		 mov	 bl, BYTE PTR [edx]
  0002b	42		 inc	 edx
  0002c	3a 18		 cmp	 bl, BYTE PTR [eax]
  0002e	75 09		 jne	 SHORT $LN35@Lookup_col

; 3811 : 			for (size_t _Jx = 0; _Jx < _Eq->_Sz; ++_Jx)

  00030	ff 45 fc	 inc	 DWORD PTR __Jx$513030[ebp]
  00033	40		 inc	 eax
  00034	39 7d fc	 cmp	 DWORD PTR __Jx$513030[ebp], edi
  00037	72 f0		 jb	 SHORT $LL5@Lookup_col
$LN35@Lookup_col:

; 3814 : 					break;
; 3815 : 				}
; 3816 : 			if (_Res == _Last)

  00039	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0003c	3b d6		 cmp	 edx, esi
  0003e	74 1f		 je	 SHORT $LN31@Lookup_col

; 3807 : 		{	// look for sequence of elements that are the right size
; 3808 : 		for (int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz)

  00040	01 7d 14	 add	 DWORD PTR __Ix$513025[ebp], edi
  00043	8b 45 14	 mov	 eax, DWORD PTR __Ix$513025[ebp]
  00046	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00049	7c cd		 jl	 SHORT $LL36@Lookup_col
$LN6@Lookup_col:

; 3818 : 			}
; 3819 : 		_Eq = _Eq->_Next;

  0004b	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
$LN37@Lookup_col:

; 3806 : 	while (_Eq)

  0004e	85 c9		 test	 ecx, ecx
  00050	75 ba		 jne	 SHORT $LL10@Lookup_col

; 3820 : 		}
; 3821 : 	return (_First);

  00052	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00055	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00058	89 08		 mov	 DWORD PTR [eax], ecx
$LN11@Lookup_col:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 3822 : 	}

  0005d	c9		 leave
  0005e	c3		 ret	 0
$LN31@Lookup_col:

; 3817 : 				return (_Last);

  0005f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00062	89 30		 mov	 DWORD PTR [eax], esi
  00064	eb f4		 jmp	 SHORT $LN11@Lookup_col
??$_Lookup_coll@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@D@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBU?$_Sequence@D@01@@Z ENDP ; std::tr1::_Lookup_coll<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char>
_TEXT	ENDS
PUBLIC	?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_str_node
; Function compile flags: /Ogsp
;	COMDAT ?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_str_node, COMDAT
; _this$ = ecx

; 3254 : 	{	// add string node

  00000	56		 push	 esi

; 3255 : 	_Link_node(new _Node_str<_Elem>);

  00001	6a 20		 push	 32			; 00000020H
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	59		 pop	 ecx
  0000b	85 c0		 test	 eax, eax
  0000d	74 0b		 je	 SHORT $LN3@Add_str_no
  0000f	6a 00		 push	 0
  00011	8b c8		 mov	 ecx, eax
  00013	e8 00 00 00 00	 call	 ??0?$_Node_str@D@tr1@std@@QAE@W4_Node_flags@12@@Z ; std::tr1::_Node_str<char>::_Node_str<char>
  00018	eb 02		 jmp	 SHORT $LN4@Add_str_no
$LN3@Add_str_no:
  0001a	33 c0		 xor	 eax, eax
$LN4@Add_str_no:
  0001c	50		 push	 eax
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node
  00024	5e		 pop	 esi

; 3256 : 	}

  00025	c3		 ret	 0
?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_str_node
_TEXT	ENDS
PUBLIC	??R?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::operator()
; Function compile flags: /Ogsp
;	COMDAT ??R?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z
_TEXT	SEGMENT
__E1$ = 8						; size = 1
__E2$ = 12						; size = 1
??R?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z PROC ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::operator(), COMDAT
; _this$ = ecx

; 231  : 		{	// return true if equal

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 232  : 		return (_Traits.translate_nocase(_E1)
; 233  : 			== _Traits.translate_nocase(_E2));

  00005	ff 75 08	 push	 DWORD PTR __E1$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00011	8b c8		 mov	 ecx, eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  00019	ff 75 0c	 push	 DWORD PTR __E2$[ebp]
  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8a d8		 mov	 bl, al
  00020	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00025	8b c8		 mov	 ecx, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  0002d	33 c9		 xor	 ecx, ecx
  0002f	3a d8		 cmp	 bl, al
  00031	5e		 pop	 esi
  00032	0f 94 c0	 sete	 al
  00035	5b		 pop	 ebx

; 234  : 		}

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
??R?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ENDP ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::operator()
_TEXT	ENDS
PUBLIC	??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@ABV012@@Z ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@ABV012@@Z PROC ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	89 10		 mov	 DWORD PTR [eax], edx
  0000c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00012	8a 49 08	 mov	 cl, BYTE PTR [ecx+8]
  00015	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@ABV012@@Z ENDP ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Distance2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@YAXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@YAXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@YAXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,int>, COMDAT

; 885  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 887  : 	if (_First != _Last)
; 888  : 		{	// check for null pointers
; 889  : 		_DEBUG_POINTER(_First);
; 890  : 		_DEBUG_POINTER(_Last);
; 891  : 		}
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : 	_Off += _Last - _First;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 895  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@YAXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,int>
_TEXT	ENDS
PUBLIC	?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z
_TEXT	SEGMENT
__Base$ = 8						; size = 4
__Count$ = 12						; size = 4
?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits, COMDAT
; _this$ = ecx

; 4428 : 	{	// translate digits to numeric value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 4429 : 	int _Chv;
; 4430 : 	_Val = 0;
; 4431 : 	while (_Count != 0 && (_Chv = _Traits.value(_Char, _Base)) != -1)

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	8b f1		 mov	 esi, ecx
  0000c	66 89 46 3c	 mov	 WORD PTR [esi+60], ax
  00010	85 ff		 test	 edi, edi
  00012	74 2f		 je	 SHORT $LN1@Do_digits
$LL2@Do_digits:
  00014	0f b6 46 3e	 movzx	 eax, BYTE PTR [esi+62]
  00018	ff 75 08	 push	 DWORD PTR __Base$[ebp]
  0001b	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?value@?$regex_traits@D@tr1@std@@QBEHDH@Z ; std::tr1::regex_traits<char>::value
  00024	83 f8 ff	 cmp	 eax, -1
  00027	74 1a		 je	 SHORT $LN1@Do_digits

; 4432 : 		{	// append next digit
; 4433 : 		--_Count;
; 4434 : 		_Val = (unsigned short)(_Val *_Base);

  00029	66 8b 4e 3c	 mov	 cx, WORD PTR [esi+60]
  0002d	66 0f af 4d 08	 imul	 cx, WORD PTR __Base$[ebp]

; 4435 : 		_Val = (unsigned short)(_Val + _Chv);

  00032	66 03 c8	 add	 cx, ax
  00035	66 89 4e 3c	 mov	 WORD PTR [esi+60], cx

; 4436 : 		_Next();

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
  00040	4f		 dec	 edi
  00041	75 d1		 jne	 SHORT $LL2@Do_digits
$LN1@Do_digits:

; 4437 : 		}
; 4438 : 	return (_Count);

  00043	8b c7		 mov	 eax, edi
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 4439 : 	}

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits
_TEXT	ENDS
PUBLIC	?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXH@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_HexDigits
; Function compile flags: /Ogsp
;	COMDAT ?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXH@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXH@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_HexDigits, COMDAT
; _this$ = ecx

; 4453 : 	{	// check for _Count hex digits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4454 : 	if (_Do_digits(16, _Count) != 0)

  00003	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00006	6a 10		 push	 16			; 00000010H
  00008	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits
  0000d	85 c0		 test	 eax, eax
  0000f	74 09		 je	 SHORT $LN4@HexDigits

; 4455 : 		_Error(regex_constants::error_escape);

  00011	6a 02		 push	 2
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00019	59		 pop	 ecx
$LN4@HexDigits:

; 4456 : 	}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXH@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_HexDigits
_TEXT	ENDS
PUBLIC	?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_OctalDigits
; Function compile flags: /Ogsp
;	COMDAT ?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ
_TEXT	SEGMENT
?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_OctalDigits, COMDAT
; _this$ = ecx

; 4463 : 	return (_Do_digits(8, 3) != 3);

  00000	6a 03		 push	 3
  00002	6a 08		 push	 8
  00004	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits
  00009	33 c9		 xor	 ecx, ecx
  0000b	83 f8 03	 cmp	 eax, 3
  0000e	0f 95 c0	 setne	 al

; 4464 : 	}

  00011	c3		 ret	 0
?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_OctalDigits
_TEXT	ENDS
PUBLIC	?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_IdentityEscape
; Function compile flags: /Ogsp
;	COMDAT ?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ
_TEXT	SEGMENT
$T519158 = -4						; size = 1
?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_IdentityEscape, COMDAT
; _this$ = ecx

; 4732 : 	{	// check for valid identity escape

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx

; 4733 : 	if ((_L_flags & _L_ident_ECMA) &&
; 4734 : 		// ECMAScript identity escape characters
; 4735 : 		!_Traits.isctype(_Char, _RxTraits::_Ch_alnum)
; 4736 : 			&& _Char != '_')

  00008	bf 00 00 40 00	 mov	 edi, 4194304		; 00400000H
  0000d	85 7e 44	 test	 DWORD PTR [esi+68], edi
  00010	74 29		 je	 SHORT $LN11@IdentityEs
  00012	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  00015	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00018	88 45 fc	 mov	 BYTE PTR $T519158[ebp], al
  0001b	ff 75 fc	 push	 DWORD PTR $T519158[ebp]
  0001e	68 07 01 00 00	 push	 263			; 00000107H
  00023	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  00030	84 c0		 test	 al, al
  00032	75 07		 jne	 SHORT $LN11@IdentityEs
  00034	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  00037	3c 5f		 cmp	 al, 95			; 0000005fH
  00039	75 5c		 jne	 SHORT $LN2@IdentityEs
$LN11@IdentityEs:

; 4737 : 		;
; 4738 : 	else if (!(_L_flags & _L_ident_ECMA) &&
; 4739 : 		// BRE, ERE, awk identity escape characters
; 4740 : 		(_Char == _Meta_dot
; 4741 : 		|| _Char == _Meta_lsq
; 4742 : 		|| _Char == _Meta_esc
; 4743 : 		|| _Char == _Meta_star
; 4744 : 		|| _Char == _Meta_bar
; 4745 : 		|| _Char == _Meta_caret
; 4746 : 		|| _Char == _Meta_dlr))

  0003b	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0003e	85 cf		 test	 ecx, edi
  00040	75 1f		 jne	 SHORT $LN9@IdentityEs
  00042	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  00045	3c 2e		 cmp	 al, 46			; 0000002eH
  00047	74 4e		 je	 SHORT $LN2@IdentityEs
  00049	3c 5b		 cmp	 al, 91			; 0000005bH
  0004b	74 4a		 je	 SHORT $LN2@IdentityEs
  0004d	3c 5c		 cmp	 al, 92			; 0000005cH
  0004f	74 46		 je	 SHORT $LN2@IdentityEs
  00051	3c 2a		 cmp	 al, 42			; 0000002aH
  00053	74 42		 je	 SHORT $LN2@IdentityEs
  00055	3c 7c		 cmp	 al, 124			; 0000007cH
  00057	74 3e		 je	 SHORT $LN2@IdentityEs
  00059	3c 5e		 cmp	 al, 94			; 0000005eH
  0005b	74 3a		 je	 SHORT $LN2@IdentityEs
  0005d	3c 24		 cmp	 al, 36			; 00000024H

; 4747 : 		;
; 4748 : 	else if ((_L_flags & _L_ident_ERE) &&

  0005f	74 36		 je	 SHORT $LN2@IdentityEs
$LN9@IdentityEs:

; 4749 : 		// additional ERE identity escape characters
; 4750 : 		(_Char == _Meta_lpar
; 4751 : 		|| _Char == _Meta_rpar
; 4752 : 		|| _Char == _Meta_plus
; 4753 : 		|| _Char == _Meta_query
; 4754 : 		|| _Char == _Meta_lbr
; 4755 : 		|| _Char == _Meta_rbr))

  00061	f7 c1 00 00 80
	00		 test	 ecx, 8388608		; 00800000H
  00067	74 1b		 je	 SHORT $LN6@IdentityEs
  00069	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  0006c	3c 28		 cmp	 al, 40			; 00000028H
  0006e	74 27		 je	 SHORT $LN2@IdentityEs
  00070	3c 29		 cmp	 al, 41			; 00000029H
  00072	74 23		 je	 SHORT $LN2@IdentityEs
  00074	3c 2b		 cmp	 al, 43			; 0000002bH
  00076	74 1f		 je	 SHORT $LN2@IdentityEs
  00078	3c 3f		 cmp	 al, 63			; 0000003fH
  0007a	74 1b		 je	 SHORT $LN2@IdentityEs
  0007c	3c 7b		 cmp	 al, 123			; 0000007bH
  0007e	74 17		 je	 SHORT $LN2@IdentityEs
  00080	3c 7d		 cmp	 al, 125			; 0000007dH

; 4756 : 		;
; 4757 : 	else if ((_L_flags & _L_ident_awk) &&

  00082	74 13		 je	 SHORT $LN2@IdentityEs
$LN6@IdentityEs:

; 4758 : 		// additional awk identity escape characters
; 4759 : 		(_Char == '"' || _Char == '/'))

  00084	f7 c1 00 00 00
	01		 test	 ecx, 16777216		; 01000000H
  0008a	74 1c		 je	 SHORT $LN3@IdentityEs
  0008c	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  0008f	3c 22		 cmp	 al, 34			; 00000022H
  00091	74 04		 je	 SHORT $LN2@IdentityEs
  00093	3c 2f		 cmp	 al, 47			; 0000002fH
  00095	75 11		 jne	 SHORT $LN3@IdentityEs
$LN2@IdentityEs:

; 4763 : 	_Val = _Char;

  00097	66 98		 cbw

; 4764 : 	_Next();

  00099	8b ce		 mov	 ecx, esi
  0009b	66 89 46 3c	 mov	 WORD PTR [esi+60], ax
  0009f	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4765 : 	return (true);

  000a4	b0 01		 mov	 al, 1
  000a6	eb 02		 jmp	 SHORT $LN12@IdentityEs
$LN3@IdentityEs:

; 4760 : 		;
; 4761 : 	else
; 4762 : 		return (false);

  000a8	32 c0		 xor	 al, al
$LN12@IdentityEs:
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi

; 4766 : 	}

  000ac	c9		 leave
  000ad	c3		 ret	 0
?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_IdentityEscape
_TEXT	ENDS
PUBLIC	?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_bitmap
; Function compile flags: /Ogsp
;	COMDAT ?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_bitmap, COMDAT
; _this$ = ecx

; 3285 : 	{	// add character to accelerator table

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 3286 : 	if (_Flags & regex_constants::icase)

  00006	f7 46 0c 00 01
	00 00		 test	 DWORD PTR [esi+12], 256	; 00000100H
  0000d	74 16		 je	 SHORT $LN16@Add_char_t

; 3287 : 		_Ch = _Traits.translate_nocase(_Ch);

  0000f	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  00022	88 45 08	 mov	 BYTE PTR __Ch$[ebp], al
$LN16@Add_char_t:

; 3288 : 	_Node_class<_Elem, _RxTraits> *_Node =
; 3289 : 		(_Node_class<_Elem, _RxTraits>*)_Current;

  00025	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 3290 : 	if (!_Node->_Small)

  00028	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  0002c	75 1e		 jne	 SHORT $LN1@Add_char_t

; 3291 : 		_Node->_Small = new _Bitmap;

  0002e	6a 20		 push	 32			; 00000020H
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	8b d0		 mov	 edx, eax
  00037	33 c0		 xor	 eax, eax
  00039	59		 pop	 ecx
  0003a	85 d2		 test	 edx, edx
  0003c	74 0b		 je	 SHORT $LN6@Add_char_t
  0003e	57		 push	 edi
  0003f	6a 08		 push	 8
  00041	59		 pop	 ecx
  00042	8b fa		 mov	 edi, edx
  00044	f3 ab		 rep stosd
  00046	8b c2		 mov	 eax, edx
  00048	5f		 pop	 edi
$LN6@Add_char_t:
  00049	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN1@Add_char_t:

; 3292 : 	_Node->_Small->_Mark(_Ch);

  0004c	0f be 4d 08	 movsx	 ecx, BYTE PTR __Ch$[ebp]
  00050	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00053	8b c1		 mov	 eax, ecx
  00055	83 e1 07	 and	 ecx, 7
  00058	b2 01		 mov	 dl, 1
  0005a	d2 e2		 shl	 dl, cl
  0005c	c1 e8 03	 shr	 eax, 3
  0005f	08 14 30	 or	 BYTE PTR [eax+esi], dl
  00062	5e		 pop	 esi

; 3293 : 	}

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_bitmap
_TEXT	ENDS
PUBLIC	?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_array
; Function compile flags: /Ogsp
;	COMDAT ?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_array, COMDAT
; _this$ = ecx

; 3299 : 	{	// append character to character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 3300 : 	if (_Flags & regex_constants::icase)

  00006	f7 46 0c 00 01
	00 00		 test	 DWORD PTR [esi+12], 256	; 00000100H
  0000d	74 16		 je	 SHORT $LN2@Add_char_t@2

; 3301 : 		_Ch = _Traits.translate_nocase(_Ch);

  0000f	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00012	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00015	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  00022	88 45 08	 mov	 BYTE PTR __Ch$[ebp], al
$LN2@Add_char_t@2:

; 3302 : 	_Node_class<_Elem, _RxTraits> *_Node =
; 3303 : 		(_Node_class<_Elem, _RxTraits>*)_Current;

  00025	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 3304 : 	if (!_Node->_Large)

  00028	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0002c	75 1e		 jne	 SHORT $LN1@Add_char_t@2

; 3305 : 		_Node->_Large = new _Buf<_Elem>;

  0002e	6a 0c		 push	 12			; 0000000cH
  00030	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00035	59		 pop	 ecx
  00036	85 c0		 test	 eax, eax
  00038	74 0d		 je	 SHORT $LN5@Add_char_t@2
  0003a	83 20 00	 and	 DWORD PTR [eax], 0
  0003d	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00041	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  00045	eb 02		 jmp	 SHORT $LN6@Add_char_t@2
$LN5@Add_char_t@2:
  00047	33 c0		 xor	 eax, eax
$LN6@Add_char_t@2:
  00049	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN1@Add_char_t@2:

; 3306 : 	_Node->_Large->_Insert(_Ch);

  0004c	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0004f	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00052	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z ; std::tr1::_Buf<char>::_Insert
  00057	5e		 pop	 esi

; 3307 : 	}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_array
_TEXT	ENDS
PUBLIC	?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 781  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  : 		return (iterator(this->_Myfirst, this));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 783  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy
; Function compile flags: /Ogsp
;	COMDAT ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@tr1@std@@@23@FABV?$regex_traits@D@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_elts
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@tr1@std@@@23@FABV?$regex_traits@D@23@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
__Cl$ = 12						; size = 2
__Traits$ = 16						; size = 4
?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@tr1@std@@@23@FABV?$regex_traits@D@23@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_elts, COMDAT
; _this$ = ecx

; 3366 : 	{	// add characters in named class to set

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 3367 : 	for (int _Ch = 0; _Ch < _Bmp_max; ++_Ch)

  00005	8b 75 08	 mov	 esi, DWORD PTR __Node$[ebp]
  00008	57		 push	 edi
  00009	33 db		 xor	 ebx, ebx
$LL17@Add_elts:

; 3368 : 		if (_Traits.isctype((_Elem)_Ch, _Cl))

  0000b	ff 75 0c	 push	 DWORD PTR __Cl$[ebp]
  0000e	8b 4d 10	 mov	 ecx, DWORD PTR __Traits$[ebp]
  00011	53		 push	 ebx
  00012	e8 00 00 00 00	 call	 ?isctype@?$_Regex_traits@D@tr1@std@@QBE_NDF@Z ; std::tr1::_Regex_traits<char>::isctype
  00017	84 c0		 test	 al, al
  00019	74 37		 je	 SHORT $LN4@Add_elts

; 3369 : 			{	// add contents of named class to accelerator table
; 3370 : 			if (!_Node->_Small)

  0001b	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  0001f	75 1c		 jne	 SHORT $LN1@Add_elts

; 3371 : 				_Node->_Small = new _Bitmap;

  00021	6a 20		 push	 32			; 00000020H
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	8b d0		 mov	 edx, eax
  0002a	33 c0		 xor	 eax, eax
  0002c	59		 pop	 ecx
  0002d	85 d2		 test	 edx, edx
  0002f	74 09		 je	 SHORT $LN9@Add_elts
  00031	6a 08		 push	 8
  00033	59		 pop	 ecx
  00034	8b fa		 mov	 edi, edx
  00036	f3 ab		 rep stosd
  00038	8b c2		 mov	 eax, edx
$LN9@Add_elts:
  0003a	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN1@Add_elts:

; 3372 : 			_Node->_Small->_Mark(_Ch);

  0003d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00040	8b cb		 mov	 ecx, ebx
  00042	c1 e9 03	 shr	 ecx, 3
  00045	03 c1		 add	 eax, ecx
  00047	8b cb		 mov	 ecx, ebx
  00049	83 e1 07	 and	 ecx, 7
  0004c	b2 01		 mov	 dl, 1
  0004e	d2 e2		 shl	 dl, cl
  00050	08 10		 or	 BYTE PTR [eax], dl
$LN4@Add_elts:

; 3367 : 	for (int _Ch = 0; _Ch < _Bmp_max; ++_Ch)

  00052	43		 inc	 ebx
  00053	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00059	7c b0		 jl	 SHORT $LL17@Add_elts
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 3373 : 			}
; 3374 : 	}

  0005e	5d		 pop	 ebp
  0005f	c2 0c 00	 ret	 12			; 0000000cH
?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@tr1@std@@@23@FABV?$regex_traits@D@23@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_elts
_TEXT	ENDS
PUBLIC	??R?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> >::operator()
; Function compile flags: /Ogsp
;	COMDAT ??R?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z
_TEXT	SEGMENT
__E1$ = 8						; size = 1
__E2$ = 12						; size = 1
??R?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z PROC ; std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> >::operator(), COMDAT
; _this$ = ecx

; 231  : 		{	// return true if equal

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 232  : 		return (_Traits.translate_nocase(_E1)
; 233  : 			== _Traits.translate_nocase(_E2));

  00005	ff 75 08	 push	 DWORD PTR __E1$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00011	8b c8		 mov	 ecx, eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  00019	ff 75 0c	 push	 DWORD PTR __E2$[ebp]
  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	8a d8		 mov	 bl, al
  00020	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00025	8b c8		 mov	 ecx, eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  0002d	33 c9		 xor	 ecx, ecx
  0002f	3a d8		 cmp	 bl, al
  00031	5e		 pop	 esi
  00032	0f 94 c0	 sete	 al
  00035	5b		 pop	 ebx

; 234  : 		}

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
??R?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ENDP ; std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> >::operator()
_TEXT	ENDS
PUBLIC	?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0HPAPAU?$_Sequence@D@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Char_to_elts
; Function compile flags: /Ogsp
;	COMDAT ?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0HPAPAU?$_Sequence@D@23@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Diff$ = 16						; size = 4
__Cur$ = 20						; size = 4
?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0HPAPAU?$_Sequence@D@23@@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Char_to_elts, COMDAT
; _this$ = ecx

; 3398 : 	{	// add collation element to element sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 3399 : 	while (*_Cur && (unsigned int)_Diff < (*_Cur)->_Sz)

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Diff$[ebp]
  00007	56		 push	 esi
  00008	8b 75 14	 mov	 esi, DWORD PTR __Cur$[ebp]
  0000b	57		 push	 edi
  0000c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000e	85 ff		 test	 edi, edi
  00010	74 18		 je	 SHORT $LN1@Char_to_el
$LL4@Char_to_el:
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	3b 18		 cmp	 ebx, DWORD PTR [eax]
  00016	73 08		 jae	 SHORT $LN3@Char_to_el

; 3400 : 		_Cur = &(*_Cur)->_Next;

  00018	8d 70 10	 lea	 esi, DWORD PTR [eax+16]
  0001b	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0001e	75 f2		 jne	 SHORT $LL4@Char_to_el
$LN3@Char_to_el:

; 3401 : 	if (!(*_Cur) || (unsigned int)_Diff != (*_Cur)->_Sz)

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]
  00022	85 ff		 test	 edi, edi
  00024	74 04		 je	 SHORT $LN1@Char_to_el
  00026	3b 1f		 cmp	 ebx, DWORD PTR [edi]
  00028	74 22		 je	 SHORT $LN2@Char_to_el
$LN1@Char_to_el:

; 3402 : 		{	// add new sequence holding elements of the same length
; 3403 : 		_Sequence<_Elem> *_Node = *_Cur;
; 3404 : 		*_Cur = new _Sequence<_Elem>((unsigned int)_Diff);

  0002a	6a 14		 push	 20			; 00000014H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	59		 pop	 ecx
  00032	33 c9		 xor	 ecx, ecx
  00034	3b c1		 cmp	 eax, ecx
  00036	74 0d		 je	 SHORT $LN7@Char_to_el
  00038	89 18		 mov	 DWORD PTR [eax], ebx
  0003a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0003d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00040	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00043	eb 02		 jmp	 SHORT $LN8@Char_to_el
$LN7@Char_to_el:
  00045	33 c0		 xor	 eax, eax
$LN8@Char_to_el:
  00047	89 06		 mov	 DWORD PTR [esi], eax

; 3405 : 		(*_Cur)->_Next = _Node;

  00049	89 78 10	 mov	 DWORD PTR [eax+16], edi
$LN2@Char_to_el:

; 3406 : 		}
; 3407 : 	(*_Cur)->_Data._Insert(_First, _Last);

  0004c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0004f	8b 36		 mov	 esi, DWORD PTR [esi]
  00051	eb 0d		 jmp	 SHORT $LN22@Char_to_el
$LL15@Char_to_el:
  00053	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00056	50		 push	 eax
  00057	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0005a	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z ; std::tr1::_Buf<char>::_Insert
  0005f	47		 inc	 edi
$LN22@Char_to_el:
  00060	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00063	75 ee		 jne	 SHORT $LL15@Char_to_el
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx

; 3408 : 	}

  00068	5d		 pop	 ebp
  00069	c2 10 00	 ret	 16			; 00000010H
?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0HPAPAU?$_Sequence@D@23@@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Char_to_elts
_TEXT	ENDS
PUBLIC	??$_Umove@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Umove<char *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z PROC ; std::vector<char,std::allocator<char> >::_Umove<char *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ENDP ; std::vector<char,std::allocator<char> >::_Umove<char *>
_TEXT	ENDS
PUBLIC	??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx

; 401  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 402  : 		return ((_Mybase)*this - _Right);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]

; 403  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??$iter_swap@PADPAD@std@@YAXPAD0@Z		; std::iter_swap<char *,char *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$iter_swap@PADPAD@std@@YAXPAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PADPAD@std@@YAXPAD0@Z PROC			; std::iter_swap<char *,char *>, COMDAT

; 2133 : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2134 : 	swap(*_Left, *_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	56		 push	 esi
  00009	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
  0000c	8a 16		 mov	 dl, BYTE PTR [esi]
  0000e	88 10		 mov	 BYTE PTR [eax], dl
  00010	88 0e		 mov	 BYTE PTR [esi], cl
  00012	5e		 pop	 esi

; 2135 : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$iter_swap@PADPAD@std@@YAXPAD0@Z ENDP			; std::iter_swap<char *,char *>
_TEXT	ENDS
PUBLIC	??$_Ucopy@PBD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPBD0PAD@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@PBD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PBD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPBD0PAD@Z PROC ; std::vector<char,std::allocator<char> >::_Ucopy<char const *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char const *,char *,std::allocator<char> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1319 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPBD0PAD@Z ENDP ; std::vector<char,std::allocator<char> >::_Ucopy<char const *>
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z PROC ; std::vector<char,std::allocator<char> >::_Ucopy<char *>, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char *,char *,std::allocator<char> >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1319 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ENDP ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 1853 : 		{	// compare [0, _Mysize) with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1854 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0000a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0000d	72 02		 jb	 SHORT $LN7@compare@3
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@compare@3:
  00011	52		 push	 edx
  00012	50		 push	 eax
  00013	ff 71 10	 push	 DWORD PTR [ecx+16]
  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 1855 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogsp
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1351 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1352 : 		return (_STRING_ITERATOR(_Myptr()));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 02		 jb	 SHORT $LN5@begin@2
  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@begin@2:
  0000b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1353 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogsp
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 1361 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1362 : 		return (_STRING_ITERATOR(_Myptr() + this->_Mysize));

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00007	72 04		 jb	 SHORT $LN5@end@2
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	eb 02		 jmp	 SHORT $LN6@end@2
$LN5@end@2:
  0000d	8b c1		 mov	 eax, ecx
$LN6@end@2:
  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	03 c8		 add	 ecx, eax
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00017	89 08		 mov	 DWORD PTR [eax], ecx

; 1363 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogsp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1988 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1989 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 20		 je	 SHORT $LN9@Tidy@3

; 1990 : 			;
; 1991 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 1a		 jb	 SHORT $LN9@Tidy@3

; 1992 : 			{	// copy any leftovers to small buffer and deallocate
; 1993 : 			_Elem *_Ptr = this->_Bx._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 1994 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN7@Tidy@3

; 1995 : 				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@Tidy@3:

; 1996 : 			this->_Alval.deallocate(_Ptr, this->_Myres + 1);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002e	59		 pop	 ecx
  0002f	5b		 pop	 ebx
$LN9@Tidy@3:

; 1997 : 			}
; 1998 : 		this->_Myres = this->_BUF_SIZE - 1;
; 1999 : 		_Eos(_Newsize);

  00030	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00033	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0003a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 2000 : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1109 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1110 : 		if (this->_Mysize < _Off)

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	3b c1		 cmp	 eax, ecx
  0000f	73 0b		 jae	 SHORT $LN3@erase

; 1111 : 			_Xran();	// _Off off end

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN28@erase:
$LN3@erase:

; 1112 : 		if (this->_Mysize - _Off < _Count)

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001f	2b c1		 sub	 eax, ecx
  00021	3b c3		 cmp	 eax, ebx

; 1113 : 			_Count = this->_Mysize - _Off;	// trim _Count

  00023	0f 42 d8	 cmovb	 ebx, eax

; 1114 : 		if (0 < _Count)

  00026	85 db		 test	 ebx, ebx
  00028	74 47		 je	 SHORT $LN25@erase

; 1115 : 			{	// move elements down
; 1116 : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 1117 : 				this->_Mysize - _Off - _Count);

  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	57		 push	 edi
  0002e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00031	72 04		 jb	 SHORT $LN11@erase
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	eb 02		 jmp	 SHORT $LN12@erase
$LN11@erase:
  00037	8b fe		 mov	 edi, esi
$LN12@erase:
  00039	83 fa 10	 cmp	 edx, 16			; 00000010H
  0003c	72 04		 jb	 SHORT $LN15@erase
  0003e	8b 16		 mov	 edx, DWORD PTR [esi]
  00040	eb 02		 jmp	 SHORT $LN16@erase
$LN15@erase:
  00042	8b d6		 mov	 edx, esi
$LN16@erase:
  00044	2b c3		 sub	 eax, ebx
  00046	03 f9		 add	 edi, ecx
  00048	50		 push	 eax
  00049	03 fb		 add	 edi, ebx
  0004b	03 d1		 add	 edx, ecx
  0004d	57		 push	 edi
  0004e	52		 push	 edx
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove

; 1118 : 			size_type _Newsize = this->_Mysize - _Count;

  00055	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	2b c3		 sub	 eax, ebx

; 1119 : 			_Eos(_Newsize);

  0005d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00061	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00064	5f		 pop	 edi
  00065	72 04		 jb	 SHORT $LN23@erase
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	eb 02		 jmp	 SHORT $LN24@erase
$LN23@erase:
  0006b	8b ce		 mov	 ecx, esi
$LN24@erase:
  0006d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN25@erase:

; 1120 : 			}
; 1121 : 		return (*this);

  00071	8b c6		 mov	 eax, esi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1122 : 		}

  00075	5d		 pop	 ebp
  00076	c2 08 00	 ret	 8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator!=
; Function compile flags: /Ogsp
;	COMDAT ??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator!=, COMDAT
; _this$ = ecx

; 218  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  : 		return (!(*this == _Right));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 02		 cmp	 eax, DWORD PTR [edx]
  0000c	0f 95 c0	 setne	 al

; 220  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator!=
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv296 = -20						; size = 4
__Newres$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1919 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 1920 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00014	83 cf 0f	 or	 edi, 15			; 0000000fH

; 1921 : 		if (max_size() < _Newres)

  00017	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0001a	76 05		 jbe	 SHORT $LN9@Copy

; 1922 : 			_Newres = _Newsize;	// undo roundup if too big

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001f	eb 27		 jmp	 SHORT $LN5@Copy
$LN9@Copy:

; 1923 : 		else if (this->_Myres / 2 <= _Newres / 3)

  00021	33 d2		 xor	 edx, edx
  00023	6a 03		 push	 3
  00025	8b c7		 mov	 eax, edi
  00027	5b		 pop	 ebx
  00028	f7 f3		 div	 ebx
  0002a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0002d	89 4d ec	 mov	 DWORD PTR tv296[ebp], ecx
  00030	d1 6d ec	 shr	 DWORD PTR tv296[ebp], 1
  00033	8b 55 ec	 mov	 edx, DWORD PTR tv296[ebp]
  00036	3b d0		 cmp	 edx, eax
  00038	76 0e		 jbe	 SHORT $LN5@Copy

; 1924 : 			;
; 1925 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

  0003a	6a fe		 push	 -2			; fffffffeH
  0003c	5f		 pop	 edi
  0003d	8b c7		 mov	 eax, edi
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	77 03		 ja	 SHORT $LN5@Copy

; 1926 : 			_Newres = this->_Myres
; 1927 : 				+ this->_Myres / 2;	// grow exponentially if possible

  00045	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$LN5@Copy:

; 1928 : 		else
; 1929 : 			_Newres = max_size();	// settle for max_size()
; 1930 : 
; 1931 : 		_Elem *_Ptr;
; 1932 : 		_TRY_BEGIN

  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1933 : 			_Ptr = this->_Alval.allocate(_Newres + 1);

  0004c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004f	6a 00		 push	 0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00057	59		 pop	 ecx
  00058	59		 pop	 ecx
  00059	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0005c	eb 27		 jmp	 SHORT $LN19@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 1934 : 		_CATCH_ALL
; 1935 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00061	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00064	89 45 ec	 mov	 DWORD PTR __Newres$[ebp], eax

; 1936 : 			_TRY_BEGIN
; 1937 : 				_Ptr = this->_Alval.allocate(_Newres + 1);

  00067	40		 inc	 eax
  00068	6a 00		 push	 0
  0006a	50		 push	 eax
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00074	59		 pop	 ecx
  00075	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  00078	59		 pop	 ecx

; 1941 : 			_CATCH_END
; 1942 : 		_CATCH_END

  00079	b8 00 00 00 00	 mov	 eax, $LN63@Copy
  0007e	c3		 ret	 0
$LN63@Copy:
  0007f	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00082	8b 7d ec	 mov	 edi, DWORD PTR __Newres$[ebp]
$LN19@Copy:

; 1943 : 
; 1944 : 		if (0 < _Oldlen)

  00085	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  00088	85 db		 test	 ebx, ebx
  0008a	74 19		 je	 SHORT $LN52@Copy

; 1945 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00090	72 04		 jb	 SHORT $LN50@Copy
  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	eb 02		 jmp	 SHORT $LN51@Copy
$LN50@Copy:
  00096	8b c6		 mov	 eax, esi
$LN51@Copy:
  00098	53		 push	 ebx
  00099	50		 push	 eax
  0009a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0009d	e8 00 00 00 00	 call	 _memcpy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN52@Copy:

; 1946 : 		_Tidy(true);

  000a5	6a 00		 push	 0
  000a7	6a 01		 push	 1
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1947 : 		this->_Bx._Ptr = _Ptr;

  000b0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b3	89 06		 mov	 DWORD PTR [esi], eax

; 1948 : 		this->_Myres = _Newres;
; 1949 : 		_Eos(_Oldlen);

  000b5	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000bb	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  000be	0f 42 c6	 cmovb	 eax, esi
  000c1	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1950 : 		}

  000c5	e8 00 00 00 00	 call	 __EH_epilog3
  000ca	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 1938 : 			_CATCH_ALL
; 1939 : 			_Tidy(true);	// failed again, discard storage and reraise

  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	33 f6		 xor	 esi, esi
  000d2	56		 push	 esi
  000d3	6a 01		 push	 1
  000d5	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1940 : 			_RERAISE;

  000da	56		 push	 esi
  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@Copy:
$LN66@Copy:
  000e1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::~basic_regex<char,std::tr1::regex_traits<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::~basic_regex<char,std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 2089 : 		{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2090 : 		_Tidy();

  00015	e8 00 00 00 00	 call	 ?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy

; 2091 : 		}

  0001a	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0001d	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00022	e8 00 00 00 00	 call	 __EH_epilog3
  00027	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$regex_traits@D@tr1@std@@QAE@XZ
__ehhandler$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::~basic_regex<char,std::tr1::regex_traits<char> >
PUBLIC	??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ PROC ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 552  : 		{	// construct

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 553  : 		}

  0000c	c3		 ret	 0
??0?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ ENDP ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 166  : 	{	// test for string equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 167  : 	return (_Left.compare(_Right) == 0);

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0000e	f7 d8		 neg	 eax
  00010	1b c0		 sbb	 eax, eax
  00012	40		 inc	 eax

; 168  : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@PBD1W4syntax_option_type@regex_constants@12@@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Parser<char const *,char,std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??0?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@PBD1W4syntax_option_type@regex_constants@12@@Z
_TEXT	SEGMENT
__Tr$ = 8						; size = 4
__Pfirst$ = 12						; size = 4
__Plast$ = 16						; size = 4
__Fx$ = 20						; size = 4
??0?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@PBD1W4syntax_option_type@regex_constants@12@@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Parser<char const *,char,std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 5057 : 	{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Tr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 7d 14	 mov	 edi, DWORD PTR __Fx$[ebp]
  00011	89 06		 mov	 DWORD PTR [esi], eax
  00013	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00016	8b 45 10	 mov	 eax, DWORD PTR __Plast$[ebp]
  00019	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001c	33 c0		 xor	 eax, eax
  0001e	57		 push	 edi
  0001f	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00022	53		 push	 ebx
  00023	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00026	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00029	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0002c	e8 00 00 00 00	 call	 ??0?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@W4syntax_option_type@regex_constants@12@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Builder<char const *,char,std::tr1::regex_traits<char> >

; 5058 : 	using namespace regex_constants;
; 5059 : 	_L_flags = (_Flags & _Gmask) == ECMAScript
; 5060 : 		|| (_Flags & _Gmask) == 0 ? _ECMA_flags
; 5061 : 		: (_Flags & _Gmask) == basic ? _Basic_flags
; 5062 : 		: (_Flags & _Gmask) == extended ? _Extended_flags
; 5063 : 		: (_Flags & _Gmask) == awk ? _Awk_flags
; 5064 : 		: (_Flags & _Gmask) == grep ? _Grep_flags
; 5065 : 		: (_Flags & _Gmask) == egrep ? _Egrep_flags
; 5066 : 		: 0;

  00031	8b c7		 mov	 eax, edi
  00033	83 e0 3f	 and	 eax, 63			; 0000003fH
  00036	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  00039	89 7e 38	 mov	 DWORD PTR [esi+56], edi
  0003c	83 f8 01	 cmp	 eax, 1
  0003f	74 47		 je	 SHORT $LN4@Parser
  00041	85 c0		 test	 eax, eax
  00043	74 43		 je	 SHORT $LN4@Parser
  00045	83 f8 02	 cmp	 eax, 2
  00048	75 07		 jne	 SHORT $LN11@Parser
  0004a	b8 00 03 00 6e	 mov	 eax, 1845494528		; 6e000300H
  0004f	eb 3c		 jmp	 SHORT $LN13@Parser
$LN11@Parser:
  00051	83 f8 04	 cmp	 eax, 4
  00054	75 07		 jne	 SHORT $LN9@Parser
  00056	b8 1b 00 80 70	 mov	 eax, 1887436827		; 7080001bH
  0005b	eb 30		 jmp	 SHORT $LN13@Parser
$LN9@Parser:
  0005d	83 f8 08	 cmp	 eax, 8
  00060	75 07		 jne	 SHORT $LN7@Parser
  00062	b8 1b a0 81 71	 mov	 eax, 1904320539		; 7181a01bH
  00067	eb 24		 jmp	 SHORT $LN13@Parser
$LN7@Parser:
  00069	83 f8 10	 cmp	 eax, 16			; 00000010H
  0006c	75 07		 jne	 SHORT $LN5@Parser
  0006e	b8 04 03 08 6e	 mov	 eax, 1846018820		; 6e080304H
  00073	eb 18		 jmp	 SHORT $LN13@Parser
$LN5@Parser:
  00075	83 e8 20	 sub	 eax, 32			; 00000020H
  00078	f7 d8		 neg	 eax
  0007a	1b c0		 sbb	 eax, eax
  0007c	25 e1 ff 77 8f	 and	 eax, -1887961119	; 8f77ffe1H
  00081	05 1f 00 88 70	 add	 eax, 1887961119		; 7088001fH
  00086	eb 05		 jmp	 SHORT $LN13@Parser
$LN4@Parser:
  00088	b8 fb 5d 77 08	 mov	 eax, 142040571		; 08775dfbH
$LN13@Parser:
  0008d	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 5067 : 	if (_L_flags & _L_mtch_long)

  00090	a9 00 00 00 40	 test	 eax, 1073741824		; 40000000H
  00095	74 07		 je	 SHORT $LN30@Parser

; 5068 : 		_Nfa._Setlong();

  00097	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0009a	83 48 08 08	 or	 DWORD PTR [eax+8], 8
$LN30@Parser:

; 5069 : 	_Trans();

  0009e	8b ce		 mov	 ecx, esi
  000a0	e8 00 00 00 00	 call	 ?_Trans@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Trans
  000a5	5f		 pop	 edi

; 5070 : 	}

  000a6	8b c6		 mov	 eax, esi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	5d		 pop	 ebp
  000ab	c2 10 00	 ret	 16			; 00000010H
??0?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@PBD1W4syntax_option_type@regex_constants@12@@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Parser<char const *,char,std::tr1::regex_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 96   : 	for (; _First != _Last; ++_First)
; 97   : 		_Dest_val(_Al, _First);
; 98   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??0?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PAV_Root_node@12@IW4syntax_option_type@regex_constants@12@W4match_flag_type@612@@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??0?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PAV_Root_node@12@IW4syntax_option_type@regex_constants@12@W4match_flag_type@612@@Z
_TEXT	SEGMENT
__Pfirst$ = 8						; size = 4
__Plast$ = 12						; size = 4
__Re$ = 16						; size = 4
__Nx$ = 20						; size = 4
__Sf$ = 24						; size = 4
__Mf$ = 28						; size = 4
??0?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PAV_Root_node@12@IW4syntax_option_type@regex_constants@12@W4match_flag_type@612@@Z PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1739 : 		{	// construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	e8 00 00 00 00	 call	 ??0?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ
  0000c	8d 8e 08 01 00
	00		 lea	 ecx, DWORD PTR [esi+264]
  00012	e8 00 00 00 00	 call	 ??0?$_Tgt_state_t@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QAE@XZ
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Plast$[ebp]
  0001a	8b 55 18	 mov	 edx, DWORD PTR __Sf$[ebp]
  0001d	8a 5d 14	 mov	 bl, BYTE PTR __Nx$[ebp]
  00020	33 c9		 xor	 ecx, ecx
  00022	89 8e 10 02 00
	00		 mov	 DWORD PTR [esi+528], ecx
  00028	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax
  0002e	8b 45 08	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00031	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
  00037	8b 45 10	 mov	 eax, DWORD PTR __Re$[ebp]
  0003a	89 96 20 02 00
	00		 mov	 DWORD PTR [esi+544], edx
  00040	8b 55 1c	 mov	 edx, DWORD PTR __Mf$[ebp]
  00043	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
  00049	89 96 24 02 00
	00		 mov	 DWORD PTR [esi+548], edx
  0004f	88 8e 28 02 00
	00		 mov	 BYTE PTR [esi+552], cl
  00055	88 9e 2a 02 00
	00		 mov	 BYTE PTR [esi+554], bl
  0005b	f6 40 08 08	 test	 BYTE PTR [eax+8], 8
  0005f	74 0a		 je	 SHORT $LN3@Matcher
  00061	f6 c2 10	 test	 dl, 16			; 00000010H
  00064	75 05		 jne	 SHORT $LN3@Matcher
  00066	33 c0		 xor	 eax, eax
  00068	40		 inc	 eax
  00069	eb 02		 jmp	 SHORT $LN4@Matcher
$LN3@Matcher:
  0006b	33 c0		 xor	 eax, eax
$LN4@Matcher:
  0006d	88 86 2b 02 00
	00		 mov	 BYTE PTR [esi+555], al
  00073	89 8e 2c 02 00
	00		 mov	 DWORD PTR [esi+556], ecx
  00079	89 8e 30 02 00
	00		 mov	 DWORD PTR [esi+560], ecx
  0007f	8d 8e 34 02 00
	00		 lea	 ecx, DWORD PTR [esi+564]
  00085	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale

; 1740 : 		_DEBUG_RANGE(_Pfirst, _Plast);
; 1741 : 		}

  0008a	8b c6		 mov	 eax, esi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	5d		 pop	 ebp
  0008f	c2 18 00	 ret	 24			; 00000018H
??0?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PAV_Root_node@12@IW4syntax_option_type@regex_constants@12@W4match_flag_type@612@@Z ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00@Z ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00@Z
_TEXT	SEGMENT
__Cat$519740 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00@Z PROC ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>, COMDAT

; 2533 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2534 : 	return (_Move(_First, _Last,
; 2535 : 		_Dest, _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$519740[ebp]
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2536 : 	}

  00018	c9		 leave
  00019	c3		 ret	 0
??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00@Z ENDP ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
_TEXT	ENDS
PUBLIC	??1?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAE@XZ ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::~_Node_class<char,std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??1?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAE@XZ
_TEXT	SEGMENT
??1?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAE@XZ PROC ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::~_Node_class<char,std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 1520 : 		{	// destroy

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 1521 : 		_Tidy(_Coll);

  00005	ff 76 14	 push	 DWORD PTR [esi+20]
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@6B@
  0000e	e8 00 00 00 00	 call	 ?_Tidy@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAU?$_Sequence@D@23@@Z ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Tidy

; 1522 : 		delete _Small;

  00013	ff 76 18	 push	 DWORD PTR [esi+24]
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 1523 : 		delete _Large;

  0001b	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  0001e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__free
  00024	59		 pop	 ecx
  00025	85 ff		 test	 edi, edi
  00027	74 0d		 je	 SHORT $LN8@Node_class
  00029	ff 77 08	 push	 DWORD PTR [edi+8]
  0002c	ff d3		 call	 ebx
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00034	59		 pop	 ecx
  00035	59		 pop	 ecx
$LN8@Node_class:

; 1524 : 		delete _Ranges;

  00036	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00039	85 ff		 test	 edi, edi
  0003b	74 0d		 je	 SHORT $LN13@Node_class
  0003d	ff 77 08	 push	 DWORD PTR [edi+8]
  00040	ff d3		 call	 ebx
  00042	57		 push	 edi
  00043	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00048	59		 pop	 ecx
  00049	59		 pop	 ecx
$LN13@Node_class:

; 1525 : 		_Tidy(_Equiv);

  0004a	ff 76 28	 push	 DWORD PTR [esi+40]
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?_Tidy@?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAU?$_Sequence@D@23@@Z ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::_Tidy
  00054	5f		 pop	 edi

; 1526 : 		}

  00055	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@tr1@std@@6B@
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	c3		 ret	 0
??1?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAE@XZ ENDP ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::~_Node_class<char,std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAEPAXI@Z PROC ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAE@XZ ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::~_Node_class<char,std::tr1::regex_traits<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@17
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@17:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G?$_Node_class@DV?$regex_traits@D@tr1@std@@@tr1@std@@UAEPAXI@Z ENDP ; std::tr1::_Node_class<char,std::tr1::regex_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$distance@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::distance<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$distance@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::distance<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 900  : 	{	// return distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 901  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 902  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]

; 903  : 	return (_Off);
; 904  : 	}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$distance@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::distance<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z
_TEXT	SEGMENT
__Res$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Pred$ = 28						; size = 4
__Partial$ = 32						; size = 1
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z PROC ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >, COMDAT

; 3736 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3737 : 	_BidIt1 _Res = _Begin1;

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx
  0000a	57		 push	 edi

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  0000b	8b 7d 14	 mov	 edi, DWORD PTR __Begin2$[ebp]
  0000e	89 75 fc	 mov	 DWORD PTR __Res$[ebp], esi
  00011	eb 23		 jmp	 SHORT $LN30@Cmp_chrang
$LL3@Cmp_chrang:
  00013	3b 7d 18	 cmp	 edi, DWORD PTR __End2$[ebp]
  00016	74 28		 je	 SHORT $LN28@Cmp_chrang

; 3739 : 		if (!_Pred(*_Begin1++, *_Begin2++))

  00018	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0001b	8b ca		 mov	 ecx, edx
  0001d	42		 inc	 edx
  0001e	50		 push	 eax
  0001f	89 55 0c	 mov	 DWORD PTR __Begin1$[ebp], edx
  00022	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00025	50		 push	 eax
  00026	8d 4d 1c	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00029	e8 00 00 00 00	 call	 ??R?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::operator()
  0002e	47		 inc	 edi
  0002f	84 c0		 test	 al, al
  00031	74 12		 je	 SHORT $LN27@Cmp_chrang

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  00033	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
$LN30@Cmp_chrang:
  00036	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  00039	75 d8		 jne	 SHORT $LL3@Cmp_chrang

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  0003b	3b 7d 18	 cmp	 edi, DWORD PTR __End2$[ebp]
  0003e	75 0c		 jne	 SHORT $LN8@Cmp_chrang
$LN28@Cmp_chrang:
  00040	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00043	eb 18		 jmp	 SHORT $LN7@Cmp_chrang
$LN27@Cmp_chrang:

; 3740 : 			return (_Res);

  00045	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00048	89 30		 mov	 DWORD PTR [eax], esi
  0004a	eb 18		 jmp	 SHORT $LN4@Cmp_chrang
$LN8@Cmp_chrang:

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  0004c	80 7d 20 00	 cmp	 BYTE PTR __Partial$[ebp], 0
  00050	74 08		 je	 SHORT $LN6@Cmp_chrang
  00052	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00055	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  00058	74 03		 je	 SHORT $LN7@Cmp_chrang
$LN6@Cmp_chrang:
  0005a	8d 45 fc	 lea	 eax, DWORD PTR __Res$[ebp]
$LN7@Cmp_chrang:
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00062	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Cmp_chrang:
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 3744 : 	}

  00066	c9		 leave
  00067	c3		 ret	 0
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z ENDP ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >
_TEXT	ENDS
PUBLIC	??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z
_TEXT	SEGMENT
__Res$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Pred$ = 28						; size = 1
__Partial$ = 32						; size = 1
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z PROC ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >, COMDAT

; 3736 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 3737 : 	_BidIt1 _Res = _Begin1;

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Begin1$[ebp]
  00008	8b ce		 mov	 ecx, esi
  0000a	57		 push	 edi

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  0000b	8b 7d 14	 mov	 edi, DWORD PTR __Begin2$[ebp]
  0000e	89 4d fc	 mov	 DWORD PTR __Res$[ebp], ecx
$LN32@Cmp_chrang@2:
  00011	3b 75 10	 cmp	 esi, DWORD PTR __End1$[ebp]
  00014	74 14		 je	 SHORT $LN2@Cmp_chrang@2
  00016	3b 7d 18	 cmp	 edi, DWORD PTR __End2$[ebp]
  00019	74 14		 je	 SHORT $LN30@Cmp_chrang@2

; 3739 : 		if (!_Pred(*_Begin1++, *_Begin2++))

  0001b	8a 17		 mov	 dl, BYTE PTR [edi]
  0001d	8b c6		 mov	 eax, esi
  0001f	46		 inc	 esi
  00020	89 75 0c	 mov	 DWORD PTR __Begin1$[ebp], esi
  00023	47		 inc	 edi
  00024	38 10		 cmp	 BYTE PTR [eax], dl
  00026	75 1f		 jne	 SHORT $LN29@Cmp_chrang@2
  00028	eb e7		 jmp	 SHORT $LN32@Cmp_chrang@2
$LN2@Cmp_chrang@2:

; 3740 : 			return (_Res);
; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  0002a	3b 7d 18	 cmp	 edi, DWORD PTR __End2$[ebp]
  0002d	75 05		 jne	 SHORT $LN8@Cmp_chrang@2
$LN30@Cmp_chrang@2:
  0002f	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00032	eb 11		 jmp	 SHORT $LN7@Cmp_chrang@2
$LN8@Cmp_chrang@2:
  00034	80 7d 20 00	 cmp	 BYTE PTR __Partial$[ebp], 0
  00038	74 08		 je	 SHORT $LN6@Cmp_chrang@2
  0003a	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  0003d	3b 75 10	 cmp	 esi, DWORD PTR __End1$[ebp]
  00040	74 03		 je	 SHORT $LN7@Cmp_chrang@2
$LN6@Cmp_chrang@2:
  00042	8d 45 fc	 lea	 eax, DWORD PTR __Res$[ebp]
$LN7@Cmp_chrang@2:
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN29@Cmp_chrang@2:
  00047	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004a	5f		 pop	 edi
  0004b	89 08		 mov	 DWORD PTR [eax], ecx
  0004d	5e		 pop	 esi

; 3744 : 	}

  0004e	c9		 leave
  0004f	c3		 ret	 0
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z ENDP ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >
_TEXT	ENDS
PUBLIC	??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z
_TEXT	SEGMENT
__Res$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Pred$ = 28						; size = 4
__Partial$ = 32						; size = 1
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z PROC ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >, COMDAT

; 3736 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3737 : 	_BidIt1 _Res = _Begin1;

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx
  0000a	89 75 fc	 mov	 DWORD PTR __Res$[ebp], esi
  0000d	eb 28		 jmp	 SHORT $LN45@Cmp_chrang@3
$LL3@Cmp_chrang@3:

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  0000f	8b 45 14	 mov	 eax, DWORD PTR __Begin2$[ebp]
  00012	3b 45 18	 cmp	 eax, DWORD PTR __End2$[ebp]
  00015	74 2d		 je	 SHORT $LN44@Cmp_chrang@3

; 3739 : 		if (!_Pred(*_Begin1++, *_Begin2++))

  00017	ff 45 14	 inc	 DWORD PTR __Begin2$[ebp]
  0001a	8b ca		 mov	 ecx, edx
  0001c	42		 inc	 edx
  0001d	89 55 0c	 mov	 DWORD PTR __Begin1$[ebp], edx
  00020	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00023	50		 push	 eax
  00024	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00027	50		 push	 eax
  00028	8d 4d 1c	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0002b	e8 00 00 00 00	 call	 ??R?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_icase<std::tr1::regex_traits<char> >::operator()
  00030	84 c0		 test	 al, al
  00032	74 15		 je	 SHORT $LN43@Cmp_chrang@3

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  00034	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
$LN45@Cmp_chrang@3:
  00037	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  0003a	75 d3		 jne	 SHORT $LL3@Cmp_chrang@3

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  0003c	8b 45 14	 mov	 eax, DWORD PTR __Begin2$[ebp]
  0003f	3b 45 18	 cmp	 eax, DWORD PTR __End2$[ebp]
  00042	75 0c		 jne	 SHORT $LN8@Cmp_chrang@3
$LN44@Cmp_chrang@3:
  00044	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00047	eb 18		 jmp	 SHORT $LN7@Cmp_chrang@3
$LN43@Cmp_chrang@3:

; 3740 : 			return (_Res);

  00049	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004c	89 30		 mov	 DWORD PTR [eax], esi
  0004e	eb 18		 jmp	 SHORT $LN4@Cmp_chrang@3
$LN8@Cmp_chrang@3:

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  00050	80 7d 20 00	 cmp	 BYTE PTR __Partial$[ebp], 0
  00054	74 08		 je	 SHORT $LN6@Cmp_chrang@3
  00056	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00059	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  0005c	74 03		 je	 SHORT $LN7@Cmp_chrang@3
$LN6@Cmp_chrang@3:
  0005e	8d 45 fc	 lea	 eax, DWORD PTR __Res$[ebp]
$LN7@Cmp_chrang@3:
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00066	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Cmp_chrang@3:
  00068	5e		 pop	 esi

; 3744 : 	}

  00069	c9		 leave
  0006a	c3		 ret	 0
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z ENDP ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >
_TEXT	ENDS
PUBLIC	??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z
_TEXT	SEGMENT
__Res$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Pred$ = 28						; size = 1
__Partial$ = 32						; size = 1
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z PROC ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >, COMDAT

; 3736 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3737 : 	_BidIt1 _Res = _Begin1;

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
  00007	56		 push	 esi

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  00008	8b 75 18	 mov	 esi, DWORD PTR __End2$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 10	 mov	 edi, DWORD PTR __End1$[ebp]
  0000f	89 55 fc	 mov	 DWORD PTR __Res$[ebp], edx
  00012	3b d7		 cmp	 edx, edi
  00014	74 1c		 je	 SHORT $LN47@Cmp_chrang@4
$LL3@Cmp_chrang@4:
  00016	39 75 14	 cmp	 DWORD PTR __Begin2$[ebp], esi
  00019	74 1c		 je	 SHORT $LN46@Cmp_chrang@4

; 3739 : 		if (!_Pred(*_Begin1++, *_Begin2++))

  0001b	8b 45 14	 mov	 eax, DWORD PTR __Begin2$[ebp]
  0001e	ff 45 14	 inc	 DWORD PTR __Begin2$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Begin1$[ebp]
  00024	ff 45 0c	 inc	 DWORD PTR __Begin1$[ebp]
  00027	8a 09		 mov	 cl, BYTE PTR [ecx]
  00029	3a 08		 cmp	 cl, BYTE PTR [eax]
  0002b	75 0f		 jne	 SHORT $LN45@Cmp_chrang@4

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  0002d	39 7d 0c	 cmp	 DWORD PTR __Begin1$[ebp], edi
  00030	75 e4		 jne	 SHORT $LL3@Cmp_chrang@4
$LN47@Cmp_chrang@4:

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  00032	39 75 14	 cmp	 DWORD PTR __Begin2$[ebp], esi
  00035	75 0c		 jne	 SHORT $LN8@Cmp_chrang@4
$LN46@Cmp_chrang@4:
  00037	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  0003a	eb 18		 jmp	 SHORT $LN7@Cmp_chrang@4
$LN45@Cmp_chrang@4:

; 3740 : 			return (_Res);

  0003c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003f	89 10		 mov	 DWORD PTR [eax], edx
  00041	eb 18		 jmp	 SHORT $LN4@Cmp_chrang@4
$LN8@Cmp_chrang@4:

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  00043	80 7d 20 00	 cmp	 BYTE PTR __Partial$[ebp], 0
  00047	74 08		 je	 SHORT $LN6@Cmp_chrang@4
  00049	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  0004c	39 7d 0c	 cmp	 DWORD PTR __Begin1$[ebp], edi
  0004f	74 03		 je	 SHORT $LN7@Cmp_chrang@4
$LN6@Cmp_chrang@4:
  00051	8d 45 fc	 lea	 eax, DWORD PTR __Res$[ebp]
$LN7@Cmp_chrang@4:
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00059	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Cmp_chrang@4:
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 3744 : 	}

  0005d	c9		 leave
  0005e	c3		 ret	 0
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z ENDP ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >
_TEXT	ENDS
PUBLIC	?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_DecimalDigits
; Function compile flags: /Ogsp
;	COMDAT ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ
_TEXT	SEGMENT
?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_DecimalDigits, COMDAT
; _this$ = ecx

; 4445 : 	{	// check for decimal value

  00000	56		 push	 esi

; 4446 : 	return (_Do_digits(10, INT_MAX) != INT_MAX);

  00001	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00006	56		 push	 esi
  00007	6a 0a		 push	 10			; 0000000aH
  00009	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits
  0000e	33 c9		 xor	 ecx, ecx
  00010	3b c6		 cmp	 eax, esi
  00012	0f 95 c0	 setne	 al
  00015	5e		 pop	 esi

; 4447 : 	}

  00016	c3		 ret	 0
?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_DecimalDigits
_TEXT	ENDS
PUBLIC	?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterEscape
EXTRN	__imp_?max@?$numeric_limits@D@std@@SADXZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ
_TEXT	SEGMENT
$T520094 = -4						; size = 1
?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterEscape, COMDAT
; _this$ = ecx

; 4806 : 	{	// check for valid character escape

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 4807 : 	if (_L_flags & _L_esc_ffn && _Do_ffn(_Char)
; 4808 : 		|| _L_flags & _L_esc_ffnx && _Do_ffnx(_Char))

  00007	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  0000d	8b f1		 mov	 esi, ecx
  0000f	f7 46 44 00 00
	01 00		 test	 DWORD PTR [esi+68], 65536 ; 00010000H
  00016	6a 02		 push	 2
  00018	5b		 pop	 ebx
  00019	74 0e		 je	 SHORT $LN13@CharacterE
  0001b	0f b6 46 3e	 movzx	 eax, BYTE PTR [esi+62]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffn
  00025	84 c0		 test	 al, al
  00027	75 6c		 jne	 SHORT $LN14@CharacterE
$LN13@CharacterE:
  00029	f7 46 44 00 80
	00 00		 test	 DWORD PTR [esi+68], 32768 ; 00008000H
  00030	74 10		 je	 SHORT $LN15@CharacterE
  00032	0f b6 46 3e	 movzx	 eax, BYTE PTR [esi+62]
  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffnx
  0003e	84 c0		 test	 al, al

; 4809 : 		_Next();

  00040	75 53		 jne	 SHORT $LN14@CharacterE
$LN15@CharacterE:

; 4810 : 	else if (_Char == _Esc_ctrl && (_L_flags & _L_esc_ctrl))

  00042	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  00045	3c 63		 cmp	 al, 99			; 00000063H
  00047	75 55		 jne	 SHORT $LN11@CharacterE
  00049	f7 46 44 00 00
	04 00		 test	 DWORD PTR [esi+68], 262144 ; 00040000H
  00050	74 4c		 je	 SHORT $LN11@CharacterE

; 4811 : 		{	// handle control escape sequence
; 4812 : 		_Next();

  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4813 : 		if (!_Traits.isctype(_Char, _RxTraits::_Ch_alpha))

  00059	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  0005c	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0005f	88 45 fc	 mov	 BYTE PTR $T520094[ebp], al
  00062	ff 75 fc	 push	 DWORD PTR $T520094[ebp]
  00065	68 03 01 00 00	 push	 259			; 00000103H
  0006a	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  0006f	8b c8		 mov	 ecx, eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  00077	84 c0		 test	 al, al
  00079	75 04		 jne	 SHORT $LN24@CharacterE

; 4814 : 			_Error(regex_constants::error_escape);

  0007b	53		 push	 ebx
  0007c	ff d7		 call	 edi
  0007e	59		 pop	 ecx
$LN24@CharacterE:

; 4815 : 		_Val = (char)(_Char % 32);

  0007f	0f be 46 3e	 movsx	 eax, BYTE PTR [esi+62]
  00083	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00088	79 05		 jns	 SHORT $LN42@CharacterE
  0008a	48		 dec	 eax
  0008b	83 c8 e0	 or	 eax, -32		; ffffffe0H
  0008e	40		 inc	 eax
$LN42@CharacterE:
  0008f	66 98		 cbw
  00091	66 89 46 3c	 mov	 WORD PTR [esi+60], ax
$LN14@CharacterE:

; 4816 : 		_Next();

  00095	8b ce		 mov	 ecx, esi
  00097	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
  0009c	eb 60		 jmp	 SHORT $LN38@CharacterE
$LN11@CharacterE:

; 4817 : 		}
; 4818 : 	else if (_Char == _Esc_hex && (_L_flags & _L_esc_hex))

  0009e	3c 78		 cmp	 al, 120			; 00000078H
  000a0	75 20		 jne	 SHORT $LN8@CharacterE
  000a2	f7 46 44 00 10
	00 00		 test	 DWORD PTR [esi+68], 4096 ; 00001000H
  000a9	74 17		 je	 SHORT $LN8@CharacterE

; 4819 : 		{	// handle hexadecimal escape sequence
; 4820 : 		_Next();

  000ab	8b ce		 mov	 ecx, esi
  000ad	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4821 : 		_HexDigits(2);

  000b2	53		 push	 ebx
$LN44@CharacterE:
  000b3	6a 10		 push	 16			; 00000010H
  000b5	8b ce		 mov	 ecx, esi
  000b7	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits
  000bc	85 c0		 test	 eax, eax
  000be	74 3e		 je	 SHORT $LN38@CharacterE
  000c0	eb 38		 jmp	 SHORT $LN43@CharacterE
$LN8@CharacterE:

; 4822 : 		}
; 4823 : 	else if (_Char == _Esc_uni && (_L_flags & _L_esc_uni))

  000c2	3c 75		 cmp	 al, 117			; 00000075H
  000c4	75 14		 jne	 SHORT $LN6@CharacterE
  000c6	f7 46 44 00 08
	00 00		 test	 DWORD PTR [esi+68], 2048 ; 00000800H
  000cd	74 0b		 je	 SHORT $LN6@CharacterE

; 4824 : 		{	// handle unicode escape sequence
; 4825 : 		_Next();

  000cf	8b ce		 mov	 ecx, esi
  000d1	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4826 : 		_HexDigits(4);

  000d6	6a 04		 push	 4
  000d8	eb d9		 jmp	 SHORT $LN44@CharacterE
$LN6@CharacterE:

; 4827 : 		}
; 4828 : 	else if ((_L_flags & _L_esc_oct) && _OctalDigits())

  000da	f7 46 44 00 20
	00 00		 test	 DWORD PTR [esi+68], 8192 ; 00002000H
  000e1	74 34		 je	 SHORT $LN4@CharacterE
  000e3	6a 03		 push	 3
  000e5	6a 08		 push	 8
  000e7	8b ce		 mov	 ecx, esi
  000e9	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEHHH@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_digits
  000ee	83 f8 03	 cmp	 eax, 3
  000f1	74 24		 je	 SHORT $LN4@CharacterE

; 4829 : 		{	// handle octal escape sequence
; 4830 : 		if (_Val == 0)

  000f3	66 83 7e 3c 00	 cmp	 WORD PTR [esi+60], 0
  000f8	75 04		 jne	 SHORT $LN38@CharacterE
$LN43@CharacterE:

; 4831 : 			_Error(regex_constants::error_escape);

  000fa	53		 push	 ebx
  000fb	ff d7		 call	 edi
  000fd	59		 pop	 ecx
$LN38@CharacterE:

; 4835 : 
; 4836 : 	if ((_STD numeric_limits<_Elem>::max)() < _Val)

  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max@?$numeric_limits@D@std@@SADXZ
  00104	0f b7 4e 3c	 movzx	 ecx, WORD PTR [esi+60]
  00108	0f be c0	 movsx	 eax, al
  0010b	3b c1		 cmp	 eax, ecx
  0010d	7d 04		 jge	 SHORT $LN40@CharacterE

; 4837 : 		_Error(regex_constants::error_escape);

  0010f	53		 push	 ebx
  00110	ff d7		 call	 edi
  00112	59		 pop	 ecx
$LN40@CharacterE:

; 4838 : 	return (true);

  00113	b0 01		 mov	 al, 1
  00115	eb 07		 jmp	 SHORT $LN16@CharacterE
$LN4@CharacterE:

; 4832 : 		}
; 4833 : 	else
; 4834 : 		return (_IdentityEscape());

  00117	8b ce		 mov	 ecx, esi
  00119	e8 00 00 00 00	 call	 ?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_IdentityEscape
$LN16@CharacterE:
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 4839 : 	}

  00121	c9		 leave
  00122	c3		 ret	 0
?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterEscape
_TEXT	ENDS
PUBLIC	?_Max@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class'::`2'::_Max
PUBLIC	?_Min@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class'::`2'::_Min
PUBLIC	?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class
;	COMDAT ?_Min@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA
_BSS	SEGMENT
?_Min@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA DD 01H DUP (?) ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class'::`2'::_Min
_BSS	ENDS
;	COMDAT ?_Max@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA
_DATA	SEGMENT
?_Max@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA DD 0100H ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class'::`2'::_Max
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class, COMDAT
; _this$ = ecx

; 3313 : 	{	// add character to bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3314 : 	static int _Max = _Bmp_max;	// to quiet diagnostics
; 3315 : 	static int _Min = 0;
; 3316 : 
; 3317 : 	if (_Min <= _Ch && _Ch < _Max)

  00003	0f be 45 08	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	39 05 00 00 00
	00		 cmp	 DWORD PTR ?_Min@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA, eax ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class'::`2'::_Min
  0000d	7f 0e		 jg	 SHORT $LN2@Add_char_t@3
  0000f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?_Max@?1??_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z@4HA ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class'::`2'::_Max
  00015	7d 06		 jge	 SHORT $LN2@Add_char_t@3

; 3321 : 	}

  00017	5d		 pop	 ebp

; 3318 : 		_Add_char_to_bitmap(_Ch);

  00018	e9 00 00 00 00	 jmp	 ?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_bitmap
$LN2@Add_char_t@3:

; 3321 : 	}

  0001d	5d		 pop	 ebp

; 3319 : 	else
; 3320 : 		_Add_char_to_array(_Ch);

  0001e	e9 00 00 00 00	 jmp	 ?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_array
?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@$$QAV342@@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::construct
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@$$QAV342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@$$QAV342@@Z PROC ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 13		 je	 SHORT $LN3@construct@2
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00014	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00017	8a 49 08	 mov	 cl, BYTE PTR [ecx+8]
  0001a	88 48 08	 mov	 BYTE PTR [eax+8], cl
$LN3@construct@2:

; 203  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?construct@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@$$QAV342@@Z ENDP ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::construct
_TEXT	ENDS
PUBLIC	?_Add_range@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXDD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_range
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Add_range@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXDD@Z
_TEXT	SEGMENT
tv238 = -4						; size = 4
__E0$ = 8						; size = 1
__E1$ = 12						; size = 1
?_Add_range@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXDD@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_range, COMDAT
; _this$ = ecx

; 3327 : 	{	// add character range to set

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 3328 : 	if (_Flags & regex_constants::icase)

  00008	f7 46 0c 00 01
	00 00		 test	 DWORD PTR [esi+12], 256	; 00000100H
  0000f	74 2c		 je	 SHORT $LN41@Add_range

; 3329 : 		{	// change to lowercase range
; 3330 : 		_E0 = _Traits.translate_nocase(_E0);

  00011	ff 75 08	 push	 DWORD PTR __E0$[ebp]
  00014	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00017	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z

; 3331 : 		_E1 = _Traits.translate_nocase(_E1);

  00024	ff 75 0c	 push	 DWORD PTR __E1$[ebp]
  00027	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0002a	88 45 08	 mov	 BYTE PTR __E0$[ebp], al
  0002d	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00032	8b c8		 mov	 ecx, eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  0003a	88 45 0c	 mov	 BYTE PTR __E1$[ebp], al
$LN41@Add_range:

; 3332 : 		}
; 3333 : 	_Node_class<_Elem, _RxTraits> *_Node =
; 3334 : 		(_Node_class<_Elem, _RxTraits>*)_Current;
; 3335 : 	if (0 <= _E0)

  0003d	8a 45 08	 mov	 al, BYTE PTR __E0$[ebp]
  00040	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00043	84 c0		 test	 al, al
  00045	78 62		 js	 SHORT $LN43@Add_range

; 3336 : 		for (; _E0 <= _E1 && _E1 < _Bmax; ++_E0)

  00047	3a 45 0c	 cmp	 al, BYTE PTR __E1$[ebp]
  0004a	7f 5d		 jg	 SHORT $LN43@Add_range
  0004c	0f be 45 0c	 movsx	 eax, BYTE PTR __E1$[ebp]
  00050	89 45 fc	 mov	 DWORD PTR tv238[ebp], eax
  00053	57		 push	 edi
$LL42@Add_range:
  00054	8b 45 fc	 mov	 eax, DWORD PTR tv238[ebp]
  00057	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0005a	7d 4c		 jge	 SHORT $LN44@Add_range

; 3337 : 			{	// set a bit
; 3338 : 			if (!_Node->_Small)

  0005c	83 7b 18 00	 cmp	 DWORD PTR [ebx+24], 0
  00060	75 1c		 jne	 SHORT $LN9@Add_range

; 3339 : 				_Node->_Small = new _Bitmap;

  00062	6a 20		 push	 32			; 00000020H
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	33 c0		 xor	 eax, eax
  0006d	59		 pop	 ecx
  0006e	85 d2		 test	 edx, edx
  00070	74 09		 je	 SHORT $LN18@Add_range
  00072	6a 08		 push	 8
  00074	59		 pop	 ecx
  00075	8b fa		 mov	 edi, edx
  00077	f3 ab		 rep stosd
  00079	8b c2		 mov	 eax, edx
$LN18@Add_range:
  0007b	89 43 18	 mov	 DWORD PTR [ebx+24], eax
$LN9@Add_range:

; 3340 : 			_Node->_Small->_Mark(_E0);

  0007e	0f be 4d 08	 movsx	 ecx, BYTE PTR __E0$[ebp]
  00082	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00085	8b d1		 mov	 edx, ecx
  00087	c1 ea 03	 shr	 edx, 3
  0008a	03 c2		 add	 eax, edx
  0008c	83 e1 07	 and	 ecx, 7
  0008f	b2 01		 mov	 dl, 1
  00091	d2 e2		 shl	 dl, cl
  00093	08 10		 or	 BYTE PTR [eax], dl

; 3341 : 			if (_E0 == _E1)

  00095	8a 45 0c	 mov	 al, BYTE PTR __E1$[ebp]
  00098	38 45 08	 cmp	 BYTE PTR __E0$[ebp], al
  0009b	74 0b		 je	 SHORT $LN44@Add_range

; 3336 : 		for (; _E0 <= _E1 && _E1 < _Bmax; ++_E0)

  0009d	fe 45 08	 inc	 BYTE PTR __E0$[ebp]
  000a0	8a 45 08	 mov	 al, BYTE PTR __E0$[ebp]
  000a3	3a 45 0c	 cmp	 al, BYTE PTR __E1$[ebp]
  000a6	7e ac		 jle	 SHORT $LL42@Add_range
$LN44@Add_range:
  000a8	5f		 pop	 edi
$LN43@Add_range:

; 3342 : 				break;
; 3343 : 			}
; 3344 : 	if (_E1 - _E0 < _Tmax)

  000a9	8a 4d 08	 mov	 cl, BYTE PTR __E0$[ebp]
  000ac	0f be 55 0c	 movsx	 edx, BYTE PTR __E1$[ebp]
  000b0	0f be c1	 movsx	 eax, cl
  000b3	2b d0		 sub	 edx, eax
  000b5	3b 56 18	 cmp	 edx, DWORD PTR [esi+24]
  000b8	7d 21		 jge	 SHORT $LN7@Add_range

; 3345 : 		for (; _E0 <= _E1; ++_E0)

  000ba	3a 4d 0c	 cmp	 cl, BYTE PTR __E1$[ebp]
  000bd	7f 54		 jg	 SHORT $LN2@Add_range
$LL6@Add_range:

; 3346 : 			{	// add to list of elements
; 3347 : 			_Add_char_to_array(_E0);

  000bf	ff 75 08	 push	 DWORD PTR __E0$[ebp]
  000c2	8b ce		 mov	 ecx, esi
  000c4	e8 00 00 00 00	 call	 ?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_array

; 3348 : 			if (_E0 == _E1)

  000c9	8a 45 0c	 mov	 al, BYTE PTR __E1$[ebp]
  000cc	38 45 08	 cmp	 BYTE PTR __E0$[ebp], al
  000cf	74 42		 je	 SHORT $LN2@Add_range

; 3345 : 		for (; _E0 <= _E1; ++_E0)

  000d1	fe 45 08	 inc	 BYTE PTR __E0$[ebp]
  000d4	38 45 08	 cmp	 BYTE PTR __E0$[ebp], al
  000d7	7e e6		 jle	 SHORT $LL6@Add_range

; 3349 : 				break;
; 3350 : 			}
; 3351 : 	else

  000d9	eb 38		 jmp	 SHORT $LN2@Add_range
$LN7@Add_range:

; 3352 : 		{	// store remaining range as pair
; 3353 : 		if (!_Node->_Ranges)

  000db	33 f6		 xor	 esi, esi
  000dd	39 73 20	 cmp	 DWORD PTR [ebx+32], esi
  000e0	75 1b		 jne	 SHORT $LN1@Add_range

; 3354 : 			_Node->_Ranges = new _Buf<_Elem>;

  000e2	6a 0c		 push	 12			; 0000000cH
  000e4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e9	59		 pop	 ecx
  000ea	3b c6		 cmp	 eax, esi
  000ec	74 0a		 je	 SHORT $LN19@Add_range
  000ee	89 30		 mov	 DWORD PTR [eax], esi
  000f0	89 70 04	 mov	 DWORD PTR [eax+4], esi
  000f3	89 70 08	 mov	 DWORD PTR [eax+8], esi
  000f6	eb 02		 jmp	 SHORT $LN20@Add_range
$LN19@Add_range:
  000f8	33 c0		 xor	 eax, eax
$LN20@Add_range:
  000fa	89 43 20	 mov	 DWORD PTR [ebx+32], eax
$LN1@Add_range:

; 3355 : 		_Node->_Ranges->_Insert(_E0);

  000fd	ff 75 08	 push	 DWORD PTR __E0$[ebp]
  00100	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  00103	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z ; std::tr1::_Buf<char>::_Insert

; 3356 : 		_Node->_Ranges->_Insert(_E1);

  00108	ff 75 0c	 push	 DWORD PTR __E1$[ebp]
  0010b	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  0010e	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z ; std::tr1::_Buf<char>::_Insert
$LN2@Add_range:
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx

; 3357 : 		}
; 3358 : 	}

  00115	c9		 leave
  00116	c2 08 00	 ret	 8
?_Add_range@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXDD@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_range
_TEXT	ENDS
PUBLIC	?_Max@?1??_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z@4HA ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class'::`2'::_Max
PUBLIC	?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class
;	COMDAT ?_Max@?1??_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z@4HA
_DATA	SEGMENT
?_Max@?1??_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z@4HA DD 0100H ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class'::`2'::_Max
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z
_TEXT	SEGMENT
__Cl$ = 8						; size = 2
?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class, COMDAT
; _this$ = ecx

; 3381 : 	{	// add contents of named class to bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3382 : 	static int _Max = _Bmp_max;	// to quiet diagnostics
; 3383 : 
; 3384 : 	_Node_class<_Elem, _RxTraits> *_Node =
; 3385 : 		(_Node_class<_Elem, _RxTraits>*)_Current;

  00004	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00007	57		 push	 edi

; 3386 : 	_Add_elts(_Node, _Cl, _Traits);

  00008	ff 71 10	 push	 DWORD PTR [ecx+16]
  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Cl$[ebp]
  0000e	57		 push	 edi
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@tr1@std@@@23@FABV?$regex_traits@D@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_elts

; 3387 : 	if (_Max < (_STD numeric_limits<_Elem>::max)())

  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max@?$numeric_limits@D@std@@SADXZ
  0001b	0f be c0	 movsx	 eax, al
  0001e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?_Max@?1??_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z@4HA, eax ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class'::`2'::_Max
  00024	7d 04		 jge	 SHORT $LN1@Add_named_

; 3388 : 		_Node->_Classes =
; 3389 : 			(_Regex_traits_base::char_class_type)(_Node->_Classes | _Cl);

  00026	66 09 7e 24	 or	 WORD PTR [esi+36], di
$LN1@Add_named_:
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi

; 3390 : 	}

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
EXTRN	__imp_?_Orphan_all@_Container_base0@std@@QAEXXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ PROC	; std::vector<char,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN12@Tidy@4

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN12@Tidy@4:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Same@PBDPBDU?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@@tr1@std@@YA_NPBD000U?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@01@@Z ; std::tr1::_Same<char const *,char const *,std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??$_Same@PBDPBDU?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@@tr1@std@@YA_NPBD000U?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@01@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Same@PBDPBDU?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@@tr1@std@@YA_NPBD000U?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@01@@Z PROC ; std::tr1::_Same<char const *,char const *,std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> > >, COMDAT

; 268  : 	{	// return true if two sequences match using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 269  : 	while (_First1 != _Last1 && _First2 != _Last2)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First1$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __First2$[ebp]
  0000b	3b 75 0c	 cmp	 esi, DWORD PTR __Last1$[ebp]
  0000e	74 25		 je	 SHORT $LN10@Same
$LL3@Same:
  00010	3b 7d 14	 cmp	 edi, DWORD PTR __Last2$[ebp]
  00013	74 1b		 je	 SHORT $LN2@Same

; 270  : 		if (!_Pred(*_First1++, *_First2++))

  00015	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00018	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	8d 4d 18	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00020	e8 00 00 00 00	 call	 ??R?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> >::operator()
  00025	46		 inc	 esi
  00026	47		 inc	 edi
  00027	84 c0		 test	 al, al
  00029	74 14		 je	 SHORT $LN9@Same

; 269  : 	while (_First1 != _Last1 && _First2 != _Last2)

  0002b	3b 75 0c	 cmp	 esi, DWORD PTR __Last1$[ebp]
  0002e	75 e0		 jne	 SHORT $LL3@Same
$LN2@Same:

; 272  : 	return (_First1 == _Last1 && _First2 == _Last2);

  00030	3b 75 0c	 cmp	 esi, DWORD PTR __Last1$[ebp]
  00033	75 0e		 jne	 SHORT $LN6@Same
$LN10@Same:
  00035	3b 7d 14	 cmp	 edi, DWORD PTR __Last2$[ebp]
  00038	75 09		 jne	 SHORT $LN6@Same
  0003a	33 c0		 xor	 eax, eax
  0003c	40		 inc	 eax
  0003d	eb 06		 jmp	 SHORT $LN4@Same
$LN9@Same:

; 271  : 			return (false);

  0003f	32 c0		 xor	 al, al
  00041	eb 02		 jmp	 SHORT $LN4@Same
$LN6@Same:

; 272  : 	return (_First1 == _Last1 && _First2 == _Last2);

  00043	33 c0		 xor	 eax, eax
$LN4@Same:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 273  : 	}

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??$_Same@PBDPBDU?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@@tr1@std@@YA_NPBD000U?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@01@@Z ENDP ; std::tr1::_Same<char const *,char const *,std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> > >
_TEXT	ENDS
PUBLIC	?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_coll
; Function compile flags: /Ogsp
;	COMDAT ?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Diff$ = 16						; size = 4
?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_coll, COMDAT
; _this$ = ecx

; 3444 : 	{	// add collation element to bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3445 : 	_Node_class<_Elem, _RxTraits> *_Node =
; 3446 : 		(_Node_class<_Elem, _RxTraits>*)_Current;
; 3447 : 	_Sequence<_Elem> **_Cur = &_Node->_Coll;

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	83 c0 14	 add	 eax, 20			; 00000014H

; 3448 : 	_Char_to_elts(_First, _Last, _Diff, _Cur);

  00009	50		 push	 eax
  0000a	ff 75 10	 push	 DWORD PTR __Diff$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0HPAPAU?$_Sequence@D@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Char_to_elts

; 3449 : 	}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_coll
_TEXT	ENDS
PUBLIC	??$_Distance2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAIUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,unsigned int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAIUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,unsigned int>, COMDAT

; 885  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 887  : 	if (_First != _Last)
; 888  : 		{	// check for null pointers
; 889  : 		_DEBUG_POINTER(_First);
; 890  : 		_DEBUG_POINTER(_Last);
; 891  : 		}
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : 	_Off += _Last - _First;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 895  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >, COMDAT

; 369  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	eb 14		 jmp	 SHORT $LN50@Uninit_cop
$LL16@Uninit_cop:

; 376  : 		_Cons_val(_Al, _Dest, *_First);

  00008	83 7d 10 00	 cmp	 DWORD PTR __Dest$[ebp], 0
  0000c	74 07		 je	 SHORT $LN34@Uninit_cop
  0000e	8a 08		 mov	 cl, BYTE PTR [eax]
  00010	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00013	88 0a		 mov	 BYTE PTR [edx], cl
$LN34@Uninit_cop:

; 370  : 	_DEBUG_RANGE(_First, _Last);
; 371  : 	_DEBUG_POINTER(_Dest);
; 372  : 	_FwdIt _Next = _Dest;
; 373  : 
; 374  : 	_TRY_BEGIN
; 375  : 	for (; _First != _Last; ++_Dest, ++_First)

  00015	ff 45 10	 inc	 DWORD PTR __Dest$[ebp]
  00018	40		 inc	 eax
  00019	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN50@Uninit_cop:
  0001c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001f	75 e7		 jne	 SHORT $LL16@Uninit_cop

; 377  : 	_CATCH_ALL
; 378  : 	for (; _Next != _Dest; ++_Next)
; 379  : 		_Dest_val(_Al, _Next);
; 380  : 	_RERAISE;
; 381  : 	_CATCH_END
; 382  : 	return (_Dest);

  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 383  : 	}

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Rotate@PADHD@std@@YAXPAD00PAH0@Z		; std::_Rotate<char *,int,char>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Rotate@PADHD@std@@YAXPAD00PAH0@Z
_TEXT	SEGMENT
tv254 = -16						; size = 4
tv239 = -12						; size = 4
tv243 = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
tv241 = 12						; size = 4
__Factor$515241 = 12					; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Rotate@PADHD@std@@YAXPAD00PAH0@Z PROC		; std::_Rotate<char *,int,char>, COMDAT

; 3256 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3257 : 	_Diff _Shift = _Mid - _First;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00009	53		 push	 ebx

; 3258 : 	_Diff _Count = _Last - _First;

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00011	57		 push	 edi
  00012	2b ce		 sub	 ecx, esi
  00014	8b fb		 mov	 edi, ebx
  00016	2b fe		 sub	 edi, esi
  00018	8b c7		 mov	 eax, edi
  0001a	89 7d fc	 mov	 DWORD PTR __Count$[ebp], edi

; 3259 : 
; 3260 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

  0001d	89 4d 0c	 mov	 DWORD PTR __Factor$515241[ebp], ecx
  00020	85 c9		 test	 ecx, ecx
  00022	74 11		 je	 SHORT $LN8@Rotate
$LL9@Rotate:

; 3261 : 		{	// find subcycle count as GCD of shift count and length
; 3262 : 		_Diff _Tmp = _Count % _Factor;

  00024	99		 cdq
  00025	f7 7d 0c	 idiv	 DWORD PTR __Factor$515241[ebp]

; 3263 : 		_Count = _Factor;

  00028	8b 45 0c	 mov	 eax, DWORD PTR __Factor$515241[ebp]

; 3264 : 		_Factor = _Tmp;

  0002b	89 55 0c	 mov	 DWORD PTR __Factor$515241[ebp], edx
  0002e	85 d2		 test	 edx, edx
  00030	75 f2		 jne	 SHORT $LL9@Rotate

; 3263 : 		_Count = _Factor;

  00032	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
$LN8@Rotate:

; 3265 : 		}
; 3266 : 
; 3267 : 	if (_Count < _Last - _First)

  00035	3b c7		 cmp	 eax, edi
  00037	7d 6e		 jge	 SHORT $LN4@Rotate

; 3268 : 		for (; 0 < _Count; --_Count)

  00039	85 c0		 test	 eax, eax
  0003b	7e 6a		 jle	 SHORT $LN4@Rotate
  0003d	89 75 f4	 mov	 DWORD PTR tv239[ebp], esi
  00040	f7 5d f4	 neg	 DWORD PTR tv239[ebp]
  00043	89 4d 0c	 mov	 DWORD PTR tv241[ebp], ecx
  00046	f7 5d 0c	 neg	 DWORD PTR tv241[ebp]
  00049	89 5d f8	 mov	 DWORD PTR tv243[ebp], ebx
  0004c	f7 5d f8	 neg	 DWORD PTR tv243[ebp]
  0004f	03 c6		 add	 eax, esi
  00051	89 45 f0	 mov	 DWORD PTR tv254[ebp], eax
  00054	eb 03		 jmp	 SHORT $LN6@Rotate
$LL32@Rotate:
  00056	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
$LN6@Rotate:

; 3269 : 			{	// rotate each subcycle
; 3270 : 			_RanIt _Hole = _First + _Count;
; 3271 : 			_RanIt _Next = _Hole;

  00059	8b f8		 mov	 edi, eax

; 3272 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  0005b	03 c1		 add	 eax, ecx
  0005d	3b c3		 cmp	 eax, ebx
  0005f	0f 45 f0	 cmovne	 esi, eax

; 3273 : 			for (; ; )
; 3274 : 				{	// percolate elements back around subcycle
; 3275 : 				iter_swap(_Next, _Next1);

  00062	8b d6		 mov	 edx, esi
  00064	f7 da		 neg	 edx
$LL3@Rotate:
  00066	8a 07		 mov	 al, BYTE PTR [edi]
  00068	8a 1e		 mov	 bl, BYTE PTR [esi]
  0006a	88 1f		 mov	 BYTE PTR [edi], bl

; 3276 : 				_Next = _Next1;
; 3277 : 				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
; 3278 : 					: _First + (_Shift - (_Last - _Next1));

  0006c	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0006f	88 06		 mov	 BYTE PTR [esi], al
  00071	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  00074	8b fe		 mov	 edi, esi
  00076	3b c8		 cmp	 ecx, eax
  00078	7d 07		 jge	 SHORT $LN14@Rotate
  0007a	03 f1		 add	 esi, ecx
  0007c	03 55 0c	 add	 edx, DWORD PTR tv241[ebp]
  0007f	eb 12		 jmp	 SHORT $LN15@Rotate
$LN14@Rotate:
  00081	2b 55 f8	 sub	 edx, DWORD PTR tv243[ebp]
  00084	8b c1		 mov	 eax, ecx
  00086	03 55 0c	 add	 edx, DWORD PTR tv241[ebp]
  00089	2b c3		 sub	 eax, ebx
  0008b	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0008e	03 f0		 add	 esi, eax
  00090	03 55 f4	 add	 edx, DWORD PTR tv239[ebp]
$LN15@Rotate:

; 3279 : 				if (_Next1 == _Hole)

  00093	8b 45 f0	 mov	 eax, DWORD PTR tv254[ebp]
  00096	3b f0		 cmp	 esi, eax
  00098	75 cc		 jne	 SHORT $LL3@Rotate

; 3268 : 		for (; 0 < _Count; --_Count)

  0009a	ff 4d fc	 dec	 DWORD PTR __Count$[ebp]
  0009d	48		 dec	 eax
  0009e	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000a2	89 45 f0	 mov	 DWORD PTR tv254[ebp], eax
  000a5	7f af		 jg	 SHORT $LL32@Rotate
$LN4@Rotate:
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx

; 3280 : 					break;
; 3281 : 				}
; 3282 : 			}
; 3283 : 	}

  000aa	c9		 leave
  000ab	c3		 ret	 0
??$_Rotate@PADHD@std@@YAXPAD00PAH0@Z ENDP		; std::_Rotate<char *,int,char>
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 550  : 		{	// construct empty string

  00000	8b c1		 mov	 eax, ecx

; 551  : 		_Tidy();

  00002	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00006	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
  0000d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 552  : 		}

  00010	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 754  : 		_Tidy(true);

  00000	6a 00		 push	 0
  00002	6a 01		 push	 1
  00004	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 755  : 		}

  00009	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogsp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1959 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1960 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	76 0b		 jbe	 SHORT $LN6@Grow

; 1961 : 			_Xlen();	// result too long

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@Grow:
$LN6@Grow:

; 1962 : 		if (this->_Myres < _Newsize)

  00017	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001a	3b c6		 cmp	 eax, esi
  0001c	73 0b		 jae	 SHORT $LN5@Grow

; 1963 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0001e	ff 71 10	 push	 DWORD PTR [ecx+16]
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00027	eb 2e		 jmp	 SHORT $LN28@Grow
$LN5@Grow:

; 1964 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00029	33 d2		 xor	 edx, edx
  0002b	38 55 0c	 cmp	 BYTE PTR __Trim$[ebp], dl
  0002e	74 17		 je	 SHORT $LN3@Grow
  00030	83 fe 10	 cmp	 esi, 16			; 00000010H
  00033	73 12		 jae	 SHORT $LN3@Grow

; 1965 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1966 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

  00035	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00038	3b f0		 cmp	 esi, eax
  0003a	0f 42 c6	 cmovb	 eax, esi
  0003d	50		 push	 eax
  0003e	6a 01		 push	 1
  00040	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00045	eb 10		 jmp	 SHORT $LN28@Grow
$LN3@Grow:

; 1967 : 		else if (_Newsize == 0)

  00047	3b f2		 cmp	 esi, edx
  00049	75 0c		 jne	 SHORT $LN28@Grow

; 1968 : 			_Eos(0);	// new size is zero, just null terminate

  0004b	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0004e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00051	72 02		 jb	 SHORT $LN26@Grow
  00053	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN26@Grow:
  00055	88 11		 mov	 BYTE PTR [ecx], dl
$LN28@Grow:

; 1969 : 		return (0 < _Newsize);	// return true only if more work to do

  00057	33 c0		 xor	 eax, eax
  00059	3b c6		 cmp	 eax, esi
  0005b	1b c0		 sbb	 eax, eax
  0005d	f7 d8		 neg	 eax
  0005f	5e		 pop	 esi

; 1970 : 		}

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
$LN30@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??_7ioAIXMLDoc@@6B@				; ioAIXMLDoc::`vftable'
PUBLIC	??0ioAIXMLDoc@@QAE@XZ				; ioAIXMLDoc::ioAIXMLDoc
PUBLIC	??_R4ioAIXMLDoc@@6B@				; ioAIXMLDoc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAIXMLDoc@@@8				; ioAIXMLDoc `RTTI Type Descriptor'
PUBLIC	??_R3ioAIXMLDoc@@8				; ioAIXMLDoc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAIXMLDoc@@8				; ioAIXMLDoc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAIXMLDoc@@8			; ioAIXMLDoc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioXMLDocument@@8			; ioXMLDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioXMLDocument@@@8			; ioXMLDocument `RTTI Type Descriptor'
PUBLIC	??_R3ioXMLDocument@@8				; ioXMLDocument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioXMLDocument@@8				; ioXMLDocument::`RTTI Base Class Array'
EXTRN	__imp_??0ioXMLDocument@@QAE@XZ:PROC
EXTRN	??_EioAIXMLDoc@@UAEPAXI@Z:PROC			; ioAIXMLDoc::`vector deleting destructor'
;	COMDAT ??_R2ioXMLDocument@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
rdata$r	SEGMENT
??_R2ioXMLDocument@@8 DD FLAT:??_R1A@?0A@EA@ioXMLDocument@@8 ; ioXMLDocument::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioXMLDocument@@8
rdata$r	SEGMENT
??_R3ioXMLDocument@@8 DD 00H				; ioXMLDocument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioXMLDocument@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioXMLDocument@@@8
_DATA	SEGMENT
??_R0?AVioXMLDocument@@@8 DD FLAT:??_7type_info@@6B@	; ioXMLDocument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioXMLDocument@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioXMLDocument@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioXMLDocument@@8 DD FLAT:??_R0?AVioXMLDocument@@@8 ; ioXMLDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioXMLDocument@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAIXMLDoc@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAIXMLDoc@@8 DD FLAT:??_R0?AVioAIXMLDoc@@@8 ; ioAIXMLDoc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAIXMLDoc@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAIXMLDoc@@8
rdata$r	SEGMENT
??_R2ioAIXMLDoc@@8 DD FLAT:??_R1A@?0A@EA@ioAIXMLDoc@@8	; ioAIXMLDoc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioXMLDocument@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAIXMLDoc@@8
rdata$r	SEGMENT
??_R3ioAIXMLDoc@@8 DD 00H				; ioAIXMLDoc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAIXMLDoc@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAIXMLDoc@@@8
_DATA	SEGMENT
??_R0?AVioAIXMLDoc@@@8 DD FLAT:??_7type_info@@6B@	; ioAIXMLDoc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAIXMLDoc@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAIXMLDoc@@6B@
rdata$r	SEGMENT
??_R4ioAIXMLDoc@@6B@ DD 00H				; ioAIXMLDoc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAIXMLDoc@@@8
	DD	FLAT:??_R3ioAIXMLDoc@@8
rdata$r	ENDS
;	COMDAT ??_7ioAIXMLDoc@@6B@
CONST	SEGMENT
??_7ioAIXMLDoc@@6B@ DD FLAT:??_R4ioAIXMLDoc@@6B@	; ioAIXMLDoc::`vftable'
	DD	FLAT:??_EioAIXMLDoc@@UAEPAXI@Z
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaixmldoc.cpp
CONST	ENDS
;	COMDAT ??0ioAIXMLDoc@@QAE@XZ
_TEXT	SEGMENT
??0ioAIXMLDoc@@QAE@XZ PROC				; ioAIXMLDoc::ioAIXMLDoc, COMDAT
; _this$ = ecx

; 40   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioXMLDocument@@QAE@XZ
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAIXMLDoc@@6B@
  0000f	6a 0f		 push	 15			; 0000000fH
  00011	58		 pop	 eax
  00012	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00015	33 c9		 xor	 ecx, ecx
  00017	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
  0001a	88 4e 08	 mov	 BYTE PTR [esi+8], cl
  0001d	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00020	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
  00023	88 4e 24	 mov	 BYTE PTR [esi+36], cl

; 41   : }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??0ioAIXMLDoc@@QAE@XZ ENDP				; ioAIXMLDoc::ioAIXMLDoc
_TEXT	ENDS
PUBLIC	??1ioAIXMLDoc@@UAE@XZ				; ioAIXMLDoc::~ioAIXMLDoc
EXTRN	__imp_??1ioXMLDocument@@UAE@XZ:PROC
; Function compile flags: /Ogsp
;	COMDAT ??1ioAIXMLDoc@@UAE@XZ
_TEXT	SEGMENT
??1ioAIXMLDoc@@UAE@XZ PROC				; ioAIXMLDoc::~ioAIXMLDoc, COMDAT
; _this$ = ecx

; 44   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 45   : }

  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAIXMLDoc@@6B@
  00010	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00015	6a 00		 push	 0
  00017	6a 01		 push	 1
  00019	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00021	8b ce		 mov	 ecx, esi
  00023	5e		 pop	 esi
  00024	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioXMLDocument@@UAE@XZ
??1ioAIXMLDoc@@UAE@XZ ENDP				; ioAIXMLDoc::~ioAIXMLDoc
_TEXT	ENDS
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 196  : 	{	// test for string inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 	return (!(_Left == _Right));

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0000e	f7 d8		 neg	 eax
  00010	1b c0		 sbb	 eax, eax
  00012	f7 d8		 neg	 eax

; 198  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 89   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@0AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
PUBLIC	?_Do_if@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_if@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_if
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_Do_if@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_if@23@H@Z
_TEXT	SEGMENT
__St$ = -24						; size = 8
__Final$ = -16						; size = 8
__Final_len$ = -8					; size = 4
__Matched$ = -1						; size = 1
__Node$ = 8						; size = 4
__Continue$ = 12					; size = 4
?_Do_if@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_if@23@H@Z PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_if, COMDAT
; _this$ = ecx

; 3614 : 	{	// apply if node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 3615 : 	_Bt_state_t<_It> _St = _Tgt_state;
; 3616 : 	_Bt_state_t<_It> _Final = _Tgt_state;
; 3617 : 	bool _Matched = false;
; 3618 : 	int _Final_len = -1;

  00006	83 4d f8 ff	 or	 DWORD PTR __Final_len$[ebp], -1
  0000a	53		 push	 ebx

; 3619 : 
; 3620 : 	while (_Node)

  0000b	8b 5d 08	 mov	 ebx, DWORD PTR __Node$[ebp]
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	57		 push	 edi
  00015	8b 3e		 mov	 edi, DWORD PTR [esi]
  00017	89 45 ec	 mov	 DWORD PTR __St$[ebp+4], eax
  0001a	8b c7		 mov	 eax, edi
  0001c	89 45 f0	 mov	 DWORD PTR __Final$[ebp], eax
  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	89 7d e8	 mov	 DWORD PTR __St$[ebp], edi
  00025	89 45 f4	 mov	 DWORD PTR __Final$[ebp+4], eax
  00028	c6 45 ff 00	 mov	 BYTE PTR __Matched$[ebp], 0
  0002c	85 db		 test	 ebx, ebx
  0002e	74 4c		 je	 SHORT $LN30@Do_if
$LL7@Do_if:

; 3621 : 		{	// process one branch of if
; 3622 : 		_Tgt_state = _St;

  00030	8b 45 ec	 mov	 eax, DWORD PTR __St$[ebp+4]

; 3623 : 		if (!_Match(_Node->_Next, _Continue))

  00033	ff 75 0c	 push	 DWORD PTR __Continue$[ebp]
  00036	89 3e		 mov	 DWORD PTR [esi], edi
  00038	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0003b	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  00045	84 c0		 test	 al, al
  00047	74 24		 je	 SHORT $LN2@Do_if

; 3624 : 			;
; 3625 : 		else if (!_Longest)

  00049	80 be 2b 02 00
	00 00		 cmp	 BYTE PTR [esi+555], 0
  00050	74 41		 je	 SHORT $LN27@Do_if

; 3627 : 		else
; 3628 : 			{	// record match
; 3629 : 			int _Len = (int)_STD distance(_St._Cur, _Tgt_state._Cur);

  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	2b c7		 sub	 eax, edi

; 3630 : 			if (_Final_len < _Len)

  00056	39 45 f8	 cmp	 DWORD PTR __Final_len$[ebp], eax
  00059	7d 0e		 jge	 SHORT $LN1@Do_if

; 3631 : 				{	// memorize longest so far
; 3632 : 				_Final = _Tgt_state;

  0005b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005d	89 4d f0	 mov	 DWORD PTR __Final$[ebp], ecx
  00060	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00063	89 4d f4	 mov	 DWORD PTR __Final$[ebp+4], ecx

; 3633 : 				_Final_len = _Len;

  00066	89 45 f8	 mov	 DWORD PTR __Final_len$[ebp], eax
$LN1@Do_if:

; 3634 : 				}
; 3635 : 			_Matched = true;

  00069	c6 45 ff 01	 mov	 BYTE PTR __Matched$[ebp], 1
$LN2@Do_if:

; 3636 : 			}
; 3637 : 		_Node = _Node->_Child;

  0006d	8b 5b 18	 mov	 ebx, DWORD PTR [ebx+24]
  00070	85 db		 test	 ebx, ebx
  00072	75 bc		 jne	 SHORT $LL7@Do_if

; 3638 : 		}
; 3639 : 	_Tgt_state = _Matched ? _Final : _St;

  00074	8d 45 f0	 lea	 eax, DWORD PTR __Final$[ebp]
  00077	38 5d ff	 cmp	 BYTE PTR __Matched$[ebp], bl
  0007a	75 03		 jne	 SHORT $LN11@Do_if
$LN30@Do_if:
  0007c	8d 45 e8	 lea	 eax, DWORD PTR __St$[ebp]
$LN11@Do_if:
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00084	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 3640 : 	return (_Matched);

  00087	8a 45 ff	 mov	 al, BYTE PTR __Matched$[ebp]
  0008a	89 0e		 mov	 DWORD PTR [esi], ecx
$LN8@Do_if:
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx

; 3641 : 	}

  0008f	c9		 leave
  00090	c2 08 00	 ret	 8
$LN27@Do_if:

; 3626 : 			return (true);

  00093	b0 01		 mov	 al, 1
  00095	eb f5		 jmp	 SHORT $LN8@Do_if
?_Do_if@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_if@23@H@Z ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_if
_TEXT	ENDS
PUBLIC	?_Better_match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NXZ ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Better_match
; Function compile flags: /Ogsp
;	COMDAT ?_Better_match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NXZ
_TEXT	SEGMENT
?_Better_match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NXZ PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Better_match, COMDAT
; _this$ = ecx

; 3881 : 	{	// check for better match under UNIX rules

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 3882 : 	int _Mask, _Ix;
; 3883 : 
; 3884 : 	for (_Ix = 0, _Mask = 1; _Ix < _Ncap; ++_Ix, _Mask <<= 1)

  00003	0f b6 b9 2a 02
	00 00		 movzx	 edi, BYTE PTR [ecx+554]
  0000a	33 f6		 xor	 esi, esi
  0000c	33 c0		 xor	 eax, eax
  0000e	46		 inc	 esi
  0000f	85 ff		 test	 edi, edi
  00011	7e 2f		 jle	 SHORT $LN7@Better_mat
  00013	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
$LL9@Better_mat:

; 3885 : 		{	// check each capture group
; 3886 : 		if (!(_Res._Grp_valid & _Mask) || !(_Tgt_state._Grp_valid & _Mask))

  00016	85 b1 0c 01 00
	00		 test	 DWORD PTR [ecx+268], esi
  0001c	74 1a		 je	 SHORT $LN8@Better_mat
  0001e	85 71 04	 test	 DWORD PTR [ecx+4], esi
  00021	74 15		 je	 SHORT $LN8@Better_mat

; 3887 : 			;
; 3888 : 		else if (_Res._Grps[_Ix]._Begin
; 3889 : 			!= _Tgt_state._Grps[_Ix]._Begin)

  00023	8b 9a 08 01 00
	00		 mov	 ebx, DWORD PTR [edx+264]
  00029	3b 1a		 cmp	 ebx, DWORD PTR [edx]
  0002b	75 1b		 jne	 SHORT $LN65@Better_mat

; 3892 : 		else if (_Res._Grps[_Ix]._End
; 3893 : 			!= _Tgt_state._Grps[_Ix]._End)

  0002d	8b 9a 0c 01 00
	00		 mov	 ebx, DWORD PTR [edx+268]
  00033	3b 5a 04	 cmp	 ebx, DWORD PTR [edx+4]
  00036	75 2e		 jne	 SHORT $LN66@Better_mat
$LN8@Better_mat:

; 3882 : 	int _Mask, _Ix;
; 3883 : 
; 3884 : 	for (_Ix = 0, _Mask = 1; _Ix < _Ncap; ++_Ix, _Mask <<= 1)

  00038	40		 inc	 eax
  00039	83 c2 08	 add	 edx, 8
  0003c	03 f6		 add	 esi, esi
  0003e	3b c7		 cmp	 eax, edi
  00040	7c d4		 jl	 SHORT $LL9@Better_mat
$LN7@Better_mat:

; 3896 : 		}
; 3897 : 	return (false);

  00042	32 c0		 xor	 al, al
$LN10@Better_mat:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 3898 : 	}

  00047	c3		 ret	 0
$LN65@Better_mat:

; 3890 : 			return (_STD distance(_Begin, _Res._Grps[_Ix]._Begin)
; 3891 : 				< _STD distance(_Begin, _Tgt_state._Grps[_Ix]._Begin));

  00048	8b 94 c1 10 01
	00 00		 mov	 edx, DWORD PTR [ecx+eax*8+272]
  0004f	8b b1 10 02 00
	00		 mov	 esi, DWORD PTR [ecx+528]
  00055	8b 44 c1 08	 mov	 eax, DWORD PTR [ecx+eax*8+8]
  00059	2b c6		 sub	 eax, esi
  0005b	2b d6		 sub	 edx, esi
  0005d	33 c9		 xor	 ecx, ecx
  0005f	3b d0		 cmp	 edx, eax
$LN68@Better_mat:
  00061	0f 9c c0	 setl	 al
  00064	eb de		 jmp	 SHORT $LN10@Better_mat
$LN66@Better_mat:

; 3894 : 			return (_STD distance(_Begin, _Res._Grps[_Ix]._End)
; 3895 : 				< _STD distance(_Begin, _Tgt_state._Grps[_Ix]._End));

  00066	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00069	8b 82 14 01 00
	00		 mov	 eax, DWORD PTR [edx+276]
  0006f	8b 89 10 02 00
	00		 mov	 ecx, DWORD PTR [ecx+528]
  00075	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00078	2b d1		 sub	 edx, ecx
  0007a	2b c1		 sub	 eax, ecx
  0007c	33 c9		 xor	 ecx, ecx
  0007e	3b c2		 cmp	 eax, edx
  00080	eb df		 jmp	 SHORT $LN68@Better_mat
?_Better_match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NXZ ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Better_match
_TEXT	ENDS
PUBLIC	?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::collate<char>::transform
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\locale
;	COMDAT ?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
_TEXT	SEGMENT
$T521047 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z PROC ; std::collate<char>::transform, COMDAT
; _this$ = ecx

; 39   : 		{	// transform [_First, _Last) to key string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 40   : 		return (do_transform(_First, _Last));

  00004	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0000c	83 65 fc 00	 and	 DWORD PTR $T521047[ebp], 0
  00010	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00013	ff 50 08	 call	 DWORD PTR [eax+8]
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 41   : 		}

  00019	c9		 leave
  0001a	c2 0c 00	 ret	 12			; 0000000cH
?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ENDP ; std::collate<char>::transform
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@V342@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@$$QAV230@@Z ; std::_Cons_val<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@V342@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@$$QAV230@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@V342@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@$$QAV230@@Z PROC ; std::_Cons_val<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 279  : 	{	// construct using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

  00003	ff 75 10	 push	 DWORD PTR __Src$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Alval$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Pdest$[ebp]
  0000c	e8 00 00 00 00	 call	 ?construct@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@$$QAV342@@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::construct

; 281  : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Cons_val@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@V342@@std@@YAXAAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@$$QAV230@@Z ENDP ; std::_Cons_val<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	eb 13		 jmp	 SHORT $LN28@Uninit_mov
$LL6@Uninit_mov:

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

  00009	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000c	56		 push	 esi
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 ?construct@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@$$QAV342@@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::construct
  00015	83 45 10 0c	 add	 DWORD PTR __Dest$[ebp], 12 ; 0000000cH
  00019	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN28@Uninit_mov:

; 425  : 	_DEBUG_RANGE(_First, _Last);
; 426  : 	_DEBUG_POINTER(_Dest);
; 427  : 	_FwdIt _Next = _Dest;
; 428  : 
; 429  : 	_TRY_BEGIN
; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

  0001c	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0001f	75 e8		 jne	 SHORT $LL6@Uninit_mov

; 432  : 	_CATCH_ALL
; 433  : 	for (; _Next != _Dest; ++_Next)
; 434  : 		_Dest_val(_Al, _Next);
; 435  : 	_RERAISE;
; 436  : 	_CATCH_END
; 437  : 	return (_Dest);

  00021	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00024	5e		 pop	 esi

; 438  : 	}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Uninit_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$lookup_classname@PBD@?$_Regex_traits@D@tr1@std@@QBEFPBD0_N@Z ; std::tr1::_Regex_traits<char>::lookup_classname<char const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??$lookup_classname@PBD@?$_Regex_traits@D@tr1@std@@QBEFPBD0_N@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Icase$ = 16						; size = 1
??$lookup_classname@PBD@?$_Regex_traits@D@tr1@std@@QBEFPBD0_N@Z PROC ; std::tr1::_Regex_traits<char>::lookup_classname<char const *>, COMDAT
; _this$ = ecx

; 373  : 		char_class_type lookup_classname(_Iter _First, _Iter _Last,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 374  : 			bool _Icase = false) const
; 375  : 		{	// map [_First, _Last) to character class mask value
; 376  : 		_DEBUG_RANGE(_First, _Last);
; 377  : 		int _Ix = 0;

  00004	33 f6		 xor	 esi, esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 378  : 		for (; _Names[_Ix]._Ptr; ++_Ix)

  00009	39 35 00 00 00
	00		 cmp	 DWORD PTR ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B, esi
  0000f	74 37		 je	 SHORT $LN12@lookup_cla
  00011	33 c0		 xor	 eax, eax
  00013	b9 00 00 00 00	 mov	 ecx, OFFSET ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B ; std::tr1::_Regex_traits<char>::_Names
$LL6@lookup_cla:

; 379  : 			if (_Same(_First, _Last,
; 380  : 				_Names[_Ix]._Ptr, _Names[_Ix]._Ptr + _Names[_Ix]._Len,
; 381  : 				_Cmp_icase<_Regex_traits<_Elem> >(*this)))

  00018	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001a	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B[eax+4]
  00020	57		 push	 edi
  00021	03 c1		 add	 eax, ecx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00028	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0002b	e8 00 00 00 00	 call	 ??$_Same@PBDPBDU?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@tr1@std@@@tr1@std@@YA_NPBD000U?$_Cmp_icase@V?$_Regex_traits@D@tr1@std@@@01@@Z ; std::tr1::_Same<char const *,char const *,std::tr1::_Cmp_icase<std::tr1::_Regex_traits<char> > >
  00030	83 c4 14	 add	 esp, 20			; 00000014H
  00033	84 c0		 test	 al, al
  00035	75 11		 jne	 SHORT $LN12@lookup_cla

; 378  : 		for (; _Names[_Ix]._Ptr; ++_Ix)

  00037	46		 inc	 esi
  00038	8b c6		 mov	 eax, esi
  0003a	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0003d	8d 88 00 00 00
	00		 lea	 ecx, DWORD PTR ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B[eax]
  00043	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00046	75 d0		 jne	 SHORT $LL6@lookup_cla
$LN12@lookup_cla:

; 382  : 				break;
; 383  : 
; 384  : 		char_class_type _Mask = (char_class_type)0;
; 385  : 		if (_Names[_Ix]._Ptr != 0)

  00048	8b ce		 mov	 ecx, esi
  0004a	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0004d	33 c0		 xor	 eax, eax
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	39 81 00 00 00
	00		 cmp	 DWORD PTR ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B[ecx], eax
  00057	74 07		 je	 SHORT $LN2@lookup_cla

; 386  : 			_Mask = _Names[_Ix]._Ctype;

  00059	0f b7 81 08 00
	00 00		 movzx	 eax, WORD PTR ?_Names@?$_Regex_traits@D@tr1@std@@0QBU?$_Cl_names@D@23@B[ecx+8]
$LN2@lookup_cla:

; 387  : 		if (_Icase && _Mask & (_Ch_lower | _Ch_upper))

  00060	80 7d 10 00	 cmp	 BYTE PTR __Icase$[ebp], 0
  00064	74 07		 je	 SHORT $LN1@lookup_cla
  00066	a8 03		 test	 al, 3
  00068	74 03		 je	 SHORT $LN1@lookup_cla

; 388  : 			_Mask |= _Ch_lower | _Ch_upper;

  0006a	83 c8 03	 or	 eax, 3
$LN1@lookup_cla:

; 389  : 		return (_Mask);
; 390  : 		}

  0006d	5d		 pop	 ebp
  0006e	c2 0c 00	 ret	 12			; 0000000cH
??$lookup_classname@PBD@?$_Regex_traits@D@tr1@std@@QBEFPBD0_N@Z ENDP ; std::tr1::_Regex_traits<char>::lookup_classname<char const *>
_TEXT	ENDS
PUBLIC	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Distance@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAI@Z ; std::_Distance<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,unsigned int>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Distance@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAI@Z PROC ; std::_Distance<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,unsigned int>, COMDAT

; 909  : 	{	// add to _Off distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	01 08		 add	 DWORD PTR [eax], ecx

; 911  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Distance@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAI@Z ENDP ; std::_Distance<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__Cat$521148 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@@Z PROC ; std::_Uninitialized_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >, COMDAT

; 412  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 413  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 414  : 		_Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$521148[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 415  : 	}

  0001b	c9		 leave
  0001c	c3		 ret	 0
??$_Uninitialized_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@@Z ENDP ; std::_Uninitialized_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$_Rotate@PAD@std@@YAXPAD00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<char *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Rotate@PAD@std@@YAXPAD00Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Rotate@PAD@std@@YAXPAD00Urandom_access_iterator_tag@0@@Z PROC ; std::_Rotate<char *>, COMDAT

; 3288 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3289 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Rotate@PADHD@std@@YAXPAD00PAH0@Z ; std::_Rotate<char *,int,char>
  00015	83 c4 14	 add	 esp, 20			; 00000014H

; 3290 : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Rotate@PAD@std@@YAXPAD00Urandom_access_iterator_tag@0@@Z ENDP ; std::_Rotate<char *>
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 845  : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 846  : 		if (npos - this->_Mysize <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	83 c9 ff	 or	 ecx, -1
  00010	2b c8		 sub	 ecx, eax
  00012	3b cb		 cmp	 ecx, ebx
  00014	77 0b		 ja	 SHORT $LN2@append

; 847  : 			_Xlen();	// result too long

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN18@append:
$LN2@append:

; 848  : 
; 849  : 		size_type _Num;
; 850  : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00021	85 db		 test	 ebx, ebx
  00023	74 34		 je	 SHORT $LN14@append
  00025	57		 push	 edi
  00026	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  00029	6a 00		 push	 0
  0002b	57		 push	 edi
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00033	84 c0		 test	 al, al
  00035	74 21		 je	 SHORT $LN16@append

; 851  : 			{	// make room and append new stuff using assign
; 852  : 			_Chassign(this->_Mysize, _Count, _Ch);

  00037	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0003a	8b ce		 mov	 ecx, esi
  0003c	53		 push	 ebx
  0003d	ff 76 10	 push	 DWORD PTR [esi+16]
  00040	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 853  : 			_Eos(_Num);

  00045	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00049	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0004c	72 04		 jb	 SHORT $LN12@append
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	eb 02		 jmp	 SHORT $LN13@append
$LN12@append:
  00052	8b c6		 mov	 eax, esi
$LN13@append:
  00054	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN16@append:
  00058	5f		 pop	 edi
$LN14@append:

; 854  : 			}
; 855  : 		return (*this);

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 856  : 		}

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
$LN17@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 893  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 894  : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  00010	57		 push	 edi
  00011	3b c1		 cmp	 eax, ecx
  00013	73 0b		 jae	 SHORT $LN5@assign

; 895  : 			_Xran();	// _Roff off end

  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN34@assign:
$LN5@assign:

; 896  : 		size_type _Num = _Right.size() - _Roff;

  00020	2b c1		 sub	 eax, ecx
  00022	8b f8		 mov	 edi, eax

; 897  : 		if (_Count < _Num)

  00024	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi

; 898  : 			_Num = _Count;	// trim _Num to size

  00027	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 899  : 
; 900  : 		if (this == &_Right)

  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 1a		 jne	 SHORT $LN3@assign

; 901  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002f	03 f9		 add	 edi, ecx
  00031	6a ff		 push	 -1
  00033	57		 push	 edi
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0003b	ff 75 0c	 push	 DWORD PTR __Roff$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00047	eb 47		 jmp	 SHORT $LN31@assign
$LN3@assign:

; 902  : 		else if (_Grow(_Num))

  00049	6a 00		 push	 0
  0004b	57		 push	 edi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00053	84 c0		 test	 al, al
  00055	74 39		 je	 SHORT $LN31@assign

; 903  : 			{	// make room and assign new stuff
; 904  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  00057	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  0005b	72 04		 jb	 SHORT $LN17@assign
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005f	eb 02		 jmp	 SHORT $LN18@assign
$LN17@assign:
  00061	8b c3		 mov	 eax, ebx
$LN18@assign:
  00063	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00067	72 04		 jb	 SHORT $LN21@assign
  00069	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0006b	eb 02		 jmp	 SHORT $LN22@assign
$LN21@assign:
  0006d	8b ce		 mov	 ecx, esi
$LN22@assign:
  0006f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  : 			_Eos(_Num);

  0007d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00081	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00084	72 04		 jb	 SHORT $LN29@assign
  00086	8b 06		 mov	 eax, DWORD PTR [esi]
  00088	eb 02		 jmp	 SHORT $LN30@assign
$LN29@assign:
  0008a	8b c6		 mov	 eax, esi
$LN30@assign:
  0008c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN31@assign:

; 906  : 			}
; 907  : 		return (*this);

  00090	5f		 pop	 edi
  00091	8b c6		 mov	 eax, esi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx

; 908  : 		}

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
$LN33@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 911  : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 912  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 913  : 		if (_Count != 0)
; 914  : 			_DEBUG_POINTER(_Ptr);
; 915  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 916  : 
; 917  : 		if (_Inside(_Ptr))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00010	84 c0		 test	 al, al
  00012	74 1c		 je	 SHORT $LN2@assign@2

; 918  : 			return (assign(*this, _Ptr - _Myptr(), _Count));	// substring

  00014	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00018	72 04		 jb	 SHORT $LN7@assign@2
  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	eb 02		 jmp	 SHORT $LN8@assign@2
$LN7@assign@2:
  0001e	8b c6		 mov	 eax, esi
$LN8@assign@2:
  00020	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00023	2b d8		 sub	 ebx, eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0002e	eb 3f		 jmp	 SHORT $LN3@assign@2
$LN2@assign@2:
  00030	57		 push	 edi

; 919  : 
; 920  : 		if (_Grow(_Count))

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00034	6a 00		 push	 0
  00036	57		 push	 edi
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003e	84 c0		 test	 al, al
  00040	74 2a		 je	 SHORT $LN21@assign@2

; 921  : 			{	// make room and assign new stuff
; 922  : 			_Traits::copy(_Myptr(), _Ptr, _Count);

  00042	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00046	72 04		 jb	 SHORT $LN11@assign@2
  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	eb 02		 jmp	 SHORT $LN12@assign@2
$LN11@assign@2:
  0004c	8b c6		 mov	 eax, esi
$LN12@assign@2:
  0004e	57		 push	 edi
  0004f	53		 push	 ebx
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 			_Eos(_Count);

  00059	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00060	72 04		 jb	 SHORT $LN19@assign@2
  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	eb 02		 jmp	 SHORT $LN20@assign@2
$LN19@assign@2:
  00066	8b c6		 mov	 eax, esi
$LN20@assign@2:
  00068	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN21@assign@2:

; 924  : 			}
; 925  : 		return (*this);

  0006c	8b c6		 mov	 eax, esi
  0006e	5f		 pop	 edi
$LN3@assign@2:
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 926  : 		}

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 935  : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 936  : 		if (_Count == npos)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff ff	 cmp	 edi, -1
  0000d	75 0b		 jne	 SHORT $LN2@assign@3

; 937  : 			_Xlen();	// result too long

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN17@assign@3:
$LN2@assign@3:

; 938  : 
; 939  : 		if (_Grow(_Count))

  0001a	6a 00		 push	 0
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00022	84 c0		 test	 al, al
  00024	74 20		 je	 SHORT $LN14@assign@3

; 940  : 			{	// make room and assign new stuff
; 941  : 			_Chassign(0, _Count, _Ch);

  00026	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00029	8b ce		 mov	 ecx, esi
  0002b	57		 push	 edi
  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 942  : 			_Eos(_Count);

  00033	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00037	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0003a	72 04		 jb	 SHORT $LN12@assign@3
  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	eb 02		 jmp	 SHORT $LN13@assign@3
$LN12@assign@3:
  00040	8b c6		 mov	 eax, esi
$LN13@assign@3:
  00042	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN14@assign@3:

; 943  : 			}
; 944  : 		return (*this);

  00046	5f		 pop	 edi
  00047	8b c6		 mov	 eax, esi
  00049	5e		 pop	 esi

; 945  : 		}

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN16@assign@3:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioAIXMLDoc@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAIXMLDoc@@UAEPAXI@Z PROC				; ioAIXMLDoc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ioAIXMLDoc@@UAE@XZ	; ioAIXMLDoc::~ioAIXMLDoc
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@18
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@18:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_GioAIXMLDoc@@UAEPAXI@Z ENDP				; ioAIXMLDoc::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp__memcpy_s:PROC
EXTRN	__imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__EH_epilog3_GS:PROC
EXTRN	__EH_prolog3_GS:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
__Dest$510235 = -56					; size = 4
__Src$510236 = -52					; size = 4
__Ch$510234 = -45					; size = 1
__Ch$510228 = -45					; size = 1
__Str$510230 = -44					; size = 28
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 423  : 		{	// get an element from stream, point past it

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx

; 424  : 		if (_Mysb::gptr() != 0
; 425  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00014	85 c0		 test	 eax, eax
  00016	74 27		 je	 SHORT $LN18@uflow
  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0001e	8b 38		 mov	 edi, DWORD PTR [eax]
  00020	03 39		 add	 edi, DWORD PTR [ecx]
  00022	8b ce		 mov	 ecx, esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002a	3b c7		 cmp	 eax, edi
  0002c	73 11		 jae	 SHORT $LN18@uflow

; 426  : 			return (_Traits::to_int_type(
; 427  : 				*_Mysb::_Gninc()));	// return buffered

  0002e	8b ce		 mov	 ecx, esi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00036	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 478  : 
; 479  : 				default:
; 480  : 					return (_Traits::eof());	// conversion failed
; 481  : 					}
; 482  : 				}
; 483  : 			}

$LN170@uflow:

; 484  : 		}

  00039	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0003e	c3		 ret	 0
$LN18@uflow:

; 428  : 		else if (_Myfile == 0)

  0003f	33 ff		 xor	 edi, edi
  00041	39 7e 54	 cmp	 DWORD PTR [esi+84], edi
  00044	75 05		 jne	 SHORT $LN16@uflow
$LN21@uflow:

; 429  : 			return (_Traits::eof());	// no open C stream, fail

  00046	83 c8 ff	 or	 eax, -1
  00049	eb ee		 jmp	 SHORT $LN170@uflow
$LN16@uflow:

; 430  : 		_Reset_back();	// revert from _Mychar buffer

  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 431  : 		if (_Pcvt == 0)

  00052	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00055	75 1c		 jne	 SHORT $LN15@uflow

; 432  : 			{	// no codecvt facet, just get it
; 433  : 			_Elem _Ch = 0;
; 434  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
; 435  : 				: _Traits::eof());

  00057	ff 76 54	 push	 DWORD PTR [esi+84]
  0005a	8d 45 d3	 lea	 eax, DWORD PTR __Ch$510228[ebp]
  0005d	50		 push	 eax
  0005e	c6 45 d3 00	 mov	 BYTE PTR __Ch$510228[ebp], 0
  00062	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  00067	59		 pop	 ecx
  00068	59		 pop	 ecx
  00069	84 c0		 test	 al, al
  0006b	74 d9		 je	 SHORT $LN21@uflow
  0006d	0f b6 45 d3	 movzx	 eax, BYTE PTR __Ch$510228[ebp]
  00071	eb c6		 jmp	 SHORT $LN170@uflow
$LN15@uflow:

; 436  : 			}
; 437  : 		else
; 438  : 			{	// build string until codecvt succeeds
; 439  : 			string _Str;

  00073	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$510230[ebp+20], 15 ; 0000000fH
  0007a	89 7d e4	 mov	 DWORD PTR __Str$510230[ebp+16], edi
  0007d	c6 45 d4 00	 mov	 BYTE PTR __Str$510230[ebp], 0

; 440  : 
; 441  : 			for (; ; )
; 442  : 				{	// get using codecvt facet
; 443  : 				_Elem _Ch, *_Dest;
; 444  : 				const char *_Src;
; 445  : 				int _Nleft;
; 446  : 				int _Meta = fgetc(_Myfile);

  00081	ff 76 54	 push	 DWORD PTR [esi+84]
  00084	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00087	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__fgetc
  0008d	ff d7		 call	 edi
  0008f	59		 pop	 ecx

; 447  : 
; 448  : 				if (_Meta == EOF)

  00090	83 f8 ff	 cmp	 eax, -1
  00093	0f 84 a3 00 00
	00		 je	 $LN176@uflow
  00099	8d 5e 4c	 lea	 ebx, DWORD PTR [esi+76]
$LL13@uflow:

; 450  : 
; 451  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  0009c	50		 push	 eax
  0009d	6a 01		 push	 1
  0009f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510230[ebp]
  000a2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 452  : 				switch (_Pcvt->in(_State,
; 453  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 454  : 					&_Ch, &_Ch + 1, _Dest))

  000a7	83 7d e8 10	 cmp	 DWORD PTR __Str$510230[ebp+20], 16 ; 00000010H
  000ab	8b 4d d4	 mov	 ecx, DWORD PTR __Str$510230[ebp]
  000ae	8b c1		 mov	 eax, ecx
  000b0	73 05		 jae	 SHORT $LN89@uflow
  000b2	8d 45 d4	 lea	 eax, DWORD PTR __Str$510230[ebp]
  000b5	8b c8		 mov	 ecx, eax
$LN89@uflow:
  000b7	03 45 e4	 add	 eax, DWORD PTR __Str$510230[ebp+16]
  000ba	8d 55 c8	 lea	 edx, DWORD PTR __Dest$510235[ebp]
  000bd	52		 push	 edx
  000be	8d 55 d4	 lea	 edx, DWORD PTR __Ch$510234[ebp+1]
  000c1	52		 push	 edx
  000c2	8d 55 d3	 lea	 edx, DWORD PTR __Ch$510234[ebp]
  000c5	52		 push	 edx
  000c6	8d 55 cc	 lea	 edx, DWORD PTR __Src$510236[ebp]
  000c9	52		 push	 edx
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000cf	53		 push	 ebx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  000d6	85 c0		 test	 eax, eax
  000d8	78 62		 js	 SHORT $LN176@uflow
  000da	33 c9		 xor	 ecx, ecx
  000dc	41		 inc	 ecx
  000dd	3b c1		 cmp	 eax, ecx
  000df	7e 28		 jle	 SHORT $LN8@uflow
  000e1	83 f8 03	 cmp	 eax, 3
  000e4	75 56		 jne	 SHORT $LN176@uflow

; 468  : 					break;
; 469  : 
; 470  : 				case codecvt_base::noconv:
; 471  : 					if (_Str.size() < sizeof (_Elem))

  000e6	39 4d e4	 cmp	 DWORD PTR __Str$510230[ebp+16], ecx
  000e9	72 42		 jb	 SHORT $LN4@uflow

; 472  : 						break;	// no conversion, but need more chars
; 473  : 
; 474  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  000eb	83 7d e8 10	 cmp	 DWORD PTR __Str$510230[ebp+20], 16 ; 00000010H
  000ef	8b 45 d4	 mov	 eax, DWORD PTR __Str$510230[ebp]
  000f2	73 03		 jae	 SHORT $LN147@uflow
  000f4	8d 45 d4	 lea	 eax, DWORD PTR __Str$510230[ebp]
$LN147@uflow:
  000f7	51		 push	 ecx
  000f8	50		 push	 eax
  000f9	51		 push	 ecx
  000fa	8d 45 d3	 lea	 eax, DWORD PTR __Ch$510234[ebp]
  000fd	50		 push	 eax
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy_s
  00104	83 c4 10	 add	 esp, 16			; 00000010H

; 475  : 						sizeof (_Elem));	// copy raw bytes to element
; 476  : 
; 477  : 					return (_Traits::to_int_type(_Ch));	// return result

  00107	eb 74		 jmp	 SHORT $LN5@uflow
$LN8@uflow:

; 455  : 					{	// test result of converting one element
; 456  : 				case codecvt_base::partial:
; 457  : 				case codecvt_base::ok:
; 458  : 					if (_Dest != &_Ch)

  00109	8d 45 d3	 lea	 eax, DWORD PTR __Ch$510234[ebp]
  0010c	39 45 c8	 cmp	 DWORD PTR __Dest$510235[ebp], eax

; 464  : 						}
; 465  : 					else
; 466  : 						_Str.erase((size_t)0,	// partial, discard used input
; 467  : 							(size_t)(_Src - &*_Str.begin()));

  0010f	8b 45 d4	 mov	 eax, DWORD PTR __Str$510230[ebp]
  00112	75 3e		 jne	 SHORT $LN178@uflow
  00114	83 7d e8 10	 cmp	 DWORD PTR __Str$510230[ebp+20], 16 ; 00000010H
  00118	73 03		 jae	 SHORT $LN129@uflow
  0011a	8d 45 d4	 lea	 eax, DWORD PTR __Str$510230[ebp]
$LN129@uflow:
  0011d	8b 4d cc	 mov	 ecx, DWORD PTR __Src$510236[ebp]
  00120	2b c8		 sub	 ecx, eax
  00122	51		 push	 ecx
  00123	6a 00		 push	 0
  00125	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510230[ebp]
  00128	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
$LN4@uflow:

; 440  : 
; 441  : 			for (; ; )
; 442  : 				{	// get using codecvt facet
; 443  : 				_Elem _Ch, *_Dest;
; 444  : 				const char *_Src;
; 445  : 				int _Nleft;
; 446  : 				int _Meta = fgetc(_Myfile);

  0012d	ff 76 54	 push	 DWORD PTR [esi+84]
  00130	ff d7		 call	 edi
  00132	59		 pop	 ecx

; 447  : 
; 448  : 				if (_Meta == EOF)

  00133	83 f8 ff	 cmp	 eax, -1
  00136	0f 85 60 ff ff
	ff		 jne	 $LL13@uflow
$LN176@uflow:
  0013c	83 ce ff	 or	 esi, -1
$LN180@uflow:

; 449  : 					return (_Traits::eof());	// partial char?

  0013f	6a 00		 push	 0
  00141	6a 01		 push	 1
  00143	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510230[ebp]
  00146	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0014b	8b c6		 mov	 eax, esi
  0014d	e9 e7 fe ff ff	 jmp	 $LN170@uflow
$LN178@uflow:

; 459  : 						{	// got an element, put back excess and deliver it
; 460  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  00152	83 7d e8 10	 cmp	 DWORD PTR __Str$510230[ebp+20], 16 ; 00000010H
  00156	73 03		 jae	 SHORT $LN105@uflow
  00158	8d 45 d4	 lea	 eax, DWORD PTR __Str$510230[ebp]
$LN105@uflow:
  0015b	2b 45 cc	 sub	 eax, DWORD PTR __Src$510236[ebp]
  0015e	03 45 e4	 add	 eax, DWORD PTR __Str$510230[ebp+16]
  00161	8b f8		 mov	 edi, eax
  00163	eb 14		 jmp	 SHORT $LN187@uflow
$LN6@uflow:

; 462  : 							ungetc(_Src[--_Nleft], _Myfile);

  00165	8b 45 cc	 mov	 eax, DWORD PTR __Src$510236[ebp]
  00168	ff 76 54	 push	 DWORD PTR [esi+84]
  0016b	4f		 dec	 edi
  0016c	0f be 04 07	 movsx	 eax, BYTE PTR [edi+eax]
  00170	50		 push	 eax
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00177	59		 pop	 ecx
  00178	59		 pop	 ecx
$LN187@uflow:

; 461  : 						for (; 0 < _Nleft; )

  00179	85 ff		 test	 edi, edi
  0017b	7f e8		 jg	 SHORT $LN6@uflow
$LN5@uflow:

; 463  : 						return (_Traits::to_int_type(_Ch));

  0017d	0f b6 75 d3	 movzx	 esi, BYTE PTR __Ch$510234[ebp]
  00181	eb bc		 jmp	 SHORT $LN180@uflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510230[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 693  : 		{	// construct from [_First, _Last), const_iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 694  : 		_DEBUG_RANGE(_First, _Last);
; 695  : 		_Tidy();

  00006	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00011	c6 06 00	 mov	 BYTE PTR [esi], 0

; 696  : 		if (_First != _Last)

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	39 45 08	 cmp	 DWORD PTR __First$[ebp], eax
  0001a	74 0c		 je	 SHORT $LN1@basic_stri

; 697  : 			assign(&*_First, _Last - _First);

  0001c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0001f	50		 push	 eax
  00020	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN1@basic_stri:

; 698  : 		}

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
; Function compile flags: /Ogsp
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 1527 : 		{	// determine new length, padding with _Ch elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1528 : 		if (_Newsize <= this->_Mysize)

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00009	3b c2		 cmp	 eax, edx
  0000b	77 0a		 ja	 SHORT $LN2@resize

; 1529 : 			erase(_Newsize);

  0000d	6a ff		 push	 -1
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1530 : 		else

  00015	eb 0b		 jmp	 SHORT $LN1@resize
$LN2@resize:

; 1531 : 			append(_Newsize - this->_Mysize, _Ch);

  00017	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0001a	2b c2		 sub	 eax, edx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN1@resize:

; 1532 : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@0@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Destroy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@0@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Destroy, COMDAT
; _this$ = ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1271 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@0@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Destroy
_TEXT	ENDS
PUBLIC	?erase@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@0@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::erase
; Function compile flags: /Ogsp
;	COMDAT ?erase@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Cat$521972 = 16					; size = 1
__Last_arg$ = 16					; size = 4
?erase@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@0@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::erase, COMDAT
; _this$ = ecx

; 1190 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 		iterator _First = _Make_iter(_First_arg);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 07		 mov	 DWORD PTR [edi], eax

; 1192 : 		iterator _Last = _Make_iter(_Last_arg);
; 1193 : 
; 1194 : 		if (_First != _Last)

  0000f	3b 45 10	 cmp	 eax, DWORD PTR __Last_arg$[ebp]
  00012	74 16		 je	 SHORT $LN1@erase@2

; 1195 : 			{	// worth doing, copy down over hole
; 1196 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1197 : 			if (_Last < _First || _VICONT(_First) != this
; 1198 : 				|| _VIPTR(_First) < this->_Myfirst
; 1199 : 				|| this->_Mylast < _VIPTR(_Last))
; 1200 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1201 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1202 : 				_VIPTR(_First));
; 1203 : 			_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1204 : 
; 1205 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1206 : 			pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1207 : 				_VIPTR(_First));

  00014	ff 75 10	 push	 DWORD PTR __Cat$521972[ebp]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Last_arg$[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1208 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1209 : 
; 1210 : 			_Destroy(_Ptr, this->_Mylast);
; 1211 : 			this->_Mylast = _Ptr;

  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@erase@2:

; 1212 : 			}
; 1213 : 		return (_First);

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1214 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@0@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::erase
_TEXT	ENDS
PUBLIC	??$_Uninit_def_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_def_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
$T522052 = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_def_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 620  : 	{	// copy _Count * _Valty() to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 621  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 622  : //	if (_Count < 0)
; 623  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 624  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 625  : 
; 626  : 	_FwdIt _Next = _First;
; 627  : 
; 628  : 	_TRY_BEGIN
; 629  : 	for (; 0 < _Count; --_Count, ++_First)

  00007	33 db		 xor	 ebx, ebx
  00009	eb 1f		 jmp	 SHORT $LN37@Uninit_def
$LL6@Uninit_def:

; 630  : 
; 631  : 		_Cons_val(_Al, _First, _Valty());

  0000b	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000e	8d 45 f4	 lea	 eax, DWORD PTR $T522052[ebp]
  00011	50		 push	 eax
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	89 5d f4	 mov	 DWORD PTR $T522052[ebp], ebx
  00018	89 5d f8	 mov	 DWORD PTR $T522052[ebp+4], ebx
  0001b	88 5d fc	 mov	 BYTE PTR $T522052[ebp+8], bl
  0001e	e8 00 00 00 00	 call	 ?construct@?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@QAEXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@2@$$QAV342@@Z ; std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >::construct
  00023	ff 4d 0c	 dec	 DWORD PTR __Count$[ebp]
  00026	83 45 08 0c	 add	 DWORD PTR __First$[ebp], 12 ; 0000000cH
$LN37@Uninit_def:

; 621  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 622  : //	if (_Count < 0)
; 623  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 624  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 625  : 
; 626  : 	_FwdIt _Next = _First;
; 627  : 
; 628  : 	_TRY_BEGIN
; 629  : 	for (; 0 < _Count; --_Count, ++_First)

  0002a	39 5d 0c	 cmp	 DWORD PTR __Count$[ebp], ebx
  0002d	77 dc		 ja	 SHORT $LL6@Uninit_def
  0002f	5b		 pop	 ebx

; 632  : 
; 633  : 	_CATCH_ALL
; 634  : 	for (; _Next != _First; ++_Next)
; 635  : 		_Dest_val(_Al, _Next);
; 636  : 	_RERAISE;
; 637  : 	_CATCH_END
; 638  : 	}

  00030	c9		 leave
  00031	c3		 ret	 0
??$_Uninit_def_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ; std::_Uninitialized_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Uninitialized_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z
_TEXT	SEGMENT
__Cat$522125 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z PROC ; std::_Uninitialized_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$522125[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 472  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_N_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClassEscape
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_N_N@Z
_TEXT	SEGMENT
$T522146 = 8						; size = 1
__Addit$ = 8						; size = 1
?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_N_N@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClassEscape, COMDAT
; _this$ = ecx

; 4509 : 	{	// check for character class escape

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 4510 : 	typename _RxTraits::char_class_type _Cls;
; 4511 : 	_FwdIt _Ch0 = _Pat;
; 4512 : 	if ((_Cls = _Traits.lookup_classname(_Pat, ++_Ch0,
; 4513 : 		(_Flags & regex_constants::icase) != 0)) == 0)

  00007	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  00012	0f 95 c2	 setne	 dl
  00015	57		 push	 edi
  00016	0f b6 d2	 movzx	 edx, dl
  00019	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0001c	52		 push	 edx
  0001d	51		 push	 ecx
  0001e	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$lookup_classname@PBD@?$_Regex_traits@D@tr1@std@@QBEFPBD0_N@Z ; std::tr1::_Regex_traits<char>::lookup_classname<char const *>
  00027	0f b7 f8	 movzx	 edi, ax
  0002a	66 85 ff	 test	 di, di
  0002d	75 04		 jne	 SHORT $LN3@CharacterC

; 4514 : 		return (false);

  0002f	32 c0		 xor	 al, al
  00031	eb 46		 jmp	 SHORT $LN4@CharacterC
$LN3@CharacterC:

; 4515 : 
; 4516 : 	if (_Addit)

  00033	80 7d 08 00	 cmp	 BYTE PTR __Addit$[ebp], 0
  00037	74 08		 je	 SHORT $LN2@CharacterC

; 4517 : 		_Nfa._Add_class();

  00039	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0003c	e8 00 00 00 00	 call	 ?_Add_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_class
$LN2@CharacterC:

; 4518 : 	_Nfa._Add_named_class(_Cls);

  00041	57		 push	 edi
  00042	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00045	e8 00 00 00 00	 call	 ?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class

; 4519 : 	if (_Traits.isctype(_Char, _RxTraits::_Ch_upper))

  0004a	8a 46 3e	 mov	 al, BYTE PTR [esi+62]
  0004d	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00050	88 45 08	 mov	 BYTE PTR $T522146[ebp], al
  00053	ff 75 08	 push	 DWORD PTR $T522146[ebp]
  00056	6a 01		 push	 1
  00058	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  0005d	8b c8		 mov	 ecx, eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  00065	84 c0		 test	 al, al
  00067	74 07		 je	 SHORT $LN16@CharacterC

; 4520 : 		_Nfa._Negate();

  00069	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0006c	83 70 08 01	 xor	 DWORD PTR [eax+8], 1
$LN16@CharacterC:

; 4521 : 	_Next();

  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4522 : 	return (true);

  00077	b0 01		 mov	 al, 1
$LN4@CharacterC:
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 4523 : 	}

  0007b	c9		 leave
  0007c	c2 04 00	 ret	 4
?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_N_N@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClassEscape
_TEXT	ENDS
PUBLIC	?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassEscape
; Function compile flags: /Ogsp
;	COMDAT ?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@_N@Z
_TEXT	SEGMENT
__Addit$ = 8						; size = 1
?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@_N@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassEscape, COMDAT
; _this$ = ecx

; 4529 : 	{	// check for class escape

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 4530 : 	if ((_L_flags & _L_esc_bsl)
; 4531 : 		&& _Char == _Esc_bsl)

  00006	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00009	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  0000e	74 17		 je	 SHORT $LN6@ClassEscap
  00010	80 7e 3e 5c	 cmp	 BYTE PTR [esi+62], 92	; 0000005cH
  00014	75 11		 jne	 SHORT $LN6@ClassEscap

; 4532 : 		{	// handle escape backslash if allowed
; 4533 : 		_Val = _Esc_bsl;

  00016	6a 5c		 push	 92			; 0000005cH
  00018	58		 pop	 eax
  00019	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 4534 : 		_Next();

  0001d	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4542 : 			_Error(regex_constants::error_escape);

$LN9@ClassEscap:

; 4535 : 		return (_Prs_chr);

  00022	33 c0		 xor	 eax, eax
  00024	40		 inc	 eax
  00025	eb 45		 jmp	 SHORT $LN7@ClassEscap
$LN6@ClassEscap:

; 4536 : 		}
; 4537 : 	else if ((_L_flags & _L_esc_wsd) && _CharacterClassEscape(_Addit))

  00027	a9 00 00 02 00	 test	 eax, 131072		; 00020000H
  0002c	74 11		 je	 SHORT $LN4@ClassEscap
  0002e	ff 75 08	 push	 DWORD PTR __Addit$[ebp]
  00031	e8 00 00 00 00	 call	 ?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_N_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClassEscape
  00036	84 c0		 test	 al, al
  00038	74 05		 je	 SHORT $LN4@ClassEscap

; 4538 : 		return (_Prs_set);

  0003a	6a 02		 push	 2
  0003c	58		 pop	 eax
  0003d	eb 2d		 jmp	 SHORT $LN7@ClassEscap
$LN4@ClassEscap:

; 4539 : 	else if (_DecimalDigits())

  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_DecimalDigits
  00046	84 c0		 test	 al, al
  00048	74 12		 je	 SHORT $LN2@ClassEscap

; 4540 : 		{	// check for invalid value
; 4541 : 		if (_Val != 0)

  0004a	66 83 7e 3c 00	 cmp	 WORD PTR [esi+60], 0
  0004f	74 d1		 je	 SHORT $LN9@ClassEscap

; 4542 : 			_Error(regex_constants::error_escape);

  00051	6a 02		 push	 2
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00059	59		 pop	 ecx

; 4543 : 		return (_Prs_chr);

  0005a	eb c6		 jmp	 SHORT $LN9@ClassEscap
$LN2@ClassEscap:

; 4544 : 		}
; 4545 : 	return (_CharacterEscape() ? _Prs_chr : _Prs_none);

  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterEscape
  00063	33 c9		 xor	 ecx, ecx
  00065	84 c0		 test	 al, al
  00067	0f 95 c1	 setne	 cl
  0006a	8b c1		 mov	 eax, ecx
$LN7@ClassEscap:
  0006c	5e		 pop	 esi

; 4546 : 	}

  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@_N@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassEscape
_TEXT	ENDS
PUBLIC	??$_Ucopy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAD@Z ; std::vector<char,std::allocator<char> >::_Ucopy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$522173 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAD@Z PROC ; std::vector<char,std::allocator<char> >::_Ucopy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1315 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1316 : 		{	// copy initializing [_First, _Last), using allocator
; 1317 : 		return (_Uninitialized_copy(_First, _Last,
; 1318 : 			_Ptr, this->_Alval));

  00003	ff 75 10	 push	 DWORD PTR __Cat$522173[ebp]
  00006	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00009	51		 push	 ecx
  0000a	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1319 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@IAEPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAD@Z ENDP ; std::vector<char,std::allocator<char> >::_Ucopy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$rotate@PAD@std@@YAPADPAD00@Z			; std::rotate<char *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$rotate@PAD@std@@YAPADPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$rotate@PAD@std@@YAPADPAD00@Z PROC			; std::rotate<char *>, COMDAT

; 3294 : 	{	// rotate [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 3295 : 	_DEBUG_RANGE(_First, _Mid);
; 3296 : 	_DEBUG_RANGE(_Mid, _Last);
; 3297 : 	if (_First != _Mid && _Mid != _Last)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  0000b	3b df		 cmp	 ebx, edi
  0000d	74 1c		 je	 SHORT $LN28@rotate
  0000f	56		 push	 esi
  00010	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  00013	3b fe		 cmp	 edi, esi
  00015	74 13		 je	 SHORT $LN30@rotate

; 3298 : 		{	// rotate and compute new first iterator
; 3299 : 		_Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
; 3300 : 			_Iter_cat(_First));

  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Rotate@PADHD@std@@YAXPAD00PAH0@Z ; std::_Rotate<char *,int,char>

; 3301 : 		_STD advance(_First, _STD distance(_Mid, _Last));

  00023	2b f7		 sub	 esi, edi
  00025	83 c4 14	 add	 esp, 20			; 00000014H
  00028	03 de		 add	 ebx, esi
$LN30@rotate:
  0002a	5e		 pop	 esi
$LN28@rotate:

; 3302 : 		}
; 3303 : 	return (_First);

  0002b	5f		 pop	 edi
  0002c	8b c3		 mov	 eax, ebx
  0002e	5b		 pop	 ebx

; 3304 : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$rotate@PAD@std@@YAPADPAD00@Z ENDP			; std::rotate<char *>
_TEXT	ENDS
PUBLIC	??$_Insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<char const *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Capacity$515280 = -8					; size = 4
__Newvec$515281 = -4					; size = 4
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1Uforward_iterator_tag@1@@Z PROC ; std::vector<char,std::allocator<char> >::_Insert<char const *>, COMDAT
; _this$ = ecx

; 1104 : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1105 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1106 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1107 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1108 : 		if (_VICONT(_Where) != this
; 1109 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1110 : 			|| this->_Mylast < _VIPTR(_Where))
; 1111 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1112 : 		_DEBUG_RANGE(_First, _Last);
; 1113 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1114 : 
; 1115 : 		size_type _Count = 0;
; 1116 : 		_Distance(_First, _Last, _Count);

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	2b 7d 0c	 sub	 edi, DWORD PTR __First$[ebp]
  0000d	8b f1		 mov	 esi, ecx

; 1117 : 
; 1118 : 		if (_Count == 0)

  0000f	0f 84 c7 00 00
	00		 je	 $LN70@Insert@3

; 1119 : 			;
; 1120 : 		else if (max_size() - size() < _Count)

  00015	8b 16		 mov	 edx, DWORD PTR [esi]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	8b c2		 mov	 eax, edx
  0001c	2b c1		 sub	 eax, ecx
  0001e	48		 dec	 eax
  0001f	3b c7		 cmp	 eax, edi
  00021	73 0b		 jae	 SHORT $LN6@Insert@3

; 1121 : 			_Xlen();	// result too long

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN75@Insert@3:
$LN6@Insert@3:
  0002e	53		 push	 ebx

; 1122 : 		else if (capacity() < size() + _Count)

  0002f	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00032	8b c1		 mov	 eax, ecx
  00034	2b c2		 sub	 eax, edx
  00036	03 c7		 add	 eax, edi
  00038	2b da		 sub	 ebx, edx
  0003a	3b d8		 cmp	 ebx, eax
  0003c	73 77		 jae	 SHORT $LN4@Insert@3

; 1123 : 			{	// not enough room, reallocate
; 1124 : 			size_type _Capacity = _Grow_to(size() + _Count);

  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ; std::vector<char,std::allocator<char> >::_Grow_to

; 1125 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  00046	6a 00		 push	 0
  00048	50		 push	 eax
  00049	89 45 f8	 mov	 DWORD PTR __Capacity$515280[ebp], eax
  0004c	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00051	89 45 fc	 mov	 DWORD PTR __Newvec$515281[ebp], eax

; 1126 : 			pointer _Ptr = _Newvec;
; 1127 : 
; 1128 : 			_TRY_BEGIN
; 1129 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1130 : 				_Newvec);	// copy prefix

  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  00059	53		 push	 ebx
  0005a	ff 75 fc	 push	 DWORD PTR __Newvec$515281[ebp]
  0005d	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >

; 1131 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff

  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0006b	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0006e	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char const *,char *,std::allocator<char> >

; 1132 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1133 : 				_Ptr);	// copy suffix

  00073	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00076	53		 push	 ebx
  00077	50		 push	 eax
  00078	51		 push	 ecx
  00079	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  0007c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >

; 1134 : 			_CATCH_ALL
; 1135 : 			_Destroy(_Newvec, _Ptr);
; 1136 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1137 : 			_RERAISE;
; 1138 : 			_CATCH_END
; 1139 : 
; 1140 : 			_Count += size();

  00081	8b 06		 mov	 eax, DWORD PTR [esi]
  00083	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00086	2b c8		 sub	 ecx, eax
  00088	83 c4 38	 add	 esp, 56			; 00000038H
  0008b	03 f9		 add	 edi, ecx

; 1141 : 			if (this->_Myfirst != 0)

  0008d	85 c0		 test	 eax, eax
  0008f	74 07		 je	 SHORT $LN66@Insert@3

; 1142 : 				{	// destroy and deallocate old array
; 1143 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1144 : 				this->_Alval.deallocate(this->_Myfirst,
; 1145 : 					this->_Myend - this->_Myfirst);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00097	59		 pop	 ecx
$LN66@Insert@3:

; 1146 : 				}
; 1147 : 
; 1148 : 			this->_Orphan_all();

  00098	8b ce		 mov	 ecx, esi
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1149 : 			this->_Myend = _Newvec + _Capacity;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR __Newvec$515281[ebp]
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$515280[ebp]
  000a6	03 c8		 add	 ecx, eax
  000a8	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1150 : 			this->_Mylast = _Newvec + _Count;

  000ab	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000ae	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1151 : 			this->_Myfirst = _Newvec;

  000b1	89 06		 mov	 DWORD PTR [esi], eax

; 1152 : 			}
; 1153 : 		else

  000b3	eb 26		 jmp	 SHORT $LN73@Insert@3
$LN4@Insert@3:

; 1154 : 			{	// new stuff fits, append and rotate into place
; 1155 : 			_Ucopy(_First, _Last, this->_Mylast);

  000b5	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000b8	50		 push	 eax
  000b9	51		 push	 ecx
  000ba	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  000bd	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  000c0	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBDPADV?$allocator@D@std@@@std@@YAPADPBD0PADAAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char const *,char *,std::allocator<char> >

; 1156 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1157 : 				this->_Mylast + _Count);

  000c5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c8	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000cb	51		 push	 ecx
  000cc	50		 push	 eax
  000cd	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  000d0	e8 00 00 00 00	 call	 ??$rotate@PAD@std@@YAPADPAD00@Z ; std::rotate<char *>
  000d5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1158 : 			this->_Mylast += _Count;

  000d8	01 7e 04	 add	 DWORD PTR [esi+4], edi
$LN73@Insert@3:
  000db	5b		 pop	 ebx

; 1159 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);

$LN70@Insert@3:
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi

; 1160 : 			}
; 1161 : 		}

  000de	c9		 leave
  000df	c2 10 00	 ret	 16			; 00000010H
$LN74@Insert@3:
??$_Insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1Uforward_iterator_tag@1@@Z ENDP ; std::vector<char,std::allocator<char> >::_Insert<char const *>
_TEXT	ENDS
PUBLIC	??$_Insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<char *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Capacity$515306 = -8					; size = 4
__Newvec$515307 = -4					; size = 4
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1Uforward_iterator_tag@1@@Z PROC ; std::vector<char,std::allocator<char> >::_Insert<char *>, COMDAT
; _this$ = ecx

; 1104 : 		void _Insert(const_iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1105 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1106 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1107 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1108 : 		if (_VICONT(_Where) != this
; 1109 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1110 : 			|| this->_Mylast < _VIPTR(_Where))
; 1111 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1112 : 		_DEBUG_RANGE(_First, _Last);
; 1113 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1114 : 
; 1115 : 		size_type _Count = 0;
; 1116 : 		_Distance(_First, _Last, _Count);

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	2b 7d 0c	 sub	 edi, DWORD PTR __First$[ebp]
  0000d	8b f1		 mov	 esi, ecx

; 1117 : 
; 1118 : 		if (_Count == 0)

  0000f	0f 84 c7 00 00
	00		 je	 $LN70@Insert@4

; 1119 : 			;
; 1120 : 		else if (max_size() - size() < _Count)

  00015	8b 16		 mov	 edx, DWORD PTR [esi]
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	8b c2		 mov	 eax, edx
  0001c	2b c1		 sub	 eax, ecx
  0001e	48		 dec	 eax
  0001f	3b c7		 cmp	 eax, edi
  00021	73 0b		 jae	 SHORT $LN6@Insert@4

; 1121 : 			_Xlen();	// result too long

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN75@Insert@4:
$LN6@Insert@4:
  0002e	53		 push	 ebx

; 1122 : 		else if (capacity() < size() + _Count)

  0002f	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00032	8b c1		 mov	 eax, ecx
  00034	2b c2		 sub	 eax, edx
  00036	03 c7		 add	 eax, edi
  00038	2b da		 sub	 ebx, edx
  0003a	3b d8		 cmp	 ebx, eax
  0003c	73 77		 jae	 SHORT $LN4@Insert@4

; 1123 : 			{	// not enough room, reallocate
; 1124 : 			size_type _Capacity = _Grow_to(size() + _Count);

  0003e	50		 push	 eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ; std::vector<char,std::allocator<char> >::_Grow_to

; 1125 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  00046	6a 00		 push	 0
  00048	50		 push	 eax
  00049	89 45 f8	 mov	 DWORD PTR __Capacity$515306[ebp], eax
  0004c	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>
  00051	89 45 fc	 mov	 DWORD PTR __Newvec$515307[ebp], eax

; 1126 : 			pointer _Ptr = _Newvec;
; 1127 : 
; 1128 : 			_TRY_BEGIN
; 1129 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1130 : 				_Newvec);	// copy prefix

  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  00059	53		 push	 ebx
  0005a	ff 75 fc	 push	 DWORD PTR __Newvec$515307[ebp]
  0005d	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >

; 1131 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff

  00066	53		 push	 ebx
  00067	50		 push	 eax
  00068	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0006b	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0006e	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char *,char *,std::allocator<char> >

; 1132 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1133 : 				_Ptr);	// copy suffix

  00073	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00076	53		 push	 ebx
  00077	50		 push	 eax
  00078	51		 push	 ecx
  00079	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  0007c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >

; 1134 : 			_CATCH_ALL
; 1135 : 			_Destroy(_Newvec, _Ptr);
; 1136 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1137 : 			_RERAISE;
; 1138 : 			_CATCH_END
; 1139 : 
; 1140 : 			_Count += size();

  00081	8b 06		 mov	 eax, DWORD PTR [esi]
  00083	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00086	2b c8		 sub	 ecx, eax
  00088	83 c4 38	 add	 esp, 56			; 00000038H
  0008b	03 f9		 add	 edi, ecx

; 1141 : 			if (this->_Myfirst != 0)

  0008d	85 c0		 test	 eax, eax
  0008f	74 07		 je	 SHORT $LN66@Insert@4

; 1142 : 				{	// destroy and deallocate old array
; 1143 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1144 : 				this->_Alval.deallocate(this->_Myfirst,
; 1145 : 					this->_Myend - this->_Myfirst);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00097	59		 pop	 ecx
$LN66@Insert@4:

; 1146 : 				}
; 1147 : 
; 1148 : 			this->_Orphan_all();

  00098	8b ce		 mov	 ecx, esi
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1149 : 			this->_Myend = _Newvec + _Capacity;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR __Newvec$515307[ebp]
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR __Capacity$515306[ebp]
  000a6	03 c8		 add	 ecx, eax
  000a8	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1150 : 			this->_Mylast = _Newvec + _Count;

  000ab	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000ae	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1151 : 			this->_Myfirst = _Newvec;

  000b1	89 06		 mov	 DWORD PTR [esi], eax

; 1152 : 			}
; 1153 : 		else

  000b3	eb 26		 jmp	 SHORT $LN73@Insert@4
$LN4@Insert@4:

; 1154 : 			{	// new stuff fits, append and rotate into place
; 1155 : 			_Ucopy(_First, _Last, this->_Mylast);

  000b5	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000b8	50		 push	 eax
  000b9	51		 push	 ecx
  000ba	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  000bd	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  000c0	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_copy<char *,char *,std::allocator<char> >

; 1156 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1157 : 				this->_Mylast + _Count);

  000c5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c8	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000cb	51		 push	 ecx
  000cc	50		 push	 eax
  000cd	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  000d0	e8 00 00 00 00	 call	 ??$rotate@PAD@std@@YAPADPAD00@Z ; std::rotate<char *>
  000d5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1158 : 			this->_Mylast += _Count;

  000d8	01 7e 04	 add	 DWORD PTR [esi+4], edi
$LN73@Insert@4:
  000db	5b		 pop	 ebx

; 1159 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);

$LN70@Insert@4:
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi

; 1160 : 			}
; 1161 : 		}

  000de	c9		 leave
  000df	c2 10 00	 ret	 16			; 00000010H
$LN74@Insert@4:
??$_Insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1Uforward_iterator_tag@1@@Z ENDP ; std::vector<char,std::allocator<char> >::_Insert<char *>
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 606  : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 607  : 		_Tidy();
; 608  : 		assign(_Count, _Ch);

  00004	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00010	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 609  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogsp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 788  : 		{	// append 1 * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 789  : 		return (append((size_type)1, _Ch));

  00003	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 790  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 887  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 888  : 		return (assign(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 889  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 929  : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 930  : 		_DEBUG_POINTER(_Ptr);
; 931  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	53		 push	 ebx
$LL5@assign@4:
  0000a	8a 18		 mov	 bl, BYTE PTR [eax]
  0000c	40		 inc	 eax
  0000d	84 db		 test	 bl, bl
  0000f	75 f9		 jne	 SHORT $LL5@assign@4
  00011	2b c2		 sub	 eax, edx
  00013	50		 push	 eax
  00014	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0001c	5b		 pop	 ebx

; 932  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
EXTRN	__imp__fwrite:PROC
EXTRN	__imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Src$510169 = -56					; size = 4
__Dest$510170 = -52					; size = 4
__Ch$510168 = -48					; size = 1
__Str$510171 = -44					; size = 28
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 322  : 		{	// put an element to stream

  00000	6a 2c		 push	 44			; 0000002cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 323  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0000c	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	83 fb ff	 cmp	 ebx, -1
  00014	75 0a		 jne	 SHORT $LN20@overflow

; 324  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00016	33 c0		 xor	 eax, eax

; 378  : 			}

$LN174@overflow:

; 379  : 		}

  00018	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0001d	c2 04 00	 ret	 4
$LN20@overflow:

; 325  : 		else if (_Mysb::pptr() != 0
; 326  : 			&& _Mysb::pptr() < _Mysb::epptr())

  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00026	85 c0		 test	 eax, eax
  00028	74 24		 je	 SHORT $LN18@overflow
  0002a	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0002d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00030	8b 38		 mov	 edi, DWORD PTR [eax]
  00032	03 39		 add	 edi, DWORD PTR [ecx]
  00034	8b ce		 mov	 ecx, esi
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0003c	3b c7		 cmp	 eax, edi
  0003e	73 0e		 jae	 SHORT $LN18@overflow

; 327  : 			{	// room in buffer, store it
; 328  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00040	8b ce		 mov	 ecx, esi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00048	88 18		 mov	 BYTE PTR [eax], bl
$LN192@overflow:

; 329  : 			return (_Meta);

  0004a	8b c3		 mov	 eax, ebx
  0004c	eb ca		 jmp	 SHORT $LN174@overflow
$LN18@overflow:

; 330  : 			}
; 331  : 		else if (_Myfile == 0)

  0004e	33 ff		 xor	 edi, edi
  00050	39 7e 54	 cmp	 DWORD PTR [esi+84], edi
  00053	75 05		 jne	 SHORT $LN16@overflow
$LN23@overflow:

; 332  : 			return (_Traits::eof());	// no open C stream, fail

  00055	83 c8 ff	 or	 eax, -1
  00058	eb be		 jmp	 SHORT $LN174@overflow
$LN16@overflow:

; 333  : 		_Reset_back();	// revert from _Mychar buffer

  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 334  : 		if (_Pcvt == 0)

  00061	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00064	75 11		 jne	 SHORT $LN15@overflow

; 335  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 336  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is

  00066	ff 76 54	 push	 DWORD PTR [esi+84]
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  0006f	59		 pop	 ecx
  00070	59		 pop	 ecx
  00071	84 c0		 test	 al, al
  00073	74 e0		 je	 SHORT $LN23@overflow
  00075	eb d3		 jmp	 SHORT $LN192@overflow
$LN15@overflow:

; 337  : 		else
; 338  : 			{	// put using codecvt facet
; 339  : 			const int _STRING_INC = 8;
; 340  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);
; 341  : 			const _Elem *_Src;
; 342  : 			char *_Dest;
; 343  : 
; 344  : 			string _Str(_STRING_INC, '\0');

  00077	57		 push	 edi
  00078	6a 08		 push	 8
  0007a	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510171[ebp]
  0007d	88 5d d0	 mov	 BYTE PTR __Ch$510168[ebp], bl
  00080	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$510171[ebp+20], 15 ; 0000000fH
  00087	89 7d e4	 mov	 DWORD PTR __Str$510171[ebp+16], edi
  0008a	c6 45 d4 00	 mov	 BYTE PTR __Str$510171[ebp], 0
  0008e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00093	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
$LN13@overflow:

; 345  : 			for (; ; )
; 346  : 				switch (_Pcvt->out(_State,
; 347  : 					&_Ch, &_Ch + 1, _Src,
; 348  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00096	83 7d e8 10	 cmp	 DWORD PTR __Str$510171[ebp+20], 16 ; 00000010H
  0009a	8b 45 d4	 mov	 eax, DWORD PTR __Str$510171[ebp]
  0009d	0f 83 89 00 00
	00		 jae	 $LN191@overflow
  000a3	8d 45 d4	 lea	 eax, DWORD PTR __Str$510171[ebp]
  000a6	8b c8		 mov	 ecx, eax
$LN101@overflow:
  000a8	03 45 e4	 add	 eax, DWORD PTR __Str$510171[ebp+16]
  000ab	8d 55 cc	 lea	 edx, DWORD PTR __Dest$510170[ebp]
  000ae	52		 push	 edx
  000af	50		 push	 eax
  000b0	51		 push	 ecx
  000b1	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  000b4	8d 45 c8	 lea	 eax, DWORD PTR __Src$510169[ebp]
  000b7	50		 push	 eax
  000b8	8d 45 d1	 lea	 eax, DWORD PTR __Ch$510168[ebp+1]
  000bb	50		 push	 eax
  000bc	8d 45 d0	 lea	 eax, DWORD PTR __Ch$510168[ebp]
  000bf	50		 push	 eax
  000c0	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
  000c3	50		 push	 eax
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  000ca	85 c0		 test	 eax, eax
  000cc	78 7c		 js	 SHORT $LN180@overflow
  000ce	83 f8 01	 cmp	 eax, 1
  000d1	7f 61		 jg	 SHORT $LN179@overflow

; 349  : 				{	// test result of converting one element
; 350  : 				case codecvt_base::partial:
; 351  : 				case codecvt_base::ok:
; 352  : 					{	// converted something, try to put it out
; 353  : 					size_t _Count = _Dest - &*_Str.begin();

  000d3	83 7d e8 10	 cmp	 DWORD PTR __Str$510171[ebp+20], 16 ; 00000010H
  000d7	8b 45 d4	 mov	 eax, DWORD PTR __Str$510171[ebp]
  000da	73 03		 jae	 SHORT $LN117@overflow
  000dc	8d 45 d4	 lea	 eax, DWORD PTR __Str$510171[ebp]
$LN117@overflow:
  000df	8b 7d cc	 mov	 edi, DWORD PTR __Dest$510170[ebp]
  000e2	2b f8		 sub	 edi, eax

; 354  : 					if (0 < _Count && _Count !=
; 355  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  000e4	74 20		 je	 SHORT $LN8@overflow
  000e6	83 7d e8 10	 cmp	 DWORD PTR __Str$510171[ebp+20], 16 ; 00000010H
  000ea	8b 45 d4	 mov	 eax, DWORD PTR __Str$510171[ebp]
  000ed	73 03		 jae	 SHORT $LN133@overflow
  000ef	8d 45 d4	 lea	 eax, DWORD PTR __Str$510171[ebp]
$LN133@overflow:
  000f2	ff 76 54	 push	 DWORD PTR [esi+84]
  000f5	57		 push	 edi
  000f6	6a 01		 push	 1
  000f8	50		 push	 eax
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000ff	83 c4 10	 add	 esp, 16			; 00000010H
  00102	3b f8		 cmp	 edi, eax
  00104	75 44		 jne	 SHORT $LN180@overflow
$LN8@overflow:

; 357  : 
; 358  : 					_Wrotesome = true;	// write succeeded
; 359  : 					if (_Src != &_Ch)

  00106	8d 45 d0	 lea	 eax, DWORD PTR __Ch$510168[ebp]
  00109	c6 46 49 01	 mov	 BYTE PTR [esi+73], 1
  0010d	39 45 c8	 cmp	 DWORD PTR __Src$510169[ebp], eax
  00110	75 4e		 jne	 SHORT $LN181@overflow

; 360  : 						return (_Meta);	// converted whole element
; 361  : 
; 362  : 					if (0 < _Count)

  00112	85 ff		 test	 edi, edi
  00114	75 80		 jne	 SHORT $LN13@overflow

; 363  : 						;
; 364  : 					else if (_Str.size() < 4 * _STRING_INC)

  00116	83 7d e4 20	 cmp	 DWORD PTR __Str$510171[ebp+16], 32 ; 00000020H
  0011a	73 2e		 jae	 SHORT $LN180@overflow

; 365  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  0011c	57		 push	 edi
  0011d	6a 08		 push	 8
  0011f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510171[ebp]
  00122	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 374  : 
; 375  : 				default:
; 376  : 					return (_Traits::eof());	// conversion failed
; 377  : 				}

  00127	e9 6a ff ff ff	 jmp	 $LN13@overflow
$LN191@overflow:

; 345  : 			for (; ; )
; 346  : 				switch (_Pcvt->out(_State,
; 347  : 					&_Ch, &_Ch + 1, _Src,
; 348  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  0012c	8b 4d d4	 mov	 ecx, DWORD PTR __Str$510171[ebp]
  0012f	e9 74 ff ff ff	 jmp	 $LN101@overflow
$LN179@overflow:
  00134	83 f8 03	 cmp	 eax, 3
  00137	75 11		 jne	 SHORT $LN180@overflow

; 366  : 					else
; 367  : 						return (_Traits::eof());	// conversion failed
; 368  : 					break;
; 369  : 					}
; 370  : 
; 371  : 				case codecvt_base::noconv:
; 372  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 373  : 						: _Traits::eof());	// no conversion, put as is

  00139	ff 76 54	 push	 DWORD PTR [esi+84]
  0013c	ff 75 d0	 push	 DWORD PTR __Ch$510168[ebp]
  0013f	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00144	59		 pop	 ecx
  00145	59		 pop	 ecx
  00146	84 c0		 test	 al, al
  00148	75 16		 jne	 SHORT $LN181@overflow
$LN180@overflow:
  0014a	83 ce ff	 or	 esi, -1
$LN182@overflow:

; 356  : 						return (_Traits::eof());	// write failed

  0014d	6a 00		 push	 0
  0014f	6a 01		 push	 1
  00151	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510171[ebp]
  00154	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00159	8b c6		 mov	 eax, esi
  0015b	e9 b8 fe ff ff	 jmp	 $LN174@overflow
$LN181@overflow:
  00160	8b f3		 mov	 esi, ebx
  00162	eb e9		 jmp	 SHORT $LN182@overflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510171[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 1522 : 		{	// determine new length, padding with null elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1523 : 		resize(_Newsize, _Elem());

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  00008	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1524 : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
EXTRN	__imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	ENDS
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
__Dest$510467 = -48					; size = 4
__Str$510471 = -44					; size = 28
__$EHRec$ = -12						; size = 12
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 587  : 		{	// put shift to initial conversion state, as needed

  00000	6a 24		 push	 36			; 00000024H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b f1		 mov	 esi, ecx

; 588  : 		if (_Pcvt == 0 || !_Wrotesome)

  0000e	33 ff		 xor	 edi, edi
  00010	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00013	0f 84 d9 00 00
	00		 je	 $LN14@Endwrite
  00019	80 7e 49 00	 cmp	 BYTE PTR [esi+73], 0
  0001d	0f 84 cf 00 00
	00		 je	 $LN14@Endwrite

; 590  : 		else
; 591  : 			{	// may have to put
; 592  : 			const int _STRING_INC = 8;
; 593  : 			char *_Dest;
; 594  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00023	8b 06		 mov	 eax, DWORD PTR [esi]
  00025	6a ff		 push	 -1
  00027	ff 50 0c	 call	 DWORD PTR [eax+12]
  0002a	83 f8 ff	 cmp	 eax, -1
  0002d	75 07		 jne	 SHORT $LN12@Endwrite

; 595  : 				return (false);

  0002f	32 c0		 xor	 al, al
  00031	e9 be 00 00 00	 jmp	 $LN133@Endwrite
$LN12@Endwrite:

; 596  : 
; 597  : 			string _Str(_STRING_INC, '\0');

  00036	57		 push	 edi
  00037	6a 08		 push	 8
  00039	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510471[ebp]
  0003c	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR __Str$510471[ebp+20], 15 ; 0000000fH
  00043	89 7d e4	 mov	 DWORD PTR __Str$510471[ebp+16], edi
  00046	c6 45 d4 00	 mov	 BYTE PTR __Str$510471[ebp], 0
  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004f	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00052	8d 5e 4c	 lea	 ebx, DWORD PTR [esi+76]
$LN11@Endwrite:

; 598  : 			for (; ; )
; 599  : 				switch (_Pcvt->unshift(_State,
; 600  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00055	83 7d e8 10	 cmp	 DWORD PTR __Str$510471[ebp+20], 16 ; 00000010H
  00059	8b 45 d4	 mov	 eax, DWORD PTR __Str$510471[ebp]
  0005c	73 36		 jae	 SHORT $LN147@Endwrite
  0005e	8d 45 d4	 lea	 eax, DWORD PTR __Str$510471[ebp]
  00061	8b c8		 mov	 ecx, eax
$LN74@Endwrite:
  00063	03 45 e4	 add	 eax, DWORD PTR __Str$510471[ebp+16]
  00066	8d 55 d0	 lea	 edx, DWORD PTR __Dest$510467[ebp]
  00069	52		 push	 edx
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0006f	53		 push	 ebx
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z
  00076	83 e8 00	 sub	 eax, 0
  00079	74 1e		 je	 SHORT $LN7@Endwrite
  0007b	48		 dec	 eax
  0007c	74 1f		 je	 SHORT $LN6@Endwrite
  0007e	48		 dec	 eax
  0007f	48		 dec	 eax
  00080	74 6c		 je	 SHORT $LN139@Endwrite
$LN138@Endwrite:
  00082	32 db		 xor	 bl, bl
$LN140@Endwrite:

; 610  : 						return (false);	// write failed

  00084	6a 00		 push	 0
  00086	6a 01		 push	 1
  00088	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510471[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00090	8a c3		 mov	 al, bl
  00092	eb 60		 jmp	 SHORT $LN133@Endwrite
$LN147@Endwrite:

; 598  : 			for (; ; )
; 599  : 				switch (_Pcvt->unshift(_State,
; 600  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00094	8b 4d d4	 mov	 ecx, DWORD PTR __Str$510471[ebp]
  00097	eb ca		 jmp	 SHORT $LN74@Endwrite
$LN7@Endwrite:

; 601  : 				{	// test result of homing conversion
; 602  : 				case codecvt_base::ok:
; 603  : 					_Wrotesome = false;	// homed successfully

  00099	c6 46 49 00	 mov	 BYTE PTR [esi+73], 0
$LN6@Endwrite:

; 604  : 
; 605  : 				case codecvt_base::partial:	// fall through
; 606  : 					{	// put any generated bytes
; 607  : 					size_t _Count = _Dest - &*_Str.begin();

  0009d	83 7d e8 10	 cmp	 DWORD PTR __Str$510471[ebp+20], 16 ; 00000010H
  000a1	8b 45 d4	 mov	 eax, DWORD PTR __Str$510471[ebp]
  000a4	73 03		 jae	 SHORT $LN90@Endwrite
  000a6	8d 45 d4	 lea	 eax, DWORD PTR __Str$510471[ebp]
$LN90@Endwrite:
  000a9	8b 7d d0	 mov	 edi, DWORD PTR __Dest$510467[ebp]
  000ac	2b f8		 sub	 edi, eax

; 608  : 					if (0 < _Count && _Count !=
; 609  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  000ae	74 20		 je	 SHORT $LN5@Endwrite
  000b0	83 7d e8 10	 cmp	 DWORD PTR __Str$510471[ebp+20], 16 ; 00000010H
  000b4	8b 45 d4	 mov	 eax, DWORD PTR __Str$510471[ebp]
  000b7	73 03		 jae	 SHORT $LN106@Endwrite
  000b9	8d 45 d4	 lea	 eax, DWORD PTR __Str$510471[ebp]
$LN106@Endwrite:
  000bc	ff 76 54	 push	 DWORD PTR [esi+84]
  000bf	57		 push	 edi
  000c0	6a 01		 push	 1
  000c2	50		 push	 eax
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  000c9	83 c4 10	 add	 esp, 16			; 00000010H
  000cc	3b f8		 cmp	 edi, eax
  000ce	75 b2		 jne	 SHORT $LN138@Endwrite
$LN5@Endwrite:

; 611  : 					if (!_Wrotesome)

  000d0	80 7e 49 00	 cmp	 BYTE PTR [esi+73], 0
  000d4	74 18		 je	 SHORT $LN139@Endwrite

; 612  : 						return (true);
; 613  : 					if (_Count == 0)

  000d6	85 ff		 test	 edi, edi
  000d8	0f 85 77 ff ff
	ff		 jne	 $LN11@Endwrite

; 614  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  000de	57		 push	 edi
  000df	6a 08		 push	 8
  000e1	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510471[ebp]
  000e4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 615  : 					break;
; 616  : 					}
; 617  : 
; 618  : 				case codecvt_base::noconv:
; 619  : 					return (true);	// nothing to do
; 620  : 
; 621  : 				default:
; 622  : 					return (false);	// conversion failed
; 623  : 				}

  000e9	e9 67 ff ff ff	 jmp	 $LN11@Endwrite
$LN139@Endwrite:
  000ee	b3 01		 mov	 bl, 1
  000f0	eb 92		 jmp	 SHORT $LN140@Endwrite
$LN14@Endwrite:

; 589  : 			return (true);

  000f2	b0 01		 mov	 al, 1

; 624  : 			}

$LN133@Endwrite:

; 625  : 		}

  000f4	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000f9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$510471[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Tidy
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1302 : 		if (this->_Myfirst != 0)

  00003	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00006	74 0e		 je	 SHORT $LN21@Tidy@5

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	59		 pop	 ecx
$LN21@Tidy@5:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

  00016	83 26 00	 and	 DWORD PTR [esi], 0

; 1310 : 		this->_Mylast = 0;

  00019	83 66 04 00	 and	 DWORD PTR [esi+4], 0

; 1311 : 		this->_Myend = 0;

  0001d	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 1312 : 		}

  00022	c3		 ret	 0
?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Tidy
_TEXT	ENDS
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\istream
xdata$x	SEGMENT
__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0
__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$5
__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
xdata$x	ENDS
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__State$ = -24						; size = 4
__Changed$ = -17					; size = 1
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 399  : 	{	// get characters into string, discard delimiter

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch

; 400  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 401  : 
; 402  : 	ios_base::iostate _State = ios_base::goodbit;
; 403  : 	bool _Changed = false;
; 404  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Istr$[ebp]
  0000f	33 ff		 xor	 edi, edi
  00011	56		 push	 esi
  00012	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00015	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
  00018	c6 45 ef 00	 mov	 BYTE PTR __Changed$[ebp], 0
  0001c	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00021	8b 4d e0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00024	33 db		 xor	 ebx, ebx
  00026	43		 inc	 ebx
  00027	53		 push	 ebx
  00028	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00031	88 45 e4	 mov	 BYTE PTR __Ok$[ebp+4], al
  00034	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx

; 405  : 
; 406  : 	if (_Ok)

  00037	84 c0		 test	 al, al
  00039	0f 84 ac 00 00
	00		 je	 $LN52@getline

; 407  : 		{	// state okay, extract characters
; 408  : 		_TRY_IO_BEGIN
; 409  : 		_Str.erase();

  0003f	6a ff		 push	 -1
  00041	57		 push	 edi
  00042	8b 7d 0c	 mov	 edi, DWORD PTR __Str$[ebp]
  00045	8b cf		 mov	 ecx, edi
  00047	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0004b	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 410  : 		const typename _Traits::int_type _Metadelim =
; 411  : 			_Traits::to_int_type(_Delim);
; 412  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00055	03 ce		 add	 ecx, esi
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0005d	8b c8		 mov	 ecx, eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
$LL10@getline:

; 413  : 
; 414  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())
; 415  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00065	83 f8 ff	 cmp	 eax, -1
  00068	75 05		 jne	 SHORT $LN7@getline

; 416  : 				{	// end of file, quit
; 417  : 				_State |= ios_base::eofbit;

  0006a	09 5d e8	 or	 DWORD PTR __State$[ebp], ebx

; 418  : 				break;

  0006d	eb 2c		 jmp	 SHORT $LN8@getline
$LN7@getline:

; 419  : 				}
; 420  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  0006f	0f b6 4d 10	 movzx	 ecx, BYTE PTR __Delim$[ebp]
  00073	3b c1		 cmp	 eax, ecx
  00075	75 1a		 jne	 SHORT $LN5@getline

; 421  : 				{	// got a delimiter, discard it and quit
; 422  : 				_Changed = true;
; 423  : 				_Istr.rdbuf()->sbumpc();

  00077	8b 06		 mov	 eax, DWORD PTR [esi]
  00079	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007c	03 ce		 add	 ecx, esi
  0007e	88 5d ef	 mov	 BYTE PTR __Changed$[ebp], bl
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00087	8b c8		 mov	 ecx, eax
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ

; 424  : 				break;

  0008f	eb 0a		 jmp	 SHORT $LN8@getline
$LN5@getline:

; 425  : 				}
; 426  : 			else if (_Str.max_size() <= _Str.size())

  00091	83 7f 10 fe	 cmp	 DWORD PTR [edi+16], -2	; fffffffeH
  00095	72 09		 jb	 SHORT $LN3@getline

; 427  : 				{	// string too large, quit
; 428  : 				_State |= ios_base::failbit;

  00097	83 4d e8 02	 or	 DWORD PTR __State$[ebp], 2
$LN8@getline:
  0009b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0009e	eb 45		 jmp	 SHORT $LN19@getline
$LN3@getline:

; 429  : 				break;
; 430  : 				}
; 431  : 			else
; 432  : 				{	// got a character, add it to string
; 433  : 				_Str += _Traits::to_char_type(_Meta);

  000a0	50		 push	 eax
  000a1	53		 push	 ebx
  000a2	8b cf		 mov	 ecx, edi
  000a4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000a9	8b 06		 mov	 eax, DWORD PTR [esi]
  000ab	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ae	03 ce		 add	 ecx, esi

; 434  : 				_Changed = true;

  000b0	88 5d ef	 mov	 BYTE PTR __Changed$[ebp], bl
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000b9	8b c8		 mov	 ecx, eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  000c1	eb a2		 jmp	 SHORT $LL10@getline
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:

; 435  : 				}
; 436  : 		_CATCH_IO_(_Istr)

  000c3	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000cb	33 db		 xor	 ebx, ebx
  000cd	43		 inc	 ebx
  000ce	53		 push	 ebx
  000cf	6a 04		 push	 4
  000d1	03 c8		 add	 ecx, eax
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  000d9	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  000dc	b8 00 00 00 00	 mov	 eax, $LN53@getline
  000e1	c3		 ret	 0
$LN53@getline:
  000e2	8b 75 08	 mov	 esi, DWORD PTR __Istr$[ebp]
$LN19@getline:

; 437  : 		}
; 438  : 
; 439  : 	if (!_Changed)

  000e5	80 7d ef 00	 cmp	 BYTE PTR __Changed$[ebp], 0
  000e9	75 04		 jne	 SHORT $LN1@getline
$LN52@getline:

; 440  : 		_State |= ios_base::failbit;

  000eb	83 4d e8 02	 or	 DWORD PTR __State$[ebp], 2
$LN1@getline:

; 441  : 	_Istr.setstate(_State);

  000ef	8b 06		 mov	 eax, DWORD PTR [esi]
  000f1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f4	6a 00		 push	 0
  000f6	ff 75 e8	 push	 DWORD PTR __State$[ebp]
  000f9	03 ce		 add	 ecx, esi
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 442  : 	return (_Istr);

  00101	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00105	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00108	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0010d	8b c6		 mov	 eax, esi

; 443  : 	}

  0010f	e8 00 00 00 00	 call	 __EH_epilog3
  00114	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Uninitialized_default_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ; std::_Uninitialized_default_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_default_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z
_TEXT	SEGMENT
__Cat$523568 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Pval$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_default_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 670  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 671  : 	_Uninit_def_fill_n(_First, _Count, _Pval, _Al,
; 672  : 		_Val_type(_First), _Ptr_cat(_First, _First));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$523568[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Pval$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_def_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 673  : 	}

  0001d	c9		 leave
  0001e	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	??$_Umove@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PAV231@00@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Umove<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PAV231@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PAV231@00@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Umove<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ; std::_Uninitialized_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@1@PAV231@00@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Umove<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *>
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Capacity$514787 = -24					; size = 4
__Newvec$514788 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Cat$523783 = 16					; size = 1
__Cat$523689 = 16					; size = 1
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z PROC ; std::vector<char,std::allocator<char> >::_Insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1104 : 		void _Insert(const_iterator _Where,

  00000	6a 0c		 push	 12			; 0000000cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 1105 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1106 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1107 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1108 : 		if (_VICONT(_Where) != this
; 1109 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1110 : 			|| this->_Mylast < _VIPTR(_Where))
; 1111 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1112 : 		_DEBUG_RANGE(_First, _Last);
; 1113 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1114 : 
; 1115 : 		size_type _Count = 0;
; 1116 : 		_Distance(_First, _Last, _Count);

  0000e	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00011	2b 7d 0c	 sub	 edi, DWORD PTR __First$[ebp]

; 1117 : 
; 1118 : 		if (_Count == 0)

  00014	0f 84 ec 00 00
	00		 je	 $LN84@Insert@5

; 1119 : 			;
; 1120 : 		else if (max_size() - size() < _Count)

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b d1		 mov	 edx, ecx
  00021	2b d0		 sub	 edx, eax
  00023	4a		 dec	 edx
  00024	3b d7		 cmp	 edx, edi
  00026	73 0b		 jae	 SHORT $LN6@Insert@5

; 1121 : 			_Xlen();	// result too long

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN89@Insert@5:
$LN6@Insert@5:

; 1122 : 		else if (capacity() < size() + _Count)

  00033	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00036	8b d0		 mov	 edx, eax
  00038	2b d1		 sub	 edx, ecx
  0003a	03 d7		 add	 edx, edi
  0003c	2b d9		 sub	 ebx, ecx
  0003e	3b da		 cmp	 ebx, edx
  00040	0f 83 97 00 00
	00		 jae	 $LN4@Insert@5

; 1123 : 			{	// not enough room, reallocate
; 1124 : 			size_type _Capacity = _Grow_to(size() + _Count);

  00046	52		 push	 edx
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ; std::vector<char,std::allocator<char> >::_Grow_to

; 1125 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  0004e	6a 00		 push	 0
  00050	50		 push	 eax
  00051	89 45 e8	 mov	 DWORD PTR __Capacity$514787[ebp], eax
  00054	e8 00 00 00 00	 call	 ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>

; 1126 : 			pointer _Ptr = _Newvec;
; 1127 : 
; 1128 : 			_TRY_BEGIN

  00059	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0005d	89 45 ec	 mov	 DWORD PTR __Newvec$514788[ebp], eax

; 1129 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1130 : 				_Newvec);	// copy prefix

  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  00065	53		 push	 ebx
  00066	ff 75 ec	 push	 DWORD PTR __Newvec$514788[ebp]
  00069	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >

; 1131 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff

  00072	ff 75 10	 push	 DWORD PTR __Cat$523689[ebp]
  00075	53		 push	 ebx
  00076	50		 push	 eax
  00077	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0007a	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0007d	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >

; 1132 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1133 : 				_Ptr);	// copy suffix

  00082	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00085	83 c4 2c	 add	 esp, 44			; 0000002cH
  00088	53		 push	 ebx
  00089	50		 push	 eax
  0008a	51		 push	 ecx
  0008b	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PADPADV?$allocator@D@std@@@std@@YAPADPAD00AAV?$allocator@D@0@@Z ; std::_Uninitialized_move<char *,char *,std::allocator<char> >

; 1138 : 			_CATCH_END
; 1139 : 
; 1140 : 			_Count += size();

  00093	8b 06		 mov	 eax, DWORD PTR [esi]
  00095	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00098	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0009c	2b c8		 sub	 ecx, eax
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
  000a1	03 f9		 add	 edi, ecx
  000a3	85 c0		 test	 eax, eax
  000a5	74 07		 je	 SHORT $LN76@Insert@5

; 1141 : 			if (this->_Myfirst != 0)
; 1142 : 				{	// destroy and deallocate old array
; 1143 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1144 : 				this->_Alval.deallocate(this->_Myfirst,
; 1145 : 					this->_Myend - this->_Myfirst);

  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ad	59		 pop	 ecx
$LN76@Insert@5:

; 1146 : 				}
; 1147 : 
; 1148 : 			this->_Orphan_all();

  000ae	8b ce		 mov	 ecx, esi
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1149 : 			this->_Myend = _Newvec + _Capacity;

  000b6	8b 45 ec	 mov	 eax, DWORD PTR __Newvec$514788[ebp]
  000b9	8b 4d e8	 mov	 ecx, DWORD PTR __Capacity$514787[ebp]
  000bc	03 c8		 add	 ecx, eax
  000be	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1150 : 			this->_Mylast = _Newvec + _Count;

  000c1	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000c4	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1151 : 			this->_Myfirst = _Newvec;

  000c7	89 06		 mov	 DWORD PTR [esi], eax

; 1152 : 			}
; 1153 : 		else

  000c9	eb 3b		 jmp	 SHORT $LN84@Insert@5
__catch$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$0:

; 1134 : 			_CATCH_ALL
; 1135 : 			_Destroy(_Newvec, _Ptr);
; 1136 : 			this->_Alval.deallocate(_Newvec, _Capacity);

  000cb	ff 75 ec	 push	 DWORD PTR __Newvec$514788[ebp]
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d3	59		 pop	 ecx

; 1137 : 			_RERAISE;

  000d4	6a 00		 push	 0
  000d6	6a 00		 push	 0
  000d8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN90@Insert@5:
$LN4@Insert@5:

; 1154 : 			{	// new stuff fits, append and rotate into place
; 1155 : 			_Ucopy(_First, _Last, this->_Mylast);

  000dd	ff 75 10	 push	 DWORD PTR __Cat$523783[ebp]
  000e0	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  000e8	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  000eb	e8 00 00 00 00	 call	 ??$_Uninit_copy@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PADV?$allocator@D@2@@std@@YAPADV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0PADAAV?$allocator@D@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,char *,std::allocator<char> >

; 1156 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1157 : 				this->_Mylast + _Count);

  000f0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f3	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000f6	51		 push	 ecx
  000f7	50		 push	 eax
  000f8	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  000fb	e8 00 00 00 00	 call	 ??$rotate@PAD@std@@YAPADPAD00@Z ; std::rotate<char *>
  00100	83 c4 20	 add	 esp, 32			; 00000020H

; 1158 : 			this->_Mylast += _Count;

  00103	01 7e 04	 add	 DWORD PTR [esi+4], edi

; 1159 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);

$LN84@Insert@5:

; 1160 : 			}
; 1161 : 		}

  00106	e8 00 00 00 00	 call	 __EH_epilog3
  0010b	c2 10 00	 ret	 16			; 00000010H
$LN88@Insert@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z ENDP ; std::vector<char,std::allocator<char> >::_Insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1@Z ; std::vector<char,std::allocator<char> >::insert<char const *>
; Function compile flags: /Ogsp
;	COMDAT ??$insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
$T523806 = 16						; size = 1
__Last$ = 16						; size = 4
??$insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1@Z PROC ; std::vector<char,std::allocator<char> >::insert<char const *>, COMDAT
; _this$ = ecx

; 1063 : 		void insert(const_iterator _Where, _Iter _First, _Iter _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1064 : 		{	// insert [_First, _Last) at _Where
; 1065 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00003	ff 75 10	 push	 DWORD PTR $T523806[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<char const *>

; 1066 : 		}

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
??$insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1@Z ENDP ; std::vector<char,std::allocator<char> >::insert<char const *>
_TEXT	ENDS
PUBLIC	??$insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1@Z ; std::vector<char,std::allocator<char> >::insert<char *>
; Function compile flags: /Ogsp
;	COMDAT ??$insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
$T523814 = 16						; size = 1
__Last$ = 16						; size = 4
??$insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1@Z PROC ; std::vector<char,std::allocator<char> >::insert<char *>, COMDAT
; _this$ = ecx

; 1063 : 		void insert(const_iterator _Where, _Iter _First, _Iter _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1064 : 		{	// insert [_First, _Last) at _Where
; 1065 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00003	ff 75 10	 push	 DWORD PTR $T523814[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<char *>

; 1066 : 		}

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
??$insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1@Z ENDP ; std::vector<char,std::allocator<char> >::insert<char *>
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 592  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 593  : 		_Tidy();
; 594  : 		assign(_Ptr);

  00004	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 595  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 763  : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 764  : 		return (assign(_Right));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 765  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogsp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 713  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 714  : 		if (this == &_Right)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	3b fe		 cmp	 edi, esi
  0000c	74 3c		 je	 SHORT $LN3@assign@5

; 715  : 			;
; 716  : 		else if (get_allocator() != _Right.get_allocator()
; 717  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 718  : 			*this = _Right;
; 719  : 		else
; 720  : 			{	// not same, clear this and steal from _Right
; 721  : 			_Tidy(true);

  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 722  : 			if (_Right._Myres < this->_BUF_SIZE)

  00017	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0001b	73 12		 jae	 SHORT $LN2@assign@5

; 723  : 				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 724  : 					_Right._Mysize + 1);

  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00020	40		 inc	 eax
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memmove
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  : 			else

  0002d	eb 07		 jmp	 SHORT $LN1@assign@5
$LN2@assign@5:

; 726  : 				{	// copy pointer
; 727  : 				this->_Bx._Ptr = _Right._Bx._Ptr;

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	89 07		 mov	 DWORD PTR [edi], eax

; 728  : 				_Right._Bx._Ptr = 0;

  00033	83 26 00	 and	 DWORD PTR [esi], 0
$LN1@assign@5:

; 729  : 				}
; 730  : 			this->_Mysize = _Right._Mysize;

  00036	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00039	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 731  : 			this->_Myres = _Right._Myres;

  0003c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003f	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 732  : 
; 733  : 			_Right._Mysize = 0;

  00042	83 66 10 00	 and	 DWORD PTR [esi+16], 0

; 734  : 			_Right._Myres = 0;

  00046	83 66 14 00	 and	 DWORD PTR [esi+20], 0
$LN3@assign@5:

; 735  : 			}
; 736  : 		return (*this);

  0004a	8b c7		 mov	 eax, edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 737  : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
EXTRN	__imp_?_BADOFF@std@@3_JB:QWORD
EXTRN	__imp__fgetpos:PROC
EXTRN	__imp___fseeki64:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 490  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx

; 491  : 		fpos_t _Fileposition;
; 492  : 
; 493  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 494  : 			&& _Way == ios_base::cur	// a relative seek
; 495  : 			&& _Pcvt == 0)	// not converting

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0000f	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00012	33 ff		 xor	 edi, edi
  00014	3b c1		 cmp	 eax, ecx
  00016	75 13		 jne	 SHORT $LN12@seekoff
  00018	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0001c	75 0d		 jne	 SHORT $LN12@seekoff
  0001e	39 7e 44	 cmp	 DWORD PTR [esi+68], edi
  00021	75 08		 jne	 SHORT $LN12@seekoff

; 496  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  00023	83 45 0c ff	 add	 DWORD PTR __Off$[ebp], -1
  00027	83 55 10 ff	 adc	 DWORD PTR __Off$[ebp+4], -1
$LN12@seekoff:

; 497  : 
; 498  : 		if (_Myfile == 0 || !_Endwrite()
; 499  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 500  : 				&& _FSEEK_OFF(_Myfile, _Off, _Way) != 0
; 501  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0002b	39 7e 54	 cmp	 DWORD PTR [esi+84], edi
  0002e	74 68		 je	 SHORT $LN3@seekoff
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00037	84 c0		 test	 al, al
  00039	74 5d		 je	 SHORT $LN3@seekoff
  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0003e	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  00041	75 06		 jne	 SHORT $LN1@seekoff
  00043	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00047	74 19		 je	 SHORT $LN2@seekoff
$LN1@seekoff:
  00049	ff 75 14	 push	 DWORD PTR __Way$[ebp]
  0004c	ff 75 10	 push	 DWORD PTR __Off$[ebp+4]
  0004f	ff 75 0c	 push	 DWORD PTR __Off$[ebp]
  00052	ff 76 54	 push	 DWORD PTR [esi+84]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	85 c0		 test	 eax, eax
  00060	75 36		 jne	 SHORT $LN3@seekoff
$LN2@seekoff:
  00062	8d 45 f8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  00065	50		 push	 eax
  00066	ff 76 54	 push	 DWORD PTR [esi+84]
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  0006f	59		 pop	 ecx
  00070	59		 pop	 ecx
  00071	85 c0		 test	 eax, eax
  00073	75 23		 jne	 SHORT $LN3@seekoff

; 503  : 
; 504  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 505  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  0007c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00082	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00085	8b 4d fc	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  00088	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0008b	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0008e	89 38		 mov	 DWORD PTR [eax], edi
  00090	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00093	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00096	eb 1c		 jmp	 SHORT $LN6@seekoff
$LN3@seekoff:

; 502  : 			return (pos_type(_BADOFF));	// report failure

  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?_BADOFF@std@@3_JB
  0009e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000a6	89 10		 mov	 DWORD PTR [eax], edx
  000a8	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000ab	89 78 08	 mov	 DWORD PTR [eax+8], edi
  000ae	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  000b1	89 78 10	 mov	 DWORD PTR [eax+16], edi
$LN6@seekoff:
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi

; 506  : 			_Fileposition));	// return new position
; 507  : 		}

  000b6	c9		 leave
  000b7	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
EXTRN	__imp__fsetpos:PROC
; Function compile flags: /Ogsp
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 512  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 513  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  00005	8b 45 14	 mov	 eax, DWORD PTR __Pos$[ebp+8]
  00008	53		 push	 ebx

; 514  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);

  00009	8b 5d 10	 mov	 ebx, DWORD PTR __Pos$[ebp+4]
  0000c	56		 push	 esi
  0000d	8b f1		 mov	 esi, ecx

; 515  : 
; 516  : 		if (_Myfile == 0 || !_Endwrite()
; 517  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 518  : 			|| _Off != 0 && _FSEEK_OFF(_Myfile, _Off, SEEK_CUR) != 0
; 519  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0000f	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  00013	89 45 f8	 mov	 DWORD PTR __Fileposition$[ebp], eax
  00016	8b 45 18	 mov	 eax, DWORD PTR __Pos$[ebp+12]
  00019	57		 push	 edi
  0001a	8b 7d 0c	 mov	 edi, DWORD PTR __Pos$[ebp]
  0001d	89 45 fc	 mov	 DWORD PTR __Fileposition$[ebp+4], eax
  00020	74 71		 je	 SHORT $LN16@seekpos
  00022	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00027	84 c0		 test	 al, al
  00029	74 68		 je	 SHORT $LN16@seekpos
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  0002e	50		 push	 eax
  0002f	ff 76 54	 push	 DWORD PTR [esi+84]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fsetpos
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
  0003a	85 c0		 test	 eax, eax
  0003c	75 55		 jne	 SHORT $LN16@seekpos
  0003e	8b c7		 mov	 eax, edi
  00040	0b c3		 or	 eax, ebx
  00042	74 14		 je	 SHORT $LN1@seekpos
  00044	6a 01		 push	 1
  00046	53		 push	 ebx
  00047	57		 push	 edi
  00048	ff 76 54	 push	 DWORD PTR [esi+84]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	85 c0		 test	 eax, eax
  00056	75 3b		 jne	 SHORT $LN16@seekpos
$LN1@seekpos:
  00058	8d 45 f8	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  0005b	50		 push	 eax
  0005c	ff 76 54	 push	 DWORD PTR [esi+84]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  00065	59		 pop	 ecx
  00066	59		 pop	 ecx
  00067	85 c0		 test	 eax, eax
  00069	75 28		 jne	 SHORT $LN16@seekpos

; 521  : 
; 522  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  0006b	8b 45 1c	 mov	 eax, DWORD PTR __Pos$[ebp+16]

; 523  : 
; 524  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  0006e	8b ce		 mov	 ecx, esi
  00070	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00073	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 525  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  00078	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  0007e	83 20 00	 and	 DWORD PTR [eax], 0
  00081	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00085	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  0008b	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0008e	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00091	eb 1b		 jmp	 SHORT $LN17@seekpos
$LN16@seekpos:

; 520  : 			return (pos_type(_BADOFF));	// report failure

  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000a4	33 c9		 xor	 ecx, ecx
  000a6	89 10		 mov	 DWORD PTR [eax], edx
  000a8	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000ab	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$LN17@seekpos:
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000b3	5b		 pop	 ebx

; 526  : 			_Fileposition));	// return new position
; 527  : 		}

  000b4	c9		 leave
  000b5	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
PUBLIC	??1?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??1?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 705  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Tidy
??1?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE@XZ ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
EXTRN	__imp__fclose:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 292  : 		{	// close the C stream

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 293  : 		_Myt *_Ans = this;
; 294  : 		if (_Myfile == 0)

  00004	33 db		 xor	 ebx, ebx
  00006	57		 push	 edi
  00007	8b fe		 mov	 edi, esi
  00009	39 5e 54	 cmp	 DWORD PTR [esi+84], ebx

; 295  : 			_Ans = 0;
; 296  : 		else

  0000c	74 18		 je	 SHORT $LN18@close

; 297  : 			{	// put any homing sequence and close file
; 298  : 			if (!_Endwrite())

  0000e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite

; 299  : 				_Ans = 0;
; 300  : 			if (fclose(_Myfile) != 0)

  00013	ff 76 54	 push	 DWORD PTR [esi+84]
  00016	84 c0		 test	 al, al
  00018	0f 44 fb	 cmove	 edi, ebx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00021	59		 pop	 ecx
  00022	85 c0		 test	 eax, eax
  00024	74 02		 je	 SHORT $LN1@close
$LN18@close:

; 301  : 				_Ans = 0;

  00026	33 ff		 xor	 edi, edi
$LN1@close:

; 302  : 			}
; 303  : 		_Init(0, _Closefl);

  00028	8b ce		 mov	 ecx, esi
  0002a	88 5e 50	 mov	 BYTE PTR [esi+80], bl
  0002d	88 5e 49	 mov	 BYTE PTR [esi+73], bl
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  00036	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
  0003e	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 304  : 		return (_Ans);

  00041	8b c7		 mov	 eax, edi
  00043	5f		 pop	 edi
  00044	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 305  : 		}

  00049	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 482  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 483  : 	return (getline(_STD move(_Istr), _Str, _Istr.widen('\n')));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Istr$[ebp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000c	6a 0a		 push	 10			; 0000000aH
  0000e	03 ce		 add	 ecx, esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00016	0f b6 c0	 movzx	 eax, al
  00019	50		 push	 eax
  0001a	ff 75 0c	 push	 DWORD PTR __Str$[ebp]
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	5e		 pop	 esi

; 484  : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
__Ptr$511723 = 8					; size = 4
__Count$ = 8						; size = 4
?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx

; 747  : 		if (max_size() < _Count)

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00011	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00017	76 0b		 jbe	 SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN56@reserve@2:
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

  00024	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00027	2b 06		 sub	 eax, DWORD PTR [esi]
  00029	6a 0c		 push	 12			; 0000000cH
  0002b	99		 cdq
  0002c	59		 pop	 ecx
  0002d	f7 f9		 idiv	 ecx
  0002f	3b c3		 cmp	 eax, ebx
  00031	73 6b		 jae	 SHORT $LN3@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

  00033	6a 00		 push	 0
  00035	53		 push	 ebx
  00036	e8 00 00 00 00	 call	 ??$_Allocate@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPAV120@@Z ; std::_Allocate<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >

; 752  : 
; 753  : 			_TRY_BEGIN
; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  00041	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  00044	52		 push	 edx
  00045	89 45 08	 mov	 DWORD PTR __Ptr$511723[ebp], eax
  00048	ff 75 08	 push	 DWORD PTR __Ptr$511723[ebp]
  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@PAV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@YAPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@PAV120@00AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@@Z ; std::_Uninitialized_move<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >

; 758  : 			_CATCH_END
; 759  : 
; 760  : 			size_type _Size = size();

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	2b c1		 sub	 eax, ecx
  0005f	6a 0c		 push	 12			; 0000000cH
  00061	99		 cdq
  00062	5f		 pop	 edi
  00063	f7 ff		 idiv	 edi
  00065	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00069	8b f8		 mov	 edi, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	74 12		 je	 SHORT $LN48@reserve@2

; 761  : 			if (this->_Myfirst != 0)

  0006f	eb 03		 jmp	 SHORT $LN55@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

$LL39@reserve@2:
  00071	83 c1 0c	 add	 ecx, 12			; 0000000cH
$LN55@reserve@2:
  00074	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00077	75 f8		 jne	 SHORT $LL39@reserve@2

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

  00079	ff 36		 push	 DWORD PTR [esi]
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00080	59		 pop	 ecx
$LN48@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

  00081	8b ce		 mov	 ecx, esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 769  : 			this->_Myend = _Ptr + _Count;

  00089	6b db 0c	 imul	 ebx, 12			; 0000000cH

; 770  : 			this->_Mylast = _Ptr + _Size;

  0008c	6b ff 0c	 imul	 edi, 12			; 0000000cH
  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$511723[ebp]
  00092	03 d8		 add	 ebx, eax
  00094	03 f8		 add	 edi, eax
  00096	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00099	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 771  : 			this->_Myfirst = _Ptr;

  0009c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@reserve@2:

; 772  : 			}
; 773  : 		}

  0009e	e8 00 00 00 00	 call	 __EH_epilog3
  000a3	c2 04 00	 ret	 4
__catch$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

  000a6	ff 75 08	 push	 DWORD PTR __Ptr$511723[ebp]
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	59		 pop	 ecx

; 757  : 			_RERAISE;

  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN57@reserve@2:
$LN54@reserve@2:
  000b8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::reserve
PUBLIC	?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
EXTRN	__imp_?c_str@?$_Yarn@D@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
;	COMDAT ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T524139 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::locale::name, COMDAT
; _this$ = ecx

; 426  : 		{	// return locale name

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 427  : 		return (_Ptr->_Name.c_str());

  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	83 65 fc 00	 and	 DWORD PTR $T524139[ebp], 0
  0000a	83 c1 18	 add	 ecx, 24			; 00000018H
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?c_str@?$_Yarn@D@std@@QBEPBDXZ
  00013	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 428  : 		}

  0001f	c9		 leave
  00020	c2 04 00	 ret	 4
?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::locale::name
_TEXT	ENDS
PUBLIC	__Ploc$GSCopy$
PUBLIC	?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::collate<char>::_Getcat
EXTRN	__imp_??1_Locinfo@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Locinfo@std@@QAE@PBD@Z:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	03H
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\locale
xdata$x	ENDS
;	COMDAT ?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T524146 = -92						; size = 36
__Ploc$GSCopy$ = -56					; size = 4
$T524145 = -52						; size = 4
$T524150 = -48						; size = 4
$T513465 = -44						; size = 28
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::collate<char>::_Getcat, COMDAT

; 66   : 		{	// return locale category mask and construct standard facet

  00000	6a 50		 push	 80			; 00000050H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR __Ppf$[ebp]
  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]

; 68   : 			*_Ppf = _NEW_CRT collate<_Elem>(
; 69   : 				_Locinfo(_Ploc->name().c_str()));

  00012	33 ff		 xor	 edi, edi
  00014	89 45 c8	 mov	 DWORD PTR __Ploc$GSCopy$[ebp], eax
  00017	89 7d d0	 mov	 DWORD PTR $T524150[ebp], edi
  0001a	3b f7		 cmp	 esi, edi
  0001c	0f 84 89 00 00
	00		 je	 $LN19@Getcat

; 67   : 		if (_Ppf != 0 && *_Ppf == 0)

  00022	39 3e		 cmp	 DWORD PTR [esi], edi
  00024	0f 85 81 00 00
	00		 jne	 $LN19@Getcat

; 68   : 			*_Ppf = _NEW_CRT collate<_Elem>(
; 69   : 				_Locinfo(_Ploc->name().c_str()));

  0002a	6a 10		 push	 16			; 00000010H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	59		 pop	 ecx
  00032	89 45 cc	 mov	 DWORD PTR $T524145[ebp], eax
  00035	6a 03		 push	 3
  00037	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0003a	5f		 pop	 edi
  0003b	85 c0		 test	 eax, eax
  0003d	74 40		 je	 SHORT $LN4@Getcat
  0003f	8b 4d c8	 mov	 ecx, DWORD PTR __Ploc$GSCopy$[ebp]
  00042	8d 45 d4	 lea	 eax, DWORD PTR $T513465[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::locale::name
  0004b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0004f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00053	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR $T524150[ebp], 1
  0005a	72 02		 jb	 SHORT $LN17@Getcat
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@Getcat:
  0005e	50		 push	 eax
  0005f	8d 4d a4	 lea	 ecx, DWORD PTR $T524146[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Locinfo@std@@QAE@PBD@Z
  00068	8b 4d cc	 mov	 ecx, DWORD PTR $T524145[ebp]
  0006b	6a 00		 push	 0
  0006d	50		 push	 eax
  0006e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00075	89 7d d0	 mov	 DWORD PTR $T524150[ebp], edi
  00078	e8 00 00 00 00	 call	 ??0?$collate@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::collate<char>::collate<char>
  0007d	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  0007f	33 c0		 xor	 eax, eax
$LN5@Getcat:
  00081	f6 45 d0 02	 test	 BYTE PTR $T524150[ebp], 2
  00085	89 06		 mov	 DWORD PTR [esi], eax
  00087	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  0008a	74 0d		 je	 SHORT $LN11@Getcat
  0008c	83 65 d0 fd	 and	 DWORD PTR $T524150[ebp], -3 ; fffffffdH
  00090	8d 4d a4	 lea	 ecx, DWORD PTR $T524146[ebp]
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Locinfo@std@@QAE@XZ
$LN11@Getcat:
  00099	f6 45 d0 01	 test	 BYTE PTR $T524150[ebp], 1
  0009d	74 0c		 je	 SHORT $LN19@Getcat
  0009f	6a 00		 push	 0
  000a1	6a 01		 push	 1
  000a3	8d 4d d4	 lea	 ecx, DWORD PTR $T513465[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN19@Getcat:

; 70   : 		return (_X_COLLATE);

  000ab	33 c0		 xor	 eax, eax
  000ad	40		 inc	 eax

; 71   : 		}

  000ae	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000b3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	ff 75 cc	 push	 DWORD PTR $T524145[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000a	8b 45 d0	 mov	 eax, DWORD PTR $T524150[ebp]
  0000d	83 e0 01	 and	 eax, 1
  00010	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  00016	83 65 d0 fe	 and	 DWORD PTR $T524150[ebp], -2 ; fffffffeH
  0001a	8d 4d d4	 lea	 ecx, DWORD PTR $T513465[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  00022	c3		 ret	 0
__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00023	8b 45 d0	 mov	 eax, DWORD PTR $T524150[ebp]
  00026	83 e0 02	 and	 eax, 2
  00029	0f 84 0d 00 00
	00		 je	 $LN10@Getcat
  0002f	83 65 d0 fd	 and	 DWORD PTR $T524150[ebp], -3 ; fffffffdH
  00033	8d 4d a4	 lea	 ecx, DWORD PTR $T524146[ebp]
  00036	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Locinfo@std@@QAE@XZ
$LN10@Getcat:
  0003c	c3		 ret	 0
__ehhandler$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00044	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::collate<char>::_Getcat
PUBLIC	??$insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1@Z ; std::vector<char,std::allocator<char> >::insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
$T524193 = 16						; size = 1
__Last$ = 16						; size = 4
??$insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1@Z PROC ; std::vector<char,std::allocator<char> >::insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1063 : 		void insert(const_iterator _Where, _Iter _First, _Iter _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1064 : 		{	// insert [_First, _Last) at _Where
; 1065 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00003	ff 75 10	 push	 DWORD PTR $T524193[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >

; 1066 : 		}

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
??$insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1@Z ENDP ; std::vector<char,std::allocator<char> >::insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<char const *>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z$0
__unwindtable$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
$T524241 = 12						; size = 1
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z PROC ; std::vector<char,std::allocator<char> >::_Construct<char const *>, COMDAT
; _this$ = ecx

; 569  : 		void _Construct(_Iter _First,

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 570  : 			_Iter _Last, input_iterator_tag)
; 571  : 		{	// initialize with [_First, _Last), input iterators
; 572  : 		_TRY_BEGIN
; 573  : 		insert(begin(), _First, _Last);

  0000f	ff 75 0c	 push	 DWORD PTR $T524241[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Insert@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PBD1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<char const *>

; 577  : 		_CATCH_END
; 578  : 		}

  00024	e8 00 00 00 00	 call	 __EH_epilog3
  00029	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z$0:

; 574  : 		_CATCH_ALL
; 575  : 		_Tidy();

  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 576  : 		_RERAISE;

  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN23@Construct:
$LN22@Construct:
  0003d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z ENDP ; std::vector<char,std::allocator<char> >::_Construct<char const *>
PUBLIC	??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<char *>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z$0
__unwindtable$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
$T524299 = 12						; size = 1
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z PROC ; std::vector<char,std::allocator<char> >::_Construct<char *>, COMDAT
; _this$ = ecx

; 569  : 		void _Construct(_Iter _First,

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 570  : 			_Iter _Last, input_iterator_tag)
; 571  : 		{	// initialize with [_First, _Last), input iterators
; 572  : 		_TRY_BEGIN
; 573  : 		insert(begin(), _First, _Last);

  0000f	ff 75 0c	 push	 DWORD PTR $T524299[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Insert@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@PAD1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<char *>

; 577  : 		_CATCH_END
; 578  : 		}

  00024	e8 00 00 00 00	 call	 __EH_epilog3
  00029	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z$0:

; 574  : 		_CATCH_ALL
; 575  : 		_Tidy();

  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 576  : 		_RERAISE;

  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN23@Construct@2:
$LN22@Construct@2:
  0003d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z ENDP ; std::vector<char,std::allocator<char> >::_Construct<char *>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 702  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 703  : 		_Tidy();
; 704  : 		assign(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	83 66 10 00	 and	 DWORD PTR [esi+16], 0
  0000d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
  00017	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 705  : 		}

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogsp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 708  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 710  : 		}

  00003	5d		 pop	 ebp

; 709  : 		return (assign(_STD forward<_Myt>(_Right)));

  00004	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??1?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
;	COMDAT ??1?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??1?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Tidy
??1?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::~match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$0
__ehfuncinfo$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\locale
xdata$x	ENDS
;	COMDAT ?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
_TEXT	SEGMENT
$T524413 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z PROC ; std::collate<char>::do_transform, COMDAT
; _this$ = ecx

; 102  : 		{	// transform [_First, _Last) to key string

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	33 db		 xor	 ebx, ebx
  0000e	89 5d f0	 mov	 DWORD PTR $T524413[ebp], ebx

; 103  : 		_DEBUG_RANGE(_First, _Last);
; 104  : 		size_t _Count;
; 105  : 		string_type _Str;

  00011	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0001e	88 1e		 mov	 BYTE PTR [esi], bl

; 116  : 		return (_Str);

  00020	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00023	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
  00026	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00029	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T524413[ebp], 1
  00030	74 45		 je	 SHORT $LN77@do_transfo
  00032	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LN3@do_transfo:

; 108  : 			{	// grow string if locale-specific strxfrm fails
; 109  : 			_Str.resize(_Count);

  00035	53		 push	 ebx
  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 110  : 			if ((_Count = _LStrxfrm(&*_Str.begin(),
; 111  : 				&*_Str.begin() + _Str.size(),
; 112  : 					_First, _Last, &_Coll)) <= _Str.size())

  0003e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00041	83 fa 10	 cmp	 edx, 16			; 00000010H
  00044	72 04		 jb	 SHORT $LN40@do_transfo
  00046	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00048	eb 02		 jmp	 SHORT $LN41@do_transfo
$LN40@do_transfo:
  0004a	8b ce		 mov	 ecx, esi
$LN41@do_transfo:
  0004c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00052	72 04		 jb	 SHORT $LN58@do_transfo
  00054	8b 16		 mov	 edx, DWORD PTR [esi]
  00056	eb 02		 jmp	 SHORT $LN59@do_transfo
$LN58@do_transfo:
  00058	8b d6		 mov	 edx, esi
$LN59@do_transfo:
  0005a	57		 push	 edi
  0005b	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0005e	03 c8		 add	 ecx, eax
  00060	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  00063	51		 push	 ecx
  00064	52		 push	 edx
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___Strxfrm
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00071	76 04		 jbe	 SHORT $LN77@do_transfo

; 106  : 
; 107  : 		for (_Count = _Last - _First; 0 < _Count; )

  00073	3b c3		 cmp	 eax, ebx
  00075	77 be		 ja	 SHORT $LN3@do_transfo
$LN77@do_transfo:

; 113  : 				break;
; 114  : 			}
; 115  : 		_Str.resize(_Count);

  00077	53		 push	 ebx
  00078	50		 push	 eax
  00079	8b ce		 mov	 ecx, esi
  0007b	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 116  : 		return (_Str);

  00080	8b c6		 mov	 eax, esi

; 117  : 		}

  00082	e8 00 00 00 00	 call	 __EH_epilog3
  00087	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T524413[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN7@do_transfo
  0000c	83 65 f0 fe	 and	 DWORD PTR $T524413[ebp], -2 ; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@do_transfo:
  00018	c3		 ret	 0
__ehhandler$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ENDP ; std::collate<char>::do_transform
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
xdata$x	SEGMENT
__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 143  : 		{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 144  : 		if (_Myfile != 0)

  0001b	83 7e 54 00	 cmp	 DWORD PTR [esi+84], 0
  0001f	74 05		 je	 SHORT $LN2@basic_file

; 145  : 			_Reset_back();	// revert from _Mychar buffer

  00021	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 146  : 		if (_Closef)

  00026	80 7e 50 00	 cmp	 BYTE PTR [esi+80], 0
  0002a	74 07		 je	 SHORT $LN1@basic_file

; 147  : 			close();

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:

; 148  : 		}

  00033	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00037	8b ce		 mov	 ecx, esi
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003f	e8 00 00 00 00	 call	 __EH_epilog3
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	??0?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??0?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ
_TEXT	SEGMENT
??0?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 994  : 	match_results()

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 08		 mov	 DWORD PTR [eax], ecx
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000f	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00012	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00015	88 48 1c	 mov	 BYTE PTR [eax+28], cl
  00018	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  0001b	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  0001e	88 48 28	 mov	 BYTE PTR [eax+40], cl
  00021	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00024	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00027	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 995  : 		{	// construct empty match_results
; 996  : 		}

  0002a	c3		 ret	 0
??0?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 07		 je	 SHORT $LN1@scalar@19
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	59		 pop	 ecx
$LN1@scalar@19:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::str
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ$1
__ehfuncinfo$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ
_TEXT	SEGMENT
$T524778 = -76						; size = 4
$T510554 = -72						; size = 28
$T510555 = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ PROC ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::str, COMDAT
; _this$ = ecx

; 568  : 		{	// convert matched text to string

  00000	6a 40		 push	 64			; 00000040H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b c1		 mov	 eax, ecx
  0000e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00011	33 db		 xor	 ebx, ebx
  00013	89 5d b4	 mov	 DWORD PTR $T524778[ebp], ebx

; 569  : 		return (matched ?
; 570  : 			_STD basic_string<value_type>(this->first, this->second)
; 571  : 			: _STD basic_string<value_type>());

  00016	38 58 08	 cmp	 BYTE PTR [eax+8], bl
  00019	74 19		 je	 SHORT $LN3@str
  0001b	ff 70 04	 push	 DWORD PTR [eax+4]
  0001e	8d 4d b8	 lea	 ecx, DWORD PTR $T510554[ebp]
  00021	ff 30		 push	 DWORD PTR [eax]
  00023	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00028	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002b	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR $T524778[ebp], 1
  00032	eb 1e		 jmp	 SHORT $LN4@str
$LN3@str:
  00034	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T510555[ebp+20], 15 ; 0000000fH
  0003b	89 5d e4	 mov	 DWORD PTR $T510555[ebp+16], ebx
  0003e	88 5d d4	 mov	 BYTE PTR $T510555[ebp], bl
  00041	8d 45 d4	 lea	 eax, DWORD PTR $T510555[ebp]
  00044	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0004b	c7 45 b4 02 00
	00 00		 mov	 DWORD PTR $T524778[ebp], 2
$LN4@str:
  00052	50		 push	 eax
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005a	83 4d b4 04	 or	 DWORD PTR $T524778[ebp], 4
  0005e	f6 45 b4 02	 test	 BYTE PTR $T524778[ebp], 2
  00062	74 0f		 je	 SHORT $LN39@str
  00064	83 65 b4 fd	 and	 DWORD PTR $T524778[ebp], -3 ; fffffffdH
  00068	53		 push	 ebx
  00069	6a 01		 push	 1
  0006b	8d 4d d4	 lea	 ecx, DWORD PTR $T510555[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN39@str:
  00073	f6 45 b4 01	 test	 BYTE PTR $T524778[ebp], 1
  00077	74 0b		 je	 SHORT $LN43@str
  00079	53		 push	 ebx
  0007a	6a 01		 push	 1
  0007c	8d 4d b8	 lea	 ecx, DWORD PTR $T510554[ebp]
  0007f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
$LN43@str:
  00084	8b c6		 mov	 eax, esi

; 572  : 		}

  00086	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0008b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ$0:
  00000	8b 45 b4	 mov	 eax, DWORD PTR $T524778[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@str
  0000c	83 65 b4 fe	 and	 DWORD PTR $T524778[ebp], -2 ; fffffffeH
  00010	8d 4d b8	 lea	 ecx, DWORD PTR $T510554[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@str:
  00018	c3		 ret	 0
__unwindfunclet$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ$1:
  00019	8b 45 b4	 mov	 eax, DWORD PTR $T524778[ebp]
  0001c	83 e0 02	 and	 eax, 2
  0001f	0f 84 0c 00 00
	00		 je	 $LN8@str
  00025	83 65 b4 fd	 and	 DWORD PTR $T524778[ebp], -3 ; fffffffdH
  00029	8d 4d d4	 lea	 ecx, DWORD PTR $T510555[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@str:
  00031	c3		 ret	 0
__ehhandler$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ
  00052	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ ENDP ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::str
PUBLIC	?_Reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXI@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Reserve
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXI@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1291 : 		size_type _Size = size();

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	2b c1		 sub	 eax, ecx
  0000d	57		 push	 edi
  0000e	99		 cdq
  0000f	6a 0c		 push	 12			; 0000000cH
  00011	5f		 pop	 edi
  00012	f7 ff		 idiv	 edi
  00014	8b f8		 mov	 edi, eax

; 1292 : 		if (max_size() - _Count < _Size)

  00016	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  0001b	2b 45 08	 sub	 eax, DWORD PTR __Count$[ebp]
  0001e	3b c7		 cmp	 eax, edi
  00020	73 0b		 jae	 SHORT $LN4@Reserve

; 1293 : 			_Xlen();

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@Reserve:
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

  0002d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00030	2b c1		 sub	 eax, ecx
  00032	6a 0c		 push	 12			; 0000000cH
  00034	99		 cdq
  00035	59		 pop	 ecx
  00036	f7 f9		 idiv	 ecx
  00038	03 7d 08	 add	 edi, DWORD PTR __Count$[ebp]
  0003b	3b f8		 cmp	 edi, eax
  0003d	76 10		 jbe	 SHORT $LN1@Reserve

; 1295 : 			;
; 1296 : 		else
; 1297 : 			reserve(_Grow_to(_Size));

  0003f	57		 push	 edi
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IBEII@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Grow_to
  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::reserve
$LN1@Reserve:
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 1298 : 		}

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN20@Reserve:
?_Reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXI@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Reserve
_TEXT	ENDS
PUBLIC	?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::collate<char> >::_Psave
PUBLIC	??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z ; std::use_facet<std::collate<char> >
EXTRN	__imp_?id@?$collate@D@std@@2V0locale@2@A:DWORD
;	COMDAT ?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::collate<char> >::_Psave
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T524937 = -32						; size = 12
__Lock$513429 = -20					; size = 4
__Psave$513430 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::collate<char> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	6a 14		 push	 20			; 00000014H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0000c	6a 00		 push	 0
  0000e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$513429[ebp]
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00017	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::collate<char> >::_Psave

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$collate@D@std@@2V0locale@2@A
  00023	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00027	89 75 f0	 mov	 DWORD PTR __Psave$513430[ebp], esi
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00039	8b f8		 mov	 edi, eax

; 511  : 
; 512  : 		if (_Pf != 0)

  0003b	85 ff		 test	 edi, edi
  0003d	75 4f		 jne	 SHORT $LN10@use_facet@3

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  0003f	85 f6		 test	 esi, esi
  00041	74 04		 je	 SHORT $LN4@use_facet@3

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  00043	8b fe		 mov	 edi, esi
  00045	eb 47		 jmp	 SHORT $LN10@use_facet@3
$LN4@use_facet@3:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00047	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  0004a	8d 45 f0	 lea	 eax, DWORD PTR __Psave$513430[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::collate<char>::_Getcat
  00053	59		 pop	 ecx
  00054	59		 pop	 ecx
  00055	83 f8 ff	 cmp	 eax, -1
  00058	75 1c		 jne	 SHORT $LN2@use_facet@3

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW_NCEE(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0005f	8d 4d e0	 lea	 ecx, DWORD PTR $T524937[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@std@@QAE@PBD@Z
  00068	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  0006d	8d 45 e0	 lea	 eax, DWORD PTR $T524937[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@use_facet@3:
$LN2@use_facet@3:

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else
; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  00076	8b 7d f0	 mov	 edi, DWORD PTR __Psave$513430[ebp]

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 532  : 			_Pfmod->_Incref();

  00079	8b cf		 mov	 ecx, edi
  0007b	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::collate<char> >::_Psave
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Incref@facet@locale@std@@QAEXXZ

; 533  : 			_Pfmod->_Register();

  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ?_Facet_Register@facet@locale@std@@CAXPAV123@@Z ; std::locale::facet::_Facet_Register
  0008d	59		 pop	 ecx
$LN10@use_facet@3:

; 534  : 			}
; 535  : 
; 536  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  0008e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$513429[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0009b	8b c7		 mov	 eax, edi

; 537  : 	_END_LOCK()
; 538  : 	}

  0009d	e8 00 00 00 00	 call	 __EH_epilog3
  000a2	c3		 ret	 0
$LN13@use_facet@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$513429[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::collate<char> >
PUBLIC	??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z$0
__unwindtable$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z$2
__ehfuncinfo$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
$T524995 = 12						; size = 1
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z PROC ; std::vector<char,std::allocator<char> >::_Construct<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 569  : 		void _Construct(_Iter _First,

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 570  : 			_Iter _Last, input_iterator_tag)
; 571  : 		{	// initialize with [_First, _Last), input iterators
; 572  : 		_TRY_BEGIN
; 573  : 		insert(begin(), _First, _Last);

  0000f	ff 75 0c	 push	 DWORD PTR $T524995[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00017	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Insert@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@DV?$allocator@D@std@@@std@@@1@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Insert<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >

; 577  : 		_CATCH_END
; 578  : 		}

  00024	e8 00 00 00 00	 call	 __EH_epilog3
  00029	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z$0:

; 574  : 		_CATCH_ALL
; 575  : 		_Tidy();

  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 576  : 		_RERAISE;

  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN23@Construct@3:
$LN22@Construct@3:
  0003d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z ENDP ; std::vector<char,std::allocator<char> >::_Construct<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0PBD@?$vector@DV?$allocator@D@std@@@std@@QAE@PBD0@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><char const *>
; Function compile flags: /Ogsp
;	COMDAT ??$?0PBD@?$vector@DV?$allocator@D@std@@@std@@QAE@PBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T525015 = 12						; size = 1
__Last$ = 12						; size = 4
??$?0PBD@?$vector@DV?$allocator@D@std@@@std@@QAE@PBD0@Z PROC ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><char const *>, COMDAT
; _this$ = ecx

; 549  : 		{	// construct from [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 550  : 		_Construct(_First, _Last, _Iter_cat(_First));

  00004	ff 75 0c	 push	 DWORD PTR $T525015[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000c	33 c0		 xor	 eax, eax
  0000e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00011	89 06		 mov	 DWORD PTR [esi], eax
  00013	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00016	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00019	e8 00 00 00 00	 call	 ??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<char const *>

; 551  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
??$?0PBD@?$vector@DV?$allocator@D@std@@@std@@QAE@PBD0@Z ENDP ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><char const *>
_TEXT	ENDS
PUBLIC	??$?0PAD@?$vector@DV?$allocator@D@std@@@std@@QAE@PAD0@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><char *>
; Function compile flags: /Ogsp
;	COMDAT ??$?0PAD@?$vector@DV?$allocator@D@std@@@std@@QAE@PAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T525037 = 12						; size = 1
__Last$ = 12						; size = 4
??$?0PAD@?$vector@DV?$allocator@D@std@@@std@@QAE@PAD0@Z PROC ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><char *>, COMDAT
; _this$ = ecx

; 549  : 		{	// construct from [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 550  : 		_Construct(_First, _Last, _Iter_cat(_First));

  00004	ff 75 0c	 push	 DWORD PTR $T525037[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000c	33 c0		 xor	 eax, eax
  0000e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00011	89 06		 mov	 DWORD PTR [esi], eax
  00013	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00016	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00019	e8 00 00 00 00	 call	 ??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<char *>

; 551  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
??$?0PAD@?$vector@DV?$allocator@D@std@@@std@@QAE@PAD0@Z ENDP ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><char *>
_TEXT	ENDS
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
EXTRN	__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\fstream
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T525057 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 714  : 		{	// construct with named file and specified mode

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00011	33 db		 xor	 ebx, ebx
  00013	33 ff		 xor	 edi, edi
  00015	43		 inc	 ebx
  00016	89 7d f0	 mov	 DWORD PTR $T525057[ebp], edi
  00019	39 7d 14	 cmp	 DWORD PTR _$initVBases$[ebp], edi
  0001c	74 15		 je	 SHORT $LN2@basic_ifst
  0001e	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0002d	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00030	89 5d f0	 mov	 DWORD PTR $T525057[ebp], ebx
$LN2@basic_ifst:
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
  0003a	57		 push	 edi
  0003b	8b ce		 mov	 ecx, esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00043	8b 06		 mov	 eax, DWORD PTR [esi]
  00045	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00048	6a 00		 push	 0
  0004a	8b cf		 mov	 ecx, edi
  0004c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004f	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00056	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >

; 715  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)

  0005b	ff 75 10	 push	 DWORD PTR __Prot$[ebp]
  0005e	8b 45 0c	 mov	 eax, DWORD PTR __Mode$[ebp]
  00061	0b c3		 or	 eax, ebx
  00063	50		 push	 eax
  00064	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  00067	8b cf		 mov	 ecx, edi
  00069	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006d	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00072	85 c0		 test	 eax, eax
  00074	75 10		 jne	 SHORT $LN1@basic_ifst

; 716  : 			_Myios::setstate(ios_base::failbit);

  00076	50		 push	 eax
  00077	8b 06		 mov	 eax, DWORD PTR [esi]
  00079	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007c	6a 02		 push	 2
  0007e	03 ce		 add	 ecx, esi
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN1@basic_ifst:

; 717  : 		}

  00086	8b c6		 mov	 eax, esi
  00088	e8 00 00 00 00	 call	 __EH_epilog3
  0008d	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T525057[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 10 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 f0 fe	 and	 DWORD PTR $T525057[ebp], -2 ; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 68	 add	 ecx, 104		; 00000068H
  00016	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN6@basic_ifst:
  0001c	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 10	 add	 ecx, 16			; 00000010H
  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00029	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 10	 add	 ecx, 16			; 00000010H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
__ehfuncinfo$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 845  : 		{	// destroy the object

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 41 98	 mov	 eax, DWORD PTR [ecx-104]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	c7 44 08 98 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-104], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  0001d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 846  : 		}

  00021	8d 71 a8	 lea	 esi, DWORD PTR [ecx-88]
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0002b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0002f	8b ce		 mov	 ecx, esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00037	e8 00 00 00 00	 call	 __EH_epilog3
  0003c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	??B?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
;	COMDAT ??B?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T525081 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 563  : 		{	// convert matched text to string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 564  : 		return (str());

  00004	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00007	83 65 fc 00	 and	 DWORD PTR $T525081[ebp], 0
  0000b	e8 00 00 00 00	 call	 ?str@?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@XZ ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::str
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 565  : 		}

  00013	c9		 leave
  00014	c2 04 00	 ret	 4
??B?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?resize@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::resize
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ?resize@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z
_TEXT	SEGMENT
__Cat$525182 = 8					; size = 1
$T525090 = 8						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z PROC ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::resize, COMDAT
; _this$ = ecx

; 857  : 		{	// determine new length, padding with _Ty() elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 858  : 		if (_Newsize < size())

  00007	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000a	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0000c	57		 push	 edi
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c3		 sub	 eax, ebx
  00011	6a 0c		 push	 12			; 0000000cH
  00013	99		 cdq
  00014	5f		 pop	 edi
  00015	f7 ff		 idiv	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0001a	3b c7		 cmp	 eax, edi
  0001c	76 14		 jbe	 SHORT $LN44@resize@2

; 859  : 			erase(begin() + _Newsize, end());

  0001e	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00021	51		 push	 ecx
  00022	03 fb		 add	 edi, ebx
  00024	57		 push	 edi
  00025	8d 45 08	 lea	 eax, DWORD PTR $T525090[ebp]
  00028	50		 push	 eax
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?erase@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@@2@0@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::erase

; 860  : 		else if (size() < _Newsize)

  00030	eb 48		 jmp	 SHORT $LN1@resize@2
$LN44@resize@2:
  00032	73 46		 jae	 SHORT $LN1@resize@2

; 861  : 			{	// pad as needed
; 862  : 			_Reserve(_Newsize - size());

  00034	8b cf		 mov	 ecx, edi
  00036	2b c8		 sub	 ecx, eax
  00038	51		 push	 ecx
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXI@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Reserve

; 863  : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 864  : 				(_Ty *)0, this->_Alval);

  00040	ff 75 08	 push	 DWORD PTR __Cat$525182[ebp]
  00043	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00046	6a 00		 push	 0
  00048	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0004b	50		 push	 eax
  0004c	6a 00		 push	 0
  0004e	8b c1		 mov	 eax, ecx
  00050	2b 06		 sub	 eax, DWORD PTR [esi]
  00052	6a 0c		 push	 12			; 0000000cH
  00054	99		 cdq
  00055	5b		 pop	 ebx
  00056	f7 fb		 idiv	 ebx
  00058	8b d7		 mov	 edx, edi
  0005a	2b d0		 sub	 edx, eax
  0005c	52		 push	 edx
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ??$_Uninit_def_fill_n@PAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@IV123@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@V123@@std@@YAXPAV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@0@IPBV120@AAV?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > *,unsigned int,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >

; 865  : 			this->_Mylast += _Newsize - size();

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b c1		 mov	 eax, ecx
  00068	2b 06		 sub	 eax, DWORD PTR [esi]
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	99		 cdq
  0006e	f7 fb		 idiv	 ebx
  00070	2b f8		 sub	 edi, eax
  00072	6b ff 0c	 imul	 edi, 12			; 0000000cH
  00075	03 f9		 add	 edi, ecx
  00077	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN1@resize@2:
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx

; 866  : 			}
; 867  : 		}

  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
?resize@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z ENDP ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::resize
_TEXT	ENDS
PUBLIC	?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getcoll
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	SEGMENT
__unwindtable$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ$0
__ehfuncinfo$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ
_TEXT	SEGMENT
$T525194 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ PROC ; std::tr1::_Regex_traits<char>::_Getcoll, COMDAT
; _this$ = ecx

; 411  : 		{	// get collate facet pointer

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 412  : 		if (_Pcoll == 0)

  0000e	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00011	75 1e		 jne	 SHORT $LN1@Getcoll

; 413  : 			*((const _STD collate<_Elem> **)&_Pcoll) =
; 414  : 				&_USE(getloc(), _STD collate<_Elem>);

  00013	8d 45 f0	 lea	 eax, DWORD PTR $T525194[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?getloc@?$_Regex_traits@D@tr1@std@@QBE?AVlocale@3@XZ ; std::tr1::_Regex_traits<char>::getloc
  0001c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z ; std::use_facet<std::collate<char> >
  00026	59		 pop	 ecx
  00027	8d 4d f0	 lea	 ecx, DWORD PTR $T525194[ebp]
  0002a	89 06		 mov	 DWORD PTR [esi], eax
  0002c	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN1@Getcoll:

; 415  : 		return (_Pcoll);

  00031	8b 06		 mov	 eax, DWORD PTR [esi]

; 416  : 		}

  00033	e8 00 00 00 00	 call	 __EH_epilog3
  00038	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T525194[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ ENDP ; std::tr1::_Regex_traits<char>::_Getcoll
PUBLIC	??$?0V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$?0V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T525206 = 12						; size = 1
__Last$ = 12						; size = 4
??$?0V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z PROC ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 549  : 		{	// construct from [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 550  : 		_Construct(_First, _Last, _Iter_cat(_First));

  00004	ff 75 0c	 push	 DWORD PTR $T525206[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000c	33 c0		 xor	 eax, eax
  0000e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00011	89 06		 mov	 DWORD PTR [esi], eax
  00013	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00016	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00019	e8 00 00 00 00	 call	 ??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >

; 551  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
??$?0V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ENDP ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> ><std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::tr1::_Regex_traits<char>::transform_primary<char const *>
EXTRN	__imp_?tolower@?$ctype@D@std@@QBEPBDPADPBD@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$2
__ehfuncinfo$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
_TEXT	SEGMENT
$T525232 = -72						; size = 4
$T525353 = -68						; size = 1
___$ReturnUdt$GSCopy$ = -68				; size = 4
__Temp$514741 = -64					; size = 16
_this$GSCopy$ = -48					; size = 4
$T514750 = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z PROC ; std::tr1::_Regex_traits<char>::transform_primary<char const *>, COMDAT
; _this$ = ecx

; 347  : 		string_type transform_primary(_FwdIt _First, _FwdIt _Last) const

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00012	33 db		 xor	 ebx, ebx
  00014	89 5d b8	 mov	 DWORD PTR $T525232[ebp], ebx
  00017	89 4d d0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]

; 348  : 		{	// apply locale-specific case-insensitive transformation
; 349  : 		string_type _Res;

  0001d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00024	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00027	89 75 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0002a	88 1e		 mov	 BYTE PTR [esi], bl

; 360  : 		return (_Res);

  0002c	33 ff		 xor	 edi, edi
  0002e	47		 inc	 edi
  0002f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00032	89 7d b8	 mov	 DWORD PTR $T525232[ebp], edi
  00035	3b c1		 cmp	 eax, ecx
  00037	74 75		 je	 SHORT $LN104@transform_

; 350  : 
; 351  : 		if (_First != _Last)
; 352  : 			{	// non-empty string, transform it
; 353  : 			_STD vector<_Elem> _Temp(_First, _Last);

  00039	ff 75 bc	 push	 DWORD PTR $T525353[ebp]
  0003c	89 5d c0	 mov	 DWORD PTR __Temp$514741[ebp], ebx
  0003f	51		 push	 ecx
  00040	50		 push	 eax
  00041	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$514741[ebp]
  00044	89 5d c4	 mov	 DWORD PTR __Temp$514741[ebp+4], ebx
  00047	89 5d c8	 mov	 DWORD PTR __Temp$514741[ebp+8], ebx
  0004a	e8 00 00 00 00	 call	 ??$_Construct@PBD@?$vector@DV?$allocator@D@std@@@std@@QAEXPBD0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<char const *>

; 354  : 
; 355  : 			_Getctype()->tolower(&*_Temp.begin(),
; 356  : 				&*_Temp.begin() + _Temp.size());

  0004f	8b 4d c0	 mov	 ecx, DWORD PTR __Temp$514741[ebp]
  00052	8b 45 c4	 mov	 eax, DWORD PTR __Temp$514741[ebp+4]
  00055	2b c1		 sub	 eax, ecx
  00057	03 c1		 add	 eax, ecx
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0005e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00061	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00066	8b c8		 mov	 ecx, eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEPBDPADPBD@Z

; 357  : 			_Res = _Getcoll()->transform(&*_Temp.begin(),
; 358  : 				&*_Temp.begin() + _Temp.size());

  0006e	8b 4d c0	 mov	 ecx, DWORD PTR __Temp$514741[ebp]
  00071	8b 45 c4	 mov	 eax, DWORD PTR __Temp$514741[ebp+4]
  00074	2b c1		 sub	 eax, ecx
  00076	03 c1		 add	 eax, ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0007d	8d 45 d4	 lea	 eax, DWORD PTR $T514750[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getcoll
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 ?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::collate<char>::transform
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00099	53		 push	 ebx
  0009a	57		 push	 edi
  0009b	8d 4d d4	 lea	 ecx, DWORD PTR $T514750[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 359  : 			}

  000a3	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$514741[ebp]
  000a6	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000a9	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
$LN104@transform_:

; 360  : 		return (_Res);

  000ae	8b c6		 mov	 eax, esi

; 361  : 		}

  000b0	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000b5	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$0:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T525232[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@transform_
  0000c	83 65 b8 fe	 and	 DWORD PTR $T525232[ebp], -2 ; fffffffeH
  00010	8b 4d bc	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@transform_:
  00018	c3		 ret	 0
__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$1:
  00019	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$514741[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$2:
  00021	8d 4d d4	 lea	 ecx, DWORD PTR $T514750[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ENDP ; std::tr1::_Regex_traits<char>::transform_primary<char const *>
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z ; std::tr1::_Regex_traits<char>::transform_primary<char *>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z$2
__ehfuncinfo$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z
_TEXT	SEGMENT
$T525548 = -72						; size = 4
$T525669 = -68						; size = 1
___$ReturnUdt$GSCopy$ = -68				; size = 4
__Temp$514760 = -64					; size = 16
_this$GSCopy$ = -48					; size = 4
$T514769 = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z PROC ; std::tr1::_Regex_traits<char>::transform_primary<char *>, COMDAT
; _this$ = ecx

; 347  : 		string_type transform_primary(_FwdIt _First, _FwdIt _Last) const

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00012	33 db		 xor	 ebx, ebx
  00014	89 5d b8	 mov	 DWORD PTR $T525548[ebp], ebx
  00017	89 4d d0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]

; 348  : 		{	// apply locale-specific case-insensitive transformation
; 349  : 		string_type _Res;

  0001d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  00024	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00027	89 75 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0002a	88 1e		 mov	 BYTE PTR [esi], bl

; 360  : 		return (_Res);

  0002c	33 ff		 xor	 edi, edi
  0002e	47		 inc	 edi
  0002f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00032	89 7d b8	 mov	 DWORD PTR $T525548[ebp], edi
  00035	3b c1		 cmp	 eax, ecx
  00037	74 75		 je	 SHORT $LN104@transform_@2

; 350  : 
; 351  : 		if (_First != _Last)
; 352  : 			{	// non-empty string, transform it
; 353  : 			_STD vector<_Elem> _Temp(_First, _Last);

  00039	ff 75 bc	 push	 DWORD PTR $T525669[ebp]
  0003c	89 5d c0	 mov	 DWORD PTR __Temp$514760[ebp], ebx
  0003f	51		 push	 ecx
  00040	50		 push	 eax
  00041	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$514760[ebp]
  00044	89 5d c4	 mov	 DWORD PTR __Temp$514760[ebp+4], ebx
  00047	89 5d c8	 mov	 DWORD PTR __Temp$514760[ebp+8], ebx
  0004a	e8 00 00 00 00	 call	 ??$_Construct@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<char *>

; 354  : 
; 355  : 			_Getctype()->tolower(&*_Temp.begin(),
; 356  : 				&*_Temp.begin() + _Temp.size());

  0004f	8b 4d c0	 mov	 ecx, DWORD PTR __Temp$514760[ebp]
  00052	8b 45 c4	 mov	 eax, DWORD PTR __Temp$514760[ebp+4]
  00055	2b c1		 sub	 eax, ecx
  00057	03 c1		 add	 eax, ecx
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0005e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00061	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00066	8b c8		 mov	 ecx, eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEPBDPADPBD@Z

; 357  : 			_Res = _Getcoll()->transform(&*_Temp.begin(),
; 358  : 				&*_Temp.begin() + _Temp.size());

  0006e	8b 4d c0	 mov	 ecx, DWORD PTR __Temp$514760[ebp]
  00071	8b 45 c4	 mov	 eax, DWORD PTR __Temp$514760[ebp+4]
  00074	2b c1		 sub	 eax, ecx
  00076	03 c1		 add	 eax, ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0007d	8d 45 d4	 lea	 eax, DWORD PTR $T514769[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getcoll
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 ?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::collate<char>::transform
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00099	53		 push	 ebx
  0009a	57		 push	 edi
  0009b	8d 4d d4	 lea	 ecx, DWORD PTR $T514769[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 359  : 			}

  000a3	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$514760[ebp]
  000a6	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000a9	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
$LN104@transform_@2:

; 360  : 		return (_Res);

  000ae	8b c6		 mov	 eax, esi

; 361  : 		}

  000b0	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000b5	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z$0:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T525548[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@transform_@2
  0000c	83 65 b8 fe	 and	 DWORD PTR $T525548[ebp], -2 ; fffffffeH
  00010	8b 4d bc	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@transform_@2:
  00018	c3		 ret	 0
__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z$1:
  00019	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$514760[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z$2:
  00021	8d 4d d4	 lea	 ecx, DWORD PTR $T514769[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z ENDP ; std::tr1::_Regex_traits<char>::transform_primary<char *>
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogsp
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  0000b	8b ce		 mov	 ecx, esi
  0000d	5e		 pop	 esi
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 98	 lea	 esi, DWORD PTR [ecx-104]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 07		 je	 SHORT $LN1@scalar@20
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001a	59		 pop	 ecx
$LN1@scalar@20:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Resize@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEXI@Z ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Resize
; Function compile flags: /Ogsp
;	COMDAT ?_Resize@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEXI@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
?_Resize@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEXI@Z PROC ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Resize, COMDAT
; _this$ = ecx

; 1163 : 		{	// allocate space for _Nx submatches

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1164 : 		_Matches.resize(_Nx);

  00003	83 c1 04	 add	 ecx, 4

; 1165 : 		}

  00006	5d		 pop	 ebp

; 1164 : 		_Matches.resize(_Nx);

  00007	e9 00 00 00 00	 jmp	 ?resize@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::resize
?_Resize@?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAEXI@Z ENDP ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Resize
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z	; std::tr1::_Regex_traits<char>::translate
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogsp
;	COMDAT ?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z
_TEXT	SEGMENT
__Res$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 1
?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z PROC	; std::tr1::_Regex_traits<char>::translate, COMDAT
; _this$ = ecx

; 330  : 		{	// provide locale-sensitive mapping

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 331  : 		string_type _Res = _Getcoll()->transform(&_Ch, &_Ch + 1);

  00011	8d 45 09	 lea	 eax, DWORD PTR __Ch$[ebp+1]
  00014	50		 push	 eax
  00015	8d 45 08	 lea	 eax, DWORD PTR __Ch$[ebp]
  00018	50		 push	 eax
  00019	8d 45 e0	 lea	 eax, DWORD PTR __Res$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getcoll
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 ?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::collate<char>::transform

; 332  : 		return (_Res.length() == 1 ? _Res[0] : _Ch);

  00029	83 7d f0 01	 cmp	 DWORD PTR __Res$[ebp+16], 1
  0002d	75 10		 jne	 SHORT $LN3@translate
  0002f	83 7d f4 10	 cmp	 DWORD PTR __Res$[ebp+20], 16 ; 00000010H
  00033	8b 45 e0	 mov	 eax, DWORD PTR __Res$[ebp]
  00036	73 03		 jae	 SHORT $LN13@translate
  00038	8d 45 e0	 lea	 eax, DWORD PTR __Res$[ebp]
$LN13@translate:
  0003b	8a 18		 mov	 bl, BYTE PTR [eax]
  0003d	eb 03		 jmp	 SHORT $LN4@translate
$LN3@translate:
  0003f	8a 5d 08	 mov	 bl, BYTE PTR __Ch$[ebp]
$LN4@translate:
  00042	6a 00		 push	 0
  00044	6a 01		 push	 1
  00046	8d 4d e0	 lea	 ecx, DWORD PTR __Res$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 333  : 		}

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	8a c3		 mov	 al, bl
  00053	33 cd		 xor	 ecx, ebp
  00055	5b		 pop	 ebx
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	c9		 leave
  0005c	c2 04 00	 ret	 4
?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z ENDP	; std::tr1::_Regex_traits<char>::translate
_TEXT	ENDS
PUBLIC	??R?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::operator()
; Function compile flags: /Ogsp
;	COMDAT ??R?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z
_TEXT	SEGMENT
__E1$ = 8						; size = 1
__E2$ = 12						; size = 1
??R?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z PROC ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::operator(), COMDAT
; _this$ = ecx

; 253  : 		{	// return true if equal

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 254  : 		return (_Traits.translate(_E1) == _Traits.translate(_E2));

  00005	ff 75 08	 push	 DWORD PTR __E1$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z ; std::tr1::_Regex_traits<char>::translate
  00011	ff 75 0c	 push	 DWORD PTR __E2$[ebp]
  00014	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00016	8a d8		 mov	 bl, al
  00018	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z ; std::tr1::_Regex_traits<char>::translate
  0001d	33 c9		 xor	 ecx, ecx
  0001f	3a d8		 cmp	 bl, al
  00021	5e		 pop	 esi
  00022	0f 94 c0	 sete	 al
  00025	5b		 pop	 ebx

; 255  : 		}

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??R?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ENDP ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::operator()
_TEXT	ENDS
PUBLIC	___$ReturnUdt$GSCopy$
PUBLIC	_this$GSCopy$
PUBLIC	??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::tr1::_Regex_traits<char>::transform_primary<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$2
__ehfuncinfo$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
$T525911 = -72						; size = 4
$T526048 = -68						; size = 1
___$ReturnUdt$GSCopy$ = -68				; size = 4
__Temp$513824 = -64					; size = 16
_this$GSCopy$ = -48					; size = 4
$T513940 = -44						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::tr1::_Regex_traits<char>::transform_primary<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 347  : 		string_type transform_primary(_FwdIt _First, _FwdIt _Last) const

  00000	6a 3c		 push	 60			; 0000003cH
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	33 db		 xor	 ebx, ebx
  00011	89 5d b8	 mov	 DWORD PTR $T525911[ebp], ebx

; 348  : 		{	// apply locale-specific case-insensitive transformation
; 349  : 		string_type _Res;

  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0001b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0001e	89 4d d0	 mov	 DWORD PTR _this$GSCopy$[ebp], ecx
  00021	89 75 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  00024	88 1e		 mov	 BYTE PTR [esi], bl

; 360  : 		return (_Res);

  00026	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00029	33 ff		 xor	 edi, edi
  0002b	47		 inc	 edi
  0002c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002f	89 7d b8	 mov	 DWORD PTR $T525911[ebp], edi
  00032	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00035	74 77		 je	 SHORT $LN110@transform_@3

; 350  : 
; 351  : 		if (_First != _Last)
; 352  : 			{	// non-empty string, transform it
; 353  : 			_STD vector<_Elem> _Temp(_First, _Last);

  00037	ff 75 bc	 push	 DWORD PTR $T526048[ebp]
  0003a	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$513824[ebp]
  0003d	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00040	89 5d c0	 mov	 DWORD PTR __Temp$513824[ebp], ebx
  00043	50		 push	 eax
  00044	89 5d c4	 mov	 DWORD PTR __Temp$513824[ebp+4], ebx
  00047	89 5d c8	 mov	 DWORD PTR __Temp$513824[ebp+8], ebx
  0004a	e8 00 00 00 00	 call	 ??$_Construct@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@DV?$allocator@D@std@@@std@@QAEXV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0Uinput_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Construct<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >

; 354  : 
; 355  : 			_Getctype()->tolower(&*_Temp.begin(),
; 356  : 				&*_Temp.begin() + _Temp.size());

  0004f	8b 4d c0	 mov	 ecx, DWORD PTR __Temp$513824[ebp]
  00052	8b 45 c4	 mov	 eax, DWORD PTR __Temp$513824[ebp+4]
  00055	2b c1		 sub	 eax, ecx
  00057	03 c1		 add	 eax, ecx
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0005e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
  00061	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00066	8b c8		 mov	 ecx, eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEPBDPADPBD@Z

; 357  : 			_Res = _Getcoll()->transform(&*_Temp.begin(),
; 358  : 				&*_Temp.begin() + _Temp.size());

  0006e	8b 4d c0	 mov	 ecx, DWORD PTR __Temp$513824[ebp]
  00071	8b 45 c4	 mov	 eax, DWORD PTR __Temp$513824[ebp+4]
  00074	2b c1		 sub	 eax, ecx
  00076	03 c1		 add	 eax, ecx
  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0007d	8d 45 d4	 lea	 eax, DWORD PTR $T513940[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?_Getcoll@?$_Regex_traits@D@tr1@std@@QBEPBV?$collate@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getcoll
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 ?transform@?$collate@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::collate<char>::transform
  0008d	50		 push	 eax
  0008e	8b ce		 mov	 ecx, esi
  00090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00099	53		 push	 ebx
  0009a	57		 push	 edi
  0009b	8d 4d d4	 lea	 ecx, DWORD PTR $T513940[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 359  : 			}

  000a3	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$513824[ebp]
  000a6	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  000a9	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
$LN110@transform_@3:

; 360  : 		return (_Res);

  000ae	8b c6		 mov	 eax, esi

; 361  : 		}

  000b0	e8 00 00 00 00	 call	 __EH_epilog3_GS
  000b5	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$0:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T525911[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@transform_@3
  0000c	83 65 b8 fe	 and	 DWORD PTR $T525911[ebp], -2 ; fffffffeH
  00010	8b 4d bc	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@transform_@3:
  00018	c3		 ret	 0
__unwindfunclet$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$1:
  00019	8d 4d c0	 lea	 ecx, DWORD PTR __Temp$513824[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$2:
  00021	8d 4d d4	 lea	 ecx, DWORD PTR $T513940[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::tr1::_Regex_traits<char>::transform_primary<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?_Max@?1??_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z@4HA ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv'::`2'::_Max
PUBLIC	__Last$GSCopy$
PUBLIC	__First$GSCopy$
PUBLIC	?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv
;	COMDAT ?_Max@?1??_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z@4HA
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
_DATA	SEGMENT
?_Max@?1??_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z@4HA DD 0100H ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv'::`2'::_Max
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z$1
__ehfuncinfo$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z
_TEXT	SEGMENT
__First$GSCopy$ = -92					; size = 4
__Node$ = -88						; size = 4
__Last$GSCopy$ = -84					; size = 4
__Ch$514630 = -80					; size = 4
__Ex$514634 = -73					; size = 1
$T514640 = -72						; size = 28
__Str$ = -44						; size = 28
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Diff$ = 16						; size = 4
?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv, COMDAT
; _this$ = ecx

; 3415 : 	{	// add elements of equivalence class to bracket expression

  00000	6a 50		 push	 80			; 00000050H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]

; 3416 : 	static int _Max = _Bmp_max;	// to quiet diagnostics
; 3417 : 
; 3418 : 	_Node_class<_Elem, _RxTraits> *_Node =
; 3419 : 		(_Node_class<_Elem, _RxTraits>*)_Current;

  00014	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 3420 : 	typename _RxTraits::string_type _Str =
; 3421 : 		_Traits.transform_primary(_First, _Last);

  00017	51		 push	 ecx
  00018	50		 push	 eax
  00019	89 45 a4	 mov	 DWORD PTR __First$GSCopy$[ebp], eax
  0001c	8d 45 d4	 lea	 eax, DWORD PTR __Str$[ebp]
  0001f	89 4d ac	 mov	 DWORD PTR __Last$GSCopy$[ebp], ecx
  00022	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00025	50		 push	 eax
  00026	89 7d a8	 mov	 DWORD PTR __Node$[ebp], edi
  00029	e8 00 00 00 00	 call	 ??$transform_primary@PBD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::tr1::_Regex_traits<char>::transform_primary<char const *>
  0002e	33 c0		 xor	 eax, eax
  00030	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 3422 : 	for (int _Ch = 0; _Ch < _Max; ++_Ch)

  00033	89 45 b0	 mov	 DWORD PTR __Ch$514630[ebp], eax
  00036	39 05 00 00 00
	00		 cmp	 DWORD PTR ?_Max@?1??_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z@4HA, eax ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv'::`2'::_Max
  0003c	0f 8e 90 00 00
	00		 jle	 $LN4@Add_equiv
$LN6@Add_equiv:

; 3423 : 		{	// add elements
; 3424 : 		_Elem _Ex = (_Elem)_Ch;

  00042	8a 45 b0	 mov	 al, BYTE PTR __Ch$514630[ebp]

; 3425 : 		if (_Traits.transform_primary(&_Ex, &_Ex + 1) == _Str)

  00045	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00048	88 45 b7	 mov	 BYTE PTR __Ex$514634[ebp], al
  0004b	8d 45 b8	 lea	 eax, DWORD PTR __Ex$514634[ebp+1]
  0004e	50		 push	 eax
  0004f	8d 45 b7	 lea	 eax, DWORD PTR __Ex$514634[ebp]
  00052	50		 push	 eax
  00053	8d 45 b8	 lea	 eax, DWORD PTR $T514640[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??$transform_primary@PAD@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAD0@Z ; std::tr1::_Regex_traits<char>::transform_primary<char *>
  0005c	8d 4d d4	 lea	 ecx, DWORD PTR __Str$[ebp]
  0005f	51		 push	 ecx
  00060	8b c8		 mov	 ecx, eax
  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00066	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0006b	8b d8		 mov	 ebx, eax
  0006d	6a 00		 push	 0
  0006f	f7 db		 neg	 ebx
  00071	6a 01		 push	 1
  00073	8d 4d b8	 lea	 ecx, DWORD PTR $T514640[ebp]
  00076	1a db		 sbb	 bl, bl
  00078	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0007c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00081	fe c3		 inc	 bl
  00083	74 3b		 je	 SHORT $LN5@Add_equiv

; 3426 : 			{	// insert equivalent character into bitmap
; 3427 : 			if (!_Node->_Small)

  00085	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  00089	75 1f		 jne	 SHORT $LN2@Add_equiv

; 3428 : 				_Node->_Small = new _Bitmap;

  0008b	6a 20		 push	 32			; 00000020H
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	8b d0		 mov	 edx, eax
  00094	33 c0		 xor	 eax, eax
  00096	59		 pop	 ecx
  00097	85 d2		 test	 edx, edx
  00099	74 0c		 je	 SHORT $LN10@Add_equiv
  0009b	6a 08		 push	 8
  0009d	59		 pop	 ecx
  0009e	8b fa		 mov	 edi, edx
  000a0	f3 ab		 rep stosd
  000a2	8b 7d a8	 mov	 edi, DWORD PTR __Node$[ebp]
  000a5	8b c2		 mov	 eax, edx
$LN10@Add_equiv:
  000a7	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN2@Add_equiv:

; 3429 : 			_Node->_Small->_Mark(_Ch);

  000aa	8b 4d b0	 mov	 ecx, DWORD PTR __Ch$514630[ebp]
  000ad	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000b0	8b d1		 mov	 edx, ecx
  000b2	c1 ea 03	 shr	 edx, 3
  000b5	03 c2		 add	 eax, edx
  000b7	83 e1 07	 and	 ecx, 7
  000ba	b2 01		 mov	 dl, 1
  000bc	d2 e2		 shl	 dl, cl
  000be	08 10		 or	 BYTE PTR [eax], dl
$LN5@Add_equiv:

; 3422 : 	for (int _Ch = 0; _Ch < _Max; ++_Ch)

  000c0	ff 45 b0	 inc	 DWORD PTR __Ch$514630[ebp]
  000c3	8b 45 b0	 mov	 eax, DWORD PTR __Ch$514630[ebp]
  000c6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?_Max@?1??_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z@4HA ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv'::`2'::_Max
  000cc	0f 8c 70 ff ff
	ff		 jl	 $LN6@Add_equiv
$LN4@Add_equiv:

; 3430 : 			}
; 3431 : 		}
; 3432 : 	if (_Max < (_STD numeric_limits<_Elem>::max)())

  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?max@?$numeric_limits@D@std@@SADXZ
  000d8	0f be c0	 movsx	 eax, al
  000db	39 05 00 00 00
	00		 cmp	 DWORD PTR ?_Max@?1??_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z@4HA, eax ; `std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv'::`2'::_Max
  000e1	7d 14		 jge	 SHORT $LN1@Add_equiv

; 3433 : 		{	// map range
; 3434 : 		_Sequence<_Elem> **_Cur = &_Node->_Equiv;

  000e3	83 c7 28	 add	 edi, 40			; 00000028H

; 3435 : 		_Char_to_elts(_First, _Last, _Diff, _Cur);

  000e6	57		 push	 edi
  000e7	ff 75 10	 push	 DWORD PTR __Diff$[ebp]
  000ea	8b ce		 mov	 ecx, esi
  000ec	ff 75 ac	 push	 DWORD PTR __Last$GSCopy$[ebp]
  000ef	ff 75 a4	 push	 DWORD PTR __First$GSCopy$[ebp]
  000f2	e8 00 00 00 00	 call	 ?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0HPAPAU?$_Sequence@D@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Char_to_elts
$LN1@Add_equiv:

; 3436 : 		}
; 3437 : 	}

  000f7	6a 00		 push	 0
  000f9	6a 01		 push	 1
  000fb	8d 4d d4	 lea	 ecx, DWORD PTR __Str$[ebp]
  000fe	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00103	e8 00 00 00 00	 call	 __EH_epilog3_GS
  00108	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR $T514640[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv
PUBLIC	?_Add_char@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char
; Function compile flags: /Ogsp
;	COMDAT ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Add_char@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char, COMDAT
; _this$ = ecx

; 3262 : 	{	// append character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 3263 : 	if (_Current->_Type != _N_str || _Current->_Flags & _Fl_final)

  00006	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00009	83 78 04 06	 cmp	 DWORD PTR [eax+4], 6
  0000d	75 06		 jne	 SHORT $LN4@Add_char
  0000f	f6 40 08 04	 test	 BYTE PTR [eax+8], 4
  00013	74 05		 je	 SHORT $LN5@Add_char
$LN4@Add_char:

; 3264 : 		_Add_str_node();

  00015	e8 00 00 00 00	 call	 ?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_str_node
$LN5@Add_char:

; 3265 : 	if (_Flags & regex_constants::icase)

  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  00022	74 15		 je	 SHORT $LN3@Add_char

; 3266 : 		_Ch = _Traits.translate_nocase(_Ch);

  00024	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00027	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0002a	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  0002f	8b c8		 mov	 ecx, eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z

; 3267 : 	else if (_Flags & regex_constants::collate)

  00037	eb 12		 jmp	 SHORT $LN14@Add_char
$LN3@Add_char:
  00039	a9 00 08 00 00	 test	 eax, 2048		; 00000800H
  0003e	74 0e		 je	 SHORT $LN1@Add_char

; 3268 : 		_Ch = _Traits.translate(_Ch);

  00040	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00043	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00046	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z ; std::tr1::_Regex_traits<char>::translate
$LN14@Add_char:
  0004b	88 45 08	 mov	 BYTE PTR __Ch$[ebp], al
$LN1@Add_char:

; 3269 : 	_Node_str<_Elem> *_Node = (_Node_str<_Elem>*)_Current;
; 3270 : 	_Node->_Data._Insert(_Ch);

  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00054	83 c1 14	 add	 ecx, 20			; 00000014H
  00057	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@tr1@std@@QAEXD@Z ; std::tr1::_Buf<char>::_Insert
  0005c	5e		 pop	 esi

; 3271 : 	}

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?_Add_char@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char
_TEXT	ENDS
PUBLIC	__Traits$GSCopy$
PUBLIC	??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z ; std::tr1::_Lookup_equiv<char,std::tr1::regex_traits<char> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$3
__ehfuncinfo$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z
_TEXT	SEGMENT
__Traits$GSCopy$ = -108					; size = 4
tv644 = -101						; size = 1
$T513080 = -100						; size = 28
$T513070 = -100						; size = 28
__Str0$ = -72						; size = 28
__Str1$ = -44						; size = 28
__$EHRec$ = -12						; size = 12
__Ch$ = 8						; size = 1
__Eq$ = 12						; size = 4
__Traits$ = 16						; size = 4
??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z PROC ; std::tr1::_Lookup_equiv<char,std::tr1::regex_traits<char> >, COMDAT

; 3783 : 	{	// check whether _Ch is in _Eq

  00000	6a 60		 push	 96			; 00000060H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000c	8b 7d 10	 mov	 edi, DWORD PTR __Traits$[ebp]
  0000f	8b 75 0c	 mov	 esi, DWORD PTR __Eq$[ebp]

; 3784 : 	typename _RxTraits::string_type _Str0;

  00012	6a 0f		 push	 15			; 0000000fH
  00014	33 db		 xor	 ebx, ebx
  00016	58		 pop	 eax

; 3788 : 		{	// look for sequence of elements that are the right size
; 3789 : 		for (int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz)

  00017	89 7d 94	 mov	 DWORD PTR __Traits$GSCopy$[ebp], edi
  0001a	89 45 cc	 mov	 DWORD PTR __Str0$[ebp+20], eax
  0001d	89 5d c8	 mov	 DWORD PTR __Str0$[ebp+16], ebx
  00020	88 5d b8	 mov	 BYTE PTR __Str0$[ebp], bl
  00023	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00026	8d 4d d4	 lea	 ecx, DWORD PTR __Str1$[ebp]
  00029	6a 01		 push	 1
  0002b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0002e	89 45 e8	 mov	 DWORD PTR __Str1$[ebp+20], eax
  00031	89 5d e4	 mov	 DWORD PTR __Str1$[ebp+16], ebx
  00034	88 5d d4	 mov	 BYTE PTR __Str1$[ebp], bl
  00037	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003c	83 7d e8 10	 cmp	 DWORD PTR __Str1$[ebp+20], 16 ; 00000010H
  00040	8b 4d d4	 mov	 ecx, DWORD PTR __Str1$[ebp]
  00043	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00047	8b c1		 mov	 eax, ecx
  00049	73 03		 jae	 SHORT $LN70@Lookup_equ

; 3785 : 	typename _RxTraits::string_type _Str1(1, _Ch);
; 3786 : 	_Str1 = _Traits.transform_primary(_Str1.begin(), _Str1.end());

  0004b	8d 45 d4	 lea	 eax, DWORD PTR __Str1$[ebp]
$LN70@Lookup_equ:
  0004e	03 45 e4	 add	 eax, DWORD PTR __Str1$[ebp+16]
  00051	83 7d e8 10	 cmp	 DWORD PTR __Str1$[ebp+20], 16 ; 00000010H
  00055	73 03		 jae	 SHORT $LN82@Lookup_equ
  00057	8d 4d d4	 lea	 ecx, DWORD PTR __Str1$[ebp]
$LN82@Lookup_equ:
  0005a	50		 push	 eax
  0005b	51		 push	 ecx
  0005c	8d 45 9c	 lea	 eax, DWORD PTR $T513070[ebp]
  0005f	50		 push	 eax
  00060	8b cf		 mov	 ecx, edi
  00062	e8 00 00 00 00	 call	 ??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::tr1::_Regex_traits<char>::transform_primary<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
  00067	50		 push	 eax
  00068	8d 4d d4	 lea	 ecx, DWORD PTR __Str1$[ebp]
  0006b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00074	53		 push	 ebx
  00075	6a 01		 push	 1
  00077	8d 4d 9c	 lea	 ecx, DWORD PTR $T513070[ebp]
  0007a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00083	e9 85 00 00 00	 jmp	 $LN166@Lookup_equ
$LL6@Lookup_equ:

; 3788 : 		{	// look for sequence of elements that are the right size
; 3789 : 		for (int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz)

  00088	33 ff		 xor	 edi, edi
  0008a	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  0008d	7e 7b		 jle	 SHORT $LN2@Lookup_equ
$LL4@Lookup_equ:

; 3790 : 			{	// look for _Ch
; 3791 : 			_Str0.assign(_Eq->_Data._Str() + _Ix, _Eq->_Sz);

  0008f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00092	ff 36		 push	 DWORD PTR [esi]
  00094	03 c7		 add	 eax, edi
  00096	50		 push	 eax
  00097	8d 4d b8	 lea	 ecx, DWORD PTR __Str0$[ebp]
  0009a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3792 : 			_Str0 = _Traits.transform_primary(_Str0.begin(), _Str0.end());

  0009f	83 7d cc 10	 cmp	 DWORD PTR __Str0$[ebp+20], 16 ; 00000010H
  000a3	8b 4d b8	 mov	 ecx, DWORD PTR __Str0$[ebp]
  000a6	8b c1		 mov	 eax, ecx
  000a8	73 03		 jae	 SHORT $LN106@Lookup_equ
  000aa	8d 45 b8	 lea	 eax, DWORD PTR __Str0$[ebp]
$LN106@Lookup_equ:
  000ad	03 45 c8	 add	 eax, DWORD PTR __Str0$[ebp+16]
  000b0	83 7d cc 10	 cmp	 DWORD PTR __Str0$[ebp+20], 16 ; 00000010H
  000b4	73 03		 jae	 SHORT $LN118@Lookup_equ
  000b6	8d 4d b8	 lea	 ecx, DWORD PTR __Str0$[ebp]
$LN118@Lookup_equ:
  000b9	50		 push	 eax
  000ba	51		 push	 ecx
  000bb	8b 4d 94	 mov	 ecx, DWORD PTR __Traits$GSCopy$[ebp]
  000be	8d 45 9c	 lea	 eax, DWORD PTR $T513080[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$transform_primary@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Regex_traits@D@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::tr1::_Regex_traits<char>::transform_primary<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
  000c7	50		 push	 eax
  000c8	8d 4d b8	 lea	 ecx, DWORD PTR __Str0$[ebp]
  000cb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000cf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000d4	53		 push	 ebx
  000d5	6a 01		 push	 1
  000d7	8d 4d 9c	 lea	 ecx, DWORD PTR $T513080[ebp]
  000da	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000de	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 3793 : 			if (_Str0 == _Str1)

  000e3	83 7d e8 10	 cmp	 DWORD PTR __Str1$[ebp+20], 16 ; 00000010H
  000e7	8b 45 d4	 mov	 eax, DWORD PTR __Str1$[ebp]
  000ea	73 03		 jae	 SHORT $LN142@Lookup_equ
  000ec	8d 45 d4	 lea	 eax, DWORD PTR __Str1$[ebp]
$LN142@Lookup_equ:
  000ef	ff 75 e4	 push	 DWORD PTR __Str1$[ebp+16]
  000f2	8d 4d b8	 lea	 ecx, DWORD PTR __Str0$[ebp]
  000f5	50		 push	 eax
  000f6	ff 75 c8	 push	 DWORD PTR __Str0$[ebp+16]
  000f9	53		 push	 ebx
  000fa	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  000ff	85 c0		 test	 eax, eax
  00101	74 17		 je	 SHORT $LN161@Lookup_equ

; 3788 : 		{	// look for sequence of elements that are the right size
; 3789 : 		for (int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz)

  00103	03 3e		 add	 edi, DWORD PTR [esi]
  00105	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  00108	7c 85		 jl	 SHORT $LL4@Lookup_equ
$LN2@Lookup_equ:

; 3795 : 			}
; 3796 : 		_Eq = _Eq->_Next;

  0010a	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
$LN166@Lookup_equ:

; 3787 : 	while (_Eq)

  0010d	3b f3		 cmp	 esi, ebx
  0010f	0f 85 73 ff ff
	ff		 jne	 $LL6@Lookup_equ
  00115	88 5d 9b	 mov	 BYTE PTR tv644[ebp], bl
  00118	eb 04		 jmp	 SHORT $LN164@Lookup_equ
$LN161@Lookup_equ:
  0011a	c6 45 9b 01	 mov	 BYTE PTR tv644[ebp], 1
$LN164@Lookup_equ:

; 3794 : 				return (true);

  0011e	53		 push	 ebx
  0011f	6a 01		 push	 1
  00121	8d 4d d4	 lea	 ecx, DWORD PTR __Str1$[ebp]
  00124	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00129	53		 push	 ebx
  0012a	6a 01		 push	 1
  0012c	8d 4d b8	 lea	 ecx, DWORD PTR __Str0$[ebp]
  0012f	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00134	8a 45 9b	 mov	 al, BYTE PTR tv644[ebp]

; 3797 : 		}
; 3798 : 	return (false);
; 3799 : 	}

  00137	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0013c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str0$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Str1$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$2:
  00010	8d 4d 9c	 lea	 ecx, DWORD PTR $T513070[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z$3:
  00018	8d 4d 9c	 lea	 ecx, DWORD PTR $T513080[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z ENDP ; std::tr1::_Lookup_equiv<char,std::tr1::regex_traits<char> >
PUBLIC	??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z
_TEXT	SEGMENT
__Res$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Pred$ = 28						; size = 4
__Partial$ = 32						; size = 1
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z PROC ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >, COMDAT

; 3736 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3737 : 	_BidIt1 _Res = _Begin1;

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx
  0000a	57		 push	 edi

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  0000b	8b 7d 14	 mov	 edi, DWORD PTR __Begin2$[ebp]
  0000e	89 75 fc	 mov	 DWORD PTR __Res$[ebp], esi
  00011	eb 23		 jmp	 SHORT $LN30@Cmp_chrang@5
$LL3@Cmp_chrang@5:
  00013	3b 7d 18	 cmp	 edi, DWORD PTR __End2$[ebp]
  00016	74 28		 je	 SHORT $LN28@Cmp_chrang@5

; 3739 : 		if (!_Pred(*_Begin1++, *_Begin2++))

  00018	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0001b	8b ca		 mov	 ecx, edx
  0001d	42		 inc	 edx
  0001e	50		 push	 eax
  0001f	89 55 0c	 mov	 DWORD PTR __Begin1$[ebp], edx
  00022	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00025	50		 push	 eax
  00026	8d 4d 1c	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00029	e8 00 00 00 00	 call	 ??R?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::operator()
  0002e	47		 inc	 edi
  0002f	84 c0		 test	 al, al
  00031	74 12		 je	 SHORT $LN27@Cmp_chrang@5

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  00033	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
$LN30@Cmp_chrang@5:
  00036	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  00039	75 d8		 jne	 SHORT $LL3@Cmp_chrang@5

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  0003b	3b 7d 18	 cmp	 edi, DWORD PTR __End2$[ebp]
  0003e	75 0c		 jne	 SHORT $LN8@Cmp_chrang@5
$LN28@Cmp_chrang@5:
  00040	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00043	eb 18		 jmp	 SHORT $LN7@Cmp_chrang@5
$LN27@Cmp_chrang@5:

; 3740 : 			return (_Res);

  00045	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00048	89 30		 mov	 DWORD PTR [eax], esi
  0004a	eb 18		 jmp	 SHORT $LN4@Cmp_chrang@5
$LN8@Cmp_chrang@5:

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  0004c	80 7d 20 00	 cmp	 BYTE PTR __Partial$[ebp], 0
  00050	74 08		 je	 SHORT $LN6@Cmp_chrang@5
  00052	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00055	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  00058	74 03		 je	 SHORT $LN7@Cmp_chrang@5
$LN6@Cmp_chrang@5:
  0005a	8d 45 fc	 lea	 eax, DWORD PTR __Res$[ebp]
$LN7@Cmp_chrang@5:
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00062	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Cmp_chrang@5:
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 3744 : 	}

  00066	c9		 leave
  00067	c3		 ret	 0
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z ENDP ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >
_TEXT	ENDS
PUBLIC	??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z
_TEXT	SEGMENT
__Res$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Pred$ = 28						; size = 4
__Partial$ = 32						; size = 1
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z PROC ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >, COMDAT

; 3736 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3737 : 	_BidIt1 _Res = _Begin1;

  00004	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx
  0000a	89 75 fc	 mov	 DWORD PTR __Res$[ebp], esi
  0000d	eb 28		 jmp	 SHORT $LN45@Cmp_chrang@6
$LL3@Cmp_chrang@6:

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  0000f	8b 45 14	 mov	 eax, DWORD PTR __Begin2$[ebp]
  00012	3b 45 18	 cmp	 eax, DWORD PTR __End2$[ebp]
  00015	74 2d		 je	 SHORT $LN44@Cmp_chrang@6

; 3739 : 		if (!_Pred(*_Begin1++, *_Begin2++))

  00017	ff 45 14	 inc	 DWORD PTR __Begin2$[ebp]
  0001a	8b ca		 mov	 ecx, edx
  0001c	42		 inc	 edx
  0001d	89 55 0c	 mov	 DWORD PTR __Begin1$[ebp], edx
  00020	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00023	50		 push	 eax
  00024	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00027	50		 push	 eax
  00028	8d 4d 1c	 lea	 ecx, DWORD PTR __Pred$[ebp]
  0002b	e8 00 00 00 00	 call	 ??R?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@std@@QAE_NDD@Z ; std::tr1::_Cmp_collate<std::tr1::regex_traits<char> >::operator()
  00030	84 c0		 test	 al, al
  00032	74 15		 je	 SHORT $LN43@Cmp_chrang@6

; 3738 : 	while (_Begin1 != _End1 && _Begin2 != _End2)

  00034	8b 55 0c	 mov	 edx, DWORD PTR __Begin1$[ebp]
$LN45@Cmp_chrang@6:
  00037	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  0003a	75 d3		 jne	 SHORT $LL3@Cmp_chrang@6

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  0003c	8b 45 14	 mov	 eax, DWORD PTR __Begin2$[ebp]
  0003f	3b 45 18	 cmp	 eax, DWORD PTR __End2$[ebp]
  00042	75 0c		 jne	 SHORT $LN8@Cmp_chrang@6
$LN44@Cmp_chrang@6:
  00044	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00047	eb 18		 jmp	 SHORT $LN7@Cmp_chrang@6
$LN43@Cmp_chrang@6:

; 3740 : 			return (_Res);

  00049	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004c	89 30		 mov	 DWORD PTR [eax], esi
  0004e	eb 18		 jmp	 SHORT $LN4@Cmp_chrang@6
$LN8@Cmp_chrang@6:

; 3741 : 	return (_Begin2 == _End2 ? _Begin1
; 3742 : 		: _Partial && _Begin1 == _End1 ? _Begin1
; 3743 : 		: _Res);

  00050	80 7d 20 00	 cmp	 BYTE PTR __Partial$[ebp], 0
  00054	74 08		 je	 SHORT $LN6@Cmp_chrang@6
  00056	8d 45 0c	 lea	 eax, DWORD PTR __Begin1$[ebp]
  00059	3b 55 10	 cmp	 edx, DWORD PTR __End1$[ebp]
  0005c	74 03		 je	 SHORT $LN7@Cmp_chrang@6
$LN6@Cmp_chrang@6:
  0005e	8d 45 fc	 lea	 eax, DWORD PTR __Res$[ebp]
$LN7@Cmp_chrang@6:
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00066	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Cmp_chrang@6:
  00068	5e		 pop	 esi

; 3744 : 	}

  00069	c9		 leave
  0006a	c3		 ret	 0
??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z ENDP ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >
_TEXT	ENDS
PUBLIC	?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXHH_N@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_rep
; Function compile flags: /Ogsp
;	COMDAT ?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXHH_N@Z
_TEXT	SEGMENT
$T526899 = -4						; size = 4
__Min$ = 8						; size = 4
__Max$ = 12						; size = 4
__Greedy$ = 16						; size = 1
?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXHH_N@Z PROC ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_rep, COMDAT
; _this$ = ecx

; 3569 : 	{	// add repeat node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 3570 : 	if (_Current->_Type == _N_str
; 3571 : 		&& ((_Node_str<_Elem> *)_Current)->_Data._Size() != 1)

  00008	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000b	83 79 04 06	 cmp	 DWORD PTR [ecx+4], 6
  0000f	57		 push	 edi
  00010	75 1c		 jne	 SHORT $LN3@Add_rep
  00012	83 79 18 01	 cmp	 DWORD PTR [ecx+24], 1
  00016	74 16		 je	 SHORT $LN3@Add_rep

; 3572 : 		{	// move final character to new string node
; 3573 : 		_Node_str<_Elem> *_Node = (_Node_str<_Elem> *)_Current;
; 3574 : 		_Add_char(_Node->_Data._Del());

  00018	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0001b	48		 dec	 eax
  0001c	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0001f	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00022	0f b6 04 01	 movzx	 eax, BYTE PTR [ecx+eax]
  00026	50		 push	 eax
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char
$LN3@Add_rep:

; 3575 : 		}
; 3576 : 	_Node_base *_Pos = _Current;

  0002e	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 3577 : 	_Node_end_rep *_Node0 = new _Node_end_rep(++_Rep_idx);

  00031	6a 18		 push	 24			; 00000018H
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	33 db		 xor	 ebx, ebx
  0003a	59		 pop	 ecx
  0003b	3b c3		 cmp	 eax, ebx
  0003d	74 25		 je	 SHORT $LN6@Add_rep
  0003f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00042	41		 inc	 ecx
  00043	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00046	c7 40 04 13 00
	00 00		 mov	 DWORD PTR [eax+4], 19	; 00000013H
  0004d	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00050	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  00053	89 58 10	 mov	 DWORD PTR [eax+16], ebx
  00056	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_end_rep@tr1@std@@6B@
  0005c	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0005f	89 45 fc	 mov	 DWORD PTR $T526899[ebp], eax
  00062	eb 03		 jmp	 SHORT $LN7@Add_rep
$LN6@Add_rep:
  00064	89 5d fc	 mov	 DWORD PTR $T526899[ebp], ebx
$LN7@Add_rep:

; 3578 : 	_Node_rep *_Nx = new _Node_rep(_Greedy, _Min, _Max, _Node0);

  00067	6a 20		 push	 32			; 00000020H
  00069	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006e	59		 pop	 ecx
  0006f	3b c3		 cmp	 eax, ebx
  00071	74 15		 je	 SHORT $LN8@Add_rep
  00073	ff 75 fc	 push	 DWORD PTR $T526899[ebp]
  00076	8b c8		 mov	 ecx, eax
  00078	ff 75 0c	 push	 DWORD PTR __Max$[ebp]
  0007b	ff 75 08	 push	 DWORD PTR __Min$[ebp]
  0007e	ff 75 10	 push	 DWORD PTR __Greedy$[ebp]
  00081	e8 00 00 00 00	 call	 ??0_Node_rep@tr1@std@@QAE@_NHHPAV_Node_end_rep@12@@Z ; std::tr1::_Node_rep::_Node_rep
  00086	8b d8		 mov	 ebx, eax
$LN8@Add_rep:

; 3579 : 	_Link_node(_Node0);

  00088	ff 75 fc	 push	 DWORD PTR $T526899[ebp]
  0008b	8b ce		 mov	 ecx, esi
  0008d	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Link_node

; 3580 : 	if (_Pos->_Type == _N_end_group
; 3581 : 		|| _Pos->_Type == _N_end_capture)

  00092	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00095	83 f8 09	 cmp	 eax, 9
  00098	74 05		 je	 SHORT $LN1@Add_rep
  0009a	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0009d	75 03		 jne	 SHORT $LN2@Add_rep
$LN1@Add_rep:

; 3582 : 		_Pos = ((_Node_end_group *)_Pos)->_Back;

  0009f	8b 7f 14	 mov	 edi, DWORD PTR [edi+20]
$LN2@Add_rep:

; 3583 : 	_Pos->_Prev->_Next = _Nx;

  000a2	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000a5	89 58 0c	 mov	 DWORD PTR [eax+12], ebx

; 3584 : 	_Nx->_Prev = _Pos->_Prev;

  000a8	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000ab	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 3585 : 	_Pos->_Prev = _Nx;

  000ae	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3586 : 	_Nx->_Next = _Pos;

  000b1	89 7b 0c	 mov	 DWORD PTR [ebx+12], edi
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 3587 : 	}

  000b7	c9		 leave
  000b8	c2 0c 00	 ret	 12			; 0000000cH
?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXHH_N@Z ENDP ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_rep
_TEXT	ENDS
PUBLIC	?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ex_class
; Function compile flags: /Ogsp
;	COMDAT ?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@@Z
_TEXT	SEGMENT
__End$ = 8						; size = 4
?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ex_class, COMDAT
; _this$ = ecx

; 4470 : 	{	// handle delimited expressions within bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 4471 : 	_FwdIt _Beg = _Pat;

  00008	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4472 : 	_REGEX_DIFFT(_FwdIt) _Diff = 0;

  0000a	33 db		 xor	 ebx, ebx

; 4473 : 	while (_Mchar != (_Elem)_Meta_eos && _Mchar != _End)

  0000c	eb 0d		 jmp	 SHORT $LN35@Do_ex_clas
$LL14@Do_ex_clas:
  0000e	3b 45 08	 cmp	 eax, DWORD PTR __End$[ebp]
  00011	74 10		 je	 SHORT $LN32@Do_ex_clas

; 4474 : 		{	// advance to end delimiter
; 4475 : 		_Next();

  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4476 : 		++_Diff;

  0001a	43		 inc	 ebx
$LN35@Do_ex_clas:

; 4473 : 	while (_Mchar != (_Elem)_Meta_eos && _Mchar != _End)

  0001b	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	75 eb		 jne	 SHORT $LL14@Do_ex_clas
$LN32@Do_ex_clas:

; 4477 : 		}
; 4478 : 	if (_Mchar == (_Elem)_Meta_eos)

  00023	83 7e 40 ff	 cmp	 DWORD PTR [esi+64], -1
  00027	75 1f		 jne	 SHORT $LN12@Do_ex_clas

; 4479 : 		_Error(
; 4480 : 			_End == _Meta_dot ? regex_constants::error_collate
; 4481 : 			: _End == _Meta_colon ? regex_constants::error_ctype
; 4482 : 			: regex_constants::error_syntax);

  00029	8b 45 08	 mov	 eax, DWORD PTR __End$[ebp]
  0002c	33 c9		 xor	 ecx, ecx
  0002e	83 e8 2e	 sub	 eax, 46			; 0000002eH
  00031	83 7d 08 3a	 cmp	 DWORD PTR __End$[ebp], 58 ; 0000003aH
  00035	0f 95 c1	 setne	 cl
  00038	49		 dec	 ecx
  00039	83 e1 f3	 and	 ecx, -13		; fffffff3H
  0003c	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0003f	f7 d8		 neg	 eax
  00041	1b c0		 sbb	 eax, eax
  00043	23 c1		 and	 eax, ecx
  00045	50		 push	 eax
  00046	eb 63		 jmp	 SHORT $LN36@Do_ex_clas
$LN12@Do_ex_clas:

; 4483 : 	else if (_End == _Meta_colon)

  00048	83 7d 08 3a	 cmp	 DWORD PTR __End$[ebp], 58 ; 0000003aH
  0004c	75 36		 jne	 SHORT $LN10@Do_ex_clas

; 4484 : 		{	// handle named character class
; 4485 : 		typename _RxTraits::char_class_type _Cls =
; 4486 : 			_Traits.lookup_classname(_Beg, _Pat,
; 4487 : 				(_Flags & regex_constants::icase) != 0);

  0004e	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00051	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00054	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00059	0f 95 c0	 setne	 al
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	50		 push	 eax
  00060	ff 36		 push	 DWORD PTR [esi]
  00062	57		 push	 edi
  00063	e8 00 00 00 00	 call	 ??$lookup_classname@PBD@?$_Regex_traits@D@tr1@std@@QBEFPBD0_N@Z ; std::tr1::_Regex_traits<char>::lookup_classname<char const *>
  00068	0f b7 f8	 movzx	 edi, ax

; 4488 : 		if (!_Cls)

  0006b	66 85 ff	 test	 di, di
  0006e	75 09		 jne	 SHORT $LN21@Do_ex_clas

; 4489 : 			_Error(regex_constants::error_ctype);

  00070	6a 01		 push	 1
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00078	59		 pop	 ecx
$LN21@Do_ex_clas:

; 4490 : 		_Nfa._Add_named_class(_Cls);

  00079	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0007c	57		 push	 edi
  0007d	e8 00 00 00 00	 call	 ?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXF@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_named_class
  00082	eb 42		 jmp	 SHORT $LN27@Do_ex_clas
$LN10@Do_ex_clas:

; 4491 : 		}
; 4492 : 	else if (_End == _Meta_equal)

  00084	83 7d 08 3d	 cmp	 DWORD PTR __End$[ebp], 61 ; 0000003dH
  00088	75 13		 jne	 SHORT $LN7@Do_ex_clas

; 4493 : 		if (_Beg == _Pat)

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]
  0008c	3b f8		 cmp	 edi, eax

; 4494 : 			_Error(regex_constants::error_collate);
; 4495 : 		else

  0008e	74 19		 je	 SHORT $LN37@Do_ex_clas

; 4496 : 			_Nfa._Add_equiv(_Beg, _Pat, _Diff);

  00090	53		 push	 ebx
  00091	50		 push	 eax
  00092	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00095	57		 push	 edi
  00096	e8 00 00 00 00	 call	 ?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPBD0H@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_equiv
  0009b	eb 29		 jmp	 SHORT $LN27@Do_ex_clas
$LN7@Do_ex_clas:

; 4497 : 	else if (_End == _Meta_dot)

  0009d	83 7d 08 2e	 cmp	 DWORD PTR __End$[ebp], 46 ; 0000002eH
  000a1	75 23		 jne	 SHORT $LN27@Do_ex_clas

; 4498 : 		if (_Beg == _Pat)

  000a3	8b 06		 mov	 eax, DWORD PTR [esi]
  000a5	3b f8		 cmp	 edi, eax
  000a7	75 0b		 jne	 SHORT $LN2@Do_ex_clas
$LN37@Do_ex_clas:

; 4499 : 			_Error(regex_constants::error_collate);

  000a9	6a 00		 push	 0
$LN36@Do_ex_clas:
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  000b1	59		 pop	 ecx

; 4500 : 		else

  000b2	eb 12		 jmp	 SHORT $LN27@Do_ex_clas
$LN2@Do_ex_clas:

; 4501 : 			_Nfa._Add_coll(_Beg, _Pat, _Diff);

  000b4	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ba	83 c2 14	 add	 edx, 20			; 00000014H
  000bd	52		 push	 edx
  000be	53		 push	 ebx
  000bf	50		 push	 eax
  000c0	57		 push	 edi
  000c1	e8 00 00 00 00	 call	 ?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0HPAPAU?$_Sequence@D@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Char_to_elts
$LN27@Do_ex_clas:

; 4502 : 	_Next();

  000c6	8b ce		 mov	 ecx, esi
  000c8	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx

; 4503 : 	}

  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ex_class
_TEXT	ENDS
PUBLIC	?_Max@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA ; `std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class'::`2'::_Max
PUBLIC	?_Min@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA ; `std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class'::`2'::_Min
PUBLIC	?_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class
;	COMDAT ?_Min@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA
_BSS	SEGMENT
?_Min@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA DD 01H DUP (?) ; `std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class'::`2'::_Min
_BSS	ENDS
;	COMDAT ?_Max@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA
_DATA	SEGMENT
?_Max@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA DD 0100H ; `std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class'::`2'::_Max
; Function compile flags: /Ogsp
_DATA	ENDS
;	COMDAT ?_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@@Z
_TEXT	SEGMENT
__Res$ = -8						; size = 4
__Ch$ = -4						; size = 1
$T526963 = 8						; size = 4
__Nx$ = 8						; size = 4
?_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@@Z PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class, COMDAT
; _this$ = ecx

; 3830 : 	{	// apply bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 3831 : 	static int _Max = _Bmp_max;	// to quiet diagnostics
; 3832 : 	static int _Min = 0;
; 3833 : 
; 3834 : 	bool _Found;
; 3835 : 	_Elem _Ch = *_Tgt_state._Cur;
; 3836 : 	if (_Sflags & regex_constants::icase)

  00008	f7 87 20 02 00
	00 00 01 00 00	 test	 DWORD PTR [edi+544], 256 ; 00000100H
  00012	8b 07		 mov	 eax, DWORD PTR [edi]
  00014	8a 00		 mov	 al, BYTE PTR [eax]
  00016	88 45 fc	 mov	 BYTE PTR __Ch$[ebp], al
  00019	74 19		 je	 SHORT $LN15@Do_class

; 3837 : 		_Ch = _Traits.translate_nocase(_Ch);

  0001b	ff 75 fc	 push	 DWORD PTR __Ch$[ebp]
  0001e	8d 8f 2c 02 00
	00		 lea	 ecx, DWORD PTR [edi+556]
  00024	e8 00 00 00 00	 call	 ?_Getctype@?$_Regex_traits@D@tr1@std@@QBEPBV?$ctype@D@3@XZ ; std::tr1::_Regex_traits<char>::_Getctype
  00029	8b c8		 mov	 ecx, eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tolower@?$ctype@D@std@@QBEDD@Z
  00031	88 45 fc	 mov	 BYTE PTR __Ch$[ebp], al
$LN15@Do_class:

; 3838 : 	_It _Res = _Tgt_state._Cur;

  00034	53		 push	 ebx
  00035	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 3839 : 	++_Res;

  00037	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0003a	56		 push	 esi

; 3840 : 	_It _Resx;
; 3841 : 	_Node_class<_Elem, _RxTraits> *_Node =
; 3842 : 		(_Node_class<_Elem, _RxTraits>*)_Nx;
; 3843 : 	if (_Node->_Coll
; 3844 : 		&& (_Resx = _Lookup_coll(_Tgt_state._Cur, _End, _Node->_Coll))
; 3845 : 			!= _Tgt_state._Cur)

  0003b	8b 75 08	 mov	 esi, DWORD PTR __Nx$[ebp]
  0003e	89 45 f8	 mov	 DWORD PTR __Res$[ebp], eax
  00041	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00044	85 c0		 test	 eax, eax
  00046	74 22		 je	 SHORT $LN69@Do_class
  00048	50		 push	 eax
  00049	ff b7 14 02 00
	00		 push	 DWORD PTR [edi+532]
  0004f	8d 45 08	 lea	 eax, DWORD PTR $T526963[ebp]
  00052	53		 push	 ebx
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Lookup_coll@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@D@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBU?$_Sequence@D@01@@Z ; std::tr1::_Lookup_coll<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char>
  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b c3		 cmp	 eax, ebx
  00060	74 08		 je	 SHORT $LN69@Do_class

; 3846 : 		{	// check for collation element
; 3847 : 		_Res = _Resx;

  00062	89 45 f8	 mov	 DWORD PTR __Res$[ebp], eax

; 3848 : 		_Found = true;
; 3849 : 		}
; 3850 : 	else if (_Node->_Ranges

  00065	e9 d0 00 00 00	 jmp	 $LN79@Do_class
$LN69@Do_class:

; 3851 : 		&& (_Lookup_range((_Elem)(_Sflags & regex_constants::collate
; 3852 : 			? (int)_Traits.translate(_Ch) : (int)_Ch), _Node->_Ranges)))

  0006a	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  0006e	74 36		 je	 SHORT $LN70@Do_class
  00070	f7 87 20 02 00
	00 00 08 00 00	 test	 DWORD PTR [edi+544], 2048 ; 00000800H
  0007a	74 13		 je	 SHORT $LN18@Do_class
  0007c	ff 75 fc	 push	 DWORD PTR __Ch$[ebp]
  0007f	8d 8f 2c 02 00
	00		 lea	 ecx, DWORD PTR [edi+556]
  00085	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z ; std::tr1::_Regex_traits<char>::translate
  0008a	0f be c0	 movsx	 eax, al
  0008d	eb 04		 jmp	 SHORT $LN19@Do_class
$LN18@Do_class:
  0008f	0f be 45 fc	 movsx	 eax, BYTE PTR __Ch$[ebp]
$LN19@Do_class:
  00093	ff 76 20	 push	 DWORD PTR [esi+32]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ??$_Lookup_range@D@tr1@std@@YA_NDPBU?$_Buf@D@01@@Z ; std::tr1::_Lookup_range<char>
  0009c	59		 pop	 ecx
  0009d	59		 pop	 ecx
  0009e	84 c0		 test	 al, al

; 3853 : 		_Found = true;

  000a0	0f 85 94 00 00
	00		 jne	 $LN79@Do_class
$LN70@Do_class:

; 3854 : 	else if (_Min <= _Ch && _Ch < _Max)

  000a6	8a 55 fc	 mov	 dl, BYTE PTR __Ch$[ebp]
  000a9	0f be c2	 movsx	 eax, dl
  000ac	39 05 00 00 00
	00		 cmp	 DWORD PTR ?_Min@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA, eax ; `std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class'::`2'::_Min
  000b2	7f 23		 jg	 SHORT $LN10@Do_class
  000b4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?_Max@?1??_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@34@@Z@4HA ; `std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class'::`2'::_Max
  000ba	7d 1b		 jge	 SHORT $LN10@Do_class

; 3855 : 		_Found = _Node->_Small && _Node->_Small->_Find(_Ch);

  000bc	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  000bf	85 d2		 test	 edx, edx
  000c1	74 7b		 je	 SHORT $LN73@Do_class
  000c3	8b c8		 mov	 ecx, eax
  000c5	33 db		 xor	 ebx, ebx
  000c7	83 e1 07	 and	 ecx, 7
  000ca	43		 inc	 ebx
  000cb	d3 e3		 shl	 ebx, cl
  000cd	c1 e8 03	 shr	 eax, 3
  000d0	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  000d3	84 d8		 test	 bl, al

; 3856 : 	else if (_Node->_Large

  000d5	eb 61		 jmp	 SHORT $LN77@Do_class
$LN10@Do_class:

; 3857 : 		&& _STD find(_Node->_Large->_Str(),
; 3858 : 			_Node->_Large->_Str() + _Node->_Large->_Size(), _Ch)
; 3859 : 				!= _Node->_Large->_Str() + _Node->_Large->_Size())

  000d7	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  000db	74 23		 je	 SHORT $LN75@Do_class
  000dd	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e6	03 c1		 add	 eax, ecx
  000e8	eb 05		 jmp	 SHORT $LN78@Do_class
$LL57@Do_class:
  000ea	38 11		 cmp	 BYTE PTR [ecx], dl
  000ec	74 05		 je	 SHORT $LN67@Do_class
  000ee	41		 inc	 ecx
$LN78@Do_class:
  000ef	3b c8		 cmp	 ecx, eax
  000f1	75 f7		 jne	 SHORT $LL57@Do_class
$LN67@Do_class:
  000f3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000f9	03 50 04	 add	 edx, DWORD PTR [eax+4]
  000fc	3b ca		 cmp	 ecx, edx

; 3860 : 		_Found = true;

  000fe	75 3a		 jne	 SHORT $LN79@Do_class
$LN75@Do_class:

; 3861 : 	else if (_Node->_Classes != 0 && _Traits.isctype(_Ch, _Node->_Classes))

  00100	0f b7 46 24	 movzx	 eax, WORD PTR [esi+36]
  00104	66 85 c0	 test	 ax, ax
  00107	74 13		 je	 SHORT $LN72@Do_class
  00109	50		 push	 eax
  0010a	ff 75 fc	 push	 DWORD PTR __Ch$[ebp]
  0010d	8d 8f 2c 02 00
	00		 lea	 ecx, DWORD PTR [edi+556]
  00113	e8 00 00 00 00	 call	 ?isctype@?$_Regex_traits@D@tr1@std@@QBE_NDF@Z ; std::tr1::_Regex_traits<char>::isctype
  00118	84 c0		 test	 al, al

; 3862 : 		_Found = true;

  0011a	75 1e		 jne	 SHORT $LN79@Do_class
$LN72@Do_class:

; 3863 : 	else if (_Node->_Equiv && _Lookup_equiv(_Ch, _Node->_Equiv, _Traits))

  0011c	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0011f	85 c0		 test	 eax, eax
  00121	74 1b		 je	 SHORT $LN73@Do_class
  00123	8d 8f 2c 02 00
	00		 lea	 ecx, DWORD PTR [edi+556]
  00129	51		 push	 ecx
  0012a	50		 push	 eax
  0012b	ff 75 fc	 push	 DWORD PTR __Ch$[ebp]
  0012e	e8 00 00 00 00	 call	 ??$_Lookup_equiv@DV?$regex_traits@D@tr1@std@@@tr1@std@@YA_NDPBU?$_Sequence@D@01@ABV?$regex_traits@D@01@@Z ; std::tr1::_Lookup_equiv<char,std::tr1::regex_traits<char> >
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH
  00136	84 c0		 test	 al, al
$LN77@Do_class:
  00138	74 04		 je	 SHORT $LN73@Do_class
$LN79@Do_class:

; 3864 : 		_Found = true;

  0013a	b0 01		 mov	 al, 1

; 3865 : 	else

  0013c	eb 02		 jmp	 SHORT $LN3@Do_class
$LN73@Do_class:

; 3866 : 		_Found = false;

  0013e	32 c0		 xor	 al, al
$LN3@Do_class:

; 3867 : 	if (_Found == (_Node->_Flags & _Fl_negate))

  00140	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00143	83 e1 01	 and	 ecx, 1
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	3a c1		 cmp	 al, cl
  0014a	75 04		 jne	 SHORT $LN2@Do_class

; 3868 : 		return (false);

  0014c	32 c0		 xor	 al, al
  0014e	eb 07		 jmp	 SHORT $LN1@Do_class
$LN2@Do_class:

; 3869 : 	else
; 3870 : 		{	// record result
; 3871 : 		_Tgt_state._Cur = _Res;

  00150	8b 45 f8	 mov	 eax, DWORD PTR __Res$[ebp]
  00153	89 07		 mov	 DWORD PTR [edi], eax

; 3872 : 		return (true);

  00155	b0 01		 mov	 al, 1
$LN1@Do_class:
  00157	5f		 pop	 edi

; 3873 : 		}
; 3874 : 	}

  00158	c9		 leave
  00159	c2 04 00	 ret	 4
?_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@@Z ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class
_TEXT	ENDS
PUBLIC	??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Traits$ = 28						; size = 4
$T527082 = 32						; size = 1
$T527083 = 32						; size = 4
$T527081 = 32						; size = 4
$T527079 = 32						; size = 4
__Sflags$ = 32						; size = 4
__Partial$ = 36						; size = 1
??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z PROC ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::regex_traits<char> >, COMDAT

; 3753 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3754 : 	_BidIt1 _Res = _End1;
; 3755 : 	if (_Sflags & regex_constants::collate)

  00003	f7 45 20 00 08
	00 00		 test	 DWORD PTR __Sflags$[ebp], 2048 ; 00000800H
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __End1$[ebp]
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 0e		 mov	 DWORD PTR [esi], ecx
  00013	74 1e		 je	 SHORT $LN4@Compare

; 3756 : 		_Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2,
; 3757 : 			_Cmp_collate<_RxTraits>(_Traits), _Partial);

  00015	ff 75 24	 push	 DWORD PTR __Partial$[ebp]
  00018	8d 45 20	 lea	 eax, DWORD PTR $T527079[ebp]
  0001b	ff 75 1c	 push	 DWORD PTR __Traits$[ebp]
  0001e	ff 75 18	 push	 DWORD PTR __End2$[ebp]
  00021	ff 75 14	 push	 DWORD PTR __Begin2$[ebp]
  00024	51		 push	 ecx
  00025	ff 75 0c	 push	 DWORD PTR __Begin1$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >
$LN16@Compare:
  0002e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3758 : 	else if (_Sflags & regex_constants::icase)

  00031	eb 48		 jmp	 SHORT $LN15@Compare
$LN4@Compare:
  00033	f7 45 20 00 01
	00 00		 test	 DWORD PTR __Sflags$[ebp], 256 ; 00000100H
  0003a	74 1b		 je	 SHORT $LN2@Compare

; 3759 : 		_Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2,
; 3760 : 			_Cmp_icase<_RxTraits>(_Traits), _Partial);

  0003c	ff 75 24	 push	 DWORD PTR __Partial$[ebp]
  0003f	8d 45 20	 lea	 eax, DWORD PTR $T527081[ebp]
  00042	ff 75 1c	 push	 DWORD PTR __Traits$[ebp]
  00045	ff 75 18	 push	 DWORD PTR __End2$[ebp]
  00048	ff 75 14	 push	 DWORD PTR __Begin2$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 75 0c	 push	 DWORD PTR __Begin1$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >

; 3761 : 	else

  00055	eb d7		 jmp	 SHORT $LN16@Compare
$LN2@Compare:
  00057	57		 push	 edi

; 3762 : 		_Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2,
; 3763 : 			_Cmp_cs<_RxTraits>(), _Partial);

  00058	ff 75 24	 push	 DWORD PTR __Partial$[ebp]
  0005b	33 c0		 xor	 eax, eax
  0005d	8d 7d 20	 lea	 edi, DWORD PTR $T527082[ebp]
  00060	aa		 stosb
  00061	ff 75 20	 push	 DWORD PTR $T527082[ebp]
  00064	8d 45 20	 lea	 eax, DWORD PTR $T527083[ebp]
  00067	ff 75 18	 push	 DWORD PTR __End2$[ebp]
  0006a	ff 75 14	 push	 DWORD PTR __Begin2$[ebp]
  0006d	51		 push	 ecx
  0006e	ff 75 0c	 push	 DWORD PTR __Begin1$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDU?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >
  00077	83 c4 1c	 add	 esp, 28			; 0000001cH
  0007a	5f		 pop	 edi
$LN15@Compare:
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 06		 mov	 DWORD PTR [esi], eax

; 3764 : 	return (_Res);

  0007f	8b c6		 mov	 eax, esi
  00081	5e		 pop	 esi

; 3765 : 	}

  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z ENDP ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::regex_traits<char> >
_TEXT	ENDS
PUBLIC	??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@V?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
;	COMDAT ??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@V?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Begin1$ = 12						; size = 4
__End1$ = 16						; size = 4
__Begin2$ = 20						; size = 4
__End2$ = 24						; size = 4
__Traits$ = 28						; size = 4
$T527104 = 32						; size = 1
$T527105 = 32						; size = 4
$T527103 = 32						; size = 4
$T527101 = 32						; size = 4
__Sflags$ = 32						; size = 4
__Partial$ = 36						; size = 1
??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@V?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z PROC ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::regex_traits<char> >, COMDAT

; 3753 : 	{	// compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3754 : 	_BidIt1 _Res = _End1;
; 3755 : 	if (_Sflags & regex_constants::collate)

  00003	f7 45 20 00 08
	00 00		 test	 DWORD PTR __Sflags$[ebp], 2048 ; 00000800H
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __End1$[ebp]
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00011	89 0e		 mov	 DWORD PTR [esi], ecx
  00013	74 1e		 je	 SHORT $LN4@Compare@2

; 3756 : 		_Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2,
; 3757 : 			_Cmp_collate<_RxTraits>(_Traits), _Partial);

  00015	ff 75 24	 push	 DWORD PTR __Partial$[ebp]
  00018	8d 45 20	 lea	 eax, DWORD PTR $T527101[ebp]
  0001b	ff 75 1c	 push	 DWORD PTR __Traits$[ebp]
  0001e	ff 75 18	 push	 DWORD PTR __End2$[ebp]
  00021	ff 75 14	 push	 DWORD PTR __Begin2$[ebp]
  00024	51		 push	 ecx
  00025	ff 75 0c	 push	 DWORD PTR __Begin1$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_collate@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_collate<std::tr1::regex_traits<char> > >
$LN16@Compare@2:
  0002e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3758 : 	else if (_Sflags & regex_constants::icase)

  00031	eb 48		 jmp	 SHORT $LN15@Compare@2
$LN4@Compare@2:
  00033	f7 45 20 00 01
	00 00		 test	 DWORD PTR __Sflags$[ebp], 256 ; 00000100H
  0003a	74 1b		 je	 SHORT $LN2@Compare@2

; 3759 : 		_Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2,
; 3760 : 			_Cmp_icase<_RxTraits>(_Traits), _Partial);

  0003c	ff 75 24	 push	 DWORD PTR __Partial$[ebp]
  0003f	8d 45 20	 lea	 eax, DWORD PTR $T527103[ebp]
  00042	ff 75 1c	 push	 DWORD PTR __Traits$[ebp]
  00045	ff 75 18	 push	 DWORD PTR __End2$[ebp]
  00048	ff 75 14	 push	 DWORD PTR __Begin2$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 75 0c	 push	 DWORD PTR __Begin1$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_icase@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_icase<std::tr1::regex_traits<char> > >

; 3761 : 	else

  00055	eb d7		 jmp	 SHORT $LN16@Compare@2
$LN2@Compare@2:
  00057	57		 push	 edi

; 3762 : 		_Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2,
; 3763 : 			_Cmp_cs<_RxTraits>(), _Partial);

  00058	ff 75 24	 push	 DWORD PTR __Partial$[ebp]
  0005b	33 c0		 xor	 eax, eax
  0005d	8d 7d 20	 lea	 edi, DWORD PTR $T527104[ebp]
  00060	aa		 stosb
  00061	ff 75 20	 push	 DWORD PTR $T527104[ebp]
  00064	8d 45 20	 lea	 eax, DWORD PTR $T527105[ebp]
  00067	ff 75 18	 push	 DWORD PTR __End2$[ebp]
  0006a	ff 75 14	 push	 DWORD PTR __Begin2$[ebp]
  0006d	51		 push	 ecx
  0006e	ff 75 0c	 push	 DWORD PTR __Begin1$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Cmp_chrange@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000U?$_Cmp_cs@V?$regex_traits@D@tr1@std@@@01@_N@Z ; std::tr1::_Cmp_chrange<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::_Cmp_cs<std::tr1::regex_traits<char> > >
  00077	83 c4 1c	 add	 esp, 28			; 0000001cH
  0007a	5f		 pop	 edi
$LN15@Compare@2:
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 06		 mov	 DWORD PTR [esi], eax

; 3764 : 	return (_Res);

  0007f	8b c6		 mov	 eax, esi
  00081	5e		 pop	 esi

; 3765 : 	}

  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@V?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z ENDP ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::regex_traits<char> >
_TEXT	ENDS
PUBLIC	?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_AtomEscape
; Function compile flags: /Ogsp
;	COMDAT ?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_AtomEscape, COMDAT
; _this$ = ecx

; 4845 : 	{	// check for valid atom escape

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4846 : 	if ((_L_flags & _L_bckr) && _DecimalDigits())

  00003	f7 46 44 00 01
	00 00		 test	 DWORD PTR [esi+68], 256	; 00000100H
  0000a	74 4e		 je	 SHORT $LN14@AtomEscape
  0000c	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_DecimalDigits
  00011	84 c0		 test	 al, al
  00013	74 45		 je	 SHORT $LN14@AtomEscape

; 4847 : 		{	// check for valid back reference
; 4848 : 		if (_Val == 0)

  00015	0f b7 46 3c	 movzx	 eax, WORD PTR [esi+60]
  00019	66 85 c0	 test	 ax, ax
  0001c	75 0b		 jne	 SHORT $LN13@AtomEscape

; 4849 : 			{	// handle \0
; 4850 : 			if (!(_L_flags & _L_bzr_chr))

  0001e	f7 46 44 00 00
	10 00		 test	 DWORD PTR [esi+68], 1048576 ; 00100000H

; 4851 : 				_Error(regex_constants::error_escape);
; 4852 : 			else

  00025	74 63		 je	 SHORT $LN1@AtomEscape

; 4853 : 				_Nfa._Add_char((_Elem)_Val);
; 4854 : 			}
; 4855 : 		else if (((_L_flags & _L_lim_bckr) && _BRE_MAX_GRP < _Val)

  00027	eb 3c		 jmp	 SHORT $LN24@AtomEscape
$LN13@AtomEscape:

; 4856 : 			|| _Grp_idx < _Val || !(_Finished_grps & (_Grps(1) << _Val)))

  00029	f7 46 44 00 02
	00 00		 test	 DWORD PTR [esi+68], 512	; 00000200H
  00030	74 08		 je	 SHORT $LN7@AtomEscape
  00032	6a 09		 push	 9
  00034	59		 pop	 ecx
  00035	66 3b c8	 cmp	 cx, ax
  00038	72 1c		 jb	 SHORT $LN8@AtomEscape
$LN7@AtomEscape:
  0003a	8b c8		 mov	 ecx, eax
  0003c	39 4e 0c	 cmp	 DWORD PTR [esi+12], ecx
  0003f	72 15		 jb	 SHORT $LN8@AtomEscape
  00041	33 c0		 xor	 eax, eax
  00043	40		 inc	 eax
  00044	d3 e0		 shl	 eax, cl
  00046	85 46 14	 test	 eax, DWORD PTR [esi+20]
  00049	74 0b		 je	 SHORT $LN8@AtomEscape

; 4858 : 		else
; 4859 : 			_Nfa._Add_backreference(_Val);

  0004b	51		 push	 ecx
  0004c	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0004f	e8 00 00 00 00	 call	 ?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXI@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_backreference
  00054	5e		 pop	 esi

; 4865 : 	}

  00055	c3		 ret	 0
$LN8@AtomEscape:

; 4857 : 			_Error(regex_constants::error_backref);

  00056	6a 03		 push	 3

; 4858 : 		else
; 4859 : 			_Nfa._Add_backreference(_Val);

  00058	eb 32		 jmp	 SHORT $LN23@AtomEscape
$LN14@AtomEscape:

; 4860 : 		}
; 4861 : 	else if (_CharacterEscape())

  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterEscape
  00061	84 c0		 test	 al, al
  00063	74 0f		 je	 SHORT $LN4@AtomEscape
$LN24@AtomEscape:

; 4862 : 		_Nfa._Add_char((_Elem)_Val);

  00065	0f b6 46 3c	 movzx	 eax, BYTE PTR [esi+60]
  00069	50		 push	 eax
  0006a	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0006d	e8 00 00 00 00	 call	 ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char
  00072	5e		 pop	 esi

; 4865 : 	}

  00073	c3		 ret	 0
$LN4@AtomEscape:

; 4863 : 	else if (!(_L_flags & _L_esc_wsd) || !_CharacterClassEscape(true))

  00074	f7 46 44 00 00
	02 00		 test	 DWORD PTR [esi+68], 131072 ; 00020000H
  0007b	74 0d		 je	 SHORT $LN1@AtomEscape
  0007d	6a 01		 push	 1
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_N_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClassEscape
  00086	84 c0		 test	 al, al
  00088	75 09		 jne	 SHORT $LN21@AtomEscape
$LN1@AtomEscape:

; 4864 : 		_Error(regex_constants::error_escape);

  0008a	6a 02		 push	 2
$LN23@AtomEscape:
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00092	59		 pop	 ecx
$LN21@AtomEscape:
  00093	5e		 pop	 esi

; 4865 : 	}

  00094	c3		 ret	 0
?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_AtomEscape
_TEXT	ENDS
PUBLIC	?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Quantifier
; Function compile flags: /Ogsp
;	COMDAT ?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
__Max$ = -4						; size = 4
?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Quantifier, COMDAT
; _this$ = ecx

; 4871 : 	{	// check for quantifier following atom

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4872 : 	int _Min = 0;
; 4873 : 	int _Max = -1;

  00004	83 4d fc ff	 or	 DWORD PTR __Max$[ebp], -1
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx

; 4874 : 	if (_Mchar == _Meta_star)

  0000b	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00014	0f 84 87 00 00
	00		 je	 $LN33@Quantifier

; 4875 : 		;
; 4876 : 	else if (_Mchar == _Meta_plus)

  0001a	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0001d	75 03		 jne	 SHORT $LN17@Quantifier

; 4877 : 		_Min = 1;

  0001f	47		 inc	 edi
  00020	eb 7f		 jmp	 SHORT $LN33@Quantifier
$LN17@Quantifier:

; 4878 : 	else if (_Mchar == _Meta_query)

  00022	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  00025	75 09		 jne	 SHORT $LN15@Quantifier

; 4879 : 		_Max = 1;

  00027	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __Max$[ebp], 1
  0002e	eb 71		 jmp	 SHORT $LN33@Quantifier
$LN15@Quantifier:

; 4880 : 	else if (_Mchar == _Meta_lbr)

  00030	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  00033	0f 85 9e 00 00
	00		 jne	 $LN13@Quantifier

; 4881 : 		{	// check for valid bracketed value
; 4882 : 		_Next();

  00039	53		 push	 ebx
  0003a	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4883 : 		if (!_DecimalDigits())

  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_DecimalDigits
  00046	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  0004c	84 c0		 test	 al, al
  0004e	75 05		 jne	 SHORT $LN22@Quantifier

; 4884 : 			_Error(regex_constants::error_badbrace);

  00050	6a 07		 push	 7
  00052	ff d3		 call	 ebx
  00054	59		 pop	 ecx
$LN22@Quantifier:

; 4885 : 		_Min = _Val;
; 4886 : 		if (_Mchar != _Meta_comma)

  00055	83 7e 40 2c	 cmp	 DWORD PTR [esi+64], 44	; 0000002cH
  00059	0f b7 7e 3c	 movzx	 edi, WORD PTR [esi+60]
  0005d	74 05		 je	 SHORT $LN11@Quantifier

; 4887 : 			_Max = _Min;

  0005f	89 7d fc	 mov	 DWORD PTR __Max$[ebp], edi

; 4888 : 		else

  00062	eb 26		 jmp	 SHORT $LN32@Quantifier
$LN11@Quantifier:

; 4889 : 			{	// check for decimal constant following comma
; 4890 : 			_Next();

  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4891 : 			if (_Mchar == _Meta_rbr)

  0006b	83 7e 40 7d	 cmp	 DWORD PTR [esi+64], 125	; 0000007dH
  0006f	74 1f		 je	 SHORT $LN37@Quantifier

; 4892 : 				;
; 4893 : 			else if (!_DecimalDigits())

  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_DecimalDigits
  00078	84 c0		 test	 al, al
  0007a	75 07		 jne	 SHORT $LN7@Quantifier

; 4894 : 				_Error(regex_constants::error_badbrace);

  0007c	6a 07		 push	 7
  0007e	ff d3		 call	 ebx
  00080	59		 pop	 ecx

; 4895 : 			else

  00081	eb 07		 jmp	 SHORT $LN32@Quantifier
$LN7@Quantifier:

; 4896 : 				_Max = _Val;

  00083	0f b7 46 3c	 movzx	 eax, WORD PTR [esi+60]
  00087	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax
$LN32@Quantifier:

; 4897 : 			}
; 4898 : 		if (_Mchar != _Meta_rbr || _Max != -1 && _Max < _Min)

  0008a	83 7e 40 7d	 cmp	 DWORD PTR [esi+64], 125	; 0000007dH
  0008e	75 0b		 jne	 SHORT $LN4@Quantifier
$LN37@Quantifier:
  00090	83 7d fc ff	 cmp	 DWORD PTR __Max$[ebp], -1
  00094	74 0a		 je	 SHORT $LN35@Quantifier
  00096	39 7d fc	 cmp	 DWORD PTR __Max$[ebp], edi
  00099	7d 05		 jge	 SHORT $LN35@Quantifier
$LN4@Quantifier:

; 4899 : 			_Error(regex_constants::error_badbrace);

  0009b	6a 07		 push	 7
  0009d	ff d3		 call	 ebx
  0009f	59		 pop	 ecx
$LN35@Quantifier:
  000a0	5b		 pop	 ebx
$LN33@Quantifier:

; 4900 : 		}
; 4901 : 	else
; 4902 : 		return;
; 4903 : 	_Nfa._Mark_final();

  000a1	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000a4	83 48 08 04	 or	 DWORD PTR [eax+8], 4

; 4904 : 	_Next();

  000a8	8b ce		 mov	 ecx, esi
  000aa	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4905 : 	if ((_L_flags & _L_ngr_rep) && _Mchar == _Meta_query)

  000af	f7 46 44 00 04
	00 00		 test	 DWORD PTR [esi+68], 1024 ; 00000400H
  000b6	74 11		 je	 SHORT $LN2@Quantifier
  000b8	83 7e 40 3f	 cmp	 DWORD PTR [esi+64], 63	; 0000003fH
  000bc	75 0b		 jne	 SHORT $LN2@Quantifier

; 4906 : 		{	// add non-greedy repeat node
; 4907 : 		_Next();

  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4908 : 		_Nfa._Add_rep(_Min, _Max, false);

  000c5	6a 00		 push	 0

; 4909 : 		}
; 4910 : 	else

  000c7	eb 02		 jmp	 SHORT $LN38@Quantifier
$LN2@Quantifier:

; 4911 : 		_Nfa._Add_rep(_Min, _Max, true);

  000c9	6a 01		 push	 1
$LN38@Quantifier:
  000cb	ff 75 fc	 push	 DWORD PTR __Max$[ebp]
  000ce	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000d1	57		 push	 edi
  000d2	e8 00 00 00 00	 call	 ?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXHH_N@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_rep
$LN13@Quantifier:
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi

; 4912 : 	}

  000d9	c9		 leave
  000da	c3		 ret	 0
?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Quantifier
_TEXT	ENDS
PUBLIC	?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@XZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassAtom
; Function compile flags: /Ogsp
;	COMDAT ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@XZ
_TEXT	SEGMENT
?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@XZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassAtom, COMDAT
; _this$ = ecx

; 4552 : 	{	// check for class atom

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4553 : 	if (_Mchar == _Meta_esc)

  00003	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00006	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00009	75 5f		 jne	 SHORT $LN15@ClassAtom

; 4554 : 		{	// check for valid escape sequence
; 4555 : 		_Next();

  0000b	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4556 : 		if (_L_flags & _L_grp_esc)

  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	a9 00 00 20 00	 test	 eax, 2097152		; 00200000H
  00018	74 0b		 je	 SHORT $LN14@ClassAtom

; 4557 : 			return (_ClassEscape(false));

  0001a	6a 00		 push	 0
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@_N@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassEscape
  00023	5e		 pop	 esi

; 4591 : 		_Next();
; 4592 : 		return (_Prs_chr);
; 4593 : 		}
; 4594 : 	}

  00024	c3		 ret	 0
$LN14@ClassAtom:

; 4558 : 		else if (_L_flags & _L_esc_ffn && _Do_ffn(_Char)
; 4559 : 			|| _L_flags & _L_esc_ffnx && _Do_ffnx(_Char))

  00025	a9 00 00 01 00	 test	 eax, 65536		; 00010000H
  0002a	74 10		 je	 SHORT $LN10@ClassAtom
  0002c	0f b6 46 3e	 movzx	 eax, BYTE PTR [esi+62]
  00030	50		 push	 eax
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffn
  00038	84 c0		 test	 al, al
  0003a	75 19		 jne	 SHORT $LN11@ClassAtom
$LN10@ClassAtom:
  0003c	f7 46 44 00 80
	00 00		 test	 DWORD PTR [esi+68], 32768 ; 00008000H
  00043	74 1c		 je	 SHORT $LN12@ClassAtom
  00045	0f b6 46 3e	 movzx	 eax, BYTE PTR [esi+62]
  00049	50		 push	 eax
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_ND@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ffnx
  00051	84 c0		 test	 al, al
  00053	74 0c		 je	 SHORT $LN12@ClassAtom
$LN11@ClassAtom:

; 4560 : 			{	// advance to next character
; 4561 : 			_Next();

  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
$LN25@ClassAtom:

; 4562 : 			return (_Prs_chr);

  0005c	33 c0		 xor	 eax, eax
  0005e	40		 inc	 eax
  0005f	5e		 pop	 esi

; 4591 : 		_Next();
; 4592 : 		return (_Prs_chr);
; 4593 : 		}
; 4594 : 	}

  00060	c3		 ret	 0
$LN12@ClassAtom:

; 4563 : 			}
; 4564 : 		_Val = _Meta_esc;

  00061	6a 5c		 push	 92			; 0000005cH
  00063	58		 pop	 eax
  00064	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 4565 : 		return (_Prs_chr);

  00068	eb f2		 jmp	 SHORT $LN25@ClassAtom
$LN15@ClassAtom:
  0006a	57		 push	 edi

; 4566 : 		}
; 4567 : 	else if (_Mchar == _Meta_lsq)

  0006b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0006e	75 4f		 jne	 SHORT $LN8@ClassAtom

; 4568 : 		{	// check for valid delimited expression
; 4569 : 		_Next();

  00070	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4570 : 		if (_Mchar == _Meta_colon
; 4571 : 			|| _Mchar == _Meta_equal
; 4572 : 			|| _Mchar == _Meta_dot)

  00075	8b 7e 40	 mov	 edi, DWORD PTR [esi+64]
  00078	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  0007b	74 16		 je	 SHORT $LN6@ClassAtom
  0007d	83 ff 3d	 cmp	 edi, 61			; 0000003dH
  00080	74 11		 je	 SHORT $LN6@ClassAtom
  00082	83 ff 2e	 cmp	 edi, 46			; 0000002eH
  00085	74 0c		 je	 SHORT $LN6@ClassAtom

; 4579 : 			}
; 4580 : 		else
; 4581 : 			{	// handle ordinary [
; 4582 : 			_Val = _Meta_lsq;

  00087	6a 5b		 push	 91			; 0000005bH
  00089	58		 pop	 eax
  0008a	66 89 46 3c	 mov	 WORD PTR [esi+60], ax

; 4583 : 			return (_Prs_chr);

  0008e	33 c0		 xor	 eax, eax
  00090	40		 inc	 eax
  00091	eb 46		 jmp	 SHORT $LN24@ClassAtom
$LN6@ClassAtom:

; 4573 : 			{	// handle delimited expression
; 4574 : 			_Meta_type _St = _Mchar;
; 4575 : 			_Next();

  00093	8b ce		 mov	 ecx, esi
  00095	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4576 : 			_Do_ex_class(_St);

  0009a	57		 push	 edi
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXW4_Meta_type@23@@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_ex_class

; 4577 : 			_Expect(_Meta_rsq, regex_constants::error_brack);

  000a2	83 7e 40 5d	 cmp	 DWORD PTR [esi+64], 93	; 0000005dH
  000a6	74 09		 je	 SHORT $LN21@ClassAtom
  000a8	6a 04		 push	 4
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  000b0	59		 pop	 ecx
$LN21@ClassAtom:
  000b1	6a 02		 push	 2
  000b3	5f		 pop	 edi
$LN23@ClassAtom:
  000b4	8b ce		 mov	 ecx, esi
  000b6	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4578 : 			return (_Prs_set);

  000bb	8b c7		 mov	 eax, edi
  000bd	eb 1a		 jmp	 SHORT $LN24@ClassAtom
$LN8@ClassAtom:

; 4584 : 			}
; 4585 : 		}
; 4586 : 	else if (_Mchar == _Meta_rsq || _Mchar == (_Elem)_Meta_eos)

  000bf	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  000c2	74 13		 je	 SHORT $LN2@ClassAtom
  000c4	83 f8 ff	 cmp	 eax, -1
  000c7	74 0e		 je	 SHORT $LN2@ClassAtom

; 4588 : 	else
; 4589 : 		{	// handle ordinary character
; 4590 : 		_Val = _Char;

  000c9	66 0f be 46 3e	 movsx	 ax, BYTE PTR [esi+62]
  000ce	33 ff		 xor	 edi, edi
  000d0	66 89 46 3c	 mov	 WORD PTR [esi+60], ax
  000d4	47		 inc	 edi
  000d5	eb dd		 jmp	 SHORT $LN23@ClassAtom
$LN2@ClassAtom:

; 4587 : 		return (_Prs_none);

  000d7	33 c0		 xor	 eax, eax
$LN24@ClassAtom:
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi

; 4591 : 		_Next();
; 4592 : 		return (_Prs_chr);
; 4593 : 		}
; 4594 : 	}

  000db	c3		 ret	 0
?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@XZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassAtom
_TEXT	ENDS
PUBLIC	__TI2?AVlogic_error@std@@
PUBLIC	??_C@_0BI@KHLKPGIO@corrupted?5regex?5pattern?$AA@ ; `string'
PUBLIC	?_Do_rep@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_rep@23@_NH@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_rep
PUBLIC	__CTA2?AVlogic_error@std@@
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT
__CTA2?AVlogic_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT
__TI2?AVlogic_error@std@@ DD 00H
	DD	FLAT:??1logic_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVlogic_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BI@KHLKPGIO@corrupted?5regex?5pattern?$AA@
CONST	SEGMENT
??_C@_0BI@KHLKPGIO@corrupted?5regex?5pattern?$AA@ DB 'corrupted regex pat'
	DB	'tern', 00H					; `string'
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
CONST	ENDS
;	COMDAT ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z
_TEXT	SEGMENT
$T527182 = -44						; size = 12
__St$511907 = -32					; size = 8
__St$511954 = -24					; size = 8
$T527181 = -16						; size = 4
$T527178 = -12						; size = 4
__Ch$511904 = -8					; size = 4
__Failed$ = -1						; size = 1
__Nx$ = 8						; size = 4
tv1023 = 11						; size = 1
__Neg$511905 = 11					; size = 1
$T527384 = 12						; size = 4
__Continue$ = 12					; size = 4
?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match, COMDAT
; _this$ = ecx

; 3906 : 	{	// check for match

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 3907 : 	bool _Failed = false;
; 3908 : 	while (_Nx != 0)

  00008	8b 75 08	 mov	 esi, DWORD PTR __Nx$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	c6 45 ff 00	 mov	 BYTE PTR __Failed$[ebp], 0
  00011	85 f6		 test	 esi, esi
  00013	0f 84 f9 02 00
	00		 je	 $LN60@Match
  00019	57		 push	 edi
$LL61@Match:

; 3909 : 		{	// match current node
; 3910 : 		switch (_Nx->_Type)

  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00020	83 f9 14	 cmp	 ecx, 20			; 00000014H
  00023	0f 87 29 03 00
	00		 ja	 $LN5@Match
  00029	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN184@Match[ecx*4]
$LN56@Match:

; 3911 : 			{	// handle current node's type
; 3912 : 			case _N_nop:
; 3913 : 				break;
; 3914 : 
; 3915 : 			case _N_bol:
; 3916 : 				if ((_Mflags & (regex_constants::match_not_bol
; 3917 : 					| regex_constants::match_prev_avail))
; 3918 : 						== regex_constants::match_not_bol)

  00030	8b 83 24 02 00
	00		 mov	 eax, DWORD PTR [ebx+548]
  00036	8b c8		 mov	 ecx, eax
  00038	81 e1 01 01 00
	00		 and	 ecx, 257		; 00000101H
  0003e	83 f9 01	 cmp	 ecx, 1
  00041	0f 84 e1 02 00
	00		 je	 $LN178@Match

; 3919 : 					_Failed = true;
; 3920 : 				else if (_Mflags & regex_constants::match_prev_avail
; 3921 : 					|| _Tgt_state._Cur != _Begin)

  00047	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  0004c	75 0e		 jne	 SHORT $LN52@Match
  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	3b 83 10 02 00
	00		 cmp	 eax, DWORD PTR [ebx+528]
  00056	0f 84 a0 02 00
	00		 je	 $LN180@Match
$LN52@Match:

; 3922 : 					{	// check for preceding newline
; 3923 : 					_It _Tmp = _Tgt_state._Cur;
; 3924 : 					_Failed = *--_Tmp != _Meta_nl;

  0005c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005e	80 78 ff 0a	 cmp	 BYTE PTR [eax-1], 10	; 0000000aH
  00062	0f 95 45 ff	 setne	 BYTE PTR __Failed$[ebp]

; 3925 : 					}
; 3926 : 				break;

  00066	e9 91 02 00 00	 jmp	 $LN180@Match
$LN51@Match:

; 3927 : 
; 3928 : 			case _N_eol:
; 3929 : 				if ((_Mflags & regex_constants::match_not_eol) != 0
; 3930 : 					|| _Tgt_state._Cur != _End
; 3931 : 						&& *_Tgt_state._Cur != _Meta_nl)

  0006b	f6 83 24 02 00
	00 02		 test	 BYTE PTR [ebx+548], 2
  00072	75 17		 jne	 SHORT $LN49@Match
  00074	8b 03		 mov	 eax, DWORD PTR [ebx]
  00076	3b 83 14 02 00
	00		 cmp	 eax, DWORD PTR [ebx+532]
  0007c	0f 84 7a 02 00
	00		 je	 $LN180@Match
  00082	80 38 0a	 cmp	 BYTE PTR [eax], 10	; 0000000aH
  00085	0f 84 71 02 00
	00		 je	 $LN180@Match
$LN49@Match:

; 3932 : 					_Failed = true;

  0008b	c6 45 ff 01	 mov	 BYTE PTR __Failed$[ebp], 1

; 3933 : 				break;

  0008f	e9 68 02 00 00	 jmp	 $LN180@Match
$LN48@Match:

; 3934 : 
; 3935 : 			case _N_wbound:
; 3936 : 				{	// check for word boundary
; 3937 : 				bool _Is_bound;
; 3938 : 				if ((_Mflags & regex_constants::match_not_bow)
; 3939 : 					&& _Tgt_state._Cur == _Begin
; 3940 : 					|| (_Mflags & regex_constants::match_not_eow)
; 3941 : 						&& _Tgt_state._Cur == _End)

  00094	8b 83 24 02 00
	00		 mov	 eax, DWORD PTR [ebx+548]
  0009a	a8 04		 test	 al, 4
  0009c	74 0a		 je	 SHORT $LN45@Match
  0009e	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000a0	3b 8b 10 02 00
	00		 cmp	 ecx, DWORD PTR [ebx+528]
  000a6	74 0e		 je	 SHORT $LN46@Match
$LN45@Match:
  000a8	a8 08		 test	 al, 8
  000aa	74 0e		 je	 SHORT $LN47@Match
  000ac	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ae	3b 83 14 02 00
	00		 cmp	 eax, DWORD PTR [ebx+532]
  000b4	75 04		 jne	 SHORT $LN47@Match
$LN46@Match:

; 3942 : 					_Is_bound = false;

  000b6	32 c0		 xor	 al, al

; 3943 : 				else

  000b8	eb 1f		 jmp	 SHORT $LN44@Match
$LN47@Match:

; 3944 : 					_Is_bound = _Is_wc(_Tgt_state._Cur, -1)
; 3945 : 						!= _Is_wc(_Tgt_state._Cur, 0);

  000ba	6a ff		 push	 -1
  000bc	ff 33		 push	 DWORD PTR [ebx]
  000be	8b cb		 mov	 ecx, ebx
  000c0	e8 00 00 00 00	 call	 ?_Is_wc@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Is_wc
  000c5	6a 00		 push	 0
  000c7	ff 33		 push	 DWORD PTR [ebx]
  000c9	8b cb		 mov	 ecx, ebx
  000cb	88 45 0b	 mov	 BYTE PTR tv1023[ebp], al
  000ce	e8 00 00 00 00	 call	 ?_Is_wc@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Is_wc
  000d3	38 45 0b	 cmp	 BYTE PTR tv1023[ebp], al
  000d6	0f 95 c0	 setne	 al
$LN44@Match:

; 3946 : 				bool _Neg = (_Nx->_Flags & _Fl_negate) != 0;

  000d9	8a 4e 08	 mov	 cl, BYTE PTR [esi+8]
  000dc	80 e1 01	 and	 cl, 1

; 3947 : 				if (_Is_bound == _Neg)

  000df	3a c1		 cmp	 al, cl
  000e1	0f 85 15 02 00
	00		 jne	 $LN180@Match

; 3948 : 					_Failed = true;
; 3949 : 				break;

  000e7	eb a2		 jmp	 SHORT $LN49@Match
$LN42@Match:

; 3950 : 				}
; 3951 : 
; 3952 : 			case _N_dot:
; 3953 : 				if (_Tgt_state._Cur == _End
; 3954 : 					|| *_Tgt_state._Cur == _Meta_nl
; 3955 : 					|| *_Tgt_state._Cur == _Meta_cr)

  000e9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000eb	3b 83 14 02 00
	00		 cmp	 eax, DWORD PTR [ebx+532]
  000f1	74 98		 je	 SHORT $LN49@Match
  000f3	8a 08		 mov	 cl, BYTE PTR [eax]
  000f5	80 f9 0a	 cmp	 cl, 10			; 0000000aH
  000f8	74 91		 je	 SHORT $LN49@Match
  000fa	80 f9 0d	 cmp	 cl, 13			; 0000000dH
  000fd	74 8c		 je	 SHORT $LN49@Match

; 3956 : 					_Failed = true;
; 3957 : 				else
; 3958 : 					++_Tgt_state._Cur;

  000ff	40		 inc	 eax
  00100	e9 9b 00 00 00	 jmp	 $LN22@Match
$LN38@Match:

; 3959 : 				break;
; 3960 : 
; 3961 : 			case _N_str:
; 3962 : 				{	// check for string match
; 3963 : 				_Node_str<_Elem> *_Node = (_Node_str<_Elem>*)_Nx;
; 3964 : 				_It _Res;
; 3965 : 				if ((_Res = _Compare(_Tgt_state._Cur, _End,
; 3966 : 					_Node->_Data._Str(),
; 3967 : 					_Node->_Data._Str() + _Node->_Data._Size(),
; 3968 : 					_Traits, _Sflags,
; 3969 : 					(_Mflags & regex_constants::_Match_partial) != 0))
; 3970 : 						!= _Tgt_state._Cur)

  00105	8b 83 24 02 00
	00		 mov	 eax, DWORD PTR [ebx+548]
  0010b	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0010e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00113	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00116	0f 95 c1	 setne	 cl
  00119	0f b6 c9	 movzx	 ecx, cl
  0011c	51		 push	 ecx
  0011d	ff b3 20 02 00
	00		 push	 DWORD PTR [ebx+544]
  00123	8d 8b 2c 02 00
	00		 lea	 ecx, DWORD PTR [ebx+556]
  00129	51		 push	 ecx
  0012a	03 f8		 add	 edi, eax
  0012c	57		 push	 edi
  0012d	50		 push	 eax
  0012e	ff b3 14 02 00
	00		 push	 DWORD PTR [ebx+532]
  00134	8d 45 f4	 lea	 eax, DWORD PTR $T527178[ebp]
  00137	ff 33		 push	 DWORD PTR [ebx]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@0PBD1ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char const *,std::tr1::regex_traits<char> >
  0013f	8b 00		 mov	 eax, DWORD PTR [eax]
  00141	83 c4 20	 add	 esp, 32			; 00000020H
  00144	3b 03		 cmp	 eax, DWORD PTR [ebx]
  00146	0f 84 3f ff ff
	ff		 je	 $LN49@Match

; 3971 : 					_Tgt_state._Cur = _Res;
; 3972 : 				else

  0014c	eb 52		 jmp	 SHORT $LN22@Match
$LN35@Match:

; 3973 : 					_Failed = true;
; 3974 : 				break;
; 3975 : 				}
; 3976 : 
; 3977 : 			case _N_class:
; 3978 : 				{	// check for bracket expression match
; 3979 : 				_Failed = _Tgt_state._Cur == _End
; 3980 : 					|| !_Do_class(_Nx);

  0014e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00150	3b 83 14 02 00
	00		 cmp	 eax, DWORD PTR [ebx+532]
  00156	0f 84 cc 01 00
	00		 je	 $LN178@Match
  0015c	56		 push	 esi
  0015d	8b cb		 mov	 ecx, ebx
  0015f	e8 00 00 00 00	 call	 ?_Do_class@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_class
  00164	84 c0		 test	 al, al
  00166	0f 84 bc 01 00
	00		 je	 $LN178@Match
  0016c	c6 45 ff 00	 mov	 BYTE PTR __Failed$[ebp], 0
  00170	e9 8d 01 00 00	 jmp	 $LN4@Match
$LN32@Match:

; 3981 : 				break;
; 3982 : 				}
; 3983 : 
; 3984 : 			case _N_group:
; 3985 : 				break;
; 3986 : 
; 3987 : 			case _N_end_group:
; 3988 : 				break;
; 3989 : 
; 3990 : 			case _N_neg_assert:
; 3991 : 			case _N_assert:
; 3992 : 				{	// check assert
; 3993 : 				_It _Ch = _Tgt_state._Cur;

  00175	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 3994 : 				bool _Neg = _Nx->_Type == _N_neg_assert;

  00177	83 f8 0b	 cmp	 eax, 11			; 0000000bH

; 3995 : 				_Bt_state_t<_It> _St = _Tgt_state;

  0017a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 3996 : 				if (_Match(((_Node_assert *)_Nx)->_Child) == _Neg)

  0017d	6a 00		 push	 0
  0017f	ff 76 14	 push	 DWORD PTR [esi+20]
  00182	89 4d f8	 mov	 DWORD PTR __Ch$511904[ebp], ecx
  00185	8b f9		 mov	 edi, ecx
  00187	8b cb		 mov	 ecx, ebx
  00189	0f 94 45 0b	 sete	 BYTE PTR __Neg$511905[ebp]
  0018d	89 45 e4	 mov	 DWORD PTR __St$511907[ebp+4], eax
  00190	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  00195	3a 45 0b	 cmp	 al, BYTE PTR __Neg$511905[ebp]
  00198	0f 84 82 01 00
	00		 je	 $LN177@Match

; 3999 : 					_Failed = true;
; 4000 : 					}
; 4001 : 				else
; 4002 : 					_Tgt_state._Cur = _Ch;

  0019e	8b c7		 mov	 eax, edi
$LN22@Match:
  001a0	89 03		 mov	 DWORD PTR [ebx], eax

; 4003 : 				break;

  001a2	e9 55 01 00 00	 jmp	 $LN180@Match
$LN28@Match:

; 4004 : 				}
; 4005 : 
; 4006 : 			case _N_end_assert:
; 4007 : 				_Nx = 0;
; 4008 : 				break;
; 4009 : 
; 4010 : 			case _N_capture:
; 4011 : 				{	// record current position
; 4012 : 				_Node_capture *_Node = (_Node_capture *)_Nx;
; 4013 : 				_Tgt_state._Grps[_Node->_Idx]._Begin = _Tgt_state._Cur;

  001a7	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001aa	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001ac	89 4c c3 08	 mov	 DWORD PTR [ebx+eax*8+8], ecx

; 4014 : 				break;

  001b0	e9 47 01 00 00	 jmp	 $LN180@Match
$LN27@Match:

; 4015 : 				}
; 4016 : 
; 4017 : 			case _N_end_capture:
; 4018 : 				{	// record successful capture
; 4019 : 				_Node_end_group *_Node = (_Node_end_group *)_Nx;
; 4020 : 				_Node_capture *_Node0 = (_Node_capture *)_Node->_Back;
; 4021 : 				if (_Cap || _Node0->_Idx != 0)

  001b5	80 bb 29 02 00
	00 00		 cmp	 BYTE PTR [ebx+553], 0
  001bc	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  001bf	75 0a		 jne	 SHORT $LN25@Match
  001c1	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  001c5	0f 84 31 01 00
	00		 je	 $LN180@Match
$LN25@Match:

; 4022 : 					{	// update capture data
; 4023 : 					_Tgt_state._Grp_valid |= (_Grps(1) << _Node0->_Idx);

  001cb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ce	33 d2		 xor	 edx, edx
  001d0	42		 inc	 edx
  001d1	d3 e2		 shl	 edx, cl

; 4024 : 					_Tgt_state._Grps[_Node0->_Idx]._End = _Tgt_state._Cur;

  001d3	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001d5	09 53 04	 or	 DWORD PTR [ebx+4], edx
  001d8	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  001db	89 4c c3 0c	 mov	 DWORD PTR [ebx+eax*8+12], ecx

; 4025 : 					}
; 4026 : 				break;

  001df	e9 18 01 00 00	 jmp	 $LN180@Match
$LN24@Match:

; 4027 : 				}
; 4028 : 
; 4029 : 			case _N_back:
; 4030 : 				{	// check back reference
; 4031 : 				_Node_back *_Node = (_Node_back *)_Nx;
; 4032 : 				if (_Tgt_state._Grp_valid & (_Grps(1) << _Node->_Idx))

  001e4	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001e7	33 c0		 xor	 eax, eax
  001e9	40		 inc	 eax
  001ea	d3 e0		 shl	 eax, cl
  001ec	85 43 04	 test	 eax, DWORD PTR [ebx+4]
  001ef	0f 84 07 01 00
	00		 je	 $LN180@Match

; 4033 : 					{	// check for match
; 4034 : 					_It _Res = _Tgt_state._Cur;

  001f5	8b 03		 mov	 eax, DWORD PTR [ebx]

; 4035 : 					_It _Bx = _Tgt_state._Grps[_Node->_Idx]._Begin;

  001f7	8d 0c cb	 lea	 ecx, DWORD PTR [ebx+ecx*8]
  001fa	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 4036 : 					_It _Ex = _Tgt_state._Grps[_Node->_Idx]._End;

  001fd	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]

; 4037 : 					if (_Bx != _Ex	// _Bx == _Ex for zero-length match
; 4038 : 						&& (_Res = _Compare(_Tgt_state._Cur, _End,
; 4039 : 							_Bx, _Ex, _Traits, _Sflags,
; 4040 : 							(_Mflags & regex_constants::_Match_partial) != 0))
; 4041 : 								== _Tgt_state._Cur)

  00200	3b d7		 cmp	 edx, edi
  00202	74 9c		 je	 SHORT $LN22@Match
  00204	8b 83 24 02 00
	00		 mov	 eax, DWORD PTR [ebx+548]
  0020a	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0020f	0f 95 c0	 setne	 al
  00212	0f b6 c0	 movzx	 eax, al
  00215	50		 push	 eax
  00216	ff b3 20 02 00
	00		 push	 DWORD PTR [ebx+544]
  0021c	8d 83 2c 02 00
	00		 lea	 eax, DWORD PTR [ebx+556]
  00222	50		 push	 eax
  00223	57		 push	 edi
  00224	52		 push	 edx
  00225	ff b3 14 02 00
	00		 push	 DWORD PTR [ebx+532]
  0022b	8d 45 f0	 lea	 eax, DWORD PTR $T527181[ebp]
  0022e	ff 33		 push	 DWORD PTR [ebx]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 ??$_Compare@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@V?$regex_traits@D@tr1@2@@tr1@std@@YA?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V21@000ABV?$regex_traits@D@01@W4syntax_option_type@regex_constants@01@_N@Z ; std::tr1::_Compare<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::tr1::regex_traits<char> >
  00236	8b 00		 mov	 eax, DWORD PTR [eax]
  00238	83 c4 20	 add	 esp, 32			; 00000020H
  0023b	3b 03		 cmp	 eax, DWORD PTR [ebx]
  0023d	0f 84 e5 00 00
	00		 je	 $LN178@Match

; 4043 : 					else
; 4044 : 						_Tgt_state._Cur = _Res;
; 4045 : 					}
; 4046 : 				break;

  00243	e9 58 ff ff ff	 jmp	 $LN22@Match
$LN20@Match:

; 4047 : 				}
; 4048 : 
; 4049 : 			case _N_if:
; 4050 : 				if (!_Do_if((_Node_if *)_Nx, _Continue))

  00248	ff 75 0c	 push	 DWORD PTR __Continue$[ebp]
  0024b	8b cb		 mov	 ecx, ebx
  0024d	56		 push	 esi
  0024e	e8 00 00 00 00	 call	 ?_Do_if@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_if@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_if
$LN183@Match:
  00253	84 c0		 test	 al, al
  00255	0f 85 9f 00 00
	00		 jne	 $LN179@Match

; 4051 : 					_Failed = true;
; 4052 : 				_Nx = 0;
; 4053 : 				break;

  0025b	eb 6f		 jmp	 SHORT $LN10@Match
$LN17@Match:

; 4054 : 
; 4055 : 			case _N_endif:
; 4056 : 				break;
; 4057 : 
; 4058 : 			case _N_rep:
; 4059 : 				if (!_Do_rep((_Node_rep *)_Nx,
; 4060 : 					(_Nx->_Flags & _Fl_greedy) != 0, _Continue))

  0025d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00260	ff 75 0c	 push	 DWORD PTR __Continue$[ebp]
  00263	d1 e8		 shr	 eax, 1
  00265	24 01		 and	 al, 1
  00267	0f b6 c0	 movzx	 eax, al
  0026a	50		 push	 eax
  0026b	56		 push	 esi
  0026c	8b cb		 mov	 ecx, ebx
  0026e	e8 00 00 00 00	 call	 ?_Do_rep@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_rep@23@_NH@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_rep

; 4061 : 					_Failed = true;
; 4062 : 				_Nx = 0;
; 4063 : 				break;

  00273	eb de		 jmp	 SHORT $LN183@Match
$LN15@Match:

; 4064 : 
; 4065 : 			case _N_end_rep:
; 4066 : 				if (0 < _Continue)

  00275	83 7d 0c 00	 cmp	 DWORD PTR __Continue$[ebp], 0
  00279	7e 7f		 jle	 SHORT $LN179@Match

; 4067 : 					{	// check tail beyond enclosing loop
; 4068 : 					_Bt_state_t<_It> _St = _Tgt_state;
; 4069 : 					_Failed = !_Match(_Nx->_Next, _Continue);

  0027b	ff 75 0c	 push	 DWORD PTR __Continue$[ebp]
  0027e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00281	ff 76 0c	 push	 DWORD PTR [esi+12]
  00284	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00286	8b cb		 mov	 ecx, ebx
  00288	89 45 ec	 mov	 DWORD PTR __St$511954[ebp+4], eax
  0028b	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  00290	f6 d8		 neg	 al
  00292	1a c0		 sbb	 al, al
  00294	fe c0		 inc	 al
  00296	88 45 ff	 mov	 BYTE PTR __Failed$[ebp], al

; 4070 : 					_Tgt_state = _St;

  00299	8b 45 ec	 mov	 eax, DWORD PTR __St$511954[ebp+4]
  0029c	89 3b		 mov	 DWORD PTR [ebx], edi
  0029e	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 4071 : 					}
; 4072 : 				_Nx = 0;
; 4073 : 				break;

  002a1	eb 57		 jmp	 SHORT $LN179@Match
$LN12@Match:

; 4074 : 
; 4075 : 			case _N_begin:
; 4076 : 				break;
; 4077 : 
; 4078 : 			case _N_end:
; 4079 : 				if ((_Mflags & (regex_constants::match_not_null
; 4080 : 						| regex_constants::_Match_not_null))
; 4081 : 					&& _Begin == _Tgt_state._Cur
; 4082 : 						|| _Full && _Tgt_state._Cur != _End)

  002a3	f7 83 24 02 00
	00 20 20 00 00	 test	 DWORD PTR [ebx+548], 8224 ; 00002020H
  002ad	74 0a		 je	 SHORT $LN9@Match
  002af	8b 83 10 02 00
	00		 mov	 eax, DWORD PTR [ebx+528]
  002b5	3b 03		 cmp	 eax, DWORD PTR [ebx]
  002b7	74 13		 je	 SHORT $LN10@Match
$LN9@Match:
  002b9	80 bb 38 02 00
	00 00		 cmp	 BYTE PTR [ebx+568], 0
  002c0	74 10		 je	 SHORT $LN11@Match
  002c2	8b 03		 mov	 eax, DWORD PTR [ebx]
  002c4	3b 83 14 02 00
	00		 cmp	 eax, DWORD PTR [ebx+532]
  002ca	74 06		 je	 SHORT $LN11@Match
$LN10@Match:

; 4083 : 					_Failed = true;

  002cc	c6 45 ff 01	 mov	 BYTE PTR __Failed$[ebp], 1
  002d0	eb 28		 jmp	 SHORT $LN179@Match
$LN11@Match:

; 4084 : 				else if (!_Matched || _Better_match())

  002d2	80 bb 28 02 00
	00 00		 cmp	 BYTE PTR [ebx+552], 0
  002d9	74 0b		 je	 SHORT $LN6@Match
  002db	8b cb		 mov	 ecx, ebx
  002dd	e8 00 00 00 00	 call	 ?_Better_match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NXZ ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Better_match
  002e2	84 c0		 test	 al, al
  002e4	74 14		 je	 SHORT $LN179@Match
$LN6@Match:

; 4085 : 					{	// record successful match
; 4086 : 					_Res = _Tgt_state;

  002e6	6a 42		 push	 66			; 00000042H
  002e8	8d bb 08 01 00
	00		 lea	 edi, DWORD PTR [ebx+264]
  002ee	59		 pop	 ecx
  002ef	8b f3		 mov	 esi, ebx
  002f1	f3 a5		 rep movsd

; 4087 : 					_Matched = true;

  002f3	c6 83 28 02 00
	00 01		 mov	 BYTE PTR [ebx+552], 1
$LN179@Match:

; 4088 : 					}
; 4089 : 				_Nx = 0;

  002fa	33 f6		 xor	 esi, esi
$LN180@Match:

; 4094 : 			}
; 4095 : 
; 4096 : 		if (_Failed)

  002fc	80 7d ff 00	 cmp	 BYTE PTR __Failed$[ebp], 0
  00300	75 2a		 jne	 SHORT $LN175@Match
$LN4@Match:

; 4103 : 					}
; 4104 : 			_Nx = 0;
; 4105 : 			}
; 4106 : 		else if (_Nx)

  00302	85 f6		 test	 esi, esi
  00304	74 0b		 je	 SHORT $LN181@Match

; 4107 : 			_Nx = _Nx->_Next;

  00306	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00309	85 f6		 test	 esi, esi
  0030b	0f 85 09 fd ff
	ff		 jne	 $LL61@Match
$LN181@Match:
  00311	5f		 pop	 edi
$LN60@Match:

; 4108 : 		}
; 4109 : 	return (!_Failed);

  00312	33 c0		 xor	 eax, eax
  00314	38 45 ff	 cmp	 BYTE PTR __Failed$[ebp], al
  00317	5e		 pop	 esi
  00318	0f 94 c0	 sete	 al
  0031b	5b		 pop	 ebx

; 4110 : 	}

  0031c	c9		 leave
  0031d	c2 08 00	 ret	 8
$LN177@Match:

; 3997 : 					{	// restore initial state and indicate failure
; 3998 : 					_Tgt_state = _St;

  00320	8b 45 e4	 mov	 eax, DWORD PTR __St$511907[ebp+4]
  00323	89 3b		 mov	 DWORD PTR [ebx], edi
  00325	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN178@Match:

; 4042 : 						_Failed = true;

  00328	c6 45 ff 01	 mov	 BYTE PTR __Failed$[ebp], 1
$LN175@Match:

; 4097 : 			{	// terminate match processing
; 4098 : 			if ((_Mflags & regex_constants::_Match_partial) != 0
; 4099 : 				&& _Tgt_state._Cur == _End)

  0032c	f6 83 24 02 00
	00 80		 test	 BYTE PTR [ebx+548], -128 ; ffffff80H
  00333	74 dc		 je	 SHORT $LN181@Match
  00335	8b 03		 mov	 eax, DWORD PTR [ebx]
  00337	3b 83 14 02 00
	00		 cmp	 eax, DWORD PTR [ebx+532]
  0033d	75 d2		 jne	 SHORT $LN181@Match

; 4100 : 					{	// record successful partial match
; 4101 : 					_Failed = false;
; 4102 : 					_Res = _Tgt_state;

  0033f	6a 42		 push	 66			; 00000042H
  00341	8d bb 08 01 00
	00		 lea	 edi, DWORD PTR [ebx+264]
  00347	59		 pop	 ecx
  00348	8b f3		 mov	 esi, ebx
  0034a	c6 45 ff 00	 mov	 BYTE PTR __Failed$[ebp], 0
  0034e	f3 a5		 rep movsd
  00350	eb bf		 jmp	 SHORT $LN181@Match
$LN5@Match:

; 4090 : 				break;
; 4091 : 
; 4092 : 			default:
; 4093 : 				_THROW_NCEE(_STD logic_error, "corrupted regex pattern");

  00352	8d 45 0c	 lea	 eax, DWORD PTR $T527384[ebp]
  00355	50		 push	 eax
  00356	8d 4d d4	 lea	 ecx, DWORD PTR $T527182[ebp]
  00359	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T527384[ebp], OFFSET ??_C@_0BI@KHLKPGIO@corrupted?5regex?5pattern?$AA@
  00360	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
  00366	68 00 00 00 00	 push	 OFFSET __TI2?AVlogic_error@std@@
  0036b	8d 45 d4	 lea	 eax, DWORD PTR $T527182[ebp]
  0036e	50		 push	 eax
  0036f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T527182[ebp], OFFSET ??_7logic_error@std@@6B@
  00376	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN185@Match:
$LN182@Match:
  0037b	90		 npad	 1
$LN184@Match:

; 4110 : 	}

  0037c	00 00 00 00	 DD	 $LN180@Match
  00380	00 00 00 00	 DD	 $LN56@Match
  00384	00 00 00 00	 DD	 $LN51@Match
  00388	00 00 00 00	 DD	 $LN48@Match
  0038c	00 00 00 00	 DD	 $LN42@Match
  00390	00 00 00 00	 DD	 $LN38@Match
  00394	00 00 00 00	 DD	 $LN35@Match
  00398	00 00 00 00	 DD	 $LN180@Match
  0039c	00 00 00 00	 DD	 $LN180@Match
  003a0	00 00 00 00	 DD	 $LN32@Match
  003a4	00 00 00 00	 DD	 $LN32@Match
  003a8	00 00 00 00	 DD	 $LN179@Match
  003ac	00 00 00 00	 DD	 $LN28@Match
  003b0	00 00 00 00	 DD	 $LN27@Match
  003b4	00 00 00 00	 DD	 $LN24@Match
  003b8	00 00 00 00	 DD	 $LN20@Match
  003bc	00 00 00 00	 DD	 $LN180@Match
  003c0	00 00 00 00	 DD	 $LN17@Match
  003c4	00 00 00 00	 DD	 $LN15@Match
  003c8	00 00 00 00	 DD	 $LN180@Match
  003cc	00 00 00 00	 DD	 $LN12@Match
?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
PUBLIC	__Node$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogsp
;	COMDAT ?_Do_rep@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_rep@23@_NH@Z
_TEXT	SEGMENT
__Mid$512327 = -296					; size = 4
__St$ = -292						; size = 8
__Node$GSCopy$ = -284					; size = 4
__Saved_pos$ = -280					; size = 4
__Cur$512310 = -280					; size = 4
__Ix$ = -276						; size = 4
__Matched$ = -269					; size = 1
__Final$ = -268						; size = 264
__$ArrayPad$ = -4					; size = 4
__Node$ = 8						; size = 4
__Greedy$ = 12						; size = 1
__Continue$ = 16					; size = 4
?_Do_rep@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_rep@23@_NH@Z PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_rep, COMDAT
; _this$ = ecx

; 3649 : 	{	// apply repetition

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 3650 : 	_Bt_state_t<_It> _St = _Tgt_state;
; 3651 : 	int _Ix = 0;

  00016	83 a5 ec fe ff
	ff 00		 and	 DWORD PTR __Ix$[ebp], 0

; 3652 : 
; 3653 : 	for (; _Ix < _Node->_Min; ++_Ix)

  0001d	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	8b d9		 mov	 ebx, ecx
  00025	8b 33		 mov	 esi, DWORD PTR [ebx]
  00027	57		 push	 edi
  00028	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0002b	89 85 e4 fe ff
	ff		 mov	 DWORD PTR __Node$GSCopy$[ebp], eax
  00031	89 b5 dc fe ff
	ff		 mov	 DWORD PTR __St$[ebp], esi
  00037	89 bd e0 fe ff
	ff		 mov	 DWORD PTR __St$[ebp+4], edi
  0003d	7e 3f		 jle	 SHORT $LN48@Do_rep
$LL47@Do_rep:

; 3654 : 		{	// try another rep match
; 3655 : 		_It _Cur = _Tgt_state._Cur;

  0003f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00041	89 85 e8 fe ff
	ff		 mov	 DWORD PTR __Cur$512310[ebp], eax

; 3656 : 
; 3657 : 		if (!_Match(_Node->_Next, -1))

  00047	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Node$GSCopy$[ebp]
  0004d	6a ff		 push	 -1
  0004f	ff 70 0c	 push	 DWORD PTR [eax+12]
  00052	8b cb		 mov	 ecx, ebx
  00054	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  00059	84 c0		 test	 al, al
  0005b	74 64		 je	 SHORT $LN41@Do_rep

; 3661 : 			}
; 3662 : 		else if (_Cur == _Tgt_state._Cur)

  0005d	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR __Cur$512310[ebp]
  00063	3b 03		 cmp	 eax, DWORD PTR [ebx]
  00065	74 17		 je	 SHORT $LN48@Do_rep

; 3652 : 
; 3653 : 	for (; _Ix < _Node->_Min; ++_Ix)

  00067	ff 85 ec fe ff
	ff		 inc	 DWORD PTR __Ix$[ebp]
  0006d	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Node$GSCopy$[ebp]
  00073	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR __Ix$[ebp]
  00079	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0007c	7c c1		 jl	 SHORT $LL47@Do_rep
$LN48@Do_rep:

; 3663 : 			break;	// rep match ate no additional elements, quit loop
; 3664 : 		}
; 3665 : 
; 3666 : 	_Tgt_state_t<_It> _Final = _Tgt_state;
; 3667 : 	bool _Matched = false;
; 3668 : 	_It _Saved_pos = _Tgt_state._Cur;

  0007e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00080	6a 42		 push	 66			; 00000042H
  00082	59		 pop	 ecx

; 3669 : 
; 3670 : 	if (!_Match(_Node->_End_rep->_Next, _Continue))

  00083	ff 75 10	 push	 DWORD PTR __Continue$[ebp]
  00086	89 85 e8 fe ff
	ff		 mov	 DWORD PTR __Saved_pos$[ebp], eax
  0008c	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Node$GSCopy$[ebp]
  00092	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00095	ff 70 0c	 push	 DWORD PTR [eax+12]
  00098	8b f3		 mov	 esi, ebx
  0009a	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR __Final$[ebp]
  000a0	f3 a5		 rep movsd
  000a2	8b cb		 mov	 ecx, ebx
  000a4	c6 85 f3 fe ff
	ff 00		 mov	 BYTE PTR __Matched$[ebp], 0
  000ab	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  000b0	84 c0		 test	 al, al
  000b2	74 2d		 je	 SHORT $LL9@Do_rep

; 3671 : 		;	// tail match failed, report no full match yet
; 3672 : 	else if (!_Greedy)

  000b4	80 7d 0c 00	 cmp	 BYTE PTR __Greedy$[ebp], 0
  000b8	75 13		 jne	 SHORT $LN11@Do_rep
$LN44@Do_rep:

; 3673 : 		return (true);	// go with current match

  000ba	b0 01		 mov	 al, 1
  000bc	e9 f1 00 00 00	 jmp	 $LN20@Do_rep
$LN41@Do_rep:

; 3658 : 			{	// didn't match minimum number of reps, fail
; 3659 : 			_Tgt_state = _St;

  000c1	89 33		 mov	 DWORD PTR [ebx], esi
  000c3	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 3660 : 			return (false);

  000c6	32 c0		 xor	 al, al
  000c8	e9 e5 00 00 00	 jmp	 $LN20@Do_rep
$LN11@Do_rep:

; 3674 : 	else
; 3675 : 		{	// record match and continue
; 3676 : 		_Final = _Tgt_state;

  000cd	6a 42		 push	 66			; 00000042H
  000cf	59		 pop	 ecx
  000d0	8b f3		 mov	 esi, ebx
  000d2	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR __Final$[ebp]
  000d8	f3 a5		 rep movsd

; 3677 : 		_Matched = true;

  000da	c6 85 f3 fe ff
	ff 01		 mov	 BYTE PTR __Matched$[ebp], 1
$LL9@Do_rep:

; 3678 : 		}
; 3679 : 
; 3680 : 	while (_Node->_Max == -1 || _Ix++ < _Node->_Max)

  000e1	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR __Node$GSCopy$[ebp]
  000e7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000ea	83 f8 ff	 cmp	 eax, -1
  000ed	74 14		 je	 SHORT $LN50@Do_rep
  000ef	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR __Ix$[ebp]
  000f5	ff 85 ec fe ff
	ff		 inc	 DWORD PTR __Ix$[ebp]
  000fb	3b c8		 cmp	 ecx, eax
  000fd	0f 8d 8a 00 00
	00		 jge	 $LN51@Do_rep
$LN50@Do_rep:

; 3681 : 		{	// try another rep/tail match
; 3682 : 		_Tgt_state._Cur = _Saved_pos;

  00103	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR __Saved_pos$[ebp]
  00109	89 03		 mov	 DWORD PTR [ebx], eax

; 3683 : 		_Tgt_state._Grp_valid = _St._Grp_valid;

  0010b	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR __St$[ebp+4]
  00111	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 3684 : 		if (!_Match(_Node->_Next,
; 3685 : 			0 <= _Node->_Max && _Node->_Max <= _Ix ? 1 : -1))

  00114	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00117	85 c0		 test	 eax, eax
  00119	78 0d		 js	 SHORT $LN22@Do_rep
  0011b	3b 85 ec fe ff
	ff		 cmp	 eax, DWORD PTR __Ix$[ebp]
  00121	7f 05		 jg	 SHORT $LN22@Do_rep
  00123	33 c0		 xor	 eax, eax
  00125	40		 inc	 eax
  00126	eb 03		 jmp	 SHORT $LN23@Do_rep
$LN22@Do_rep:
  00128	83 c8 ff	 or	 eax, -1
$LN23@Do_rep:
  0012b	50		 push	 eax
  0012c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0012f	8b cb		 mov	 ecx, ebx
  00131	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  00136	84 c0		 test	 al, al
  00138	74 53		 je	 SHORT $LN51@Do_rep

; 3686 : 			break;	// rep match failed, quit loop
; 3687 : 
; 3688 : 		_It _Mid = _Tgt_state._Cur;
; 3689 : 		if (!_Match(_Node->_End_rep->_Next, _Continue))

  0013a	ff 75 10	 push	 DWORD PTR __Continue$[ebp]
  0013d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00140	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00142	ff 70 0c	 push	 DWORD PTR [eax+12]
  00145	8b cb		 mov	 ecx, ebx
  00147	89 bd d8 fe ff
	ff		 mov	 DWORD PTR __Mid$512327[ebp], edi
  0014d	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  00152	84 c0		 test	 al, al
  00154	74 24		 je	 SHORT $LN2@Do_rep

; 3690 : 			;	// tail match failed, continue
; 3691 : 		else if (!_Greedy)

  00156	80 7d 0c 00	 cmp	 BYTE PTR __Greedy$[ebp], 0
  0015a	0f 84 5a ff ff
	ff		 je	 $LN44@Do_rep

; 3692 : 			return (true);	// go with current match
; 3693 : 		else
; 3694 : 			{	// record match and continue
; 3695 : 			_Final = _Tgt_state;

  00160	6a 42		 push	 66			; 00000042H
  00162	59		 pop	 ecx
  00163	8b f3		 mov	 esi, ebx
  00165	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR __Final$[ebp]
  0016b	f3 a5		 rep movsd

; 3696 : 			_Matched = true;

  0016d	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR __Mid$512327[ebp]
  00173	c6 85 f3 fe ff
	ff 01		 mov	 BYTE PTR __Matched$[ebp], 1
$LN2@Do_rep:

; 3697 : 			}
; 3698 : 
; 3699 : 		if (_Saved_pos == _Mid)

  0017a	39 bd e8 fe ff
	ff		 cmp	 DWORD PTR __Saved_pos$[ebp], edi
  00180	74 0b		 je	 SHORT $LN51@Do_rep

; 3700 : 			break;	// rep match ate no additional elements, quit loop
; 3701 : 		_Saved_pos = _Mid;

  00182	89 bd e8 fe ff
	ff		 mov	 DWORD PTR __Saved_pos$[ebp], edi

; 3702 : 		}

  00188	e9 54 ff ff ff	 jmp	 $LL9@Do_rep
$LN51@Do_rep:

; 3703 : 
; 3704 : 	_Tgt_state = _Matched ? _Final : _St;

  0018d	80 bd f3 fe ff
	ff 00		 cmp	 BYTE PTR __Matched$[ebp], 0
  00194	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR __Final$[ebp]
  0019a	75 06		 jne	 SHORT $LN25@Do_rep
  0019c	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR __St$[ebp]
$LN25@Do_rep:
  001a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001a7	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 3705 : 	return (_Matched);

  001aa	8a 85 f3 fe ff
	ff		 mov	 al, BYTE PTR __Matched$[ebp]
  001b0	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN20@Do_rep:

; 3706 : 	}

  001b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	33 cd		 xor	 ecx, ebp
  001b9	5b		 pop	 ebx
  001ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bf	c9		 leave
  001c0	c2 0c 00	 ret	 12			; 0000000cH
?_Do_rep@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_rep@23@_NH@Z ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Do_rep
_TEXT	ENDS
PUBLIC	?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassRanges
; Function compile flags: /Ogsp
;	COMDAT ?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
__Chr1$513220 = -4					; size = 1
?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassRanges, COMDAT
; _this$ = ecx

; 4600 : 	{	// check for valid class ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 4601 : 	_Prs_ret _Ret;
; 4602 : 
; 4603 : 	for (; ; )
; 4604 : 		{	// process characters through end of bracket expression
; 4605 : 		if ((_Ret = _ClassAtom()) == _Prs_none)

  00007	e8 00 00 00 00	 call	 ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@XZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassAtom
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 d7 00 00
	00		 je	 $LN15@ClassRange
  00014	57		 push	 edi
  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
$LL16@ClassRange:

; 4607 : 		else if (_Ret == _Prs_set)

  0001b	83 f8 02	 cmp	 eax, 2
  0001e	0f 84 9e 00 00
	00		 je	 $LN1@ClassRange

; 4608 : 			;
; 4609 : 		else if (_Val == 0 && !(_L_flags & _L_bzr_chr))

  00024	66 83 7e 3c 00	 cmp	 WORD PTR [esi+60], 0
  00029	75 13		 jne	 SHORT $LN10@ClassRange
  0002b	f7 46 44 00 00
	10 00		 test	 DWORD PTR [esi+68], 1048576 ; 00100000H
  00032	75 0a		 jne	 SHORT $LN10@ClassRange

; 4610 : 			_Error(regex_constants::error_escape);

  00034	6a 02		 push	 2
  00036	ff d7		 call	 edi
  00038	59		 pop	 ecx
  00039	e9 84 00 00 00	 jmp	 $LN1@ClassRange
$LN10@ClassRange:

; 4611 : 		else if (_Mchar == _Meta_dash)

  0003e	83 7e 40 2d	 cmp	 DWORD PTR [esi+64], 45	; 0000002dH
  00042	75 71		 jne	 SHORT $LN8@ClassRange

; 4612 : 			{	// check for valid range
; 4613 : 			_Next();

  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4614 : 			_Elem _Chr1 = (_Elem)_Val;

  0004b	8a 46 3c	 mov	 al, BYTE PTR [esi+60]

; 4615 : 			if ((_Ret = _ClassAtom()) == _Prs_none)

  0004e	8b ce		 mov	 ecx, esi
  00050	88 45 fc	 mov	 BYTE PTR __Chr1$513220[ebp], al
  00053	e8 00 00 00 00	 call	 ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@XZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassAtom
  00058	85 c0		 test	 eax, eax
  0005a	74 77		 je	 SHORT $LN30@ClassRange

; 4619 : 				return;
; 4620 : 				}
; 4621 : 			else if (_Ret == _Prs_set)

  0005c	83 f8 02	 cmp	 eax, 2
  0005f	75 07		 jne	 SHORT $LN5@ClassRange

; 4622 : 				_Error(regex_constants::error_range);	// set follows dash

  00061	6a 08		 push	 8
  00063	ff d7		 call	 edi
  00065	59		 pop	 ecx

; 4623 : 			else if (_Flags & regex_constants::collate)

  00066	eb 2a		 jmp	 SHORT $LN3@ClassRange
$LN5@ClassRange:
  00068	f7 46 38 00 08
	00 00		 test	 DWORD PTR [esi+56], 2048 ; 00000800H
  0006f	74 21		 je	 SHORT $LN3@ClassRange

; 4624 : 				{	// translate ends of range
; 4625 : 				_Val = _Traits.translate((_Elem)_Val);

  00071	0f b6 46 3c	 movzx	 eax, BYTE PTR [esi+60]
  00075	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z ; std::tr1::_Regex_traits<char>::translate

; 4626 : 				_Chr1 = _Traits.translate(_Chr1);

  0007e	ff 75 fc	 push	 DWORD PTR __Chr1$513220[ebp]
  00081	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00084	66 98		 cbw
  00086	66 89 46 3c	 mov	 WORD PTR [esi+60], ax
  0008a	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@tr1@std@@QBEDD@Z ; std::tr1::_Regex_traits<char>::translate
  0008f	88 45 fc	 mov	 BYTE PTR __Chr1$513220[ebp], al
$LN3@ClassRange:

; 4627 : 				}
; 4628 : 			if (_Val < _Chr1)

  00092	0f b7 46 3c	 movzx	 eax, WORD PTR [esi+60]
  00096	0f be 4d fc	 movsx	 ecx, BYTE PTR __Chr1$513220[ebp]
  0009a	3b c1		 cmp	 eax, ecx
  0009c	7d 05		 jge	 SHORT $LN25@ClassRange

; 4629 : 				_Error(regex_constants::error_range);

  0009e	6a 08		 push	 8
  000a0	ff d7		 call	 edi
  000a2	59		 pop	 ecx
$LN25@ClassRange:

; 4630 : 			_Nfa._Add_range(_Chr1, (_Elem)_Val);

  000a3	0f b6 46 3c	 movzx	 eax, BYTE PTR [esi+60]
  000a7	50		 push	 eax
  000a8	ff 75 fc	 push	 DWORD PTR __Chr1$513220[ebp]
  000ab	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000ae	e8 00 00 00 00	 call	 ?_Add_range@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXDD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_range

; 4631 : 			}
; 4632 : 		else

  000b3	eb 0d		 jmp	 SHORT $LN1@ClassRange
$LN8@ClassRange:

; 4633 : 			_Nfa._Add_char_to_class((_Elem)_Val);

  000b5	0f b6 46 3c	 movzx	 eax, BYTE PTR [esi+60]
  000b9	50		 push	 eax
  000ba	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000bd	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class
$LN1@ClassRange:

; 4601 : 	_Prs_ret _Ret;
; 4602 : 
; 4603 : 	for (; ; )
; 4604 : 		{	// process characters through end of bracket expression
; 4605 : 		if ((_Ret = _ClassAtom()) == _Prs_none)

  000c2	8b ce		 mov	 ecx, esi
  000c4	e8 00 00 00 00	 call	 ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE?AW4_Prs_ret@23@XZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassAtom
  000c9	85 c0		 test	 eax, eax
  000cb	0f 85 4a ff ff
	ff		 jne	 $LL16@ClassRange

; 4606 : 			return;

  000d1	eb 17		 jmp	 SHORT $LN31@ClassRange
$LN30@ClassRange:

; 4616 : 				{	// treat - as ordinary character
; 4617 : 				_Nfa._Add_char_to_class((_Elem)_Val);

  000d3	0f b6 46 3c	 movzx	 eax, BYTE PTR [esi+60]
  000d7	50		 push	 eax
  000d8	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000db	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class

; 4618 : 				_Nfa._Add_char_to_class(_Meta_dash);

  000e0	6a 2d		 push	 45			; 0000002dH
  000e2	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000e5	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class
$LN31@ClassRange:
  000ea	5f		 pop	 edi
$LN15@ClassRange:
  000eb	5e		 pop	 esi

; 4634 : 		}
; 4635 : 	}

  000ec	c9		 leave
  000ed	c3		 ret	 0
?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassRanges
_TEXT	ENDS
PUBLIC	??$_Match@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE_NPAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@12@_N@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Ogsp
;	COMDAT ??$_Match@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE_NPAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@12@_N@Z
_TEXT	SEGMENT
__Idx$511353 = 8					; size = 4
__Matches$ = 8						; size = 4
tv553 = 12						; size = 4
__Full_match$ = 12					; size = 1
??$_Match@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE_NPAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@12@_N@Z PROC ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 1763 : 		bool _Match(match_results<_BidIt, _Alloc> *_Matches,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1764 : 			bool _Full_match)
; 1765 : 		{	// try to match
; 1766 : 		_Begin = _First;

  00006	8b 86 18 02 00
	00		 mov	 eax, DWORD PTR [esi+536]

; 1767 : 		_Tgt_state._Cur = _First;
; 1768 : 		_Tgt_state._Grp_valid = 0;

  0000c	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00010	57		 push	 edi

; 1769 : 		_Cap = _Matches != 0;

  00011	8b 7d 08	 mov	 edi, DWORD PTR __Matches$[ebp]
  00014	89 86 10 02 00
	00		 mov	 DWORD PTR [esi+528], eax
  0001a	89 06		 mov	 DWORD PTR [esi], eax
  0001c	85 ff		 test	 edi, edi
  0001e	0f 95 c0	 setne	 al

; 1770 : 		_Full = _Full_match;
; 1771 : 
; 1772 : 		_Matched = false;
; 1773 : 
; 1774 : 		if (!_Match(_Rep))

  00021	6a 00		 push	 0
  00023	ff b6 1c 02 00
	00		 push	 DWORD PTR [esi+540]
  00029	88 86 29 02 00
	00		 mov	 BYTE PTR [esi+553], al
  0002f	8a 45 0c	 mov	 al, BYTE PTR __Full_match$[ebp]
  00032	88 86 38 02 00
	00		 mov	 BYTE PTR [esi+568], al
  00038	c6 86 28 02 00
	00 00		 mov	 BYTE PTR [esi+552], 0
  0003f	e8 00 00 00 00	 call	 ?_Match@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@AAE_NPAV_Node_base@23@H@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match
  00044	84 c0		 test	 al, al
  00046	0f 84 d3 00 00
	00		 je	 $LN8@Match@2
$LN7@Match@2:

; 1775 : 			return (false);
; 1776 : 		if (_Matches)

  0004c	85 ff		 test	 edi, edi
  0004e	0f 84 c9 00 00
	00		 je	 $LN6@Match@2

; 1777 : 			{	// copy results to _Matches
; 1778 : 			_Matches->_Resize(_Ncap);

  00054	0f b6 86 2a 02
	00 00		 movzx	 eax, BYTE PTR [esi+554]
  0005b	53		 push	 ebx
  0005c	50		 push	 eax
  0005d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00060	e8 00 00 00 00	 call	 ?resize@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@QAEXI@Z ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::resize

; 1779 : 			for (unsigned int _Idx = 0; _Idx < _Ncap; ++_Idx)

  00065	33 c0		 xor	 eax, eax
  00067	89 45 08	 mov	 DWORD PTR __Idx$511353[ebp], eax
  0006a	38 86 2a 02 00
	00		 cmp	 BYTE PTR [esi+554], al
  00070	76 68		 jbe	 SHORT $LN3@Match@2

; 1777 : 			{	// copy results to _Matches
; 1778 : 			_Matches->_Resize(_Ncap);

  00072	8d 8e 14 01 00
	00		 lea	 ecx, DWORD PTR [esi+276]
  00078	89 4d 0c	 mov	 DWORD PTR tv553[ebp], ecx
$LL5@Match@2:

; 1780 : 				{	// copy submatch _Idx
; 1781 : 				if (_Res._Grp_valid & (1 << _Idx))

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Idx$511353[ebp]
  0007e	33 d2		 xor	 edx, edx
  00080	42		 inc	 edx
  00081	d3 e2		 shl	 edx, cl

; 1782 : 					{	// copy successful match
; 1783 : 					_Matches->_At(_Idx).matched = true;

  00083	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00086	85 96 0c 01 00
	00		 test	 edx, DWORD PTR [esi+268]
  0008c	74 18		 je	 SHORT $LN2@Match@2

; 1784 : 					_Matches->_At(_Idx).first = _Res._Grps[_Idx]._Begin;

  0008e	8b 55 0c	 mov	 edx, DWORD PTR tv553[ebp]
  00091	c6 44 08 08 01	 mov	 BYTE PTR [eax+ecx+8], 1
  00096	8b 52 fc	 mov	 edx, DWORD PTR [edx-4]
  00099	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009c	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 1785 : 					_Matches->_At(_Idx).second = _Res._Grps[_Idx]._End;

  0009f	8b 55 0c	 mov	 edx, DWORD PTR tv553[ebp]
  000a2	8b 12		 mov	 edx, DWORD PTR [edx]

; 1786 : 					}
; 1787 : 				else

  000a4	eb 17		 jmp	 SHORT $LN62@Match@2
$LN2@Match@2:

; 1788 : 					{	// copy failed match
; 1789 : 					_Matches->_At(_Idx).matched = false;

  000a6	c6 44 08 08 00	 mov	 BYTE PTR [eax+ecx+8], 0

; 1790 : 					_Matches->_At(_Idx).first = _End;

  000ab	8b 96 14 02 00
	00		 mov	 edx, DWORD PTR [esi+532]
  000b1	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000b4	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 1791 : 					_Matches->_At(_Idx).second = _End;

  000b7	8b 96 14 02 00
	00		 mov	 edx, DWORD PTR [esi+532]
$LN62@Match@2:
  000bd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000c0	ff 45 08	 inc	 DWORD PTR __Idx$511353[ebp]
  000c3	83 45 0c 08	 add	 DWORD PTR tv553[ebp], 8
  000c7	89 54 08 04	 mov	 DWORD PTR [eax+ecx+4], edx
  000cb	0f b6 8e 2a 02
	00 00		 movzx	 ecx, BYTE PTR [esi+554]
  000d2	83 c0 0c	 add	 eax, 12			; 0000000cH
  000d5	39 4d 08	 cmp	 DWORD PTR __Idx$511353[ebp], ecx
  000d8	72 a1		 jb	 SHORT $LL5@Match@2
$LN3@Match@2:

; 1792 : 					}
; 1793 : 				}
; 1794 : 			_Matches->_Org = _Begin;

  000da	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]

; 1795 : 			_Matches->_Pfx().matched = true;
; 1796 : 			_Matches->_Pfx().first = _Begin;
; 1797 : 			_Matches->_Pfx().second = _Matches->_At(0).first;

  000e0	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  000e3	89 07		 mov	 DWORD PTR [edi], eax
  000e5	c6 47 1c 01	 mov	 BYTE PTR [edi+28], 1
  000e9	8b 86 10 02 00
	00		 mov	 eax, DWORD PTR [esi+528]
  000ef	89 47 14	 mov	 DWORD PTR [edi+20], eax
  000f2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f4	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 1798 : 			_Matches->_Sfx().matched = true;

  000f7	c6 47 28 01	 mov	 BYTE PTR [edi+40], 1

; 1799 : 			_Matches->_Sfx().first = _Matches->_At(0).second;

  000fb	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000fe	89 47 20	 mov	 DWORD PTR [edi+32], eax

; 1800 : 			_Matches->_Sfx().second = _End;

  00101	8b 8e 14 02 00
	00		 mov	 ecx, DWORD PTR [esi+532]
  00107	89 4f 24	 mov	 DWORD PTR [edi+36], ecx

; 1801 : 			_Matches->_Null().first = _End;

  0010a	8b 8e 14 02 00
	00		 mov	 ecx, DWORD PTR [esi+532]
  00110	89 4f 2c	 mov	 DWORD PTR [edi+44], ecx

; 1802 : 			_Matches->_Null().second = _End;

  00113	8b 86 14 02 00
	00		 mov	 eax, DWORD PTR [esi+532]
  00119	89 47 30	 mov	 DWORD PTR [edi+48], eax
  0011c	5b		 pop	 ebx
$LN6@Match@2:

; 1803 : 			}
; 1804 : 		return (true);

  0011d	b0 01		 mov	 al, 1
$LN8@Match@2:
  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi

; 1805 : 		}

  00121	5d		 pop	 ebp
  00122	c2 08 00	 ret	 8
??$_Match@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE_NPAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@12@_N@Z ENDP ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
PUBLIC	?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClass
; Function compile flags: /Ogsp
;	COMDAT ?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClass, COMDAT
; _this$ = ecx

; 4641 : 	{	// add bracket expression

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 4642 : 	_Nfa._Add_class();

  00004	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00007	e8 00 00 00 00	 call	 ?_Add_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXXZ ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_class

; 4643 : 	if (_Mchar == _Meta_caret)

  0000c	83 7e 40 5e	 cmp	 DWORD PTR [esi+64], 94	; 0000005eH
  00010	75 0e		 jne	 SHORT $LN2@CharacterC@2

; 4644 : 		{	// negate bracket expression
; 4645 : 		_Nfa._Negate();

  00012	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00015	83 70 08 01	 xor	 DWORD PTR [eax+8], 1

; 4646 : 		_Next();

  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
$LN2@CharacterC@2:

; 4647 : 		}
; 4648 : 	if ((_L_flags & _L_brk_rstr) && _Mchar == _Meta_rsq)

  00020	f7 46 44 00 00
	00 20		 test	 DWORD PTR [esi+68], 536870912 ; 20000000H
  00027	74 17		 je	 SHORT $LN1@CharacterC@2
  00029	83 7e 40 5d	 cmp	 DWORD PTR [esi+64], 93	; 0000005dH
  0002d	75 11		 jne	 SHORT $LN1@CharacterC@2

; 4649 : 		{	// insert initial ] when not special
; 4650 : 		_Nfa._Add_char_to_class(_Meta_rsq);

  0002f	6a 5d		 push	 93			; 0000005dH
  00031	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00034	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char_to_class

; 4651 : 		_Next();

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
$LN1@CharacterC@2:

; 4652 : 		}
; 4653 : 	_ClassRanges();

  00040	5f		 pop	 edi
  00041	8b ce		 mov	 ecx, esi
  00043	5e		 pop	 esi
  00044	e9 00 00 00 00	 jmp	 ?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_ClassRanges
?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClass
_TEXT	ENDS
PUBLIC	??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z ; std::tr1::_Regex_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z$0
__ehfuncinfo$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\regex
xdata$x	ENDS
;	COMDAT ??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z
_TEXT	SEGMENT
__Mx$ = -588						; size = 572
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Matches$ = 16						; size = 4
__Re$ = 20						; size = 4
__Flgs$ = 24						; size = 4
__Full$ = 28						; size = 1
??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z PROC ; std::tr1::_Regex_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 2381 : 	{	// try to match regular expression to target text

  00000	68 40 02 00 00	 push	 576			; 00000240H
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS

; 2382 : 	if (_Re._Empty())

  0000f	8b 45 14	 mov	 eax, DWORD PTR __Re$[ebp]
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	8b 75 10	 mov	 esi, DWORD PTR __Matches$[ebp]
  00017	85 c0		 test	 eax, eax
  00019	75 04		 jne	 SHORT $LN23@Regex_matc

; 2383 : 		return (false);

  0001b	32 c0		 xor	 al, al
  0001d	eb 3a		 jmp	 SHORT $LN2@Regex_matc
$LN23@Regex_matc:

; 2384 : 	_Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(_First, _Last,
; 2385 : 		_Re._Get(), _Re.mark_count() + 1, _Re.flags(), _Flgs);

  0001f	ff 75 18	 push	 DWORD PTR __Flgs$[ebp]
  00022	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  00028	ff 70 14	 push	 DWORD PTR [eax+20]
  0002b	ff 70 18	 push	 DWORD PTR [eax+24]
  0002e	50		 push	 eax
  0002f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00032	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PAV_Root_node@12@IW4syntax_option_type@regex_constants@12@W4match_flag_type@612@@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >

; 2386 : 	return (_Mx._Match(_Matches, _Full));

  0003a	ff 75 1c	 push	 DWORD PTR __Full$[ebp]
  0003d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	56		 push	 esi
  00042	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  00048	e8 00 00 00 00	 call	 ??$_Match@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@std@@@?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE_NPAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@12@_N@Z ; std::tr1::_Matcher<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::_Match<std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >
  0004d	8d 4d e8	 lea	 ecx, DWORD PTR __Mx$[ebp+564]
  00050	8a d8		 mov	 bl, al
  00052	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00057	8a c3		 mov	 al, bl
$LN2@Regex_matc:

; 2387 : 	}

  00059	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z$0:
  00000	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_Matcher@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@QAE@XZ
__ehhandler$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a b0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-592]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z ENDP ; std::tr1::_Regex_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?_Alternative@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Alternative
; Function compile flags: /Ogsp
;	COMDAT ?_Alternative@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ
_TEXT	SEGMENT
?_Alternative@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Alternative, COMDAT
; _this$ = ecx

; 4918 : 	{	// check for valid alternative

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 4919 : 	bool _Found = false;
; 4920 : 	for (; ; )
; 4921 : 		{	// concatenate valid elements
; 4922 : 		bool _Quant = true;
; 4923 : 		if (_Mchar == (_Elem)_Meta_eos || _Mchar == _Meta_bar
; 4924 : 			|| _Mchar == _Meta_rpar && _Disj_count != 0)

  00004	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00007	32 c0		 xor	 al, al
  00009	b3 01		 mov	 bl, 1
  0000b	83 f9 ff	 cmp	 ecx, -1
  0000e	0f 84 81 01 00
	00		 je	 $LN67@Alternativ
  00014	57		 push	 edi
  00015	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
$LL31@Alternativ:
  0001b	83 f9 7c	 cmp	 ecx, 124		; 0000007cH
  0001e	0f 84 70 01 00
	00		 je	 $LN71@Alternativ
  00024	83 f9 29	 cmp	 ecx, 41			; 00000029H
  00027	75 1e		 jne	 SHORT $LN70@Alternativ
  00029	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0002d	0f 85 61 01 00
	00		 jne	 $LN71@Alternativ

; 4925 : 			return (_Found);
; 4926 : 		else if (_Mchar == _Meta_rpar && !(_L_flags & _L_paren_bal))

  00033	b8 00 00 00 10	 mov	 eax, 268435456		; 10000000H
  00038	85 46 44	 test	 DWORD PTR [esi+68], eax
  0003b	75 0f		 jne	 SHORT $LN26@Alternativ

; 4927 : 			_Error(regex_constants::error_paren);

  0003d	6a 05		 push	 5
$LN72@Alternativ:
  0003f	ff d7		 call	 edi
  00041	59		 pop	 ecx
  00042	e9 36 01 00 00	 jmp	 $LN69@Alternativ
$LN70@Alternativ:
  00047	b8 00 00 00 10	 mov	 eax, 268435456		; 10000000H
$LN26@Alternativ:

; 4928 : 		else if (_Mchar == _Meta_dot)

  0004c	83 f9 2e	 cmp	 ecx, 46			; 0000002eH
  0004f	75 16		 jne	 SHORT $LN24@Alternativ

; 4929 : 			{	// add dot node
; 4930 : 			_Nfa._Add_dot();

  00051	6a 05		 push	 5
  00053	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00056	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 4956 : 			_Expect(_Meta_rsq, regex_constants::error_brack);

$LN49@Alternativ:

; 4931 : 			_Next();

  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
  00062	e9 16 01 00 00	 jmp	 $LN69@Alternativ
$LN24@Alternativ:

; 4932 : 			}
; 4933 : 		else if (_Mchar == _Meta_esc)

  00067	83 f9 5c	 cmp	 ecx, 92			; 0000005cH
  0006a	75 58		 jne	 SHORT $LN22@Alternativ

; 4934 : 			{	// check for valid escape sequence
; 4935 : 			_Next();

  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4936 : 			if ((_L_flags & _L_asrt_wrd) && _Char == _Esc_word)

  00073	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00076	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0007b	74 1c		 je	 SHORT $LN21@Alternativ
  0007d	80 7e 3e 62	 cmp	 BYTE PTR [esi+62], 98	; 00000062H
  00081	75 16		 jne	 SHORT $LN21@Alternativ

; 4937 : 				{	// add word assert
; 4938 : 				_Nfa._Add_wbound();

  00083	6a 04		 push	 4
$LN74@Alternativ:
  00085	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00088	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node
$LN73@Alternativ:

; 4939 : 				_Next();

  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4940 : 				_Quant = false;

  00094	e9 eb 00 00 00	 jmp	 $LN1@Alternativ
$LN21@Alternativ:

; 4941 : 				}
; 4942 : 			else if ((_L_flags & _L_asrt_wrd) && _Char == _Esc_not_word)

  00099	85 c0		 test	 eax, eax
  0009b	74 1b		 je	 SHORT $LN19@Alternativ
  0009d	80 7e 3e 42	 cmp	 BYTE PTR [esi+62], 66	; 00000042H
  000a1	75 15		 jne	 SHORT $LN19@Alternativ

; 4943 : 				{	// add not-word assert
; 4944 : 				_Nfa._Add_wbound();

  000a3	6a 04		 push	 4
  000a5	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000a8	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 4945 : 				_Nfa._Negate();

  000ad	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000b0	83 c0 08	 add	 eax, 8
  000b3	83 30 01	 xor	 DWORD PTR [eax], 1

; 4946 : 				_Next();
; 4947 : 				_Quant = false;
; 4948 : 				}
; 4949 : 			else

  000b6	eb d5		 jmp	 SHORT $LN73@Alternativ
$LN19@Alternativ:

; 4950 : 				_AtomEscape();

  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_AtomEscape
  000bf	e9 b9 00 00 00	 jmp	 $LN69@Alternativ
$LN22@Alternativ:

; 4951 : 			}
; 4952 : 		else if (_Mchar == _Meta_lsq)

  000c4	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  000c7	75 22		 jne	 SHORT $LN16@Alternativ

; 4953 : 			{	// add bracket expression
; 4954 : 			_Next();

  000c9	8b ce		 mov	 ecx, esi
  000cb	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4955 : 			_CharacterClass();

  000d0	8b ce		 mov	 ecx, esi
  000d2	e8 00 00 00 00	 call	 ?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_CharacterClass

; 4956 : 			_Expect(_Meta_rsq, regex_constants::error_brack);

  000d7	83 7e 40 5d	 cmp	 DWORD PTR [esi+64], 93	; 0000005dH
  000db	0f 84 7a ff ff
	ff		 je	 $LN49@Alternativ
  000e1	6a 04		 push	 4
  000e3	ff d7		 call	 edi
  000e5	59		 pop	 ecx
  000e6	e9 70 ff ff ff	 jmp	 $LN49@Alternativ
$LN16@Alternativ:

; 4957 : 			}
; 4958 : 		else if (_Mchar == _Meta_lpar)

  000eb	83 f9 28	 cmp	 ecx, 40			; 00000028H
  000ee	75 24		 jne	 SHORT $LN14@Alternativ

; 4959 : 			{	// check for valid group
; 4960 : 			_Next();

  000f0	8b ce		 mov	 ecx, esi
  000f2	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 4961 : 			_Quant = _Wrapped_disjunction();

  000f7	8b ce		 mov	 ecx, esi
  000f9	e8 00 00 00 00	 call	 ?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Wrapped_disjunction

; 4962 : 			_Expect(_Meta_rpar, regex_constants::error_paren);

  000fe	83 7e 40 29	 cmp	 DWORD PTR [esi+64], 41	; 00000029H
  00102	8a d8		 mov	 bl, al
  00104	74 05		 je	 SHORT $LN54@Alternativ
  00106	6a 05		 push	 5
  00108	ff d7		 call	 edi
  0010a	59		 pop	 ecx
$LN54@Alternativ:
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next
  00112	eb 65		 jmp	 SHORT $LN2@Alternativ
$LN14@Alternativ:

; 4963 : 			}
; 4964 : 		else if (_Mchar == _Meta_caret)

  00114	83 f9 5e	 cmp	 ecx, 94			; 0000005eH
  00117	75 07		 jne	 SHORT $LN12@Alternativ

; 4965 : 			{	// add bol node
; 4966 : 			_Nfa._Add_bol();

  00119	6a 02		 push	 2

; 4967 : 			_Next();
; 4968 : 			_Quant = false;

  0011b	e9 65 ff ff ff	 jmp	 $LN74@Alternativ
$LN12@Alternativ:

; 4969 : 			}
; 4970 : 		else if (_Mchar == _Meta_dlr)

  00120	83 f9 24	 cmp	 ecx, 36			; 00000024H
  00123	75 07		 jne	 SHORT $LN10@Alternativ

; 4971 : 			{	// add eol node
; 4972 : 			_Nfa._Add_eol();

  00125	6a 03		 push	 3

; 4973 : 			_Next();
; 4974 : 			_Quant = false;
; 4975 : 			}
; 4976 : 		else if (_Mchar == _Meta_star

  00127	e9 59 ff ff ff	 jmp	 $LN74@Alternativ
$LN10@Alternativ:

; 4977 : 			|| _Mchar == _Meta_plus
; 4978 : 			|| _Mchar == _Meta_query
; 4979 : 			|| _Mchar == _Meta_lbr)

  0012c	83 f9 2a	 cmp	 ecx, 42			; 0000002aH
  0012f	74 43		 je	 SHORT $LN7@Alternativ
  00131	83 f9 2b	 cmp	 ecx, 43			; 0000002bH
  00134	74 3e		 je	 SHORT $LN7@Alternativ
  00136	83 f9 3f	 cmp	 ecx, 63			; 0000003fH
  00139	74 39		 je	 SHORT $LN7@Alternativ
  0013b	83 f9 7b	 cmp	 ecx, 123		; 0000007bH
  0013e	74 34		 je	 SHORT $LN7@Alternativ

; 4981 : 		else if (_Mchar == _Meta_rbr && !(_L_flags & _L_paren_bal))

  00140	83 f9 7d	 cmp	 ecx, 125		; 0000007dH
  00143	75 0c		 jne	 SHORT $LN5@Alternativ
  00145	85 46 44	 test	 DWORD PTR [esi+68], eax
  00148	75 07		 jne	 SHORT $LN5@Alternativ

; 4982 : 			_Error(regex_constants::error_brace);

  0014a	6a 06		 push	 6
  0014c	e9 ee fe ff ff	 jmp	 $LN72@Alternativ
$LN5@Alternativ:

; 4983 : 		else if (_Mchar == _Meta_rsq && !(_L_flags & _L_paren_bal))

  00151	83 f9 5d	 cmp	 ecx, 93			; 0000005dH
  00154	75 0c		 jne	 SHORT $LN3@Alternativ
  00156	85 46 44	 test	 DWORD PTR [esi+68], eax
  00159	75 07		 jne	 SHORT $LN3@Alternativ

; 4984 : 			_Error(regex_constants::error_brack);

  0015b	6a 04		 push	 4

; 4985 : 		else

  0015d	e9 dd fe ff ff	 jmp	 $LN72@Alternativ
$LN3@Alternativ:

; 4986 : 			{	// add character
; 4987 : 			_Nfa._Add_char(_Char);

  00162	0f b6 46 3e	 movzx	 eax, BYTE PTR [esi+62]
  00166	50		 push	 eax
  00167	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0016a	e8 00 00 00 00	 call	 ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXD@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Add_char

; 4988 : 			_Next();

  0016f	e9 e7 fe ff ff	 jmp	 $LN49@Alternativ
$LN7@Alternativ:

; 4980 : 			_Error(regex_constants::error_badrepeat);

  00174	6a 0a		 push	 10			; 0000000aH
  00176	ff d7		 call	 edi
  00178	59		 pop	 ecx
$LN2@Alternativ:

; 4989 : 			}
; 4990 : 		if (_Quant)

  00179	84 db		 test	 bl, bl
  0017b	74 07		 je	 SHORT $LN1@Alternativ
$LN69@Alternativ:

; 4991 : 			_Quantifier();

  0017d	8b ce		 mov	 ecx, esi
  0017f	e8 00 00 00 00	 call	 ?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Quantifier
$LN1@Alternativ:

; 4992 : 		_Found = true;

  00184	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00187	b0 01		 mov	 al, 1
  00189	8a d8		 mov	 bl, al
  0018b	83 f9 ff	 cmp	 ecx, -1
  0018e	0f 85 87 fe ff
	ff		 jne	 $LL31@Alternativ
$LN71@Alternativ:
  00194	5f		 pop	 edi
$LN67@Alternativ:
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx

; 4993 : 		}
; 4994 : 	}

  00197	c3		 ret	 0
?_Alternative@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Alternative
_TEXT	ENDS
PUBLIC	??$regex_match@U?$char_traits@D@std@@V?$allocator@D@2@DV?$regex_traits@D@tr1@2@@tr1@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@@Z ; std::tr1::regex_match<std::char_traits<char>,std::allocator<char>,char,std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
;	COMDAT ??$regex_match@U?$char_traits@D@std@@V?$allocator@D@2@DV?$regex_traits@D@tr1@2@@tr1@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Matches$ = 12						; size = 4
__Re$ = 16						; size = 4
__Flgs$ = 20						; size = 4
??$regex_match@U?$char_traits@D@std@@V?$allocator@D@2@DV?$regex_traits@D@tr1@2@@tr1@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@@Z PROC ; std::tr1::regex_match<std::char_traits<char>,std::allocator<char>,char,std::tr1::regex_traits<char> >, COMDAT

; 2455 : 	{	// try to match regular expression to target text

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2456 : 	return (_Regex_match(_Str.begin(), _Str.end(),
; 2457 : 		&_Matches, _Re, _Flgs, true));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Str$[ebp]
  00006	56		 push	 esi
  00007	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
  0000a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0000d	72 04		 jb	 SHORT $LN7@regex_matc
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	eb 02		 jmp	 SHORT $LN8@regex_matc
$LN7@regex_matc:
  00013	8b d1		 mov	 edx, ecx
$LN8@regex_matc:
  00015	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00018	03 c2		 add	 eax, edx
  0001a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001d	5e		 pop	 esi
  0001e	72 02		 jb	 SHORT $LN17@regex_matc
  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN17@regex_matc:
  00022	6a 01		 push	 1
  00024	ff 75 14	 push	 DWORD PTR __Flgs$[ebp]
  00027	ff 75 10	 push	 DWORD PTR __Re$[ebp]
  0002a	ff 75 0c	 push	 DWORD PTR __Matches$[ebp]
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$_Regex_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@DV?$regex_traits@D@tr1@2@V12@@tr1@std@@YA_NV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0PAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@_N@Z ; std::tr1::_Regex_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > >,char,std::tr1::regex_traits<char>,std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
  00034	83 c4 18	 add	 esp, 24			; 00000018H

; 2458 : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$regex_match@U?$char_traits@D@std@@V?$allocator@D@2@DV?$regex_traits@D@tr1@2@@tr1@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@@Z ENDP ; std::tr1::regex_match<std::char_traits<char>,std::allocator<char>,char,std::tr1::regex_traits<char> >
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ
_TEXT	SEGMENT
__Pos2$ = -4						; size = 4
?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Disjunction, COMDAT
; _this$ = ecx

; 5000 : 	{	// check for valid disjunction

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 5001 : 	_Node_base *_Pos1 = _Nfa._Getmark();

  00008	8b 5e 1c	 mov	 ebx, DWORD PTR [esi+28]
  0000b	57		 push	 edi

; 5002 : 	if (_Alternative())

  0000c	e8 00 00 00 00	 call	 ?_Alternative@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Alternative
  00011	84 c0		 test	 al, al
  00013	75 19		 jne	 SHORT $LN4@Disjunctio

; 5003 : 		;
; 5004 : 	else if (_Mchar != _Meta_bar)

  00015	83 7e 40 7c	 cmp	 DWORD PTR [esi+64], 124	; 0000007cH
  00019	75 58		 jne	 SHORT $LN2@Disjunctio

; 5005 : 		return;	// zero-length alternative not followed by '|'
; 5006 : 	else
; 5007 : 		{	// zero-length leading alternative
; 5008 : 		_Node_base *_Pos3 = _Nfa._Begin_group();

  0001b	6a 08		 push	 8
  0001d	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00020	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 5009 : 		_Nfa._End_group(_Pos3);

  00025	50		 push	 eax
  00026	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00029	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group
$LN4@Disjunctio:

; 5010 : 		}
; 5011 : 
; 5012 : 	_Node_base *_Pos2 = _Nfa._Begin_if(_Pos1);

  0002e	53		 push	 ebx
  0002f	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00032	e8 00 00 00 00	 call	 ?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@PAV423@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_if
  00037	89 45 fc	 mov	 DWORD PTR __Pos2$[ebp], eax
  0003a	eb 31		 jmp	 SHORT $LN18@Disjunctio
$LL3@Disjunctio:

; 5014 : 		{	// append terms as long as we keep finding | characters
; 5015 : 		_Next();

  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Next

; 5016 : 		if (!_Alternative())

  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?_Alternative@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAE_NXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Alternative
  0004a	84 c0		 test	 al, al
  0004c	75 13		 jne	 SHORT $LN1@Disjunctio

; 5017 : 			{	// zero-length trailing alternative
; 5018 : 			_Node_base *_Pos3 = _Nfa._Begin_group();

  0004e	6a 08		 push	 8
  00050	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00053	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 5019 : 			_Nfa._End_group(_Pos3);

  00058	50		 push	 eax
  00059	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0005c	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group
$LN1@Disjunctio:

; 5020 : 			}
; 5021 : 		_Nfa._Else_if(_Pos1, _Pos2);

  00061	ff 75 fc	 push	 DWORD PTR __Pos2$[ebp]
  00064	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00067	53		 push	 ebx
  00068	e8 00 00 00 00	 call	 ?_Else_if@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@0@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Else_if
$LN18@Disjunctio:

; 5013 : 	while (_Mchar == _Meta_bar)

  0006d	83 7e 40 7c	 cmp	 DWORD PTR [esi+64], 124	; 0000007cH
  00071	74 c9		 je	 SHORT $LL3@Disjunctio
$LN2@Disjunctio:
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx

; 5022 : 		}
; 5023 : 	}

  00076	c9		 leave
  00077	c3		 ret	 0
?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Disjunction
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEX_N@Z
_TEXT	SEGMENT
__Neg$ = 8						; size = 1
?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEX_N@Z PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_assert_group, COMDAT
; _this$ = ecx

; 4684 : 	{	// add assert group

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 4685 : 	_Node_base *_Pos1 = _Nfa._Begin_assert_group(_Neg);

  00006	ff 75 08	 push	 DWORD PTR __Neg$[ebp]
  00009	8b f9		 mov	 edi, ecx
  0000b	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0000e	e8 00 00 00 00	 call	 ?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@_N@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_assert_group

; 4686 : 	_Disjunction();

  00013	8b cf		 mov	 ecx, edi
  00015	8b d8		 mov	 ebx, eax
  00017	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Disjunction

; 4687 : 	_Nfa._End_assert_group(_Pos1);

  0001c	53		 push	 ebx
  0001d	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00020	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group
  00025	89 5f 1c	 mov	 DWORD PTR [edi+28], ebx
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx

; 4688 : 	}

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEX_N@Z ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Do_assert_group
_TEXT	ENDS
PUBLIC	?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Compile
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ$0
__unwindtable$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ$2
__ehfuncinfo$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ PROC ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Compile, COMDAT
; _this$ = ecx

; 5029 : 	{	// compile regular expression

  00000	6a 08		 push	 8
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3_catch
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 5030 : 	_Root_node *_Res = 0;
; 5031 : 	_TRY_BEGIN

  00011	33 db		 xor	 ebx, ebx

; 5032 : 	_Node_base *_Pos1 = _Nfa._Begin_capture_group(0);

  00013	53		 push	 ebx
  00014	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00017	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0001a	e8 00 00 00 00	 call	 ?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Node_base@23@I@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_Begin_capture_group

; 5033 : 	_Disjunction();

  0001f	8b ce		 mov	 ecx, esi
  00021	8b d8		 mov	 ebx, eax
  00023	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Disjunction

; 5034 : 	if (_Pat != _End)

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0002d	74 09		 je	 SHORT $LN9@Compile

; 5035 : 		_Error(regex_constants::error_syntax);

  0002f	6a 0e		 push	 14			; 0000000eH
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad@tr1@std@@YAXW4error_type@regex_constants@12@@Z
  00037	59		 pop	 ecx
$LN9@Compile:

; 5036 : 	_Nfa._End_group(_Pos1);

  00038	53		 push	 ebx
  00039	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0003c	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEXPAV_Node_base@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_End_group

; 5037 : 	_Res = _Nfa._End_pattern();

  00041	6a 15		 push	 21			; 00000015H
  00043	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00046	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@AAEPAV_Node_base@23@W4_Node_type@23@@Z ; std::tr1::_Builder<char const *,char,std::tr1::regex_traits<char> >::_New_node

; 5038 : 	_Res->_Fl = _Flags;

  0004b	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0004e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00051	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 5039 : 	_Res->_Marks = _Mark_count();

  00054	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00057	41		 inc	 ecx
  00058	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 5043 : 	_CATCH_END
; 5044 : 	return (_Res);
; 5045 : 	}

  0005b	e8 00 00 00 00	 call	 __EH_epilog3
  00060	c3		 ret	 0
__catch$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ$0:

; 5040 : 	_CATCH_ALL
; 5041 : 	_Nfa._Discard_pattern();

  00061	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00064	33 db		 xor	 ebx, ebx
  00066	53		 push	 ebx
  00067	ff 76 18	 push	 DWORD PTR [esi+24]
  0006a	e8 00 00 00 00	 call	 ?_Destroy_node@tr1@std@@YAXPAV_Node_base@12@0@Z ; std::tr1::_Destroy_node
  0006f	59		 pop	 ecx
  00070	59		 pop	 ecx

; 5042 : 	_RERAISE;

  00071	53		 push	 ebx
  00072	53		 push	 ebx
  00073	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  00076	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN20@Compile:
$LN19@Compile:
  0007b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ ENDP ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Compile
PUBLIC	??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0W4syntax_option_type@regex_constants@12@Uforward_iterator_tag@2@@Z ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Reset<char const *>
; Function compile flags: /Ogsp
;	COMDAT ??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0W4syntax_option_type@regex_constants@12@Uforward_iterator_tag@2@@Z
_TEXT	SEGMENT
__Prs$ = -72						; size = 72
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Flags$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0W4syntax_option_type@regex_constants@12@Uforward_iterator_tag@2@@Z PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Reset<char const *>, COMDAT
; _this$ = ecx

; 2225 : 		void _Reset(_FwdIt _First, _FwdIt _Last,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 2226 : 			flag_type _Flags, forward_iterator_tag)
; 2227 : 		{	// build regular expression from forward iterators
; 2228 :  #if _ENHANCED_REGEX_VISUALIZER
; 2229 : 		_Visualization.assign(_First, _Last);
; 2230 :  #endif /* _ENHANCED_REGEX_VISUALIZER */
; 2231 : 
; 2232 : 		_Parser<_FwdIt, _Elem, _RxTraits>
; 2233 : 			_Prs(_Traits, _First, _Last, _Flags);

  00008	ff 75 10	 push	 DWORD PTR __Flags$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00013	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00016	8d 4d b8	 lea	 ecx, DWORD PTR __Prs$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??0?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@ABV?$regex_traits@D@12@PBD1W4syntax_option_type@regex_constants@12@@Z ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Parser<char const *,char,std::tr1::regex_traits<char> >

; 2234 : 		_Root_node *_Rx = _Prs._Compile();

  0001f	8d 4d b8	 lea	 ecx, DWORD PTR __Prs$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Compile@?$_Parser@PBDDV?$regex_traits@D@tr1@std@@@tr1@std@@QAEPAV_Root_node@23@XZ ; std::tr1::_Parser<char const *,char,std::tr1::regex_traits<char> >::_Compile
  00027	8b f0		 mov	 esi, eax

; 2235 : 		_Reset(_Rx);

  00029	85 f6		 test	 esi, esi
  0002b	74 03		 je	 SHORT $LN3@Reset@2
  0002d	ff 46 1c	 inc	 DWORD PTR [esi+28]
$LN3@Reset@2:
  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 ?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy
  00037	89 37		 mov	 DWORD PTR [edi], esi
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 2236 : 		}

  0003b	c9		 leave
  0003c	c2 10 00	 ret	 16			; 00000010H
??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0W4syntax_option_type@regex_constants@12@Uforward_iterator_tag@2@@Z ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Reset<char const *>
_TEXT	ENDS
PUBLIC	??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::basic_regex<char,std::tr1::regex_traits<char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z$0
__ehfuncinfo$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T527822 = 8						; size = 1
__Ptr$ = 8						; size = 4
__Flags$ = 12						; size = 4
??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z PROC ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::basic_regex<char,std::tr1::regex_traits<char> >, COMDAT
; _this$ = ecx

; 2000 : 		{	// construct from null terminated character sequence

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00011	83 26 00	 and	 DWORD PTR [esi], 0
  00014	83 66 04 00	 and	 DWORD PTR [esi+4], 0
  00018	83 66 08 00	 and	 DWORD PTR [esi+8], 0
  0001c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale

; 2001 : 		_Reset(_Ptr, _Ptr + _RxTraits::length(_Ptr),
; 2002 : 			_Flags, random_access_iterator_tag());

  00024	ff 75 08	 push	 DWORD PTR $T527822[ebp]
  00027	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	ff 75 0c	 push	 DWORD PTR __Flags$[ebp]
  0002e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00031	e8 00 00 00 00	 call	 ?length@?$_Regex_traits@D@tr1@std@@SAIPBD@Z ; std::tr1::_Regex_traits<char>::length
  00036	03 45 08	 add	 eax, DWORD PTR __Ptr$[ebp]
  00039	59		 pop	 ecx
  0003a	50		 push	 eax
  0003b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 ??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXPBD0W4syntax_option_type@regex_constants@12@Uforward_iterator_tag@2@@Z ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Reset<char const *>

; 2003 : 		}

  00045	8b c6		 mov	 eax, esi
  00047	e8 00 00 00 00	 call	 __EH_epilog3
  0004c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$regex_traits@D@tr1@std@@QAE@XZ
__ehhandler$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z ENDP ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::basic_regex<char,std::tr1::regex_traits<char> >
PUBLIC	??_C@_0CP@POCOFPNC@ioAIXMLDoc?3?3ExtractHeader?5?9?5XML?5@ ; `string'
PUBLIC	??_C@_0CO@CECCAMKB@encoding?5and?5version?5could?5not?5b@ ; `string'
PUBLIC	??_C@_0FN@FKGNIEGL@?$DM?2?$DPxml?$FL?2s?$FN?$CKversion?$FL?2s?$FN?$CK?$DN?$FL?2s?$FN?$CK?$CC?$CI?$FL@ ; `string'
PUBLIC	_encoding$GSCopy$
PUBLIC	_version$GSCopy$
PUBLIC	?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z ; ioAIXMLDoc::ExtractHeader
EXTRN	__imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ:PROC
EXTRN	__imp_?LOG@@3VCLog@@A:BYTE
EXTRN	__imp_??1ioTextStream@@UAE@XZ:PROC
EXTRN	__imp_?GetLine@ioTextStream@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC
EXTRN	__imp_?LoadStream@ioResourceLoader@@QAE_NPBDPAVioStream@@PAVioDataProcessor@@PAX_N@Z:PROC
EXTRN	__imp_?GetInstance@ioResourceLoader@@SAAAV1@XZ:PROC
EXTRN	__imp_??0ioTextStream@@QAE@XZ:PROC
EXTRN	__imp_??Bios_base@std@@QBEPAXXZ:PROC
;	COMDAT ??_C@_0CP@POCOFPNC@ioAIXMLDoc?3?3ExtractHeader?5?9?5XML?5@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0CP@POCOFPNC@ioAIXMLDoc?3?3ExtractHeader?5?9?5XML?5@ DB 'ioAIXMLDoc'
	DB	'::ExtractHeader - XML file [%s] Fail', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CECCAMKB@encoding?5and?5version?5could?5not?5b@
CONST	SEGMENT
??_C@_0CO@CECCAMKB@encoding?5and?5version?5could?5not?5b@ DB 'encoding an'
	DB	'd version could not be found. : %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@FKGNIEGL@?$DM?2?$DPxml?$FL?2s?$FN?$CKversion?$FL?2s?$FN?$CK?$DN?$FL?2s?$FN?$CK?$CC?$CI?$FL@
CONST	SEGMENT
??_C@_0FN@FKGNIEGL@?$DM?2?$DPxml?$FL?2s?$FN?$CKversion?$FL?2s?$FN?$CK?$DN?$FL?2s?$FN?$CK?$CC?$CI?$FL@ DB '<'
	DB	'\?xml[\s]*version[\s]*=[\s]*"([0-9\.]*)"[\s]*encoding[\s]*=[\'
	DB	's]*"([A-Za-z0-9\-_]*)"[\s]*\?>', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$8
	DD	01H
	DD	FLAT:__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$10
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaixmldoc.cpp
xdata$x	ENDS
;	COMDAT ?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z
_TEXT	SEGMENT
_ifile$ = -360						; size = 176
_sm$509982 = -184					; size = 56
_version$GSCopy$ = -128					; size = 4
_encoding$GSCopy$ = -124				; size = 4
_kStream$509271 = -120					; size = 20
_reg$509399 = -116					; size = 16
$T510009 = -100						; size = 28
$T510007 = -72						; size = 28
_line$ = -44						; size = 28
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_isfile$ = 12						; size = 4
_version$ = 16						; size = 4
_encoding$ = 20						; size = 4
?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z PROC ; ioAIXMLDoc::ExtractHeader, COMDAT
; _this$ = ecx

; 50   : {

  00000	68 5c 01 00 00	 push	 348			; 0000015cH
  00005	b8 00 00 00 00	 mov	 eax, __ehhandler$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z
  0000a	e8 00 00 00 00	 call	 __EH_prolog3_GS
  0000f	8b 45 10	 mov	 eax, DWORD PTR _version$[ebp]
  00012	8b 7d 08	 mov	 edi, DWORD PTR _filename$[ebp]
  00015	8b 75 0c	 mov	 esi, DWORD PTR _isfile$[ebp]

; 66   : 		}
; 67   : 		else
; 68   : 		{
; 69   : 			LOG.PrintTimeAndLog( 0, "ioAIXMLDoc::ExtractHeader - XML file [%s] Fail", filename );

  00018	89 45 80	 mov	 DWORD PTR _version$GSCopy$[ebp], eax
  0001b	8b 45 14	 mov	 eax, DWORD PTR _encoding$[ebp]
  0001e	33 db		 xor	 ebx, ebx
  00020	89 45 84	 mov	 DWORD PTR _encoding$GSCopy$[ebp], eax
  00023	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _line$[ebp+20], 15 ; 0000000fH
  0002a	89 5d e4	 mov	 DWORD PTR _line$[ebp+16], ebx
  0002d	88 5d d4	 mov	 BYTE PTR _line$[ebp], bl
  00030	6a 01		 push	 1
  00032	6a 40		 push	 64			; 00000040H
  00034	6a 01		 push	 1
  00036	57		 push	 edi
  00037	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp]
  0003d	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00040	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  00045	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _ifile$[ebp]
  0004b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004e	8d 8c 0d 98 fe
	ff ff		 lea	 ecx, DWORD PTR _ifile$[ebp+ecx]
  00055	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
  0005f	85 c0		 test	 eax, eax
  00061	74 1a		 je	 SHORT $LN6@ExtractHea

; 51   : 	std::string	line;
; 52   : 	std::ifstream	ifile( filename );
; 53   : 
; 54   : 	if( ifile )
; 55   : 	{
; 56   : 		isfile = true;
; 57   : 		std::getline( ifile, line );

  00063	8d 45 d4	 lea	 eax, DWORD PTR _line$[ebp]
  00066	50		 push	 eax
  00067	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _ifile$[ebp]
  0006d	50		 push	 eax
  0006e	c6 06 01	 mov	 BYTE PTR [esi], 1
  00071	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00076	59		 pop	 ecx

; 58   : 	}
; 59   : 	else

  00077	33 f6		 xor	 esi, esi
  00079	59		 pop	 ecx
  0007a	46		 inc	 esi
  0007b	eb 4b		 jmp	 SHORT $LN5@ExtractHea
$LN6@ExtractHea:

; 60   : 	{
; 61   : 		isfile = false;
; 62   : 		ioTextStream	kStream;

  0007d	8d 4d 88	 lea	 ecx, DWORD PTR _kStream$509271[ebp]
  00080	88 1e		 mov	 BYTE PTR [esi], bl
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioTextStream@@QAE@XZ

; 63   : 		if( g_ResourceLoader.LoadStream( filename, &kStream ) )

  00088	53		 push	 ebx
  00089	53		 push	 ebx
  0008a	53		 push	 ebx
  0008b	8d 45 88	 lea	 eax, DWORD PTR _kStream$509271[ebp]
  0008e	50		 push	 eax
  0008f	57		 push	 edi
  00090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetInstance@ioResourceLoader@@SAAAV1@XZ
  0009a	8b c8		 mov	 ecx, eax
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStream@ioResourceLoader@@QAE_NPBDPAVioStream@@PAVioDataProcessor@@PAX_N@Z
  000a2	84 c0		 test	 al, al
  000a4	0f 84 86 01 00
	00		 je	 $LN4@ExtractHea

; 64   : 		{
; 65   : 			kStream.GetLine( line );

  000aa	33 f6		 xor	 esi, esi
  000ac	46		 inc	 esi
  000ad	56		 push	 esi
  000ae	8d 45 d4	 lea	 eax, DWORD PTR _line$[ebp]
  000b1	50		 push	 eax
  000b2	8d 4d 88	 lea	 ecx, DWORD PTR _kStream$509271[ebp]
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLine@ioTextStream@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z

; 72   : 		}
; 73   : 	}

  000bb	8d 4d 88	 lea	 ecx, DWORD PTR _kStream$509271[ebp]
  000be	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioTextStream@@UAE@XZ
$LN5@ExtractHea:

; 74   : 
; 75   : 	if( !line.empty() )

  000c8	39 5d e4	 cmp	 DWORD PTR _line$[ebp+16], ebx
  000cb	0f 84 1f 01 00
	00		 je	 $LN2@ExtractHea

; 76   : 	{
; 77   : 		std::regex	reg( "<\\?xml[\\s]*version[\\s]*=[\\s]*\"([0-9\\.]*)\"[\\s]*encoding[\\s]*=[\\s]*\"([A-Za-z0-9\\-_]*)\"[\\s]*\\?>" );

  000d1	56		 push	 esi
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@FKGNIEGL@?$DM?2?$DPxml?$FL?2s?$FN?$CKversion?$FL?2s?$FN?$CK?$DN?$FL?2s?$FN?$CK?$CC?$CI?$FL@
  000d7	8d 4d 8c	 lea	 ecx, DWORD PTR _reg$509399[ebp]
  000da	e8 00 00 00 00	 call	 ??0?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@PBDW4syntax_option_type@regex_constants@12@@Z ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::basic_regex<char,std::tr1::regex_traits<char> >

; 78   : 		std::smatch sm;

  000df	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _sm$509982[ebp]
  000e5	e8 00 00 00 00	 call	 ??0?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >

; 79   : 
; 80   : 		if( std::regex_match( line, sm, reg ) )

  000ea	53		 push	 ebx
  000eb	8d 45 8c	 lea	 eax, DWORD PTR _reg$509399[ebp]
  000ee	50		 push	 eax
  000ef	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _sm$509982[ebp]
  000f5	50		 push	 eax
  000f6	8d 45 d4	 lea	 eax, DWORD PTR _line$[ebp]
  000f9	50		 push	 eax
  000fa	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000fe	e8 00 00 00 00	 call	 ??$regex_match@U?$char_traits@D@std@@V?$allocator@D@2@DV?$regex_traits@D@tr1@2@@tr1@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@01@ABV?$basic_regex@DV?$regex_traits@D@tr1@std@@@01@W4match_flag_type@regex_constants@01@@Z ; std::tr1::regex_match<std::char_traits<char>,std::allocator<char>,char,std::tr1::regex_traits<char> >
  00103	83 c4 10	 add	 esp, 16			; 00000010H
  00106	84 c0		 test	 al, al
  00108	0f 84 bb 00 00
	00		 je	 $LN1@ExtractHea

; 81   : 		{
; 82   : 			version		= sm[1];

  0010e	8d 45 b8	 lea	 eax, DWORD PTR $T510007[ebp]
  00111	50		 push	 eax
  00112	56		 push	 esi
  00113	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _sm$509982[ebp]
  00119	e8 00 00 00 00	 call	 ??A?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@I@Z ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
  0011e	8b c8		 mov	 ecx, eax
  00120	e8 00 00 00 00	 call	 ??B?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00125	8b 4d 80	 mov	 ecx, DWORD PTR _version$GSCopy$[ebp]
  00128	6a ff		 push	 -1
  0012a	53		 push	 ebx
  0012b	8d 45 b8	 lea	 eax, DWORD PTR $T510007[ebp]
  0012e	50		 push	 eax
  0012f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00133	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00138	53		 push	 ebx
  00139	56		 push	 esi
  0013a	8d 4d b8	 lea	 ecx, DWORD PTR $T510007[ebp]
  0013d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00141	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 83   : 			encoding	= sm[2];

  00146	8d 45 9c	 lea	 eax, DWORD PTR $T510009[ebp]
  00149	50		 push	 eax
  0014a	6a 02		 push	 2
  0014c	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _sm$509982[ebp]
  00152	e8 00 00 00 00	 call	 ??A?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QBEABV?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@12@I@Z ; std::tr1::match_results<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
  00157	8b c8		 mov	 ecx, eax
  00159	e8 00 00 00 00	 call	 ??B?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::operator std::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0015e	8b 4d 84	 mov	 ecx, DWORD PTR _encoding$GSCopy$[ebp]
  00161	6a ff		 push	 -1
  00163	53		 push	 ebx
  00164	8d 45 9c	 lea	 eax, DWORD PTR $T510009[ebp]
  00167	50		 push	 eax
  00168	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0016c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00171	53		 push	 ebx
  00172	56		 push	 esi
  00173	8d 4d 9c	 lea	 ecx, DWORD PTR $T510009[ebp]
  00176	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 84   : 
; 85   : 			return true;

  0017b	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _sm$509982[ebp+4]
  00181	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00185	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Tidy
  0018a	8d 4d 8c	 lea	 ecx, DWORD PTR _reg$509399[ebp]
  0018d	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00191	e8 00 00 00 00	 call	 ?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy
  00196	8d 4d 98	 lea	 ecx, DWORD PTR _reg$509399[ebp+12]
  00199	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0019e	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp+104]
  001a4	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  001a7	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  001ac	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp+104]
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  001b8	53		 push	 ebx
  001b9	56		 push	 esi
  001ba	8d 4d d4	 lea	 ecx, DWORD PTR _line$[ebp]
  001bd	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  001c2	b0 01		 mov	 al, 1
  001c4	e9 b1 00 00 00	 jmp	 $LN7@ExtractHea
$LN1@ExtractHea:

; 86   : 		}
; 87   : 	}

  001c9	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _sm$509982[ebp+4]
  001cf	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001d3	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@3@@std@@IAEXXZ ; std::vector<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::tr1::sub_match<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > > >::_Tidy
  001d8	8d 4d 8c	 lea	 ecx, DWORD PTR _reg$509399[ebp]
  001db	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  001df	e8 00 00 00 00	 call	 ?_Tidy@?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@AAEXXZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::_Tidy
  001e4	8d 4d 98	 lea	 ecx, DWORD PTR _reg$509399[ebp+12]
  001e7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001eb	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
$LN2@ExtractHea:

; 88   : 
; 89   : 	LOG.PrintTimeAndLog( 0, "encoding and version could not be found. : %s", line.c_str() );

  001f0	83 7d e8 10	 cmp	 DWORD PTR _line$[ebp+20], 16 ; 00000010H
  001f4	8b 45 d4	 mov	 eax, DWORD PTR _line$[ebp]
  001f7	73 03		 jae	 SHORT $LN105@ExtractHea
  001f9	8d 45 d4	 lea	 eax, DWORD PTR _line$[ebp]
$LN105@ExtractHea:
  001fc	50		 push	 eax
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@CECCAMKB@encoding?5and?5version?5could?5not?5b@
  00202	53		 push	 ebx
  00203	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0020f	83 c4 10	 add	 esp, 16			; 00000010H

; 90   : 
; 91   : 	return false;

  00212	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp+104]
  00218	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0021b	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  00220	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp+104]
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0022c	53		 push	 ebx
  0022d	56		 push	 esi
  0022e	eb 40		 jmp	 SHORT $LN113@ExtractHea
$LN4@ExtractHea:

; 66   : 		}
; 67   : 		else
; 68   : 		{
; 69   : 			LOG.PrintTimeAndLog( 0, "ioAIXMLDoc::ExtractHeader - XML file [%s] Fail", filename );

  00230	57		 push	 edi
  00231	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@POCOFPNC@ioAIXMLDoc?3?3ExtractHeader?5?9?5XML?5@
  00236	53		 push	 ebx
  00237	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00243	83 c4 10	 add	 esp, 16			; 00000010H

; 70   : 
; 71   : 			return false;

  00246	8d 4d 88	 lea	 ecx, DWORD PTR _kStream$509271[ebp]
  00249	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioTextStream@@UAE@XZ
  00253	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp+104]
  00259	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+8], bl
  0025c	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  00261	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp+104]
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0026d	53		 push	 ebx
  0026e	6a 01		 push	 1
$LN113@ExtractHea:
  00270	8d 4d d4	 lea	 ecx, DWORD PTR _line$[ebp]
  00273	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00278	32 c0		 xor	 al, al
$LN7@ExtractHea:

; 92   : }

  0027a	e8 00 00 00 00	 call	 __EH_epilog3_GS
  0027f	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _line$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$1:
  00008	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _ifile$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$2:
  00013	8d 4d 88	 lea	 ecx, DWORD PTR _kStream$509271[ebp]
  00016	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioTextStream@@UAE@XZ
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$3:
  0001c	8d 4d 8c	 lea	 ecx, DWORD PTR _reg$509399[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1?$basic_regex@DV?$regex_traits@D@tr1@std@@@tr1@std@@QAE@XZ ; std::tr1::basic_regex<char,std::tr1::regex_traits<char> >::~basic_regex<char,std::tr1::regex_traits<char> >
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$4:
  00024	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _sm$509982[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1?$match_results@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$sub_match@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@tr1@std@@@2@@tr1@std@@QAE@XZ
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$5:
  0002f	8d 4d b8	 lea	 ecx, DWORD PTR $T510007[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$6:
  00037	8d 4d 9c	 lea	 ecx, DWORD PTR $T510009[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$8:
  0003f	8d 4d 90	 lea	 ecx, DWORD PTR _reg$509399[ebp+4]
  00042	e9 00 00 00 00	 jmp	 ??1?$regex_traits@D@tr1@std@@QAE@XZ
__unwindfunclet$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z$10:
  00047	8d 4d 90	 lea	 ecx, DWORD PTR _reg$509399[ebp+4]
  0004a	e9 00 00 00 00	 jmp	 ??1?$regex_traits@D@tr1@std@@QAE@XZ
__ehhandler$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00056	8b 8a 94 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-364]
  0005c	33 c8		 xor	 ecx, eax
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00066	33 c8		 xor	 ecx, eax
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z
  00072	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z ENDP ; ioAIXMLDoc::ExtractHeader
PUBLIC	??_C@_0CG@LKBEJJGF@ioAIXMLDoc?3?3Load?5?9?5XML?5file?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	?Load@ioAIXMLDoc@@QAE_NPBD@Z			; ioAIXMLDoc::Load
EXTRN	__imp_?LoadFromMemory@ioXMLDocument@@QAE_NPBD@Z:PROC
EXTRN	__imp_?GetPtr@ioTextStream@@UAEPAEXZ:PROC
EXTRN	__imp_?LoadFromFile@ioXMLDocument@@QAE_NPBD@Z:PROC
;	COMDAT ??_C@_0CG@LKBEJJGF@ioAIXMLDoc?3?3Load?5?9?5XML?5file?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0CG@LKBEJJGF@ioAIXMLDoc?3?3Load?5?9?5XML?5file?5?$FL?$CFs?$FN@ DB 'i'
	DB	'oAIXMLDoc::Load - XML file [%s] Fail', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@ioAIXMLDoc@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@ioAIXMLDoc@@QAE_NPBD@Z$0
__ehfuncinfo$?Load@ioAIXMLDoc@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@ioAIXMLDoc@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Load@ioAIXMLDoc@@QAE_NPBD@Z
_TEXT	SEGMENT
_kStream$510027 = -36					; size = 20
_isfile$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?Load@ioAIXMLDoc@@QAE_NPBD@Z PROC			; ioAIXMLDoc::Load, COMDAT
; _this$ = ecx

; 95   : {

  00000	6a 18		 push	 24			; 00000018H
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Load@ioAIXMLDoc@@QAE_NPBD@Z
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 96   : 	bool	isfile = true, isvalid = false;
; 97   : 
; 98   : 	isvalid = ExtractHeader( filename, isfile, m_szVersion, m_szEncoding );

  0000e	8b 7d 08	 mov	 edi, DWORD PTR _filename$[ebp]
  00011	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  00014	50		 push	 eax
  00015	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00018	50		 push	 eax
  00019	8d 45 f3	 lea	 eax, DWORD PTR _isfile$[ebp]
  0001c	50		 push	 eax
  0001d	57		 push	 edi
  0001e	c6 45 f3 01	 mov	 BYTE PTR _isfile$[ebp], 1
  00022	e8 00 00 00 00	 call	 ?ExtractHeader@ioAIXMLDoc@@QAE_NPBDAA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2@Z ; ioAIXMLDoc::ExtractHeader

; 99   : 
; 100  : 	if( isvalid )

  00027	33 db		 xor	 ebx, ebx
  00029	3a c3		 cmp	 al, bl
  0002b	74 73		 je	 SHORT $LN3@Load

; 101  : 	{
; 102  : 		if( isfile )

  0002d	38 5d f3	 cmp	 BYTE PTR _isfile$[ebp], bl
  00030	74 0b		 je	 SHORT $LN4@Load

; 103  : 		{
; 104  : 			return ioXMLDocument::LoadFromFile( filename );

  00032	57		 push	 edi
  00033	8b ce		 mov	 ecx, esi
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFromFile@ioXMLDocument@@QAE_NPBD@Z
  0003b	eb 65		 jmp	 SHORT $LN6@Load
$LN4@Load:

; 105  : 		}
; 106  : 		else
; 107  : 		{
; 108  : 			ioTextStream	kStream;

  0003d	8d 4d dc	 lea	 ecx, DWORD PTR _kStream$510027[ebp]
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0ioTextStream@@QAE@XZ

; 109  : 			if( g_ResourceLoader.LoadStream( filename, &kStream ) )

  00046	53		 push	 ebx
  00047	53		 push	 ebx
  00048	53		 push	 ebx
  00049	8d 45 dc	 lea	 eax, DWORD PTR _kStream$510027[ebp]
  0004c	50		 push	 eax
  0004d	57		 push	 edi
  0004e	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetInstance@ioResourceLoader@@SAAAV1@XZ
  00057	8b c8		 mov	 ecx, eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStream@ioResourceLoader@@QAE_NPBDPAVioStream@@PAVioDataProcessor@@PAX_N@Z
  0005f	84 c0		 test	 al, al
  00061	74 25		 je	 SHORT $LN2@Load

; 110  : 			{
; 111  : 				return ioXMLDocument::LoadFromMemory( (const char*)kStream.GetPtr() );

  00063	8d 4d dc	 lea	 ecx, DWORD PTR _kStream$510027[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetPtr@ioTextStream@@UAEPAEXZ
  0006c	50		 push	 eax
  0006d	8b ce		 mov	 ecx, esi
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadFromMemory@ioXMLDocument@@QAE_NPBD@Z
  00075	8a d8		 mov	 bl, al
$LN9@Load:
  00077	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007b	8d 4d dc	 lea	 ecx, DWORD PTR _kStream$510027[ebp]
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1ioTextStream@@UAE@XZ
  00084	8a c3		 mov	 al, bl
  00086	eb 1a		 jmp	 SHORT $LN6@Load
$LN2@Load:

; 112  : 			}
; 113  : 			else
; 114  : 			{
; 115  : 				LOG.PrintTimeAndLog( 0, "ioAIXMLDoc::Load - XML file [%s] Fail", filename );

  00088	57		 push	 edi
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@LKBEJJGF@ioAIXMLDoc?3?3Load?5?9?5XML?5file?5?$FL?$CFs?$FN@
  0008e	53		 push	 ebx
  0008f	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  0009b	83 c4 10	 add	 esp, 16			; 00000010H
  0009e	eb d7		 jmp	 SHORT $LN9@Load
$LN3@Load:

; 116  : 				return false;
; 117  : 			}
; 118  : 		}
; 119  : 	}
; 120  : 
; 121  : 	return false;

  000a0	32 c0		 xor	 al, al
$LN6@Load:

; 122  : }

  000a2	e8 00 00 00 00	 call	 __EH_epilog3
  000a7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@ioAIXMLDoc@@QAE_NPBD@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _kStream$510027[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1ioTextStream@@UAE@XZ
__ehhandler$?Load@ioAIXMLDoc@@QAE_NPBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@ioAIXMLDoc@@QAE_NPBD@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@ioAIXMLDoc@@QAE_NPBD@Z ENDP			; ioAIXMLDoc::Load
PUBLIC	??_C@_0CA@JIINGBMB@?$CD?$CD?$CD?5ERROR?5?3?5?$CFs?5?3?5failed?5to?5load?$AA@ ; `string'
PUBLIC	??_C@_0EE@MPJMOIJA@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5version?5misma@ ; `string'
PUBLIC	??_C@_0EF@DOBKDCLP@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5config?5versio@ ; `string'
PUBLIC	?Load@ioAIXMLDoc@@QAE_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; ioAIXMLDoc::Load
;	COMDAT ??_C@_0CA@JIINGBMB@?$CD?$CD?$CD?5ERROR?5?3?5?$CFs?5?3?5failed?5to?5load?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
CONST	SEGMENT
??_C@_0CA@JIINGBMB@?$CD?$CD?$CD?5ERROR?5?3?5?$CFs?5?3?5failed?5to?5load?$AA@ DB '#'
	DB	'## ERROR : %s : failed to load', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MPJMOIJA@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5version?5misma@
CONST	SEGMENT
??_C@_0EE@MPJMOIJA@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5version?5misma@ DB '#'
	DB	'## WARNING : %s : version mismatch : we need %s, but are havi'
	DB	'ng %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@DOBKDCLP@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5config?5versio@
CONST	SEGMENT
??_C@_0EF@DOBKDCLP@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5config?5versio@ DB '#'
	DB	'## WARNING : %s : config version missing : assuming current v'
	DB	'ersion', 00H				; `string'
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioaixmldoc.cpp
CONST	ENDS
;	COMDAT ?Load@ioAIXMLDoc@@QAE_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_ver$ = 12						; size = 4
_bStrict$ = 16						; size = 1
?Load@ioAIXMLDoc@@QAE_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; ioAIXMLDoc::Load, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 126  : 	if( Load( filename ) )

  00006	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?Load@ioAIXMLDoc@@QAE_NPBD@Z ; ioAIXMLDoc::Load
  00010	84 c0		 test	 al, al
  00012	74 6b		 je	 SHORT $LN4@Load@2

; 127  : 	{
; 128  : 		if( ver.empty() )

  00014	8b 7d 0c	 mov	 edi, DWORD PTR _ver$[ebp]
  00017	33 db		 xor	 ebx, ebx
  00019	39 5f 10	 cmp	 DWORD PTR [edi+16], ebx
  0001c	75 22		 jne	 SHORT $LN3@Load@2

; 129  : 		{
; 130  : 			LOG.PrintTimeAndLog( 0, 
; 131  : 				"### WARNING : %s : config version missing : assuming current version",	
; 132  : 					filename );

  0001e	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@DOBKDCLP@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5config?5versio@
  00026	53		 push	 ebx
  00027	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00033	83 c4 10	 add	 esp, 16			; 00000010H
$LN25@Load@2:

; 133  : 
; 134  : 			return !bStrict;

  00036	33 c0		 xor	 eax, eax
  00038	38 5d 10	 cmp	 BYTE PTR _bStrict$[ebp], bl
  0003b	0f 94 c0	 sete	 al
  0003e	eb 5a		 jmp	 SHORT $LN1@Load@2
$LN3@Load@2:

; 135  : 		}
; 136  : 
; 137  : 		if( m_szVersion != ver )

  00040	83 c6 08	 add	 esi, 8
  00043	57		 push	 edi
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0004b	85 c0		 test	 eax, eax
  0004d	74 2c		 je	 SHORT $LN2@Load@2

; 138  : 		{
; 139  : 			LOG.PrintTimeAndLog( 0, 
; 140  : 				"### WARNING : %s : version mismatch : we need %s, but are having %s", 
; 141  : 					filename, ver.c_str(), m_szVersion.c_str() );

  0004f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00053	72 02		 jb	 SHORT $LN17@Load@2
  00055	8b 36		 mov	 esi, DWORD PTR [esi]
$LN17@Load@2:
  00057	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  0005b	72 02		 jb	 SHORT $LN23@Load@2
  0005d	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN23@Load@2:
  0005f	56		 push	 esi
  00060	57		 push	 edi
  00061	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MPJMOIJA@?$CD?$CD?$CD?5WARNING?5?3?5?$CFs?5?3?5version?5misma@
  00069	53		 push	 ebx
  0006a	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00076	83 c4 18	 add	 esp, 24			; 00000018H

; 142  : 			
; 143  : 			return !bStrict;

  00079	eb bb		 jmp	 SHORT $LN25@Load@2
$LN2@Load@2:

; 144  : 		}
; 145  : 
; 146  : 		return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 1b		 jmp	 SHORT $LN1@Load@2
$LN4@Load@2:

; 147  : 	}
; 148  : 	else
; 149  : 	{
; 150  : 		LOG.PrintTimeAndLog( 0, "### ERROR : %s : failed to load", filename );

  0007f	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JIINGBMB@?$CD?$CD?$CD?5ERROR?5?3?5?$CFs?5?3?5failed?5to?5load?$AA@
  00087	6a 00		 push	 0
  00089	ff 35 00 00 00
	00		 push	 DWORD PTR __imp_?LOG@@3VCLog@@A
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PrintTimeAndLog@CLog@@QAAXHPADZZ
  00095	83 c4 10	 add	 esp, 16			; 00000010H

; 151  : 
; 152  : 		return false;

  00098	32 c0		 xor	 al, al
$LN1@Load@2:
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 153  : 	}
; 154  : }

  0009d	5d		 pop	 ebp
  0009e	c2 0c 00	 ret	 12			; 0000000cH
?Load@ioAIXMLDoc@@QAE_NPBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; ioAIXMLDoc::Load
_TEXT	ENDS
END
