; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Lost Saga For Developer\Youtube\Tutorial\Source\src\LSClient\ioAirBuff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ	; ioBaseChar::GetBlowStopMotionState
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobasechar.h
;	COMDAT ?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ PROC	; ioBaseChar::GetBlowStopMotionState, COMDAT
; _this$ = ecx

; 1566 : 	inline bool GetBlowStopMotionState() const { return m_bBlowStopMotion; }

  00000	8a 81 c7 15 00
	00		 mov	 al, BYTE PTR [ecx+5575]
  00006	c3		 ret	 0
?GetBlowStopMotionState@ioBaseChar@@QBE_NXZ ENDP	; ioBaseChar::GetBlowStopMotionState
_TEXT	ENDS
PUBLIC	?GetBlowFrozenState@ioBaseChar@@QBE_NXZ		; ioBaseChar::GetBlowFrozenState
; Function compile flags: /Ogsp
;	COMDAT ?GetBlowFrozenState@ioBaseChar@@QBE_NXZ
_TEXT	SEGMENT
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ PROC		; ioBaseChar::GetBlowFrozenState, COMDAT
; _this$ = ecx

; 1571 : 	inline bool GetBlowFrozenState() const { return m_bBlowFrozenState; }

  00000	8a 81 c5 15 00
	00		 mov	 al, BYTE PTR [ecx+5573]
  00006	c3		 ret	 0
?GetBlowFrozenState@ioBaseChar@@QBE_NXZ ENDP		; ioBaseChar::GetBlowFrozenState
_TEXT	ENDS
PUBLIC	?GetState@ioBaseChar@@QBE?AW4CharState@@XZ	; ioBaseChar::GetState
; Function compile flags: /Ogsp
;	COMDAT ?GetState@ioBaseChar@@QBE?AW4CharState@@XZ
_TEXT	SEGMENT
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ PROC		; ioBaseChar::GetState, COMDAT
; _this$ = ecx

; 2156 : 	inline CharState GetState() const { return m_CharState; }	

  00000	8a 81 10 03 00
	00		 mov	 al, BYTE PTR [ecx+784]
  00006	c3		 ret	 0
?GetState@ioBaseChar@@QBE?AW4CharState@@XZ ENDP		; ioBaseChar::GetState
_TEXT	ENDS
PUBLIC	??_7ioAirBuff@@6B@				; ioAirBuff::`vftable'
PUBLIC	??0ioAirBuff@@QAE@XZ				; ioAirBuff::ioAirBuff
PUBLIC	??_R4ioAirBuff@@6B@				; ioAirBuff::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVioAirBuff@@@8				; ioAirBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioAirBuff@@8				; ioAirBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioAirBuff@@8				; ioAirBuff::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ioAirBuff@@8			; ioAirBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ioBuff@@8				; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVioBuff@@@8				; ioBuff `RTTI Type Descriptor'
PUBLIC	??_R3ioBuff@@8					; ioBuff::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ioBuff@@8					; ioBuff::`RTTI Base Class Array'
PUBLIC	?LoadProperty@ioAirBuff@@UAEXAAVioINILoader@@@Z	; ioAirBuff::LoadProperty
PUBLIC	?Clone@ioAirBuff@@UAEPAVioBuff@@XZ		; ioAirBuff::Clone
PUBLIC	?StartBuff@ioAirBuff@@UAEXPAVioBaseChar@@@Z	; ioAirBuff::StartBuff
PUBLIC	?ApplyStartBuff@ioAirBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioAirBuff::ApplyStartBuff
PUBLIC	?ProcessBuff@ioAirBuff@@UAEXM@Z			; ioAirBuff::ProcessBuff
PUBLIC	?EndBuff@ioAirBuff@@UAEXXZ			; ioAirBuff::EndBuff
PUBLIC	?IsWaitSelfRemove@ioBuff@@UAE_NXZ		; ioBuff::IsWaitSelfRemove
EXTRN	??0ioBuff@@QAE@XZ:PROC				; ioBuff::ioBuff
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z:PROC ; ioBuff::StartBuffWithAniTime
EXTRN	?CancelBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::CancelBuff
EXTRN	?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC	; ioBuff::GetBuffInfo
EXTRN	?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyBuffInfo
EXTRN	?AccumulateBuff@ioBuff@@UAEXXZ:PROC		; ioBuff::AccumulateBuff
EXTRN	?IsLiveButStopped@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsLiveButStopped
EXTRN	?IsCanJumpAttack@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsCanJumpAttack
EXTRN	?SetAction@ioBuff@@MAEXXZ:PROC			; ioBuff::SetAction
EXTRN	?ProcessDelay@ioBuff@@MAEXM@Z:PROC		; ioBuff::ProcessDelay
EXTRN	?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z:PROC	; ioBuff::SetExtraDurationByGrowth
EXTRN	?SetWeaponIndex@ioBuff@@UAEXK@Z:PROC		; ioBuff::SetWeaponIndex
EXTRN	?OnReduceGauge@ioBuff@@UBE_NXZ:PROC		; ioBuff::OnReduceGauge
EXTRN	?IsCharCollisionSkip@ioBuff@@UBE_NXZ:PROC	; ioBuff::IsCharCollisionSkip
EXTRN	?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ:PROC ; ioBuff::IsCollisionAvailableWeapon
EXTRN	?IsProtected@ioBuff@@UBE_NXZ:PROC		; ioBuff::IsProtected
EXTRN	?UseActiveCount@ioBuff@@UBE_NXZ:PROC		; ioBuff::UseActiveCount
EXTRN	?CheckActiveCount@ioBuff@@UAEXXZ:PROC		; ioBuff::CheckActiveCount
EXTRN	?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z:PROC ; ioBuff::CheckRemoveEquipSkillBuff
EXTRN	?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z:PROC ; ioBuff::ApplyExtraBuffInfo
EXTRN	?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z:PROC ; ioBuff::SetBuffGrapplingState
EXTRN	?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z:PROC ; ioBuff::GetGrapplingTargetPos
EXTRN	??_EioAirBuff@@UAEPAXI@Z:PROC			; ioAirBuff::`vector deleting destructor'
;	COMDAT ??_R2ioBuff@@8
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioairbuff.cpp
rdata$r	SEGMENT
??_R2ioBuff@@8 DD FLAT:??_R1A@?0A@EA@ioBuff@@8		; ioBuff::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ioBuff@@8
rdata$r	SEGMENT
??_R3ioBuff@@8 DD 00H					; ioBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioBuff@@@8
_DATA	SEGMENT
??_R0?AVioBuff@@@8 DD FLAT:??_7type_info@@6B@		; ioBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ioBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioBuff@@8 DD FLAT:??_R0?AVioBuff@@@8	; ioBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ioAirBuff@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ioAirBuff@@8 DD FLAT:??_R0?AVioAirBuff@@@8 ; ioAirBuff::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ioAirBuff@@8
rdata$r	ENDS
;	COMDAT ??_R2ioAirBuff@@8
rdata$r	SEGMENT
??_R2ioAirBuff@@8 DD FLAT:??_R1A@?0A@EA@ioAirBuff@@8	; ioAirBuff::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ioBuff@@8
rdata$r	ENDS
;	COMDAT ??_R3ioAirBuff@@8
rdata$r	SEGMENT
??_R3ioAirBuff@@8 DD 00H				; ioAirBuff::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ioAirBuff@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVioAirBuff@@@8
_DATA	SEGMENT
??_R0?AVioAirBuff@@@8 DD FLAT:??_7type_info@@6B@	; ioAirBuff `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVioAirBuff@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ioAirBuff@@6B@
rdata$r	SEGMENT
??_R4ioAirBuff@@6B@ DD 00H				; ioAirBuff::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVioAirBuff@@@8
	DD	FLAT:??_R3ioAirBuff@@8
rdata$r	ENDS
;	COMDAT ??_7ioAirBuff@@6B@
CONST	SEGMENT
??_7ioAirBuff@@6B@ DD FLAT:??_R4ioAirBuff@@6B@		; ioAirBuff::`vftable'
	DD	FLAT:?LoadProperty@ioAirBuff@@UAEXAAVioINILoader@@@Z
	DD	FLAT:?Clone@ioAirBuff@@UAEPAVioBuff@@XZ
	DD	FLAT:?StartBuff@ioAirBuff@@UAEXPAVioBaseChar@@@Z
	DD	FLAT:?StartBuffWithAniTime@ioBuff@@UAEXPAVioBaseChar@@K@Z
	DD	FLAT:?ApplyStartBuff@ioAirBuff@@UAE_NPAVioBaseChar@@KK@Z
	DD	FLAT:?ProcessBuff@ioAirBuff@@UAEXM@Z
	DD	FLAT:?EndBuff@ioAirBuff@@UAEXXZ
	DD	FLAT:?CancelBuff@ioBuff@@UAEXXZ
	DD	FLAT:?GetBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?ApplyBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?AccumulateBuff@ioBuff@@UAEXXZ
	DD	FLAT:?IsLiveButStopped@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCanJumpAttack@ioBuff@@UBE_NXZ
	DD	FLAT:?SetAction@ioBuff@@MAEXXZ
	DD	FLAT:?ProcessDelay@ioBuff@@MAEXM@Z
	DD	FLAT:?SetExtraDurationByGrowth@ioBuff@@UAEXM@Z
	DD	FLAT:?SetWeaponIndex@ioBuff@@UAEXK@Z
	DD	FLAT:?OnReduceGauge@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCharCollisionSkip@ioBuff@@UBE_NXZ
	DD	FLAT:?IsCollisionAvailableWeapon@ioBuff@@UBE_NXZ
	DD	FLAT:?IsProtected@ioBuff@@UBE_NXZ
	DD	FLAT:?UseActiveCount@ioBuff@@UBE_NXZ
	DD	FLAT:?CheckActiveCount@ioBuff@@UAEXXZ
	DD	FLAT:?CheckRemoveEquipSkillBuff@ioBuff@@UAEX_N@Z
	DD	FLAT:?ApplyExtraBuffInfo@ioBuff@@UAEXAAVSP2Packet@@@Z
	DD	FLAT:?SetBuffGrapplingState@ioBuff@@UAE_NPAVioBaseChar@@ABVioHashString@@@Z
	DD	FLAT:?GetGrapplingTargetPos@ioBuff@@UAE?AUD3DXVECTOR3@@PAVioBaseChar@@@Z
	DD	FLAT:?IsWaitSelfRemove@ioBuff@@UAE_NXZ
	DD	FLAT:??_EioAirBuff@@UAEPAXI@Z
; Function compile flags: /Ogsp
CONST	ENDS
;	COMDAT ??0ioAirBuff@@QAE@XZ
_TEXT	SEGMENT
??0ioAirBuff@@QAE@XZ PROC				; ioAirBuff::ioAirBuff, COMDAT
; _this$ = ecx

; 10   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@XZ	; ioBuff::ioBuff
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAirBuff@@6B@

; 11   : 	m_bDisableDownState = false;

  0000e	c6 86 6c 09 00
	00 00		 mov	 BYTE PTR [esi+2412], 0

; 12   : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0ioAirBuff@@QAE@XZ ENDP				; ioAirBuff::ioAirBuff
_TEXT	ENDS
PUBLIC	??0ioAirBuff@@QAE@ABV0@@Z			; ioAirBuff::ioAirBuff
EXTRN	??0ioBuff@@QAE@ABV0@@Z:PROC			; ioBuff::ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??0ioAirBuff@@QAE@ABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??0ioAirBuff@@QAE@ABV0@@Z PROC				; ioAirBuff::ioAirBuff, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b 7d 08	 mov	 edi, DWORD PTR _rhs$[ebp]
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ??0ioBuff@@QAE@ABV0@@Z	; ioBuff::ioBuff
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAirBuff@@6B@
  00016	8a 87 6c 09 00
	00		 mov	 al, BYTE PTR [edi+2412]
  0001c	88 86 6c 09 00
	00		 mov	 BYTE PTR [esi+2412], al
  00022	5f		 pop	 edi

; 18   : }

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0ioAirBuff@@QAE@ABV0@@Z ENDP				; ioAirBuff::ioAirBuff
_TEXT	ENDS
PUBLIC	??1ioAirBuff@@UAE@XZ				; ioAirBuff::~ioAirBuff
EXTRN	??1ioBuff@@UAE@XZ:PROC				; ioBuff::~ioBuff
; Function compile flags: /Ogsp
;	COMDAT ??1ioAirBuff@@UAE@XZ
_TEXT	SEGMENT
??1ioAirBuff@@UAE@XZ PROC				; ioAirBuff::~ioAirBuff, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ioAirBuff@@6B@

; 22   : }

  00006	e9 00 00 00 00	 jmp	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
??1ioAirBuff@@UAE@XZ ENDP				; ioAirBuff::~ioAirBuff
_TEXT	ENDS
EXTRN	?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z:PROC ; ioBuff::LoadProperty
; Function compile flags: /Ogsp
;	COMDAT ?LoadProperty@ioAirBuff@@UAEXAAVioINILoader@@@Z
_TEXT	SEGMENT
_rkLoader$ = 8						; size = 4
?LoadProperty@ioAirBuff@@UAEXAAVioINILoader@@@Z PROC	; ioAirBuff::LoadProperty, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : }

  00003	5d		 pop	 ebp

; 26   : 	ioBuff::LoadProperty( rkLoader );

  00004	e9 00 00 00 00	 jmp	 ?LoadProperty@ioBuff@@UAEXAAVioINILoader@@@Z ; ioBuff::LoadProperty
?LoadProperty@ioAirBuff@@UAEXAAVioINILoader@@@Z ENDP	; ioAirBuff::LoadProperty
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__EH_epilog3:PROC
EXTRN	__EH_prolog3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ$0
__ehfuncinfo$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogsp
xdata$x	ENDS
;	COMDAT ?Clone@ioAirBuff@@UAEPAVioBuff@@XZ
_TEXT	SEGMENT
$T524346 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@ioAirBuff@@UAEPAVioBuff@@XZ PROC			; ioAirBuff::Clone, COMDAT
; _this$ = ecx

; 30   : {

  00000	6a 04		 push	 4
  00002	b8 00 00 00 00	 mov	 eax, __ehhandler$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ
  00007	e8 00 00 00 00	 call	 __EH_prolog3
  0000c	8b f1		 mov	 esi, ecx

; 31   : 	return new ioAirBuff( *this );

  0000e	68 70 09 00 00	 push	 2416			; 00000970H
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00018	59		 pop	 ecx
  00019	8b c8		 mov	 ecx, eax
  0001b	89 4d f0	 mov	 DWORD PTR $T524346[ebp], ecx
  0001e	33 c0		 xor	 eax, eax
  00020	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00023	3b c8		 cmp	 ecx, eax
  00025	74 06		 je	 SHORT $LN3@Clone
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??0ioAirBuff@@QAE@ABV0@@Z ; ioAirBuff::ioAirBuff
$LN3@Clone:

; 32   : }

  0002d	e8 00 00 00 00	 call	 __EH_epilog3
  00032	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ$0:
  00000	ff 75 f0	 push	 DWORD PTR $T524346[ebp]
  00003	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00008	59		 pop	 ecx
  00009	c3		 ret	 0
__ehhandler$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@ioAirBuff@@UAEPAVioBuff@@XZ
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@ioAirBuff@@UAEPAVioBuff@@XZ ENDP			; ioAirBuff::Clone
EXTRN	?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z:PROC	; ioBuff::StartBuff
; Function compile flags: /Ogsp
;	COMDAT ?StartBuff@ioAirBuff@@UAEXPAVioBaseChar@@@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
?StartBuff@ioAirBuff@@UAEXPAVioBaseChar@@@Z PROC	; ioAirBuff::StartBuff, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : }

  00003	5d		 pop	 ebp

; 36   : 	ioBuff::StartBuff( pOwner );

  00004	e9 00 00 00 00	 jmp	 ?StartBuff@ioBuff@@UAEXPAVioBaseChar@@@Z ; ioBuff::StartBuff
?StartBuff@ioAirBuff@@UAEXPAVioBaseChar@@@Z ENDP	; ioAirBuff::StartBuff
_TEXT	ENDS
EXTRN	?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z:PROC ; ioBuff::ApplyStartBuff
; Function compile flags: /Ogsp
;	COMDAT ?ApplyStartBuff@ioAirBuff@@UAE_NPAVioBaseChar@@KK@Z
_TEXT	SEGMENT
_pOwner$ = 8						; size = 4
_dwGlobalTime$ = 12					; size = 4
_dwGapTime$ = 16					; size = 4
?ApplyStartBuff@ioAirBuff@@UAE_NPAVioBaseChar@@KK@Z PROC ; ioAirBuff::ApplyStartBuff, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 	if( !ioBuff::ApplyStartBuff( pOwner, dwGlobalTime, dwGapTime ) )

  00003	ff 75 10	 push	 DWORD PTR _dwGapTime$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR _dwGlobalTime$[ebp]
  00009	ff 75 08	 push	 DWORD PTR _pOwner$[ebp]
  0000c	e8 00 00 00 00	 call	 ?ApplyStartBuff@ioBuff@@UAE_NPAVioBaseChar@@KK@Z ; ioBuff::ApplyStartBuff
  00011	84 c0		 test	 al, al
  00013	0f 95 c0	 setne	 al

; 42   : 		return false;
; 43   : 
; 44   : 	return true;
; 45   : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?ApplyStartBuff@ioAirBuff@@UAE_NPAVioBaseChar@@KK@Z ENDP ; ioAirBuff::ApplyStartBuff
_TEXT	ENDS
EXTRN	?EndBuff@ioBuff@@UAEXXZ:PROC			; ioBuff::EndBuff
; Function compile flags: /Ogsp
;	COMDAT ?EndBuff@ioAirBuff@@UAEXXZ
_TEXT	SEGMENT
?EndBuff@ioAirBuff@@UAEXXZ PROC				; ioAirBuff::EndBuff, COMDAT
; _this$ = ecx

; 74   : 	ioBuff::EndBuff();

  00000	e9 00 00 00 00	 jmp	 ?EndBuff@ioBuff@@UAEXXZ	; ioBuff::EndBuff
?EndBuff@ioAirBuff@@UAEXXZ ENDP				; ioAirBuff::EndBuff
_TEXT	ENDS
PUBLIC	?CheckOwnerStateCheck@ioAirBuff@@IAEXXZ		; ioAirBuff::CheckOwnerStateCheck
EXTRN	?IsApplyDownState@ioBaseChar@@QAE_N_N@Z:PROC	; ioBaseChar::IsApplyDownState
EXTRN	?IsFloatingState@ioBaseChar@@QBE_NXZ:PROC	; ioBaseChar::IsFloatingState
EXTRN	?SetReserveEndBuff@ioBuff@@QAEXXZ:PROC		; ioBuff::SetReserveEndBuff
; Function compile flags: /Ogsp
;	COMDAT ?CheckOwnerStateCheck@ioAirBuff@@IAEXXZ
_TEXT	SEGMENT
?CheckOwnerStateCheck@ioAirBuff@@IAEXXZ PROC		; ioAirBuff::CheckOwnerStateCheck, COMDAT
; _this$ = ecx

; 79   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 80   : 	if( !m_pOwner ) return;

  00003	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00009	85 c0		 test	 eax, eax
  0000b	0f 84 87 00 00
	00		 je	 $LN1@CheckOwner

; 81   : 
; 82   : 	CharState eState = m_pOwner->GetState();

  00011	53		 push	 ebx
  00012	8a 98 10 03 00
	00		 mov	 bl, BYTE PTR [eax+784]

; 83   : 
; 84   : 	if( eState != CS_STOP_MOTION )

  00018	80 fb 26	 cmp	 bl, 38			; 00000026H
  0001b	74 05		 je	 SHORT $LN15@CheckOwner

; 85   : 		SetReserveEndBuff();

  0001d	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN15@CheckOwner:

; 86   : 
; 87   : 	if( m_bDisableDownState )

  00022	80 be 6c 09 00
	00 00		 cmp	 BYTE PTR [esi+2412], 0
  00029	74 6c		 je	 SHORT $LN27@CheckOwner

; 88   : 	{
; 89   : 		if( eState == CS_FROZEN && m_pOwner->GetBlowFrozenState() )

  0002b	80 fb 17	 cmp	 bl, 23			; 00000017H
  0002e	75 18		 jne	 SHORT $LN13@CheckOwner
  00030	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00036	80 b8 c5 15 00
	00 00		 cmp	 BYTE PTR [eax+5573], 0
$LN31@CheckOwner:
  0003d	74 58		 je	 SHORT $LN27@CheckOwner
$LN30@CheckOwner:
  0003f	5b		 pop	 ebx

; 90   : 			SetReserveEndBuff();

  00040	8b ce		 mov	 ecx, esi
  00042	5e		 pop	 esi
  00043	e9 00 00 00 00	 jmp	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff
$LN13@CheckOwner:

; 91   : 		else if( eState == CS_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  00048	80 fb 0c	 cmp	 bl, 12			; 0000000cH
  0004b	75 11		 jne	 SHORT $LN11@CheckOwner
$LN33@CheckOwner:
  0004d	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00053	e8 00 00 00 00	 call	 ?IsFloatingState@ioBaseChar@@QBE_NXZ ; ioBaseChar::IsFloatingState
  00058	84 c0		 test	 al, al
  0005a	75 3b		 jne	 SHORT $LN27@CheckOwner

; 92   : 			SetReserveEndBuff();

  0005c	eb e1		 jmp	 SHORT $LN30@CheckOwner
$LN11@CheckOwner:

; 93   : 		else if( eState == CS_BOUND_BLOW_WOUNDED && !m_pOwner->IsFloatingState() )

  0005e	80 fb 31	 cmp	 bl, 49			; 00000031H

; 94   : 			SetReserveEndBuff();

  00061	74 ea		 je	 SHORT $LN33@CheckOwner

; 95   : 		else if( eState == CS_ETC_STATE && m_pOwner->IsApplyDownState(false) )

  00063	80 fb 0f	 cmp	 bl, 15			; 0000000fH
  00066	75 11		 jne	 SHORT $LN7@CheckOwner
  00068	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  0006e	6a 00		 push	 0
  00070	e8 00 00 00 00	 call	 ?IsApplyDownState@ioBaseChar@@QAE_N_N@Z ; ioBaseChar::IsApplyDownState
  00075	84 c0		 test	 al, al

; 96   : 			SetReserveEndBuff();

  00077	eb c4		 jmp	 SHORT $LN31@CheckOwner
$LN7@CheckOwner:

; 97   : 		else if( eState == CS_STOP_MOTION && m_pOwner->GetBlowStopMotionState() )

  00079	80 fb 26	 cmp	 bl, 38			; 00000026H
  0007c	75 0f		 jne	 SHORT $LN5@CheckOwner
$LN32@CheckOwner:
  0007e	8b 86 74 02 00
	00		 mov	 eax, DWORD PTR [esi+628]
  00084	80 b8 c7 15 00
	00 00		 cmp	 BYTE PTR [eax+5575], 0

; 98   : 			SetReserveEndBuff();

  0008b	eb b0		 jmp	 SHORT $LN31@CheckOwner
$LN5@CheckOwner:

; 99   : 		else if( eState == CS_DROP_ZONE_DOWN )

  0008d	80 fb 10	 cmp	 bl, 16			; 00000010H

; 100  : 			SetReserveEndBuff();

  00090	74 ad		 je	 SHORT $LN30@CheckOwner

; 101  : 		else if( eState == CS_ICE_STATE && m_pOwner->GetBlowStopMotionState() )

  00092	80 fb 3b	 cmp	 bl, 59			; 0000003bH

; 102  : 			SetReserveEndBuff();

  00095	74 e7		 je	 SHORT $LN32@CheckOwner
$LN27@CheckOwner:
  00097	5b		 pop	 ebx
$LN1@CheckOwner:
  00098	5e		 pop	 esi

; 103  : 	}
; 104  : }

  00099	c3		 ret	 0
?CheckOwnerStateCheck@ioAirBuff@@IAEXXZ ENDP		; ioAirBuff::CheckOwnerStateCheck
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\iobuff.h
_TEXT	ENDS
;	COMDAT ?IsWaitSelfRemove@ioBuff@@UAE_NXZ
_TEXT	SEGMENT
?IsWaitSelfRemove@ioBuff@@UAE_NXZ PROC			; ioBuff::IsWaitSelfRemove, COMDAT
; _this$ = ecx

; 519  : 	virtual bool IsWaitSelfRemove() { return m_bWaitSelfRemove; }

  00000	8a 81 65 09 00
	00		 mov	 al, BYTE PTR [ecx+2405]
  00006	c3		 ret	 0
?IsWaitSelfRemove@ioBuff@@UAE_NXZ ENDP			; ioBuff::IsWaitSelfRemove
; Function compile flags: /Ogsp
_TEXT	ENDS
;	COMDAT ??_GioAirBuff@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GioAirBuff@@UAEPAXI@Z PROC				; ioAirBuff::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ioAirBuff@@6B@
  0000c	e8 00 00 00 00	 call	 ??1ioBuff@@UAE@XZ	; ioBuff::~ioBuff
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 07		 je	 SHORT $LN1@scalar
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001d	59		 pop	 ecx
$LN1@scalar:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??_GioAirBuff@@UAEPAXI@Z ENDP				; ioAirBuff::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?CheckCallingAreaWeapon@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingAreaWeapon
EXTRN	?CheckCallingProcess@ioBuff@@IAEXXZ:PROC	; ioBuff::CheckCallingProcess
EXTRN	?CheckSwitchType@ioBuff@@IAE_NM@Z:PROC		; ioBuff::CheckSwitchType
EXTRN	?ProcessBuff@ioBuff@@UAEXM@Z:PROC		; ioBuff::ProcessBuff
EXTRN	__fltused:DWORD
; Function compile flags: /Ogsp
; File d:\lost saga for developer\youtube\tutorial\source\src\lsclient\ioairbuff.cpp
;	COMDAT ?ProcessBuff@ioAirBuff@@UAEXM@Z
_TEXT	SEGMENT
_fTimePerSec$ = 8					; size = 4
?ProcessBuff@ioAirBuff@@UAEXM@Z PROC			; ioAirBuff::ProcessBuff, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 49   : 	CheckOwnerStateCheck();

  00006	e8 00 00 00 00	 call	 ?CheckOwnerStateCheck@ioAirBuff@@IAEXXZ ; ioAirBuff::CheckOwnerStateCheck

; 50   : 
; 51   : 	switch( m_iOperationType )

  0000b	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
  00011	83 e8 00	 sub	 eax, 0
  00014	74 43		 je	 SHORT $LN1@ProcessBuf
  00016	48		 dec	 eax
  00017	74 06		 je	 SHORT $LN2@ProcessBuf
  00019	48		 dec	 eax
  0001a	74 17		 je	 SHORT $LN4@ProcessBuf
  0001c	48		 dec	 eax
  0001d	75 41		 jne	 SHORT $LN5@ProcessBuf
$LN2@ProcessBuf:

; 62   : 	case OT_DELAY:
; 63   : 	case OT_ACTIVE:
; 64   : 		ioBuff::ProcessBuff( fTimePerSec );

  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00024	51		 push	 ecx
  00025	8b ce		 mov	 ecx, esi
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	e8 00 00 00 00	 call	 ?ProcessBuff@ioBuff@@UAEXM@Z ; ioBuff::ProcessBuff

; 65   : 		break;

  00031	eb 2d		 jmp	 SHORT $LN5@ProcessBuf
$LN4@ProcessBuf:

; 52   : 	{
; 53   : 	case OT_SWITCH:
; 54   : 		if( !CheckSwitchType( fTimePerSec ) )

  00033	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTimePerSec$[ebp]
  00038	51		 push	 ecx
  00039	8b ce		 mov	 ecx, esi
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	e8 00 00 00 00	 call	 ?CheckSwitchType@ioBuff@@IAE_NM@Z ; ioBuff::CheckSwitchType

; 55   : 		{
; 56   : 			SetReserveEndBuff();

  00045	8b ce		 mov	 ecx, esi
  00047	84 c0		 test	 al, al
  00049	75 07		 jne	 SHORT $LN3@ProcessBuf
  0004b	e8 00 00 00 00	 call	 ?SetReserveEndBuff@ioBuff@@QAEXXZ ; ioBuff::SetReserveEndBuff

; 57   : 			return;

  00050	eb 0e		 jmp	 SHORT $LN5@ProcessBuf
$LN3@ProcessBuf:

; 58   : 		}
; 59   : 
; 60   : 		CheckCallingProcess();

  00052	e8 00 00 00 00	 call	 ?CheckCallingProcess@ioBuff@@IAEXXZ ; ioBuff::CheckCallingProcess

; 61   : 		break;

  00057	eb 07		 jmp	 SHORT $LN5@ProcessBuf
$LN1@ProcessBuf:

; 66   : 	case OT_PASSIVE:
; 67   : 		CheckCallingAreaWeapon();

  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?CheckCallingAreaWeapon@ioBuff@@IAEXXZ ; ioBuff::CheckCallingAreaWeapon
$LN5@ProcessBuf:
  00060	5e		 pop	 esi

; 68   : 		break;
; 69   : 	}
; 70   : }

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?ProcessBuff@ioAirBuff@@UAEXM@Z ENDP			; ioAirBuff::ProcessBuff
_TEXT	ENDS
END
